// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/types/model/flink/flink_table.proto

package com.dataomnis.gproto.types.pbmodel.pbflink;

public final class PBFlinkTable {
  private PBFlinkTable() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SqlColumnTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.SqlColumnType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    java.lang.String getColumn();
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    com.google.protobuf.ByteString
        getColumnBytes();

    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The comment.
     */
    java.lang.String getComment();
    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for comment.
     */
    com.google.protobuf.ByteString
        getCommentBytes();

    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The primaryKey.
     */
    java.lang.String getPrimaryKey();
    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for primaryKey.
     */
    com.google.protobuf.ByteString
        getPrimaryKeyBytes();

    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The length.
     */
    java.lang.String getLength();
    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for length.
     */
    com.google.protobuf.ByteString
        getLengthBytes();
  }
  /**
   * <pre>
   * SqlColumnType used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.SqlColumnType}
   */
  public static final class SqlColumnType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.SqlColumnType)
      SqlColumnTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SqlColumnType.newBuilder() to construct.
    private SqlColumnType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SqlColumnType() {
      column_ = "";
      type_ = "";
      comment_ = "";
      primaryKey_ = "";
      length_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SqlColumnType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SqlColumnType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              column_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              type_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              comment_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              primaryKey_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              length_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlColumnType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlColumnType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder.class);
    }

    public static final int COLUMN_FIELD_NUMBER = 1;
    private volatile java.lang.Object column_;
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    @java.lang.Override
    public java.lang.String getColumn() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        column_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getColumnBytes() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        column_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        type_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMENT_FIELD_NUMBER = 3;
    private volatile java.lang.Object comment_;
    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The comment.
     */
    @java.lang.Override
    public java.lang.String getComment() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        comment_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for comment.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommentBytes() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        comment_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PRIMARY_KEY_FIELD_NUMBER = 4;
    private volatile java.lang.Object primaryKey_;
    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The primaryKey.
     */
    @java.lang.Override
    public java.lang.String getPrimaryKey() {
      java.lang.Object ref = primaryKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        primaryKey_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for primaryKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPrimaryKeyBytes() {
      java.lang.Object ref = primaryKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        primaryKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LENGTH_FIELD_NUMBER = 5;
    private volatile java.lang.Object length_;
    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The length.
     */
    @java.lang.Override
    public java.lang.String getLength() {
      java.lang.Object ref = length_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        length_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for length.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLengthBytes() {
      java.lang.Object ref = length_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        length_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(column_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, column_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(comment_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, comment_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(primaryKey_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, primaryKey_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(length_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, length_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(column_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, column_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(comment_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, comment_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(primaryKey_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, primaryKey_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(length_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, length_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType) obj;

      if (!getColumn()
          .equals(other.getColumn())) return false;
      if (!getType()
          .equals(other.getType())) return false;
      if (!getComment()
          .equals(other.getComment())) return false;
      if (!getPrimaryKey()
          .equals(other.getPrimaryKey())) return false;
      if (!getLength()
          .equals(other.getLength())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COLUMN_FIELD_NUMBER;
      hash = (53 * hash) + getColumn().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType().hashCode();
      hash = (37 * hash) + COMMENT_FIELD_NUMBER;
      hash = (53 * hash) + getComment().hashCode();
      hash = (37 * hash) + PRIMARY_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getPrimaryKey().hashCode();
      hash = (37 * hash) + LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getLength().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SqlColumnType used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.SqlColumnType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.SqlColumnType)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlColumnType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlColumnType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        column_ = "";

        type_ = "";

        comment_ = "";

        primaryKey_ = "";

        length_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlColumnType_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType(this);
        result.column_ = column_;
        result.type_ = type_;
        result.comment_ = comment_;
        result.primaryKey_ = primaryKey_;
        result.length_ = length_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance()) return this;
        if (!other.getColumn().isEmpty()) {
          column_ = other.column_;
          onChanged();
        }
        if (!other.getType().isEmpty()) {
          type_ = other.type_;
          onChanged();
        }
        if (!other.getComment().isEmpty()) {
          comment_ = other.comment_;
          onChanged();
        }
        if (!other.getPrimaryKey().isEmpty()) {
          primaryKey_ = other.primaryKey_;
          onChanged();
        }
        if (!other.getLength().isEmpty()) {
          length_ = other.length_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object column_ = "";
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The column.
       */
      public java.lang.String getColumn() {
        java.lang.Object ref = column_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          column_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for column.
       */
      public com.google.protobuf.ByteString
          getColumnBytes() {
        java.lang.Object ref = column_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          column_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The column to set.
       * @return This builder for chaining.
       */
      public Builder setColumn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        column_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearColumn() {
        
        column_ = getDefaultInstance().getColumn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for column to set.
       * @return This builder for chaining.
       */
      public Builder setColumnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        column_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        type_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object comment_ = "";
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @return The comment.
       */
      public java.lang.String getComment() {
        java.lang.Object ref = comment_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          comment_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for comment.
       */
      public com.google.protobuf.ByteString
          getCommentBytes() {
        java.lang.Object ref = comment_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          comment_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @param value The comment to set.
       * @return This builder for chaining.
       */
      public Builder setComment(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        comment_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearComment() {
        
        comment_ = getDefaultInstance().getComment();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for comment to set.
       * @return This builder for chaining.
       */
      public Builder setCommentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        comment_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object primaryKey_ = "";
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @return The primaryKey.
       */
      public java.lang.String getPrimaryKey() {
        java.lang.Object ref = primaryKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          primaryKey_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @return The bytes for primaryKey.
       */
      public com.google.protobuf.ByteString
          getPrimaryKeyBytes() {
        java.lang.Object ref = primaryKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          primaryKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @param value The primaryKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrimaryKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        primaryKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPrimaryKey() {
        
        primaryKey_ = getDefaultInstance().getPrimaryKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @param value The bytes for primaryKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrimaryKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        primaryKey_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object length_ = "";
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @return The length.
       */
      public java.lang.String getLength() {
        java.lang.Object ref = length_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          length_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @return The bytes for length.
       */
      public com.google.protobuf.ByteString
          getLengthBytes() {
        java.lang.Object ref = length_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          length_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        
        length_ = getDefaultInstance().getLength();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @param value The bytes for length to set.
       * @return This builder for chaining.
       */
      public Builder setLengthBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        length_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.SqlColumnType)
    }

    // @@protoc_insertion_point(class_scope:flink.SqlColumnType)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SqlColumnType>
        PARSER = new com.google.protobuf.AbstractParser<SqlColumnType>() {
      @java.lang.Override
      public SqlColumnType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SqlColumnType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SqlColumnType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SqlColumnType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SqlTimeColumnTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.SqlTimeColumnType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    java.lang.String getColumn();
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    com.google.protobuf.ByteString
        getColumnBytes();

    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type getType();

    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();
  }
  /**
   * <pre>
   * SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.SqlTimeColumnType}
   */
  public static final class SqlTimeColumnType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.SqlTimeColumnType)
      SqlTimeColumnTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SqlTimeColumnType.newBuilder() to construct.
    private SqlTimeColumnType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SqlTimeColumnType() {
      column_ = "";
      type_ = 0;
      expression_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SqlTimeColumnType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SqlTimeColumnType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              column_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              expression_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlTimeColumnType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlTimeColumnType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder.class);
    }

    /**
     * Protobuf enum {@code flink.SqlTimeColumnType.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TypeUnset = 0;</code>
       */
      TypeUnset(0),
      /**
       * <code>Proctime = 1;</code>
       */
      Proctime(1),
      /**
       * <code>Watermark = 2;</code>
       */
      Watermark(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TypeUnset = 0;</code>
       */
      public static final int TypeUnset_VALUE = 0;
      /**
       * <code>Proctime = 1;</code>
       */
      public static final int Proctime_VALUE = 1;
      /**
       * <code>Watermark = 2;</code>
       */
      public static final int Watermark_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return TypeUnset;
          case 1: return Proctime;
          case 2: return Watermark;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:flink.SqlTimeColumnType.Type)
    }

    public static final int COLUMN_FIELD_NUMBER = 1;
    private volatile java.lang.Object column_;
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    @java.lang.Override
    public java.lang.String getColumn() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        column_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getColumnBytes() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        column_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type getType() {
      @SuppressWarnings("deprecation")
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type result = com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type.valueOf(type_);
      return result == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type.UNRECOGNIZED : result;
    }

    public static final int EXPRESSION_FIELD_NUMBER = 3;
    private volatile java.lang.Object expression_;
    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(column_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, column_);
      }
      if (type_ != com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type.TypeUnset.getNumber()) {
        output.writeEnum(2, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(expression_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, expression_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(column_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, column_);
      }
      if (type_ != com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type.TypeUnset.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(expression_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, expression_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType) obj;

      if (!getColumn()
          .equals(other.getColumn())) return false;
      if (type_ != other.type_) return false;
      if (!getExpression()
          .equals(other.getExpression())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COLUMN_FIELD_NUMBER;
      hash = (53 * hash) + getColumn().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.SqlTimeColumnType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.SqlTimeColumnType)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlTimeColumnType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlTimeColumnType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        column_ = "";

        type_ = 0;

        expression_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_SqlTimeColumnType_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType(this);
        result.column_ = column_;
        result.type_ = type_;
        result.expression_ = expression_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance()) return this;
        if (!other.getColumn().isEmpty()) {
          column_ = other.column_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getExpression().isEmpty()) {
          expression_ = other.expression_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object column_ = "";
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The column.
       */
      public java.lang.String getColumn() {
        java.lang.Object ref = column_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          column_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for column.
       */
      public com.google.protobuf.ByteString
          getColumnBytes() {
        java.lang.Object ref = column_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          column_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The column to set.
       * @return This builder for chaining.
       */
      public Builder setColumn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        column_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearColumn() {
        
        column_ = getDefaultInstance().getColumn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for column to set.
       * @return This builder for chaining.
       */
      public Builder setColumnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        column_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type getType() {
        @SuppressWarnings("deprecation")
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type result = com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type.valueOf(type_);
        return result == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object expression_ = "";
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @return The expression.
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for expression.
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        expression_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.SqlTimeColumnType)
    }

    // @@protoc_insertion_point(class_scope:flink.SqlTimeColumnType)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SqlTimeColumnType>
        PARSER = new com.google.protobuf.AbstractParser<SqlTimeColumnType>() {
      @java.lang.Override
      public SqlTimeColumnType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SqlTimeColumnType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SqlTimeColumnType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SqlTimeColumnType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConnectorOptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ConnectorOption)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * ConnectorOption used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.ConnectorOption}
   */
  public static final class ConnectorOption extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ConnectorOption)
      ConnectorOptionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConnectorOption.newBuilder() to construct.
    private ConnectorOption(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConnectorOption() {
      name_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConnectorOption();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConnectorOption(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ConnectorOption_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ConnectorOption_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ConnectorOption used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.ConnectorOption}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ConnectorOption)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ConnectorOption_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ConnectorOption_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ConnectorOption_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption(this);
        result.name_ = name_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ConnectorOption)
    }

    // @@protoc_insertion_point(class_scope:flink.ConnectorOption)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConnectorOption>
        PARSER = new com.google.protobuf.AbstractParser<ConnectorOption>() {
      @java.lang.Override
      public ConnectorOption parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnectorOption(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConnectorOption> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConnectorOption> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MySQLTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.MySQLTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.MySQLTable}
   */
  public static final class MySQLTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.MySQLTable)
      MySQLTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MySQLTable.newBuilder() to construct.
    private MySQLTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MySQLTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MySQLTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MySQLTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_MySQLTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_MySQLTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPING_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPING_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.MySQLTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.MySQLTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_MySQLTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_MySQLTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_MySQLTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.MySQLTable)
    }

    // @@protoc_insertion_point(class_scope:flink.MySQLTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MySQLTable>
        PARSER = new com.google.protobuf.AbstractParser<MySQLTable>() {
      @java.lang.Override
      public MySQLTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MySQLTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MySQLTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MySQLTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PostgreSQLTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.PostgreSQLTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.PostgreSQLTable}
   */
  public static final class PostgreSQLTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.PostgreSQLTable)
      PostgreSQLTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PostgreSQLTable.newBuilder() to construct.
    private PostgreSQLTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PostgreSQLTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PostgreSQLTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PostgreSQLTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_PostgreSQLTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_PostgreSQLTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPING_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPING_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.PostgreSQLTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.PostgreSQLTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_PostgreSQLTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_PostgreSQLTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_PostgreSQLTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.PostgreSQLTable)
    }

    // @@protoc_insertion_point(class_scope:flink.PostgreSQLTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PostgreSQLTable>
        PARSER = new com.google.protobuf.AbstractParser<PostgreSQLTable>() {
      @java.lang.Override
      public PostgreSQLTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PostgreSQLTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PostgreSQLTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PostgreSQLTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClickHouseTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ClickHouseTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.ClickHouseTable}
   */
  public static final class ClickHouseTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ClickHouseTable)
      ClickHouseTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClickHouseTable.newBuilder() to construct.
    private ClickHouseTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClickHouseTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ClickHouseTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClickHouseTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ClickHouseTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ClickHouseTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPINGNAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPINGNAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.ClickHouseTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ClickHouseTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ClickHouseTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ClickHouseTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_ClickHouseTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ClickHouseTable)
    }

    // @@protoc_insertion_point(class_scope:flink.ClickHouseTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClickHouseTable>
        PARSER = new com.google.protobuf.AbstractParser<ClickHouseTable>() {
      @java.lang.Override
      public ClickHouseTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClickHouseTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClickHouseTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClickHouseTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HBaseTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.HBaseTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.HBaseTable}
   */
  public static final class HBaseTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.HBaseTable)
      HBaseTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HBaseTable.newBuilder() to construct.
    private HBaseTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HBaseTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HBaseTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HBaseTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HBaseTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HBaseTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPING_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mappingName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPING_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.HBaseTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.HBaseTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HBaseTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HBaseTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HBaseTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.HBaseTable)
    }

    // @@protoc_insertion_point(class_scope:flink.HBaseTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HBaseTable>
        PARSER = new com.google.protobuf.AbstractParser<HBaseTable>() {
      @java.lang.Override
      public HBaseTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HBaseTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HBaseTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HBaseTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HDFSTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.HDFSTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.HDFSTable}
   */
  public static final class HDFSTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.HDFSTable)
      HDFSTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HDFSTable.newBuilder() to construct.
    private HDFSTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HDFSTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      path_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HDFSTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HDFSTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HDFSTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HDFSTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.HDFSTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.HDFSTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HDFSTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HDFSTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        path_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_HDFSTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.path_ = path_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.HDFSTable)
    }

    // @@protoc_insertion_point(class_scope:flink.HDFSTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HDFSTable>
        PARSER = new com.google.protobuf.AbstractParser<HDFSTable>() {
      @java.lang.Override
      public HDFSTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HDFSTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HDFSTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HDFSTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface S3TableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.S3Table)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * S3TableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.S3Table}
   */
  public static final class S3Table extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.S3Table)
      S3TableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use S3Table.newBuilder() to construct.
    private S3Table(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private S3Table() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      path_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new S3Table();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private S3Table(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_S3Table_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_S3Table_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * S3TableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.S3Table}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.S3Table)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_S3Table_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_S3Table_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        path_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_S3Table_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.path_ = path_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.S3Table)
    }

    // @@protoc_insertion_point(class_scope:flink.S3Table)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<S3Table>
        PARSER = new com.google.protobuf.AbstractParser<S3Table>() {
      @java.lang.Override
      public S3Table parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new S3Table(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<S3Table> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<S3Table> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FtpTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FtpTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.FtpTable}
   */
  public static final class FtpTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FtpTable)
      FtpTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FtpTable.newBuilder() to construct.
    private FtpTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FtpTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      path_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FtpTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FtpTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_FtpTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_FtpTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.FtpTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FtpTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_FtpTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_FtpTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        path_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_FtpTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.path_ = path_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FtpTable)
    }

    // @@protoc_insertion_point(class_scope:flink.FtpTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FtpTable>
        PARSER = new com.google.protobuf.AbstractParser<FtpTable>() {
      @java.lang.Override
      public FtpTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FtpTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FtpTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FtpTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface KafkaTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.KafkaTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The topic.
     */
    java.lang.String getTopic();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for topic.
     */
    com.google.protobuf.ByteString
        getTopicBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.KafkaTable}
   */
  public static final class KafkaTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.KafkaTable)
      KafkaTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use KafkaTable.newBuilder() to construct.
    private KafkaTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private KafkaTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      topic_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new KafkaTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private KafkaTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              topic_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_KafkaTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_KafkaTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOPIC_FIELD_NUMBER = 3;
    private volatile java.lang.Object topic_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The topic.
     */
    @java.lang.Override
    public java.lang.String getTopic() {
      java.lang.Object ref = topic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        topic_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for topic.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTopicBytes() {
      java.lang.Object ref = topic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        topic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(topic_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, topic_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(topic_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, topic_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getTopic()
          .equals(other.getTopic())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + TOPIC_FIELD_NUMBER;
      hash = (53 * hash) + getTopic().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.KafkaTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.KafkaTable)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_KafkaTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_KafkaTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        topic_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_KafkaTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.topic_ = topic_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getTopic().isEmpty()) {
          topic_ = other.topic_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object topic_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @return The topic.
       */
      public java.lang.String getTopic() {
        java.lang.Object ref = topic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          topic_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for topic.
       */
      public com.google.protobuf.ByteString
          getTopicBytes() {
        java.lang.Object ref = topic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          topic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @param value The topic to set.
       * @return This builder for chaining.
       */
      public Builder setTopic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        topic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTopic() {
        
        topic_ = getDefaultInstance().getTopic();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for topic to set.
       * @return This builder for chaining.
       */
      public Builder setTopicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        topic_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOption.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnType.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.KafkaTable)
    }

    // @@protoc_insertion_point(class_scope:flink.KafkaTable)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<KafkaTable>
        PARSER = new com.google.protobuf.AbstractParser<KafkaTable>() {
      @java.lang.Override
      public KafkaTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KafkaTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<KafkaTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<KafkaTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TableSchemaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.TableSchema)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return Whether the mysql field is set.
     */
    boolean hasMysql();
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return The mysql.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable getMysql();
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder getMysqlOrBuilder();

    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return Whether the postgresql field is set.
     */
    boolean hasPostgresql();
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return The postgresql.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable getPostgresql();
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder getPostgresqlOrBuilder();

    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return Whether the clickhouse field is set.
     */
    boolean hasClickhouse();
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return The clickhouse.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable getClickhouse();
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder getClickhouseOrBuilder();

    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return Whether the hbase field is set.
     */
    boolean hasHbase();
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return The hbase.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable getHbase();
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder getHbaseOrBuilder();

    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return Whether the kafka field is set.
     */
    boolean hasKafka();
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return The kafka.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable getKafka();
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder getKafkaOrBuilder();

    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return Whether the s3 field is set.
     */
    boolean hasS3();
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return The s3.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table getS3();
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder getS3OrBuilder();

    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return Whether the ftp field is set.
     */
    boolean hasFtp();
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return The ftp.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable getFtp();
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder getFtpOrBuilder();

    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return Whether the hdfs field is set.
     */
    boolean hasHdfs();
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return The hdfs.
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable getHdfs();
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     */
    com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder getHdfsOrBuilder();
  }
  /**
   * Protobuf type {@code flink.TableSchema}
   */
  public static final class TableSchema extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.TableSchema)
      TableSchemaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TableSchema.newBuilder() to construct.
    private TableSchema(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TableSchema() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TableSchema();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TableSchema(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder subBuilder = null;
              if (mysql_ != null) {
                subBuilder = mysql_.toBuilder();
              }
              mysql_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mysql_);
                mysql_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder subBuilder = null;
              if (postgresql_ != null) {
                subBuilder = postgresql_.toBuilder();
              }
              postgresql_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(postgresql_);
                postgresql_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder subBuilder = null;
              if (clickhouse_ != null) {
                subBuilder = clickhouse_.toBuilder();
              }
              clickhouse_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(clickhouse_);
                clickhouse_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder subBuilder = null;
              if (hbase_ != null) {
                subBuilder = hbase_.toBuilder();
              }
              hbase_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hbase_);
                hbase_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder subBuilder = null;
              if (kafka_ != null) {
                subBuilder = kafka_.toBuilder();
              }
              kafka_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(kafka_);
                kafka_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder subBuilder = null;
              if (s3_ != null) {
                subBuilder = s3_.toBuilder();
              }
              s3_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(s3_);
                s3_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder subBuilder = null;
              if (ftp_ != null) {
                subBuilder = ftp_.toBuilder();
              }
              ftp_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ftp_);
                ftp_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder subBuilder = null;
              if (hdfs_ != null) {
                subBuilder = hdfs_.toBuilder();
              }
              hdfs_ = input.readMessage(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdfs_);
                hdfs_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_TableSchema_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_TableSchema_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.Builder.class);
    }

    public static final int MYSQL_FIELD_NUMBER = 1;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable mysql_;
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return Whether the mysql field is set.
     */
    @java.lang.Override
    public boolean hasMysql() {
      return mysql_ != null;
    }
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return The mysql.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable getMysql() {
      return mysql_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.getDefaultInstance() : mysql_;
    }
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder getMysqlOrBuilder() {
      return getMysql();
    }

    public static final int POSTGRESQL_FIELD_NUMBER = 2;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable postgresql_;
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return Whether the postgresql field is set.
     */
    @java.lang.Override
    public boolean hasPostgresql() {
      return postgresql_ != null;
    }
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return The postgresql.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable getPostgresql() {
      return postgresql_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.getDefaultInstance() : postgresql_;
    }
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder getPostgresqlOrBuilder() {
      return getPostgresql();
    }

    public static final int CLICKHOUSE_FIELD_NUMBER = 3;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable clickhouse_;
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return Whether the clickhouse field is set.
     */
    @java.lang.Override
    public boolean hasClickhouse() {
      return clickhouse_ != null;
    }
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return The clickhouse.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable getClickhouse() {
      return clickhouse_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.getDefaultInstance() : clickhouse_;
    }
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder getClickhouseOrBuilder() {
      return getClickhouse();
    }

    public static final int HBASE_FIELD_NUMBER = 4;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable hbase_;
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return Whether the hbase field is set.
     */
    @java.lang.Override
    public boolean hasHbase() {
      return hbase_ != null;
    }
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return The hbase.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable getHbase() {
      return hbase_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.getDefaultInstance() : hbase_;
    }
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder getHbaseOrBuilder() {
      return getHbase();
    }

    public static final int KAFKA_FIELD_NUMBER = 5;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable kafka_;
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return Whether the kafka field is set.
     */
    @java.lang.Override
    public boolean hasKafka() {
      return kafka_ != null;
    }
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return The kafka.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable getKafka() {
      return kafka_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.getDefaultInstance() : kafka_;
    }
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder getKafkaOrBuilder() {
      return getKafka();
    }

    public static final int S3_FIELD_NUMBER = 6;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table s3_;
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return Whether the s3 field is set.
     */
    @java.lang.Override
    public boolean hasS3() {
      return s3_ != null;
    }
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return The s3.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table getS3() {
      return s3_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.getDefaultInstance() : s3_;
    }
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder getS3OrBuilder() {
      return getS3();
    }

    public static final int FTP_FIELD_NUMBER = 7;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable ftp_;
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return Whether the ftp field is set.
     */
    @java.lang.Override
    public boolean hasFtp() {
      return ftp_ != null;
    }
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return The ftp.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable getFtp() {
      return ftp_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.getDefaultInstance() : ftp_;
    }
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder getFtpOrBuilder() {
      return getFtp();
    }

    public static final int HDFS_FIELD_NUMBER = 8;
    private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable hdfs_;
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return Whether the hdfs field is set.
     */
    @java.lang.Override
    public boolean hasHdfs() {
      return hdfs_ != null;
    }
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return The hdfs.
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable getHdfs() {
      return hdfs_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.getDefaultInstance() : hdfs_;
    }
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder getHdfsOrBuilder() {
      return getHdfs();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mysql_ != null) {
        output.writeMessage(1, getMysql());
      }
      if (postgresql_ != null) {
        output.writeMessage(2, getPostgresql());
      }
      if (clickhouse_ != null) {
        output.writeMessage(3, getClickhouse());
      }
      if (hbase_ != null) {
        output.writeMessage(4, getHbase());
      }
      if (kafka_ != null) {
        output.writeMessage(5, getKafka());
      }
      if (s3_ != null) {
        output.writeMessage(6, getS3());
      }
      if (ftp_ != null) {
        output.writeMessage(7, getFtp());
      }
      if (hdfs_ != null) {
        output.writeMessage(8, getHdfs());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mysql_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMysql());
      }
      if (postgresql_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPostgresql());
      }
      if (clickhouse_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getClickhouse());
      }
      if (hbase_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getHbase());
      }
      if (kafka_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKafka());
      }
      if (s3_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getS3());
      }
      if (ftp_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getFtp());
      }
      if (hdfs_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getHdfs());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema other = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema) obj;

      if (hasMysql() != other.hasMysql()) return false;
      if (hasMysql()) {
        if (!getMysql()
            .equals(other.getMysql())) return false;
      }
      if (hasPostgresql() != other.hasPostgresql()) return false;
      if (hasPostgresql()) {
        if (!getPostgresql()
            .equals(other.getPostgresql())) return false;
      }
      if (hasClickhouse() != other.hasClickhouse()) return false;
      if (hasClickhouse()) {
        if (!getClickhouse()
            .equals(other.getClickhouse())) return false;
      }
      if (hasHbase() != other.hasHbase()) return false;
      if (hasHbase()) {
        if (!getHbase()
            .equals(other.getHbase())) return false;
      }
      if (hasKafka() != other.hasKafka()) return false;
      if (hasKafka()) {
        if (!getKafka()
            .equals(other.getKafka())) return false;
      }
      if (hasS3() != other.hasS3()) return false;
      if (hasS3()) {
        if (!getS3()
            .equals(other.getS3())) return false;
      }
      if (hasFtp() != other.hasFtp()) return false;
      if (hasFtp()) {
        if (!getFtp()
            .equals(other.getFtp())) return false;
      }
      if (hasHdfs() != other.hasHdfs()) return false;
      if (hasHdfs()) {
        if (!getHdfs()
            .equals(other.getHdfs())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMysql()) {
        hash = (37 * hash) + MYSQL_FIELD_NUMBER;
        hash = (53 * hash) + getMysql().hashCode();
      }
      if (hasPostgresql()) {
        hash = (37 * hash) + POSTGRESQL_FIELD_NUMBER;
        hash = (53 * hash) + getPostgresql().hashCode();
      }
      if (hasClickhouse()) {
        hash = (37 * hash) + CLICKHOUSE_FIELD_NUMBER;
        hash = (53 * hash) + getClickhouse().hashCode();
      }
      if (hasHbase()) {
        hash = (37 * hash) + HBASE_FIELD_NUMBER;
        hash = (53 * hash) + getHbase().hashCode();
      }
      if (hasKafka()) {
        hash = (37 * hash) + KAFKA_FIELD_NUMBER;
        hash = (53 * hash) + getKafka().hashCode();
      }
      if (hasS3()) {
        hash = (37 * hash) + S3_FIELD_NUMBER;
        hash = (53 * hash) + getS3().hashCode();
      }
      if (hasFtp()) {
        hash = (37 * hash) + FTP_FIELD_NUMBER;
        hash = (53 * hash) + getFtp().hashCode();
      }
      if (hasHdfs()) {
        hash = (37 * hash) + HDFS_FIELD_NUMBER;
        hash = (53 * hash) + getHdfs().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code flink.TableSchema}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.TableSchema)
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchemaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_TableSchema_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_TableSchema_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.class, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.Builder.class);
      }

      // Construct using com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (mysqlBuilder_ == null) {
          mysql_ = null;
        } else {
          mysql_ = null;
          mysqlBuilder_ = null;
        }
        if (postgresqlBuilder_ == null) {
          postgresql_ = null;
        } else {
          postgresql_ = null;
          postgresqlBuilder_ = null;
        }
        if (clickhouseBuilder_ == null) {
          clickhouse_ = null;
        } else {
          clickhouse_ = null;
          clickhouseBuilder_ = null;
        }
        if (hbaseBuilder_ == null) {
          hbase_ = null;
        } else {
          hbase_ = null;
          hbaseBuilder_ = null;
        }
        if (kafkaBuilder_ == null) {
          kafka_ = null;
        } else {
          kafka_ = null;
          kafkaBuilder_ = null;
        }
        if (s3Builder_ == null) {
          s3_ = null;
        } else {
          s3_ = null;
          s3Builder_ = null;
        }
        if (ftpBuilder_ == null) {
          ftp_ = null;
        } else {
          ftp_ = null;
          ftpBuilder_ = null;
        }
        if (hdfsBuilder_ == null) {
          hdfs_ = null;
        } else {
          hdfs_ = null;
          hdfsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.internal_static_flink_TableSchema_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema getDefaultInstanceForType() {
        return com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema build() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema buildPartial() {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema result = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema(this);
        if (mysqlBuilder_ == null) {
          result.mysql_ = mysql_;
        } else {
          result.mysql_ = mysqlBuilder_.build();
        }
        if (postgresqlBuilder_ == null) {
          result.postgresql_ = postgresql_;
        } else {
          result.postgresql_ = postgresqlBuilder_.build();
        }
        if (clickhouseBuilder_ == null) {
          result.clickhouse_ = clickhouse_;
        } else {
          result.clickhouse_ = clickhouseBuilder_.build();
        }
        if (hbaseBuilder_ == null) {
          result.hbase_ = hbase_;
        } else {
          result.hbase_ = hbaseBuilder_.build();
        }
        if (kafkaBuilder_ == null) {
          result.kafka_ = kafka_;
        } else {
          result.kafka_ = kafkaBuilder_.build();
        }
        if (s3Builder_ == null) {
          result.s3_ = s3_;
        } else {
          result.s3_ = s3Builder_.build();
        }
        if (ftpBuilder_ == null) {
          result.ftp_ = ftp_;
        } else {
          result.ftp_ = ftpBuilder_.build();
        }
        if (hdfsBuilder_ == null) {
          result.hdfs_ = hdfs_;
        } else {
          result.hdfs_ = hdfsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema) {
          return mergeFrom((com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema other) {
        if (other == com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema.getDefaultInstance()) return this;
        if (other.hasMysql()) {
          mergeMysql(other.getMysql());
        }
        if (other.hasPostgresql()) {
          mergePostgresql(other.getPostgresql());
        }
        if (other.hasClickhouse()) {
          mergeClickhouse(other.getClickhouse());
        }
        if (other.hasHbase()) {
          mergeHbase(other.getHbase());
        }
        if (other.hasKafka()) {
          mergeKafka(other.getKafka());
        }
        if (other.hasS3()) {
          mergeS3(other.getS3());
        }
        if (other.hasFtp()) {
          mergeFtp(other.getFtp());
        }
        if (other.hasHdfs()) {
          mergeHdfs(other.getHdfs());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable mysql_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder> mysqlBuilder_;
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       * @return Whether the mysql field is set.
       */
      public boolean hasMysql() {
        return mysqlBuilder_ != null || mysql_ != null;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       * @return The mysql.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable getMysql() {
        if (mysqlBuilder_ == null) {
          return mysql_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.getDefaultInstance() : mysql_;
        } else {
          return mysqlBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder setMysql(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable value) {
        if (mysqlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mysql_ = value;
          onChanged();
        } else {
          mysqlBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder setMysql(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder builderForValue) {
        if (mysqlBuilder_ == null) {
          mysql_ = builderForValue.build();
          onChanged();
        } else {
          mysqlBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder mergeMysql(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable value) {
        if (mysqlBuilder_ == null) {
          if (mysql_ != null) {
            mysql_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.newBuilder(mysql_).mergeFrom(value).buildPartial();
          } else {
            mysql_ = value;
          }
          onChanged();
        } else {
          mysqlBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder clearMysql() {
        if (mysqlBuilder_ == null) {
          mysql_ = null;
          onChanged();
        } else {
          mysql_ = null;
          mysqlBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder getMysqlBuilder() {
        
        onChanged();
        return getMysqlFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder getMysqlOrBuilder() {
        if (mysqlBuilder_ != null) {
          return mysqlBuilder_.getMessageOrBuilder();
        } else {
          return mysql_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.getDefaultInstance() : mysql_;
        }
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder> 
          getMysqlFieldBuilder() {
        if (mysqlBuilder_ == null) {
          mysqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.MySQLTableOrBuilder>(
                  getMysql(),
                  getParentForChildren(),
                  isClean());
          mysql_ = null;
        }
        return mysqlBuilder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable postgresql_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder> postgresqlBuilder_;
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       * @return Whether the postgresql field is set.
       */
      public boolean hasPostgresql() {
        return postgresqlBuilder_ != null || postgresql_ != null;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       * @return The postgresql.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable getPostgresql() {
        if (postgresqlBuilder_ == null) {
          return postgresql_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.getDefaultInstance() : postgresql_;
        } else {
          return postgresqlBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder setPostgresql(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable value) {
        if (postgresqlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          postgresql_ = value;
          onChanged();
        } else {
          postgresqlBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder setPostgresql(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder builderForValue) {
        if (postgresqlBuilder_ == null) {
          postgresql_ = builderForValue.build();
          onChanged();
        } else {
          postgresqlBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder mergePostgresql(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable value) {
        if (postgresqlBuilder_ == null) {
          if (postgresql_ != null) {
            postgresql_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.newBuilder(postgresql_).mergeFrom(value).buildPartial();
          } else {
            postgresql_ = value;
          }
          onChanged();
        } else {
          postgresqlBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder clearPostgresql() {
        if (postgresqlBuilder_ == null) {
          postgresql_ = null;
          onChanged();
        } else {
          postgresql_ = null;
          postgresqlBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder getPostgresqlBuilder() {
        
        onChanged();
        return getPostgresqlFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder getPostgresqlOrBuilder() {
        if (postgresqlBuilder_ != null) {
          return postgresqlBuilder_.getMessageOrBuilder();
        } else {
          return postgresql_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.getDefaultInstance() : postgresql_;
        }
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder> 
          getPostgresqlFieldBuilder() {
        if (postgresqlBuilder_ == null) {
          postgresqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.PostgreSQLTableOrBuilder>(
                  getPostgresql(),
                  getParentForChildren(),
                  isClean());
          postgresql_ = null;
        }
        return postgresqlBuilder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable clickhouse_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder> clickhouseBuilder_;
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       * @return Whether the clickhouse field is set.
       */
      public boolean hasClickhouse() {
        return clickhouseBuilder_ != null || clickhouse_ != null;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       * @return The clickhouse.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable getClickhouse() {
        if (clickhouseBuilder_ == null) {
          return clickhouse_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.getDefaultInstance() : clickhouse_;
        } else {
          return clickhouseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder setClickhouse(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable value) {
        if (clickhouseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          clickhouse_ = value;
          onChanged();
        } else {
          clickhouseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder setClickhouse(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder builderForValue) {
        if (clickhouseBuilder_ == null) {
          clickhouse_ = builderForValue.build();
          onChanged();
        } else {
          clickhouseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder mergeClickhouse(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable value) {
        if (clickhouseBuilder_ == null) {
          if (clickhouse_ != null) {
            clickhouse_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.newBuilder(clickhouse_).mergeFrom(value).buildPartial();
          } else {
            clickhouse_ = value;
          }
          onChanged();
        } else {
          clickhouseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder clearClickhouse() {
        if (clickhouseBuilder_ == null) {
          clickhouse_ = null;
          onChanged();
        } else {
          clickhouse_ = null;
          clickhouseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder getClickhouseBuilder() {
        
        onChanged();
        return getClickhouseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder getClickhouseOrBuilder() {
        if (clickhouseBuilder_ != null) {
          return clickhouseBuilder_.getMessageOrBuilder();
        } else {
          return clickhouse_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.getDefaultInstance() : clickhouse_;
        }
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder> 
          getClickhouseFieldBuilder() {
        if (clickhouseBuilder_ == null) {
          clickhouseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.ClickHouseTableOrBuilder>(
                  getClickhouse(),
                  getParentForChildren(),
                  isClean());
          clickhouse_ = null;
        }
        return clickhouseBuilder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable hbase_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder> hbaseBuilder_;
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       * @return Whether the hbase field is set.
       */
      public boolean hasHbase() {
        return hbaseBuilder_ != null || hbase_ != null;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       * @return The hbase.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable getHbase() {
        if (hbaseBuilder_ == null) {
          return hbase_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.getDefaultInstance() : hbase_;
        } else {
          return hbaseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder setHbase(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable value) {
        if (hbaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hbase_ = value;
          onChanged();
        } else {
          hbaseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder setHbase(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder builderForValue) {
        if (hbaseBuilder_ == null) {
          hbase_ = builderForValue.build();
          onChanged();
        } else {
          hbaseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder mergeHbase(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable value) {
        if (hbaseBuilder_ == null) {
          if (hbase_ != null) {
            hbase_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.newBuilder(hbase_).mergeFrom(value).buildPartial();
          } else {
            hbase_ = value;
          }
          onChanged();
        } else {
          hbaseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder clearHbase() {
        if (hbaseBuilder_ == null) {
          hbase_ = null;
          onChanged();
        } else {
          hbase_ = null;
          hbaseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder getHbaseBuilder() {
        
        onChanged();
        return getHbaseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder getHbaseOrBuilder() {
        if (hbaseBuilder_ != null) {
          return hbaseBuilder_.getMessageOrBuilder();
        } else {
          return hbase_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.getDefaultInstance() : hbase_;
        }
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder> 
          getHbaseFieldBuilder() {
        if (hbaseBuilder_ == null) {
          hbaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HBaseTableOrBuilder>(
                  getHbase(),
                  getParentForChildren(),
                  isClean());
          hbase_ = null;
        }
        return hbaseBuilder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable kafka_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder> kafkaBuilder_;
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       * @return Whether the kafka field is set.
       */
      public boolean hasKafka() {
        return kafkaBuilder_ != null || kafka_ != null;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       * @return The kafka.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable getKafka() {
        if (kafkaBuilder_ == null) {
          return kafka_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.getDefaultInstance() : kafka_;
        } else {
          return kafkaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder setKafka(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable value) {
        if (kafkaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kafka_ = value;
          onChanged();
        } else {
          kafkaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder setKafka(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder builderForValue) {
        if (kafkaBuilder_ == null) {
          kafka_ = builderForValue.build();
          onChanged();
        } else {
          kafkaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder mergeKafka(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable value) {
        if (kafkaBuilder_ == null) {
          if (kafka_ != null) {
            kafka_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.newBuilder(kafka_).mergeFrom(value).buildPartial();
          } else {
            kafka_ = value;
          }
          onChanged();
        } else {
          kafkaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder clearKafka() {
        if (kafkaBuilder_ == null) {
          kafka_ = null;
          onChanged();
        } else {
          kafka_ = null;
          kafkaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder getKafkaBuilder() {
        
        onChanged();
        return getKafkaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder getKafkaOrBuilder() {
        if (kafkaBuilder_ != null) {
          return kafkaBuilder_.getMessageOrBuilder();
        } else {
          return kafka_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.getDefaultInstance() : kafka_;
        }
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder> 
          getKafkaFieldBuilder() {
        if (kafkaBuilder_ == null) {
          kafkaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.KafkaTableOrBuilder>(
                  getKafka(),
                  getParentForChildren(),
                  isClean());
          kafka_ = null;
        }
        return kafkaBuilder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table s3_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder> s3Builder_;
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       * @return Whether the s3 field is set.
       */
      public boolean hasS3() {
        return s3Builder_ != null || s3_ != null;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       * @return The s3.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table getS3() {
        if (s3Builder_ == null) {
          return s3_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.getDefaultInstance() : s3_;
        } else {
          return s3Builder_.getMessage();
        }
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder setS3(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table value) {
        if (s3Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          s3_ = value;
          onChanged();
        } else {
          s3Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder setS3(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder builderForValue) {
        if (s3Builder_ == null) {
          s3_ = builderForValue.build();
          onChanged();
        } else {
          s3Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder mergeS3(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table value) {
        if (s3Builder_ == null) {
          if (s3_ != null) {
            s3_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.newBuilder(s3_).mergeFrom(value).buildPartial();
          } else {
            s3_ = value;
          }
          onChanged();
        } else {
          s3Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder clearS3() {
        if (s3Builder_ == null) {
          s3_ = null;
          onChanged();
        } else {
          s3_ = null;
          s3Builder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder getS3Builder() {
        
        onChanged();
        return getS3FieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder getS3OrBuilder() {
        if (s3Builder_ != null) {
          return s3Builder_.getMessageOrBuilder();
        } else {
          return s3_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.getDefaultInstance() : s3_;
        }
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder> 
          getS3FieldBuilder() {
        if (s3Builder_ == null) {
          s3Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3Table.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.S3TableOrBuilder>(
                  getS3(),
                  getParentForChildren(),
                  isClean());
          s3_ = null;
        }
        return s3Builder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable ftp_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder> ftpBuilder_;
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       * @return Whether the ftp field is set.
       */
      public boolean hasFtp() {
        return ftpBuilder_ != null || ftp_ != null;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       * @return The ftp.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable getFtp() {
        if (ftpBuilder_ == null) {
          return ftp_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.getDefaultInstance() : ftp_;
        } else {
          return ftpBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder setFtp(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable value) {
        if (ftpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ftp_ = value;
          onChanged();
        } else {
          ftpBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder setFtp(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder builderForValue) {
        if (ftpBuilder_ == null) {
          ftp_ = builderForValue.build();
          onChanged();
        } else {
          ftpBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder mergeFtp(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable value) {
        if (ftpBuilder_ == null) {
          if (ftp_ != null) {
            ftp_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.newBuilder(ftp_).mergeFrom(value).buildPartial();
          } else {
            ftp_ = value;
          }
          onChanged();
        } else {
          ftpBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder clearFtp() {
        if (ftpBuilder_ == null) {
          ftp_ = null;
          onChanged();
        } else {
          ftp_ = null;
          ftpBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder getFtpBuilder() {
        
        onChanged();
        return getFtpFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder getFtpOrBuilder() {
        if (ftpBuilder_ != null) {
          return ftpBuilder_.getMessageOrBuilder();
        } else {
          return ftp_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.getDefaultInstance() : ftp_;
        }
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder> 
          getFtpFieldBuilder() {
        if (ftpBuilder_ == null) {
          ftpBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.FtpTableOrBuilder>(
                  getFtp(),
                  getParentForChildren(),
                  isClean());
          ftp_ = null;
        }
        return ftpBuilder_;
      }

      private com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable hdfs_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder> hdfsBuilder_;
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       * @return Whether the hdfs field is set.
       */
      public boolean hasHdfs() {
        return hdfsBuilder_ != null || hdfs_ != null;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       * @return The hdfs.
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable getHdfs() {
        if (hdfsBuilder_ == null) {
          return hdfs_ == null ? com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.getDefaultInstance() : hdfs_;
        } else {
          return hdfsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder setHdfs(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable value) {
        if (hdfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdfs_ = value;
          onChanged();
        } else {
          hdfsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder setHdfs(
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder builderForValue) {
        if (hdfsBuilder_ == null) {
          hdfs_ = builderForValue.build();
          onChanged();
        } else {
          hdfsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder mergeHdfs(com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable value) {
        if (hdfsBuilder_ == null) {
          if (hdfs_ != null) {
            hdfs_ =
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.newBuilder(hdfs_).mergeFrom(value).buildPartial();
          } else {
            hdfs_ = value;
          }
          onChanged();
        } else {
          hdfsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder clearHdfs() {
        if (hdfsBuilder_ == null) {
          hdfs_ = null;
          onChanged();
        } else {
          hdfs_ = null;
          hdfsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder getHdfsBuilder() {
        
        onChanged();
        return getHdfsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder getHdfsOrBuilder() {
        if (hdfsBuilder_ != null) {
          return hdfsBuilder_.getMessageOrBuilder();
        } else {
          return hdfs_ == null ?
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.getDefaultInstance() : hdfs_;
        }
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder> 
          getHdfsFieldBuilder() {
        if (hdfsBuilder_ == null) {
          hdfsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTable.Builder, com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.HDFSTableOrBuilder>(
                  getHdfs(),
                  getParentForChildren(),
                  isClean());
          hdfs_ = null;
        }
        return hdfsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.TableSchema)
    }

    // @@protoc_insertion_point(class_scope:flink.TableSchema)
    private static final com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema();
    }

    public static com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TableSchema>
        PARSER = new com.google.protobuf.AbstractParser<TableSchema>() {
      @java.lang.Override
      public TableSchema parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableSchema(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TableSchema> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TableSchema> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.types.pbmodel.pbflink.PBFlinkTable.TableSchema getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_SqlColumnType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_SqlColumnType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_SqlTimeColumnType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_SqlTimeColumnType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ConnectorOption_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ConnectorOption_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_MySQLTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_MySQLTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_PostgreSQLTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_PostgreSQLTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ClickHouseTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ClickHouseTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_HBaseTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_HBaseTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_HDFSTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_HDFSTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_S3Table_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_S3Table_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FtpTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FtpTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_KafkaTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_KafkaTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_TableSchema_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_TableSchema_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)proto/types/model/flink/flink_table.pr" +
      "oto\022\005flink\0323github.com/yu31/protoc-plugi" +
      "n/proto/validator.proto\032/github.com/yu31" +
      "/protoc-plugin/proto/gosql.proto\"\252\001\n\rSql" +
      "ColumnType\022\034\n\006column\030\001 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@" +
      "\022\032\n\004type\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022\036\n\007comment\030" +
      "\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\002\022!\n\013primary_key\030\004 \001(" +
      "\tB\014\342\337\037\010\022\006\302\001\003\230\002\010\022\034\n\006Length\030\005 \001(\tB\014\342\337\037\010\022\006\302" +
      "\001\003\230\002\n\"\304\001\n\021SqlTimeColumnType\022\034\n\006column\030\001 " +
      "\001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022:\n\004type\030\002 \001(\0162\035.flink." +
      "SqlTimeColumnType.TypeB\r\342\337\037\t\022\007\332\001\004@\001X\001\022!\n" +
      "\nexpression\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\"2\n\004Type" +
      "\022\r\n\tTypeUnset\020\000\022\014\n\010Proctime\020\001\022\r\n\tWaterma" +
      "rk\020\002\"L\n\017ConnectorOption\022\033\n\004name\030\001 \001(\tB\r\342" +
      "\337\037\t\022\007\302\001\004\230\002\200\002\022\034\n\005value\030\002 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002" +
      "\200 \"\326\001\n\nMySQLTable\022.\n\nsql_column\030\001 \003(\0132\024." +
      "flink.SqlColumnTypeB\004\342\337\037\000\022\"\n\014mapping_nam" +
      "e\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\0227\n\021connector_optio" +
      "ns\030\003 \003(\0132\026.flink.ConnectorOptionB\004\342\337\037\000\0223" +
      "\n\013time_column\030\004 \003(\0132\030.flink.SqlTimeColum" +
      "nTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\333\001\n\017PostgreSQLTable\022" +
      ".\n\nsql_column\030\001 \003(\0132\024.flink.SqlColumnTyp" +
      "eB\004\342\337\037\000\022\"\n\014mapping_name\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003" +
      "\230\002@\0227\n\021connector_options\030\003 \003(\0132\026.flink.C" +
      "onnectorOptionB\004\342\337\037\000\0223\n\013time_column\030\004 \003(" +
      "\0132\030.flink.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n" +
      "\000\"\332\001\n\017ClickHouseTable\022.\n\nsql_column\030\001 \003(" +
      "\0132\024.flink.SqlColumnTypeB\004\342\337\037\000\022!\n\013Mapping" +
      "Name\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\0227\n\021connector_op" +
      "tions\030\003 \003(\0132\026.flink.ConnectorOptionB\004\342\337\037" +
      "\000\0223\n\013time_column\030\004 \003(\0132\030.flink.SqlTimeCo" +
      "lumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\326\001\n\nHBaseTable\022.\n" +
      "\nsql_column\030\001 \003(\0132\024.flink.SqlColumnTypeB" +
      "\004\342\337\037\000\022\"\n\014mapping_name\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002" +
      "@\0227\n\021connector_options\030\003 \003(\0132\026.flink.Con" +
      "nectorOptionB\004\342\337\037\000\0223\n\013time_column\030\004 \003(\0132" +
      "\030.flink.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"" +
      "\354\001\n\tHDFSTable\022.\n\nsql_column\030\001 \003(\0132\024.flin" +
      "k.SqlColumnTypeB\004\342\337\037\000\022\034\n\006format\030\002 \001(\tB\014\342" +
      "\337\037\010\022\006\302\001\003\230\002@\022\033\n\004path\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010" +
      "\0227\n\021connector_options\030\004 \003(\0132\026.flink.Conn" +
      "ectorOptionB\004\342\337\037\000\0223\n\013time_column\030\005 \003(\0132\030" +
      ".flink.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\352" +
      "\001\n\007S3Table\022.\n\nsql_column\030\001 \003(\0132\024.flink.S" +
      "qlColumnTypeB\004\342\337\037\000\022\034\n\006format\030\002 \001(\tB\014\342\337\037\010" +
      "\022\006\302\001\003\230\002@\022\033\n\004path\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\0227\n" +
      "\021connector_options\030\004 \003(\0132\026.flink.Connect" +
      "orOptionB\004\342\337\037\000\0223\n\013time_column\030\005 \003(\0132\030.fl" +
      "ink.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\353\001\n\010" +
      "FtpTable\022.\n\nsql_column\030\001 \003(\0132\024.flink.Sql" +
      "ColumnTypeB\004\342\337\037\000\022\034\n\006format\030\002 \001(\tB\014\342\337\037\010\022\006" +
      "\302\001\003\230\002@\022\033\n\004path\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\0227\n\021c" +
      "onnector_options\030\004 \003(\0132\026.flink.Connector" +
      "OptionB\004\342\337\037\000\0223\n\013time_column\030\005 \003(\0132\030.flin" +
      "k.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\356\001\n\nKa" +
      "fkaTable\022.\n\nsql_column\030\001 \003(\0132\024.flink.Sql" +
      "ColumnTypeB\004\342\337\037\000\022\034\n\006format\030\002 \001(\tB\014\342\337\037\010\022\006" +
      "\302\001\003\230\002@\022\034\n\005topic\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\0227\n\021" +
      "connector_options\030\004 \003(\0132\026.flink.Connecto" +
      "rOptionB\004\342\337\037\000\0223\n\013time_column\030\005 \003(\0132\030.fli" +
      "nk.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\255\002\n\013T" +
      "ableSchema\022 \n\005mysql\030\001 \001(\0132\021.flink.MySQLT" +
      "able\022*\n\npostgresql\030\002 \001(\0132\026.flink.Postgre" +
      "SQLTable\022*\n\nclickhouse\030\003 \001(\0132\026.flink.Cli" +
      "ckHouseTable\022 \n\005Hbase\030\004 \001(\0132\021.flink.HBas" +
      "eTable\022 \n\005kafka\030\005 \001(\0132\021.flink.KafkaTable" +
      "\022\032\n\002s3\030\006 \001(\0132\016.flink.S3Table\022\034\n\003ftp\030\007 \001(" +
      "\0132\017.flink.FtpTable\022\036\n\004hdfs\030\010 \001(\0132\020.flink" +
      ".HDFSTable:\006\312\262\004\002\n\000Bw\n*com.dataomnis.gpro" +
      "to.types.pbmodel.pbflinkB\014PBFlinkTableP\000" +
      "Z9github.com/DataWorkbench/gproto/xgo/ty" +
      "pes/pbmodel/pbflinkb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.github.yu31.protoc.pb.pbvalidator.PBValidator.getDescriptor(),
          io.github.yu31.protoc.pb.pbgosql.PBGoSQL.getDescriptor(),
        });
    internal_static_flink_SqlColumnType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flink_SqlColumnType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_SqlColumnType_descriptor,
        new java.lang.String[] { "Column", "Type", "Comment", "PrimaryKey", "Length", });
    internal_static_flink_SqlTimeColumnType_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flink_SqlTimeColumnType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_SqlTimeColumnType_descriptor,
        new java.lang.String[] { "Column", "Type", "Expression", });
    internal_static_flink_ConnectorOption_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flink_ConnectorOption_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ConnectorOption_descriptor,
        new java.lang.String[] { "Name", "Value", });
    internal_static_flink_MySQLTable_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_flink_MySQLTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_MySQLTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_PostgreSQLTable_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_flink_PostgreSQLTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_PostgreSQLTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_ClickHouseTable_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_flink_ClickHouseTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ClickHouseTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_HBaseTable_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_flink_HBaseTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_HBaseTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_HDFSTable_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_flink_HDFSTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_HDFSTable_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Path", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_S3Table_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_flink_S3Table_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_S3Table_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Path", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_FtpTable_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_flink_FtpTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FtpTable_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Path", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_KafkaTable_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_flink_KafkaTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_KafkaTable_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Topic", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_TableSchema_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_flink_TableSchema_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_TableSchema_descriptor,
        new java.lang.String[] { "Mysql", "Postgresql", "Clickhouse", "Hbase", "Kafka", "S3", "Ftp", "Hdfs", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(io.github.yu31.protoc.pb.pbgosql.PBGoSQL.serialize);
    registry.add(io.github.yu31.protoc.pb.pbvalidator.PBValidator.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    io.github.yu31.protoc.pb.pbvalidator.PBValidator.getDescriptor();
    io.github.yu31.protoc.pb.pbgosql.PBGoSQL.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
