// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/response/cluster_manage.proto

package pbresponse

import (
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DescribeFlinkClusterAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL     string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DescribeFlinkClusterAPI) Reset() {
	*x = DescribeFlinkClusterAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_response_cluster_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlinkClusterAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlinkClusterAPI) ProtoMessage() {}

func (x *DescribeFlinkClusterAPI) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_response_cluster_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlinkClusterAPI.ProtoReflect.Descriptor instead.
func (*DescribeFlinkClusterAPI) Descriptor() ([]byte, []int) {
	return file_proto_types_response_cluster_manage_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeFlinkClusterAPI) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *DescribeFlinkClusterAPI) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ListAvailableFlinkVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items store the available flink version lists.
	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (x *ListAvailableFlinkVersions) Reset() {
	*x = ListAvailableFlinkVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_response_cluster_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableFlinkVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableFlinkVersions) ProtoMessage() {}

func (x *ListAvailableFlinkVersions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_response_cluster_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableFlinkVersions.ProtoReflect.Descriptor instead.
func (*ListAvailableFlinkVersions) Descriptor() ([]byte, []int) {
	return file_proto_types_response_cluster_manage_proto_rawDescGZIP(), []int{1}
}

func (x *ListAvailableFlinkVersions) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos   []*pbmodel.FlinkCluster `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos"`
	HasMore bool                    `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	Total   int64                   `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
}

func (x *ListFlinkClusters) Reset() {
	*x = ListFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_response_cluster_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlinkClusters) ProtoMessage() {}

func (x *ListFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_response_cluster_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlinkClusters.ProtoReflect.Descriptor instead.
func (*ListFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_types_response_cluster_manage_proto_rawDescGZIP(), []int{2}
}

func (x *ListFlinkClusters) GetInfos() []*pbmodel.FlinkCluster {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *ListFlinkClusters) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ListFlinkClusters) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flink cluster id that generated by system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *CreateFlinkCluster) Reset() {
	*x = CreateFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_response_cluster_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlinkCluster) ProtoMessage() {}

func (x *CreateFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_response_cluster_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlinkCluster.ProtoReflect.Descriptor instead.
func (*CreateFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_types_response_cluster_manage_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFlinkCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DescribeFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *pbmodel.FlinkCluster `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DescribeFlinkCluster) Reset() {
	*x = DescribeFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_response_cluster_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlinkCluster) ProtoMessage() {}

func (x *DescribeFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_response_cluster_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlinkCluster.ProtoReflect.Descriptor instead.
func (*DescribeFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_types_response_cluster_manage_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeFlinkCluster) GetInfo() *pbmodel.FlinkCluster {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_proto_types_response_cluster_manage_proto protoreflect.FileDescriptor

var file_proto_types_response_cluster_manage_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50,
	0x49, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c,
	0x69, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x6f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x78, 0x0a, 0x25, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x17, 0x50, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x00, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78,
	0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_response_cluster_manage_proto_rawDescOnce sync.Once
	file_proto_types_response_cluster_manage_proto_rawDescData = file_proto_types_response_cluster_manage_proto_rawDesc
)

func file_proto_types_response_cluster_manage_proto_rawDescGZIP() []byte {
	file_proto_types_response_cluster_manage_proto_rawDescOnce.Do(func() {
		file_proto_types_response_cluster_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_response_cluster_manage_proto_rawDescData)
	})
	return file_proto_types_response_cluster_manage_proto_rawDescData
}

var file_proto_types_response_cluster_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_types_response_cluster_manage_proto_goTypes = []interface{}{
	(*DescribeFlinkClusterAPI)(nil),    // 0: response.DescribeFlinkClusterAPI
	(*ListAvailableFlinkVersions)(nil), // 1: response.ListAvailableFlinkVersions
	(*ListFlinkClusters)(nil),          // 2: response.ListFlinkClusters
	(*CreateFlinkCluster)(nil),         // 3: response.CreateFlinkCluster
	(*DescribeFlinkCluster)(nil),       // 4: response.DescribeFlinkCluster
	(*pbmodel.FlinkCluster)(nil),       // 5: model.FlinkCluster
}
var file_proto_types_response_cluster_manage_proto_depIdxs = []int32{
	5, // 0: response.ListFlinkClusters.infos:type_name -> model.FlinkCluster
	5, // 1: response.DescribeFlinkCluster.info:type_name -> model.FlinkCluster
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_types_response_cluster_manage_proto_init() }
func file_proto_types_response_cluster_manage_proto_init() {
	if File_proto_types_response_cluster_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_response_cluster_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlinkClusterAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_response_cluster_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableFlinkVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_response_cluster_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_response_cluster_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_response_cluster_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_response_cluster_manage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_response_cluster_manage_proto_goTypes,
		DependencyIndexes: file_proto_types_response_cluster_manage_proto_depIdxs,
		MessageInfos:      file_proto_types_response_cluster_manage_proto_msgTypes,
	}.Build()
	File_proto_types_response_cluster_manage_proto = out.File
	file_proto_types_response_cluster_manage_proto_rawDesc = nil
	file_proto_types_response_cluster_manage_proto_goTypes = nil
	file_proto_types_response_cluster_manage_proto_depIdxs = nil
}
