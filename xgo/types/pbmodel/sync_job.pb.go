// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/sync_job.proto

package pbmodel

import (
	pbsyncjob "github.com/DataWorkbench/gproto/xgo/types/pbmodel/pbsyncjob"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncJob_Type int32

const (
	SyncJob_OfflineFull       SyncJob_Type = 0
	SyncJob_OfflineIncrement  SyncJob_Type = 1
	SyncJob_RealTimeFull      SyncJob_Type = 2
	SyncJob_RealTimeIncrement SyncJob_Type = 3
)

// Enum value maps for SyncJob_Type.
var (
	SyncJob_Type_name = map[int32]string{
		0: "OfflineFull",
		1: "OfflineIncrement",
		2: "RealTimeFull",
		3: "RealTimeIncrement",
	}
	SyncJob_Type_value = map[string]int32{
		"OfflineFull":       0,
		"OfflineIncrement":  1,
		"RealTimeFull":      2,
		"RealTimeIncrement": 3,
	}
)

func (x SyncJob_Type) Enum() *SyncJob_Type {
	p := new(SyncJob_Type)
	*p = x
	return p
}

func (x SyncJob_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[0].Descriptor()
}

func (SyncJob_Type) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[0]
}

func (x SyncJob_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Type.Descriptor instead.
func (SyncJob_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0, 0}
}

type SyncJob_Resource int32

const (
	SyncJob_ResourceUnset SyncJob_Resource = 0
	SyncJob_MySQL         SyncJob_Resource = 1
	SyncJob_PostgreSQL    SyncJob_Resource = 2
	SyncJob_Kafka         SyncJob_Resource = 3
	SyncJob_S3            SyncJob_Resource = 4
	SyncJob_ClickHouse    SyncJob_Resource = 5
	SyncJob_HBase         SyncJob_Resource = 6
	SyncJob_Ftp           SyncJob_Resource = 7
	SyncJob_HDFS          SyncJob_Resource = 8
	SyncJob_SqlServer     SyncJob_Resource = 9
	SyncJob_Oracle        SyncJob_Resource = 10
	SyncJob_DB2           SyncJob_Resource = 11
	SyncJob_SapHana       SyncJob_Resource = 12
	SyncJob_Hive          SyncJob_Resource = 13
	SyncJob_ElasticSearch SyncJob_Resource = 14
	SyncJob_MongoDb       SyncJob_Resource = 15
	SyncJob_Redis         SyncJob_Resource = 16
)

// Enum value maps for SyncJob_Resource.
var (
	SyncJob_Resource_name = map[int32]string{
		0:  "ResourceUnset",
		1:  "MySQL",
		2:  "PostgreSQL",
		3:  "Kafka",
		4:  "S3",
		5:  "ClickHouse",
		6:  "HBase",
		7:  "Ftp",
		8:  "HDFS",
		9:  "SqlServer",
		10: "Oracle",
		11: "DB2",
		12: "SapHana",
		13: "Hive",
		14: "ElasticSearch",
		15: "MongoDb",
		16: "Redis",
	}
	SyncJob_Resource_value = map[string]int32{
		"ResourceUnset": 0,
		"MySQL":         1,
		"PostgreSQL":    2,
		"Kafka":         3,
		"S3":            4,
		"ClickHouse":    5,
		"HBase":         6,
		"Ftp":           7,
		"HDFS":          8,
		"SqlServer":     9,
		"Oracle":        10,
		"DB2":           11,
		"SapHana":       12,
		"Hive":          13,
		"ElasticSearch": 14,
		"MongoDb":       15,
		"Redis":         16,
	}
)

func (x SyncJob_Resource) Enum() *SyncJob_Resource {
	p := new(SyncJob_Resource)
	*p = x
	return p
}

func (x SyncJob_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[1].Descriptor()
}

func (SyncJob_Resource) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[1]
}

func (x SyncJob_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Resource.Descriptor instead.
func (SyncJob_Resource) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0, 1}
}

type SyncJob_Status int32

const (
	SyncJob_StatusUnset SyncJob_Status = 0
	SyncJob_Deleted     SyncJob_Status = 1
	SyncJob_Enabled     SyncJob_Status = 2
)

// Enum value maps for SyncJob_Status.
var (
	SyncJob_Status_name = map[int32]string{
		0: "StatusUnset",
		1: "Deleted",
		2: "Enabled",
	}
	SyncJob_Status_value = map[string]int32{
		"StatusUnset": 0,
		"Deleted":     1,
		"Enabled":     2,
	}
)

func (x SyncJob_Status) Enum() *SyncJob_Status {
	p := new(SyncJob_Status)
	*p = x
	return p
}

func (x SyncJob_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[2].Descriptor()
}

func (SyncJob_Status) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[2]
}

func (x SyncJob_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Status.Descriptor instead.
func (SyncJob_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0, 2}
}

type SyncJobConf_JobMode int32

const (
	SyncJobConf_GuideMode  SyncJobConf_JobMode = 0
	SyncJobConf_ScriptMode SyncJobConf_JobMode = 1
)

// Enum value maps for SyncJobConf_JobMode.
var (
	SyncJobConf_JobMode_name = map[int32]string{
		0: "GuideMode",
		1: "ScriptMode",
	}
	SyncJobConf_JobMode_value = map[string]int32{
		"GuideMode":  0,
		"ScriptMode": 1,
	}
)

func (x SyncJobConf_JobMode) Enum() *SyncJobConf_JobMode {
	p := new(SyncJobConf_JobMode)
	*p = x
	return p
}

func (x SyncJobConf_JobMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobConf_JobMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[3].Descriptor()
}

func (SyncJobConf_JobMode) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[3]
}

func (x SyncJobConf_JobMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobConf_JobMode.Descriptor instead.
func (SyncJobConf_JobMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{2, 0}
}

type SyncJobSchedule_SchedulePolicy int32

const (
	SyncJobSchedule_SchedulePolicyUnset SyncJobSchedule_SchedulePolicy = 0
	SyncJobSchedule_Periodicity         SyncJobSchedule_SchedulePolicy = 1
	SyncJobSchedule_AppointTime         SyncJobSchedule_SchedulePolicy = 2 // Execute job in a fixed time.
	SyncJobSchedule_Immediately         SyncJobSchedule_SchedulePolicy = 3 // Execute job immediately after publishing.
)

// Enum value maps for SyncJobSchedule_SchedulePolicy.
var (
	SyncJobSchedule_SchedulePolicy_name = map[int32]string{
		0: "SchedulePolicyUnset",
		1: "Periodicity",
		2: "AppointTime",
		3: "Immediately",
	}
	SyncJobSchedule_SchedulePolicy_value = map[string]int32{
		"SchedulePolicyUnset": 0,
		"Periodicity":         1,
		"AppointTime":         2,
		"Immediately":         3,
	}
)

func (x SyncJobSchedule_SchedulePolicy) Enum() *SyncJobSchedule_SchedulePolicy {
	p := new(SyncJobSchedule_SchedulePolicy)
	*p = x
	return p
}

func (x SyncJobSchedule_SchedulePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobSchedule_SchedulePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[4].Descriptor()
}

func (SyncJobSchedule_SchedulePolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[4]
}

func (x SyncJobSchedule_SchedulePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobSchedule_SchedulePolicy.Descriptor instead.
func (SyncJobSchedule_SchedulePolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3, 0}
}

type SyncJobSchedule_ConcurrencyPolicy int32

const (
	SyncJobSchedule_ConcurrencyPolicyUnset SyncJobSchedule_ConcurrencyPolicy = 0 // Is useless.
	SyncJobSchedule_Allow                  SyncJobSchedule_ConcurrencyPolicy = 1
	SyncJobSchedule_Forbid                 SyncJobSchedule_ConcurrencyPolicy = 2
	SyncJobSchedule_Replace                SyncJobSchedule_ConcurrencyPolicy = 3
)

// Enum value maps for SyncJobSchedule_ConcurrencyPolicy.
var (
	SyncJobSchedule_ConcurrencyPolicy_name = map[int32]string{
		0: "ConcurrencyPolicyUnset",
		1: "Allow",
		2: "Forbid",
		3: "Replace",
	}
	SyncJobSchedule_ConcurrencyPolicy_value = map[string]int32{
		"ConcurrencyPolicyUnset": 0,
		"Allow":                  1,
		"Forbid":                 2,
		"Replace":                3,
	}
)

func (x SyncJobSchedule_ConcurrencyPolicy) Enum() *SyncJobSchedule_ConcurrencyPolicy {
	p := new(SyncJobSchedule_ConcurrencyPolicy)
	*p = x
	return p
}

func (x SyncJobSchedule_ConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobSchedule_ConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[5].Descriptor()
}

func (SyncJobSchedule_ConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[5]
}

func (x SyncJobSchedule_ConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobSchedule_ConcurrencyPolicy.Descriptor instead.
func (SyncJobSchedule_ConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3, 1}
}

type SyncJobSchedule_RetryPolicy int32

const (
	SyncJobSchedule_RetryPolicyUnset SyncJobSchedule_RetryPolicy = 0 // Is useless.
	SyncJobSchedule_None             SyncJobSchedule_RetryPolicy = 1
	SyncJobSchedule_Auto             SyncJobSchedule_RetryPolicy = 2
)

// Enum value maps for SyncJobSchedule_RetryPolicy.
var (
	SyncJobSchedule_RetryPolicy_name = map[int32]string{
		0: "RetryPolicyUnset",
		1: "None",
		2: "Auto",
	}
	SyncJobSchedule_RetryPolicy_value = map[string]int32{
		"RetryPolicyUnset": 0,
		"None":             1,
		"Auto":             2,
	}
)

func (x SyncJobSchedule_RetryPolicy) Enum() *SyncJobSchedule_RetryPolicy {
	p := new(SyncJobSchedule_RetryPolicy)
	*p = x
	return p
}

func (x SyncJobSchedule_RetryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobSchedule_RetryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[6].Descriptor()
}

func (SyncJobSchedule_RetryPolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[6]
}

func (x SyncJobSchedule_RetryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobSchedule_RetryPolicy.Descriptor instead.
func (SyncJobSchedule_RetryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3, 2}
}

type SyncJobRelease_Status int32

const (
	SyncJobRelease_StatusUnset SyncJobRelease_Status = 0
	SyncJobRelease_Active      SyncJobRelease_Status = 1
	SyncJobRelease_Suspended   SyncJobRelease_Status = 2
	SyncJobRelease_Deleted     SyncJobRelease_Status = 3
)

// Enum value maps for SyncJobRelease_Status.
var (
	SyncJobRelease_Status_name = map[int32]string{
		0: "StatusUnset",
		1: "Active",
		2: "Suspended",
		3: "Deleted",
	}
	SyncJobRelease_Status_value = map[string]int32{
		"StatusUnset": 0,
		"Active":      1,
		"Suspended":   2,
		"Deleted":     3,
	}
)

func (x SyncJobRelease_Status) Enum() *SyncJobRelease_Status {
	p := new(SyncJobRelease_Status)
	*p = x
	return p
}

func (x SyncJobRelease_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobRelease_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[7].Descriptor()
}

func (SyncJobRelease_Status) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[7]
}

func (x SyncJobRelease_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobRelease_Status.Descriptor instead.
func (SyncJobRelease_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{4, 0}
}

// The sync job info
type SyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// PID is the parent id(directory). pid is "" means root(`/`)
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid" gorm:"column:pid;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The job version id, only used for Published job.
	// Only used in published job.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job Description.
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// IsDirectory represents this job whether a directory.
	IsDirectory bool `protobuf:"varint,7,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory" gorm:"column:is_directory;"`
	// Job type. 0 => "OfflineFull" 1 => "OfflineIncrement" 2 => "RealTimeFull" 3 => "RealTimeIncrement"
	Type SyncJob_Type `protobuf:"varint,8,opt,name=type,proto3,enum=model.SyncJob_Type" json:"type" gorm:"column:type;"`
	// Job status, 1 => "Deleted", 2 => "Enabled".
	Status SyncJob_Status `protobuf:"varint,9,opt,name=status,proto3,enum=model.SyncJob_Status" json:"status" gorm:"column:status;"`
	// The user-id of created this job.
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by" gorm:"column:created_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,11,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,12,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
	// The sync task source type.
	SourceType SyncJob_Resource `protobuf:"varint,13,opt,name=source_type,json=sourceType,proto3,enum=model.SyncJob_Resource" json:"source_type" gorm:"column:source_type;"`
	// The sync task target type.
	TargetType SyncJob_Resource `protobuf:"varint,14,opt,name=target_type,json=targetType,proto3,enum=model.SyncJob_Resource" json:"target_type" gorm:"column:target_type;"`
}

func (x *SyncJob) Reset() {
	*x = SyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJob) ProtoMessage() {}

func (x *SyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJob.ProtoReflect.Descriptor instead.
func (*SyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0}
}

func (x *SyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SyncJob) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *SyncJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncJob) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SyncJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SyncJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SyncJob) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *SyncJob) GetType() SyncJob_Type {
	if x != nil {
		return x.Type
	}
	return SyncJob_OfflineFull
}

func (x *SyncJob) GetStatus() SyncJob_Status {
	if x != nil {
		return x.Status
	}
	return SyncJob_StatusUnset
}

func (x *SyncJob) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SyncJob) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SyncJob) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *SyncJob) GetSourceType() SyncJob_Resource {
	if x != nil {
		return x.SourceType
	}
	return SyncJob_ResourceUnset
}

func (x *SyncJob) GetTargetType() SyncJob_Resource {
	if x != nil {
		return x.TargetType
	}
	return SyncJob_ResourceUnset
}

// SyncJobProperty represents property of job.
type SyncJobProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job Id, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version  string           `protobuf:"bytes,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey"`
	Conf     *SyncJobConf     `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf" gorm:"column:conf;type:json"`
	Schedule *SyncJobSchedule `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule" gorm:"column:schedule;type:json"`
}

func (x *SyncJobProperty) Reset() {
	*x = SyncJobProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobProperty) ProtoMessage() {}

func (x *SyncJobProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobProperty.ProtoReflect.Descriptor instead.
func (*SyncJobProperty) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{1}
}

func (x *SyncJobProperty) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SyncJobProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncJobProperty) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SyncJobProperty) GetConf() *SyncJobConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *SyncJobProperty) GetSchedule() *SyncJobSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// SyncJobConf represents a job running parameters.
// Not use with gorm.
type SyncJobConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_id is datasource id
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
	// target_id is datasource id
	TargetId string `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// The job name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Parallelism int32 `protobuf:"varint,3,opt,name=parallelism,proto3" json:"name"`
	// Description of the job, Not required, Max length 1024.
	Percentage int32 `protobuf:"varint,4,opt,name=percentage,proto3" json:"desc"`
	// Description of the job, Not required, Max length 1024.
	RecordNum int32 `protobuf:"varint,5,opt,name=record_num,json=recordNum,proto3" json:"record_num"`
	// bytes
	Bytes int32 `protobuf:"varint,6,opt,name=bytes,proto3" json:"bytes"`
	// 0:guide mode,1:shell mode
	JobMode SyncJobConf_JobMode `protobuf:"varint,7,opt,name=job_mode,json=jobMode,proto3,enum=model.SyncJobConf_JobMode" json:"job_mode"`
	// shell mode json
	JobContent string `protobuf:"bytes,8,opt,name=job_content,json=jobContent,proto3" json:"job_content"`
	// Relationaldb source
	RelationaldbSource *pbsyncjob.RelationaldbSource `protobuf:"bytes,9,opt,name=relationaldb_source,json=relationaldbSource,proto3" json:"relationaldb_source"`
	// Relationaldb target
	RelationaldbTarget *pbsyncjob.RelationaldbTarget `protobuf:"bytes,10,opt,name=relationaldb_target,json=relationaldbTarget,proto3" json:"relationaldb_target"`
	// mongodb target
	MongodbSource *pbsyncjob.MongodbSource `protobuf:"bytes,11,opt,name=mongodb_source,json=mongodbSource,proto3" json:"mongodb_source"`
	// mongodb target
	MongodbTarget *pbsyncjob.MongodbTarget `protobuf:"bytes,12,opt,name=mongodb_target,json=mongodbTarget,proto3" json:"mongodb_target"`
	// elasticsearch source
	ElasticSearchSource *pbsyncjob.ElasticSearchSource `protobuf:"bytes,13,opt,name=elastic_search_source,json=elasticSearchSource,proto3" json:"elastic_search_source"`
	// elasticsearch target
	ElasticSearchTarget *pbsyncjob.ElasticSearchTarget `protobuf:"bytes,14,opt,name=elastic_search_target,json=elasticSearchTarget,proto3" json:"elastic_search_target"`
	// hdfs source
	HdfsSource *pbsyncjob.HdfsSource `protobuf:"bytes,15,opt,name=hdfs_source,json=hdfsSource,proto3" json:"hdfs_source"`
	// hdfs source
	HdfsTarget *pbsyncjob.HdfsTarget `protobuf:"bytes,16,opt,name=hdfs_target,json=hdfsTarget,proto3" json:"hdfs_target"`
	// ftp source
	FtpSource *pbsyncjob.FtpSource `protobuf:"bytes,17,opt,name=ftp_source,json=ftpSource,proto3" json:"ftp_source"`
	// ftp target
	FtpTarget *pbsyncjob.FtpTarget `protobuf:"bytes,18,opt,name=ftp_target,json=ftpTarget,proto3" json:"ftp_target"`
	// hbase source
	HbaseSource *pbsyncjob.HbaseSource `protobuf:"bytes,19,opt,name=hbase_source,json=hbaseSource,proto3" json:"hbase_source"`
	// hbase target
	HbaseTarget *pbsyncjob.HbaseTarget `protobuf:"bytes,20,opt,name=hbase_target,json=hbaseTarget,proto3" json:"hbase_target"`
	// kafka target
	KafkaSource *pbsyncjob.KafkaSource `protobuf:"bytes,21,opt,name=kafka_source,json=kafkaSource,proto3" json:"kafka_source"`
	// kafka target
	KafkaTarget *pbsyncjob.KafkaTarget `protobuf:"bytes,22,opt,name=kafka_target,json=kafkaTarget,proto3" json:"kafka_target"`
	// binlog source
	BinlogSource *pbsyncjob.BinlogSource `protobuf:"bytes,23,opt,name=binlog_source,json=binlogSource,proto3" json:"binlog_source"`
	// pgwal source
	PgWalSource *pbsyncjob.PgWalSource `protobuf:"bytes,24,opt,name=pg_wal_source,json=pgWalSource,proto3" json:"pgwal_source"`
	// sqlserver cdc source
	SqlServerCdcSource *pbsyncjob.SqlServerCdcSource `protobuf:"bytes,25,opt,name=sql_server_cdc_source,json=sqlServerCdcSource,proto3" json:"sql_server_cdc_source"`
	// logminer source
	LogMinerSource *pbsyncjob.LogMinerSource `protobuf:"bytes,26,opt,name=log_miner_source,json=logMinerSource,proto3" json:"logminer_source"`
	// redis target
	RedisTarget *pbsyncjob.RedisTarget `protobuf:"bytes,27,opt,name=redis_target,json=redisTarget,proto3" json:"redis_target"`
	// hive target
	HiveTarget *pbsyncjob.HiveTarget `protobuf:"bytes,28,opt,name=hive_target,json=hiveTarget,proto3" json:"hive_target"`
	// The flink cluster id. Is required.
	ClusterId string `protobuf:"bytes,29,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id"`
}

func (x *SyncJobConf) Reset() {
	*x = SyncJobConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobConf) ProtoMessage() {}

func (x *SyncJobConf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobConf.ProtoReflect.Descriptor instead.
func (*SyncJobConf) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{2}
}

func (x *SyncJobConf) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SyncJobConf) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *SyncJobConf) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *SyncJobConf) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *SyncJobConf) GetRecordNum() int32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *SyncJobConf) GetBytes() int32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *SyncJobConf) GetJobMode() SyncJobConf_JobMode {
	if x != nil {
		return x.JobMode
	}
	return SyncJobConf_GuideMode
}

func (x *SyncJobConf) GetJobContent() string {
	if x != nil {
		return x.JobContent
	}
	return ""
}

func (x *SyncJobConf) GetRelationaldbSource() *pbsyncjob.RelationaldbSource {
	if x != nil {
		return x.RelationaldbSource
	}
	return nil
}

func (x *SyncJobConf) GetRelationaldbTarget() *pbsyncjob.RelationaldbTarget {
	if x != nil {
		return x.RelationaldbTarget
	}
	return nil
}

func (x *SyncJobConf) GetMongodbSource() *pbsyncjob.MongodbSource {
	if x != nil {
		return x.MongodbSource
	}
	return nil
}

func (x *SyncJobConf) GetMongodbTarget() *pbsyncjob.MongodbTarget {
	if x != nil {
		return x.MongodbTarget
	}
	return nil
}

func (x *SyncJobConf) GetElasticSearchSource() *pbsyncjob.ElasticSearchSource {
	if x != nil {
		return x.ElasticSearchSource
	}
	return nil
}

func (x *SyncJobConf) GetElasticSearchTarget() *pbsyncjob.ElasticSearchTarget {
	if x != nil {
		return x.ElasticSearchTarget
	}
	return nil
}

func (x *SyncJobConf) GetHdfsSource() *pbsyncjob.HdfsSource {
	if x != nil {
		return x.HdfsSource
	}
	return nil
}

func (x *SyncJobConf) GetHdfsTarget() *pbsyncjob.HdfsTarget {
	if x != nil {
		return x.HdfsTarget
	}
	return nil
}

func (x *SyncJobConf) GetFtpSource() *pbsyncjob.FtpSource {
	if x != nil {
		return x.FtpSource
	}
	return nil
}

func (x *SyncJobConf) GetFtpTarget() *pbsyncjob.FtpTarget {
	if x != nil {
		return x.FtpTarget
	}
	return nil
}

func (x *SyncJobConf) GetHbaseSource() *pbsyncjob.HbaseSource {
	if x != nil {
		return x.HbaseSource
	}
	return nil
}

func (x *SyncJobConf) GetHbaseTarget() *pbsyncjob.HbaseTarget {
	if x != nil {
		return x.HbaseTarget
	}
	return nil
}

func (x *SyncJobConf) GetKafkaSource() *pbsyncjob.KafkaSource {
	if x != nil {
		return x.KafkaSource
	}
	return nil
}

func (x *SyncJobConf) GetKafkaTarget() *pbsyncjob.KafkaTarget {
	if x != nil {
		return x.KafkaTarget
	}
	return nil
}

func (x *SyncJobConf) GetBinlogSource() *pbsyncjob.BinlogSource {
	if x != nil {
		return x.BinlogSource
	}
	return nil
}

func (x *SyncJobConf) GetPgWalSource() *pbsyncjob.PgWalSource {
	if x != nil {
		return x.PgWalSource
	}
	return nil
}

func (x *SyncJobConf) GetSqlServerCdcSource() *pbsyncjob.SqlServerCdcSource {
	if x != nil {
		return x.SqlServerCdcSource
	}
	return nil
}

func (x *SyncJobConf) GetLogMinerSource() *pbsyncjob.LogMinerSource {
	if x != nil {
		return x.LogMinerSource
	}
	return nil
}

func (x *SyncJobConf) GetRedisTarget() *pbsyncjob.RedisTarget {
	if x != nil {
		return x.RedisTarget
	}
	return nil
}

func (x *SyncJobConf) GetHiveTarget() *pbsyncjob.HiveTarget {
	if x != nil {
		return x.HiveTarget
	}
	return nil
}

func (x *SyncJobConf) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// SyncJobSchedule represents a job schedule info.
// Not use with gorm.
type SyncJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Policy, Options Value: 1 => "Periodicity", 2 => "AppointTime", 3 => "Immediately"
	// Is Required.
	SchedulePolicy SyncJobSchedule_SchedulePolicy `protobuf:"varint,1,opt,name=schedule_policy,json=schedulePolicy,proto3,enum=model.SyncJobSchedule_SchedulePolicy" json:"schedule_policy"`
	// Timestamp of execute time for once. unit in seconds.
	// Not required, default the time of created job.
	Executed int64 `protobuf:"varint,2,opt,name=executed,proto3" json:"executed" default:"0" binding:"gte=0"`
	// ------ Period Options ------
	//
	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 31507200(1971-01-01 00:00:00), means no limit.
	Started int64 `protobuf:"varint,4,opt,name=started,proto3" json:"started"`
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
	Ended int64 `protobuf:"varint,5,opt,name=ended,proto3" json:"ended"`
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace". Is required .
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	ConcurrencyPolicy SyncJobSchedule_ConcurrencyPolicy `protobuf:"varint,6,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=model.SyncJobSchedule_ConcurrencyPolicy" json:"concurrency_policy"`
	// Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
	// Is required with with schedule_policy = 1.
	PeriodType string `protobuf:"bytes,7,opt,name=period_type,json=periodType,proto3" json:"period_type"`
	// Crontab Express. Is required with schedule_policy == 1
	Express string `protobuf:"bytes,8,opt,name=express,proto3" json:"express" binding:"-"`
	// ------ Advanced (Retry) options ------
	//
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 100 min.
	Timeout int32 `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout"`
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	RetryPolicy SyncJobSchedule_RetryPolicy `protobuf:"varint,10,opt,name=retry_policy,json=retryPolicy,proto3,enum=model.SyncJobSchedule_RetryPolicy" json:"retry_policy"`
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	RetryLimit int32 `protobuf:"varint,11,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit"`
	// Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
	RetryInterval int32 `protobuf:"varint,12,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval"`
}

func (x *SyncJobSchedule) Reset() {
	*x = SyncJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobSchedule) ProtoMessage() {}

func (x *SyncJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobSchedule.ProtoReflect.Descriptor instead.
func (*SyncJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3}
}

func (x *SyncJobSchedule) GetSchedulePolicy() SyncJobSchedule_SchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return SyncJobSchedule_SchedulePolicyUnset
}

func (x *SyncJobSchedule) GetExecuted() int64 {
	if x != nil {
		return x.Executed
	}
	return 0
}

func (x *SyncJobSchedule) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *SyncJobSchedule) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *SyncJobSchedule) GetConcurrencyPolicy() SyncJobSchedule_ConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return SyncJobSchedule_ConcurrencyPolicyUnset
}

func (x *SyncJobSchedule) GetPeriodType() string {
	if x != nil {
		return x.PeriodType
	}
	return ""
}

func (x *SyncJobSchedule) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

func (x *SyncJobSchedule) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SyncJobSchedule) GetRetryPolicy() SyncJobSchedule_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return SyncJobSchedule_RetryPolicyUnset
}

func (x *SyncJobSchedule) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *SyncJobSchedule) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

// The release sync job info.
type SyncJobRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job type. 0 => "OfflineFull" 1 => "OfflineIncrement" 2 => "RealTimeFull" 3 => "RealTimeIncrement"
	Type SyncJob_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.SyncJob_Type" json:"type" gorm:"column:type;"`
	// Release status, 1 => "Active", 2 => "Suspended", 3 => "Deleted",
	Status SyncJobRelease_Status `protobuf:"varint,6,opt,name=status,proto3,enum=model.SyncJobRelease_Status" json:"status" gorm:"column:status;"`
	// Job release description.
	Desc string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// The user-id of release this job.
	CreatedBy string `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by" gorm:"column:created_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,9,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,10,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *SyncJobRelease) Reset() {
	*x = SyncJobRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobRelease) ProtoMessage() {}

func (x *SyncJobRelease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobRelease.ProtoReflect.Descriptor instead.
func (*SyncJobRelease) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{4}
}

func (x *SyncJobRelease) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SyncJobRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncJobRelease) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SyncJobRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SyncJobRelease) GetType() SyncJob_Type {
	if x != nil {
		return x.Type
	}
	return SyncJob_OfflineFull
}

func (x *SyncJobRelease) GetStatus() SyncJobRelease_Status {
	if x != nil {
		return x.Status
	}
	return SyncJobRelease_StatusUnset
}

func (x *SyncJobRelease) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SyncJobRelease) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SyncJobRelease) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SyncJobRelease) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

var File_proto_types_model_sync_job_proto protoreflect.FileDescriptor

var file_proto_types_model_sync_job_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x62,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73,
	0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79,
	0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x66, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f,
	0x62, 0x2f, 0x68, 0x64, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e,
	0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x6c, 0x6f, 0x67, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x70, 0x67, 0x77, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79,
	0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63,
	0x6a, 0x6f, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x63, 0x64, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x08, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4a,
	0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0,
	0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0xe2, 0xdf, 0x1f, 0x0e, 0x0a, 0x0c, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x12, 0x05, 0xc2, 0x01,
	0x02, 0x22, 0x00, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca,
	0x02, 0x04, 0x73, 0x79, 0x6a, 0x2d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2,
	0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x79, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01,
	0x07, 0x80, 0x02, 0x01, 0x98, 0x02, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0xc8, 0x01, 0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a,
	0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x05, 0xd2,
	0x01, 0x02, 0x18, 0x00, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x40, 0x00, 0x58,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x40, 0x00, 0x58, 0x01, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda,
	0x01, 0x04, 0x40, 0x00, 0x58, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c,
	0x6c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x22, 0xdf, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x79,
	0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x42, 0x61, 0x73,
	0x65, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x74, 0x70, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x44, 0x46, 0x53, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x10,
	0x0a, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x42, 0x32, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x61,
	0x70, 0x48, 0x61, 0x6e, 0x61, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x69, 0x76, 0x65, 0x10,
	0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x10,
	0x0f, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x10, 0x10, 0x22, 0x33, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x22, 0xf6, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2,
	0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca,
	0x02, 0x04, 0x73, 0x79, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66,
	0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a,
	0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xef, 0x0d, 0x0a, 0x0b, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x6f,
	0x6d, 0x2d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x15, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0xe2, 0xdf, 0x1f,
	0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x15, 0xa2, 0xa1, 0x1f,
	0x04, 0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x64,
	0x40, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x15, 0xa2, 0xa1, 0x1f,
	0x04, 0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x38, 0x01,
	0x40, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6a,
	0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x13, 0x0a, 0x11, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x80, 0x02, 0x14, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64,
	0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x13,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x64, 0x66, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x48, 0x64, 0x66, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x68, 0x64, 0x66,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x64, 0x66, 0x73, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x64, 0x66, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x0a, 0x68, 0x64, 0x66, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x66,
	0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x66, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0a,
	0x66, 0x74, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x74, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x35, 0x0a,
	0x0c, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x68, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x67, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x50, 0x67, 0x57, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x70, 0x67, 0x57, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x73,
	0x71, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x64, 0x63, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x64, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0a, 0x68, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x07, 0x4a, 0x6f,
	0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x01, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xb1, 0x08, 0x0a,
	0x0f, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x5d, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x48, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18,
	0x02, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x40, 0x80, 0x86, 0x83, 0x0f, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6e, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4d, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x01,
	0xe2, 0xdf, 0x1f, 0x2b, 0x12, 0x29, 0xc2, 0x01, 0x26, 0x4a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x4a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x4a, 0x03, 0x64, 0x61, 0x79, 0x4a, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x4a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe2, 0xdf,
	0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x05, 0x01, 0x52, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x64, 0x40,
	0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30,
	0x00, 0x58, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02,
	0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x64, 0x40, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x1e, 0x40, 0x01, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x5c, 0x0a, 0x0e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x10, 0x03, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x22,
	0x37, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73,
	0x65, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x02, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00,
	0x22, 0xf3, 0x03, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a,
	0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x73, 0x79, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x02, 0x98, 0x02, 0x80, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xda, 0x01, 0x04, 0x40, 0x00, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x30, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x42, 0x6e, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x13, 0x50, 0x42,
	0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f,
	0x62, 0x50, 0x00, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70,
	0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_sync_job_proto_rawDescOnce sync.Once
	file_proto_types_model_sync_job_proto_rawDescData = file_proto_types_model_sync_job_proto_rawDesc
)

func file_proto_types_model_sync_job_proto_rawDescGZIP() []byte {
	file_proto_types_model_sync_job_proto_rawDescOnce.Do(func() {
		file_proto_types_model_sync_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_sync_job_proto_rawDescData)
	})
	return file_proto_types_model_sync_job_proto_rawDescData
}

var file_proto_types_model_sync_job_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_proto_types_model_sync_job_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_types_model_sync_job_proto_goTypes = []interface{}{
	(SyncJob_Type)(0),                      // 0: model.SyncJob.Type
	(SyncJob_Resource)(0),                  // 1: model.SyncJob.Resource
	(SyncJob_Status)(0),                    // 2: model.SyncJob.Status
	(SyncJobConf_JobMode)(0),               // 3: model.SyncJobConf.JobMode
	(SyncJobSchedule_SchedulePolicy)(0),    // 4: model.SyncJobSchedule.SchedulePolicy
	(SyncJobSchedule_ConcurrencyPolicy)(0), // 5: model.SyncJobSchedule.ConcurrencyPolicy
	(SyncJobSchedule_RetryPolicy)(0),       // 6: model.SyncJobSchedule.RetryPolicy
	(SyncJobRelease_Status)(0),             // 7: model.SyncJobRelease.Status
	(*SyncJob)(nil),                        // 8: model.SyncJob
	(*SyncJobProperty)(nil),                // 9: model.SyncJobProperty
	(*SyncJobConf)(nil),                    // 10: model.SyncJobConf
	(*SyncJobSchedule)(nil),                // 11: model.SyncJobSchedule
	(*SyncJobRelease)(nil),                 // 12: model.SyncJobRelease
	(*pbsyncjob.RelationaldbSource)(nil),   // 13: model.RelationaldbSource
	(*pbsyncjob.RelationaldbTarget)(nil),   // 14: model.RelationaldbTarget
	(*pbsyncjob.MongodbSource)(nil),        // 15: model.MongodbSource
	(*pbsyncjob.MongodbTarget)(nil),        // 16: model.MongodbTarget
	(*pbsyncjob.ElasticSearchSource)(nil),  // 17: model.ElasticSearchSource
	(*pbsyncjob.ElasticSearchTarget)(nil),  // 18: model.ElasticSearchTarget
	(*pbsyncjob.HdfsSource)(nil),           // 19: model.HdfsSource
	(*pbsyncjob.HdfsTarget)(nil),           // 20: model.HdfsTarget
	(*pbsyncjob.FtpSource)(nil),            // 21: model.FtpSource
	(*pbsyncjob.FtpTarget)(nil),            // 22: model.FtpTarget
	(*pbsyncjob.HbaseSource)(nil),          // 23: model.HbaseSource
	(*pbsyncjob.HbaseTarget)(nil),          // 24: model.HbaseTarget
	(*pbsyncjob.KafkaSource)(nil),          // 25: model.KafkaSource
	(*pbsyncjob.KafkaTarget)(nil),          // 26: model.KafkaTarget
	(*pbsyncjob.BinlogSource)(nil),         // 27: model.BinlogSource
	(*pbsyncjob.PgWalSource)(nil),          // 28: model.PgWalSource
	(*pbsyncjob.SqlServerCdcSource)(nil),   // 29: model.SqlServerCdcSource
	(*pbsyncjob.LogMinerSource)(nil),       // 30: model.LogMinerSource
	(*pbsyncjob.RedisTarget)(nil),          // 31: model.RedisTarget
	(*pbsyncjob.HiveTarget)(nil),           // 32: model.HiveTarget
}
var file_proto_types_model_sync_job_proto_depIdxs = []int32{
	0,  // 0: model.SyncJob.type:type_name -> model.SyncJob.Type
	2,  // 1: model.SyncJob.status:type_name -> model.SyncJob.Status
	1,  // 2: model.SyncJob.source_type:type_name -> model.SyncJob.Resource
	1,  // 3: model.SyncJob.target_type:type_name -> model.SyncJob.Resource
	10, // 4: model.SyncJobProperty.conf:type_name -> model.SyncJobConf
	11, // 5: model.SyncJobProperty.schedule:type_name -> model.SyncJobSchedule
	3,  // 6: model.SyncJobConf.job_mode:type_name -> model.SyncJobConf.JobMode
	13, // 7: model.SyncJobConf.relationaldb_source:type_name -> model.RelationaldbSource
	14, // 8: model.SyncJobConf.relationaldb_target:type_name -> model.RelationaldbTarget
	15, // 9: model.SyncJobConf.mongodb_source:type_name -> model.MongodbSource
	16, // 10: model.SyncJobConf.mongodb_target:type_name -> model.MongodbTarget
	17, // 11: model.SyncJobConf.elastic_search_source:type_name -> model.ElasticSearchSource
	18, // 12: model.SyncJobConf.elastic_search_target:type_name -> model.ElasticSearchTarget
	19, // 13: model.SyncJobConf.hdfs_source:type_name -> model.HdfsSource
	20, // 14: model.SyncJobConf.hdfs_target:type_name -> model.HdfsTarget
	21, // 15: model.SyncJobConf.ftp_source:type_name -> model.FtpSource
	22, // 16: model.SyncJobConf.ftp_target:type_name -> model.FtpTarget
	23, // 17: model.SyncJobConf.hbase_source:type_name -> model.HbaseSource
	24, // 18: model.SyncJobConf.hbase_target:type_name -> model.HbaseTarget
	25, // 19: model.SyncJobConf.kafka_source:type_name -> model.KafkaSource
	26, // 20: model.SyncJobConf.kafka_target:type_name -> model.KafkaTarget
	27, // 21: model.SyncJobConf.binlog_source:type_name -> model.BinlogSource
	28, // 22: model.SyncJobConf.pg_wal_source:type_name -> model.PgWalSource
	29, // 23: model.SyncJobConf.sql_server_cdc_source:type_name -> model.SqlServerCdcSource
	30, // 24: model.SyncJobConf.log_miner_source:type_name -> model.LogMinerSource
	31, // 25: model.SyncJobConf.redis_target:type_name -> model.RedisTarget
	32, // 26: model.SyncJobConf.hive_target:type_name -> model.HiveTarget
	4,  // 27: model.SyncJobSchedule.schedule_policy:type_name -> model.SyncJobSchedule.SchedulePolicy
	5,  // 28: model.SyncJobSchedule.concurrency_policy:type_name -> model.SyncJobSchedule.ConcurrencyPolicy
	6,  // 29: model.SyncJobSchedule.retry_policy:type_name -> model.SyncJobSchedule.RetryPolicy
	0,  // 30: model.SyncJobRelease.type:type_name -> model.SyncJob.Type
	7,  // 31: model.SyncJobRelease.status:type_name -> model.SyncJobRelease.Status
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_proto_types_model_sync_job_proto_init() }
func file_proto_types_model_sync_job_proto_init() {
	if File_proto_types_model_sync_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_sync_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_sync_job_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_sync_job_proto_goTypes,
		DependencyIndexes: file_proto_types_model_sync_job_proto_depIdxs,
		EnumInfos:         file_proto_types_model_sync_job_proto_enumTypes,
		MessageInfos:      file_proto_types_model_sync_job_proto_msgTypes,
	}.Build()
	File_proto_types_model_sync_job_proto = out.File
	file_proto_types_model_sync_job_proto_rawDesc = nil
	file_proto_types_model_sync_job_proto_goTypes = nil
	file_proto_types_model_sync_job_proto_depIdxs = nil
}
