// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/sync_job.proto

package pbmodel

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncJob_Type int32

const (
	SyncJob_OfflineFull       SyncJob_Type = 0
	SyncJob_OfflineIncrement  SyncJob_Type = 1
	SyncJob_RealTimeFull      SyncJob_Type = 2
	SyncJob_RealTimeIncrement SyncJob_Type = 3
)

// Enum value maps for SyncJob_Type.
var (
	SyncJob_Type_name = map[int32]string{
		0: "OfflineFull",
		1: "OfflineIncrement",
		2: "RealTimeFull",
		3: "RealTimeIncrement",
	}
	SyncJob_Type_value = map[string]int32{
		"OfflineFull":       0,
		"OfflineIncrement":  1,
		"RealTimeFull":      2,
		"RealTimeIncrement": 3,
	}
)

func (x SyncJob_Type) Enum() *SyncJob_Type {
	p := new(SyncJob_Type)
	*p = x
	return p
}

func (x SyncJob_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[0].Descriptor()
}

func (SyncJob_Type) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[0]
}

func (x SyncJob_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Type.Descriptor instead.
func (SyncJob_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0, 0}
}

type SyncJob_Status int32

const (
	SyncJob_StatusUnset SyncJob_Status = 0
	SyncJob_Deleted     SyncJob_Status = 1
	SyncJob_Enabled     SyncJob_Status = 2
)

// Enum value maps for SyncJob_Status.
var (
	SyncJob_Status_name = map[int32]string{
		0: "StatusUnset",
		1: "Deleted",
		2: "Enabled",
	}
	SyncJob_Status_value = map[string]int32{
		"StatusUnset": 0,
		"Deleted":     1,
		"Enabled":     2,
	}
)

func (x SyncJob_Status) Enum() *SyncJob_Status {
	p := new(SyncJob_Status)
	*p = x
	return p
}

func (x SyncJob_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[1].Descriptor()
}

func (SyncJob_Status) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[1]
}

func (x SyncJob_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Status.Descriptor instead.
func (SyncJob_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0, 1}
}

type SyncJobSchedule_SchedulePolicy int32

const (
	SyncJobSchedule_SchedulePolicyUnset SyncJobSchedule_SchedulePolicy = 0
	SyncJobSchedule_Periodicity         SyncJobSchedule_SchedulePolicy = 1
	SyncJobSchedule_AppointTime         SyncJobSchedule_SchedulePolicy = 2 // Execute job in a fixed time.
	SyncJobSchedule_Immediately         SyncJobSchedule_SchedulePolicy = 3 // Execute job immediately after publishing.
)

// Enum value maps for SyncJobSchedule_SchedulePolicy.
var (
	SyncJobSchedule_SchedulePolicy_name = map[int32]string{
		0: "SchedulePolicyUnset",
		1: "Periodicity",
		2: "AppointTime",
		3: "Immediately",
	}
	SyncJobSchedule_SchedulePolicy_value = map[string]int32{
		"SchedulePolicyUnset": 0,
		"Periodicity":         1,
		"AppointTime":         2,
		"Immediately":         3,
	}
)

func (x SyncJobSchedule_SchedulePolicy) Enum() *SyncJobSchedule_SchedulePolicy {
	p := new(SyncJobSchedule_SchedulePolicy)
	*p = x
	return p
}

func (x SyncJobSchedule_SchedulePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobSchedule_SchedulePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[2].Descriptor()
}

func (SyncJobSchedule_SchedulePolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[2]
}

func (x SyncJobSchedule_SchedulePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobSchedule_SchedulePolicy.Descriptor instead.
func (SyncJobSchedule_SchedulePolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3, 0}
}

type SyncJobSchedule_ConcurrencyPolicy int32

const (
	SyncJobSchedule_ConcurrencyPolicyUnset SyncJobSchedule_ConcurrencyPolicy = 0 // Is useless.
	SyncJobSchedule_Allow                  SyncJobSchedule_ConcurrencyPolicy = 1
	SyncJobSchedule_Forbid                 SyncJobSchedule_ConcurrencyPolicy = 2
	SyncJobSchedule_Replace                SyncJobSchedule_ConcurrencyPolicy = 3
)

// Enum value maps for SyncJobSchedule_ConcurrencyPolicy.
var (
	SyncJobSchedule_ConcurrencyPolicy_name = map[int32]string{
		0: "ConcurrencyPolicyUnset",
		1: "Allow",
		2: "Forbid",
		3: "Replace",
	}
	SyncJobSchedule_ConcurrencyPolicy_value = map[string]int32{
		"ConcurrencyPolicyUnset": 0,
		"Allow":                  1,
		"Forbid":                 2,
		"Replace":                3,
	}
)

func (x SyncJobSchedule_ConcurrencyPolicy) Enum() *SyncJobSchedule_ConcurrencyPolicy {
	p := new(SyncJobSchedule_ConcurrencyPolicy)
	*p = x
	return p
}

func (x SyncJobSchedule_ConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobSchedule_ConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[3].Descriptor()
}

func (SyncJobSchedule_ConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[3]
}

func (x SyncJobSchedule_ConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobSchedule_ConcurrencyPolicy.Descriptor instead.
func (SyncJobSchedule_ConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3, 1}
}

type SyncJobSchedule_RetryPolicy int32

const (
	SyncJobSchedule_RetryPolicyUnset SyncJobSchedule_RetryPolicy = 0 // Is useless.
	SyncJobSchedule_None             SyncJobSchedule_RetryPolicy = 1
	SyncJobSchedule_Auto             SyncJobSchedule_RetryPolicy = 2
)

// Enum value maps for SyncJobSchedule_RetryPolicy.
var (
	SyncJobSchedule_RetryPolicy_name = map[int32]string{
		0: "RetryPolicyUnset",
		1: "None",
		2: "Auto",
	}
	SyncJobSchedule_RetryPolicy_value = map[string]int32{
		"RetryPolicyUnset": 0,
		"None":             1,
		"Auto":             2,
	}
)

func (x SyncJobSchedule_RetryPolicy) Enum() *SyncJobSchedule_RetryPolicy {
	p := new(SyncJobSchedule_RetryPolicy)
	*p = x
	return p
}

func (x SyncJobSchedule_RetryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobSchedule_RetryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[4].Descriptor()
}

func (SyncJobSchedule_RetryPolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[4]
}

func (x SyncJobSchedule_RetryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobSchedule_RetryPolicy.Descriptor instead.
func (SyncJobSchedule_RetryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3, 2}
}

type SyncJobRelease_Status int32

const (
	SyncJobRelease_StatusUnset SyncJobRelease_Status = 0
	SyncJobRelease_Active      SyncJobRelease_Status = 1
	SyncJobRelease_Suspended   SyncJobRelease_Status = 2
	SyncJobRelease_Deleted     SyncJobRelease_Status = 3
)

// Enum value maps for SyncJobRelease_Status.
var (
	SyncJobRelease_Status_name = map[int32]string{
		0: "StatusUnset",
		1: "Active",
		2: "Suspended",
		3: "Deleted",
	}
	SyncJobRelease_Status_value = map[string]int32{
		"StatusUnset": 0,
		"Active":      1,
		"Suspended":   2,
		"Deleted":     3,
	}
)

func (x SyncJobRelease_Status) Enum() *SyncJobRelease_Status {
	p := new(SyncJobRelease_Status)
	*p = x
	return p
}

func (x SyncJobRelease_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJobRelease_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_sync_job_proto_enumTypes[5].Descriptor()
}

func (SyncJobRelease_Status) Type() protoreflect.EnumType {
	return &file_proto_types_model_sync_job_proto_enumTypes[5]
}

func (x SyncJobRelease_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJobRelease_Status.Descriptor instead.
func (SyncJobRelease_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{4, 0}
}

// The stream job info
type SyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// PID is the parent id(directory). pid is "" means root(`/`)
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid" gorm:"column:pid;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The job version id, only used for Published job.
	// Only used in published job.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job Description.
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// IsDirectory represents this job whether a directory.
	IsDirectory bool `protobuf:"varint,7,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory" gorm:"column:is_directory;"`
	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type SyncJob_Type `protobuf:"varint,8,opt,name=type,proto3,enum=model.SyncJob_Type" json:"type" gorm:"column:type;"`
	// Job status, 1 => "Deleted", 2 => "Enabled".
	Status SyncJob_Status `protobuf:"varint,9,opt,name=status,proto3,enum=model.SyncJob_Status" json:"status" gorm:"column:status;"`
	// The user-id of created this job.
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by" gorm:"column:created_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,11,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,12,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *SyncJob) Reset() {
	*x = SyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJob) ProtoMessage() {}

func (x *SyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJob.ProtoReflect.Descriptor instead.
func (*SyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{0}
}

func (x *SyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SyncJob) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *SyncJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncJob) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SyncJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SyncJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SyncJob) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *SyncJob) GetType() SyncJob_Type {
	if x != nil {
		return x.Type
	}
	return SyncJob_OfflineFull
}

func (x *SyncJob) GetStatus() SyncJob_Status {
	if x != nil {
		return x.Status
	}
	return SyncJob_StatusUnset
}

func (x *SyncJob) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SyncJob) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SyncJob) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// SyncJobProperty represents property of job.
type SyncJobProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job Id, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version  string           `protobuf:"bytes,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey"`
	Args     *SyncJobArgs     `protobuf:"bytes,4,opt,name=args,proto3" json:"args" gorm:"column:args;type:json"`
	Schedule *SyncJobSchedule `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule" gorm:"column:schedule;type:json"`
}

func (x *SyncJobProperty) Reset() {
	*x = SyncJobProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobProperty) ProtoMessage() {}

func (x *SyncJobProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobProperty.ProtoReflect.Descriptor instead.
func (*SyncJobProperty) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{1}
}

func (x *SyncJobProperty) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SyncJobProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncJobProperty) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SyncJobProperty) GetArgs() *SyncJobArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SyncJobProperty) GetSchedule() *SyncJobSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// SyncJobArgs represents a job running parameters.
// Not use with gorm.
type SyncJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_id is datasource id
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
	// target_id is datasource id
	TargetId string `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// The job name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Parallelism int32 `protobuf:"varint,3,opt,name=parallelism,proto3" json:"name"`
	// Description of the job, Not required, Max length 1024.
	Percentage int32 `protobuf:"varint,4,opt,name=percentage,proto3" json:"desc"`
	// Description of the job, Not required, Max length 1024.
	RecordNum int32 `protobuf:"varint,5,opt,name=record_num,json=recordNum,proto3" json:"record_num"`
	// bytes
	Bytes int32 `protobuf:"varint,6,opt,name=bytes,proto3" json:"bytes"`
	// 0:guide mode,1:shell mode
	JobMode int32 `protobuf:"varint,7,opt,name=job_mode,json=jobMode,proto3" json:"job_mode"`
	// shell mode json
	JobContent string `protobuf:"bytes,8,opt,name=job_content,json=jobContent,proto3" json:"job_content"`
	// Relationaldb source
	RelationaldbSource *RelationaldbSource `protobuf:"bytes,9,opt,name=relationaldb_source,json=relationaldbSource,proto3" json:"relationaldb_source"`
	// Relationaldb target
	RelationaldbTarget *RelationaldbTarget `protobuf:"bytes,10,opt,name=relationaldb_target,json=relationaldbTarget,proto3" json:"relationaldb_target"`
	// mongodb target
	MongodbSource *MongodbSource `protobuf:"bytes,11,opt,name=mongodb_source,json=mongodbSource,proto3" json:"mongodb_source"`
	// mongodb target
	MongodbTarget *MongodbTarget `protobuf:"bytes,12,opt,name=mongodb_target,json=mongodbTarget,proto3" json:"mongodb_target"`
	// elasticsearch source
	ElasticsearchSource *ElasticSearchSource `protobuf:"bytes,13,opt,name=elasticsearch_source,json=elasticsearchSource,proto3" json:"elasticsearch_source"`
	// elasticsearch target
	ElasticsearchTarget *ElasticSearchTarget `protobuf:"bytes,14,opt,name=elasticsearch_target,json=elasticsearchTarget,proto3" json:"elasticsearch_target"`
	// hdfs source
	HdfsSource *HdfsSource `protobuf:"bytes,15,opt,name=hdfs_source,json=hdfsSource,proto3" json:"hdfs_source"`
	// hdfs source
	HdfsTarget *HdfsTarget `protobuf:"bytes,16,opt,name=hdfs_target,json=hdfsTarget,proto3" json:"hdfs_target"`
	// ftp source
	FtpSource *FtpSource `protobuf:"bytes,17,opt,name=ftp_source,json=ftpSource,proto3" json:"ftp_source"`
	// ftp target
	FtpTarget *FtpTarget `protobuf:"bytes,18,opt,name=ftp_target,json=ftpTarget,proto3" json:"ftp_target"`
	// hbase source
	HbaseSource *HbaseSource `protobuf:"bytes,19,opt,name=hbase_source,json=hbaseSource,proto3" json:"hbase_source"`
	// hbase target
	HbaseTarget *HbaseTarget `protobuf:"bytes,20,opt,name=hbase_target,json=hbaseTarget,proto3" json:"hbase_target"`
	// kafka target
	KafkaSource *KafkaSource `protobuf:"bytes,21,opt,name=kafka_source,json=kafkaSource,proto3" json:"kafka_source"`
	// kafka target
	KafkaTarget *KafkaTarget `protobuf:"bytes,22,opt,name=kafka_target,json=kafkaTarget,proto3" json:"kafka_target"`
	// binlog source
	BinlogSource *BinlogSource `protobuf:"bytes,23,opt,name=binlog_source,json=binlogSource,proto3" json:"binlog_source"`
	// pgwal source
	PgwalSource *PgwalSource `protobuf:"bytes,24,opt,name=pgwal_source,json=pgwalSource,proto3" json:"pgwal_source"`
	// sqlservercdc source
	SqlservercdcSource *SqlServerCdcSource `protobuf:"bytes,25,opt,name=sqlservercdc_source,json=sqlservercdcSource,proto3" json:"sqlservercdc_source"`
	// logminer source
	LogminerSource *LogminerSource `protobuf:"bytes,26,opt,name=logminer_source,json=logminerSource,proto3" json:"logminer_source"`
	// redis target
	RedisTarget *RedisTarget `protobuf:"bytes,27,opt,name=redis_target,json=redisTarget,proto3" json:"redis_target"`
	// hive target
	HiveTarget *HiveTarget `protobuf:"bytes,28,opt,name=hive_target,json=hiveTarget,proto3" json:"hive_target"`
	// The flink cluster id. Is required.
	ClusterId string `protobuf:"bytes,29,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id"`
}

func (x *SyncJobArgs) Reset() {
	*x = SyncJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobArgs) ProtoMessage() {}

func (x *SyncJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobArgs.ProtoReflect.Descriptor instead.
func (*SyncJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{2}
}

func (x *SyncJobArgs) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SyncJobArgs) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *SyncJobArgs) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *SyncJobArgs) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *SyncJobArgs) GetRecordNum() int32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *SyncJobArgs) GetBytes() int32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *SyncJobArgs) GetJobMode() int32 {
	if x != nil {
		return x.JobMode
	}
	return 0
}

func (x *SyncJobArgs) GetJobContent() string {
	if x != nil {
		return x.JobContent
	}
	return ""
}

func (x *SyncJobArgs) GetRelationaldbSource() *RelationaldbSource {
	if x != nil {
		return x.RelationaldbSource
	}
	return nil
}

func (x *SyncJobArgs) GetRelationaldbTarget() *RelationaldbTarget {
	if x != nil {
		return x.RelationaldbTarget
	}
	return nil
}

func (x *SyncJobArgs) GetMongodbSource() *MongodbSource {
	if x != nil {
		return x.MongodbSource
	}
	return nil
}

func (x *SyncJobArgs) GetMongodbTarget() *MongodbTarget {
	if x != nil {
		return x.MongodbTarget
	}
	return nil
}

func (x *SyncJobArgs) GetElasticsearchSource() *ElasticSearchSource {
	if x != nil {
		return x.ElasticsearchSource
	}
	return nil
}

func (x *SyncJobArgs) GetElasticsearchTarget() *ElasticSearchTarget {
	if x != nil {
		return x.ElasticsearchTarget
	}
	return nil
}

func (x *SyncJobArgs) GetHdfsSource() *HdfsSource {
	if x != nil {
		return x.HdfsSource
	}
	return nil
}

func (x *SyncJobArgs) GetHdfsTarget() *HdfsTarget {
	if x != nil {
		return x.HdfsTarget
	}
	return nil
}

func (x *SyncJobArgs) GetFtpSource() *FtpSource {
	if x != nil {
		return x.FtpSource
	}
	return nil
}

func (x *SyncJobArgs) GetFtpTarget() *FtpTarget {
	if x != nil {
		return x.FtpTarget
	}
	return nil
}

func (x *SyncJobArgs) GetHbaseSource() *HbaseSource {
	if x != nil {
		return x.HbaseSource
	}
	return nil
}

func (x *SyncJobArgs) GetHbaseTarget() *HbaseTarget {
	if x != nil {
		return x.HbaseTarget
	}
	return nil
}

func (x *SyncJobArgs) GetKafkaSource() *KafkaSource {
	if x != nil {
		return x.KafkaSource
	}
	return nil
}

func (x *SyncJobArgs) GetKafkaTarget() *KafkaTarget {
	if x != nil {
		return x.KafkaTarget
	}
	return nil
}

func (x *SyncJobArgs) GetBinlogSource() *BinlogSource {
	if x != nil {
		return x.BinlogSource
	}
	return nil
}

func (x *SyncJobArgs) GetPgwalSource() *PgwalSource {
	if x != nil {
		return x.PgwalSource
	}
	return nil
}

func (x *SyncJobArgs) GetSqlservercdcSource() *SqlServerCdcSource {
	if x != nil {
		return x.SqlservercdcSource
	}
	return nil
}

func (x *SyncJobArgs) GetLogminerSource() *LogminerSource {
	if x != nil {
		return x.LogminerSource
	}
	return nil
}

func (x *SyncJobArgs) GetRedisTarget() *RedisTarget {
	if x != nil {
		return x.RedisTarget
	}
	return nil
}

func (x *SyncJobArgs) GetHiveTarget() *HiveTarget {
	if x != nil {
		return x.HiveTarget
	}
	return nil
}

func (x *SyncJobArgs) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// SyncJobSchedule represents a job schedule info.
// Not use with gorm.
type SyncJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Policy, Options Value: 1 => "Periodicity", 2 => "AppointTime", 3 => "Immediately"
	// Is Required.
	SchedulePolicy SyncJobSchedule_SchedulePolicy `protobuf:"varint,1,opt,name=schedule_policy,json=schedulePolicy,proto3,enum=model.SyncJobSchedule_SchedulePolicy" json:"schedule_policy"`
	// Timestamp of execute time for once. unit in seconds.
	// Not required, default the time of created job.
	Executed int64 `protobuf:"varint,2,opt,name=executed,proto3" json:"executed" default:"0" binding:"gte=0"`
	// ------ Period Options ------
	//
	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 31507200(1971-01-01 00:00:00), means no limit.
	Started int64 `protobuf:"varint,4,opt,name=started,proto3" json:"started"`
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
	Ended int64 `protobuf:"varint,5,opt,name=ended,proto3" json:"ended"`
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace". Is required .
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	ConcurrencyPolicy SyncJobSchedule_ConcurrencyPolicy `protobuf:"varint,6,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=model.SyncJobSchedule_ConcurrencyPolicy" json:"concurrency_policy"`
	// Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
	// Is required with with schedule_policy = 1.
	PeriodType string `protobuf:"bytes,7,opt,name=period_type,json=periodType,proto3" json:"period_type"`
	// Crontab Express. Is required with schedule_policy == 1
	Express string `protobuf:"bytes,8,opt,name=express,proto3" json:"express" binding:"-"`
	// ------ Advanced (Retry) options ------
	//
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 100 min.
	Timeout int32 `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout"`
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	RetryPolicy SyncJobSchedule_RetryPolicy `protobuf:"varint,10,opt,name=retry_policy,json=retryPolicy,proto3,enum=model.SyncJobSchedule_RetryPolicy" json:"retry_policy"`
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	RetryLimit int32 `protobuf:"varint,11,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit"`
	// Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
	RetryInterval int32 `protobuf:"varint,12,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval"`
}

func (x *SyncJobSchedule) Reset() {
	*x = SyncJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobSchedule) ProtoMessage() {}

func (x *SyncJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobSchedule.ProtoReflect.Descriptor instead.
func (*SyncJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{3}
}

func (x *SyncJobSchedule) GetSchedulePolicy() SyncJobSchedule_SchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return SyncJobSchedule_SchedulePolicyUnset
}

func (x *SyncJobSchedule) GetExecuted() int64 {
	if x != nil {
		return x.Executed
	}
	return 0
}

func (x *SyncJobSchedule) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *SyncJobSchedule) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *SyncJobSchedule) GetConcurrencyPolicy() SyncJobSchedule_ConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return SyncJobSchedule_ConcurrencyPolicyUnset
}

func (x *SyncJobSchedule) GetPeriodType() string {
	if x != nil {
		return x.PeriodType
	}
	return ""
}

func (x *SyncJobSchedule) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

func (x *SyncJobSchedule) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SyncJobSchedule) GetRetryPolicy() SyncJobSchedule_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return SyncJobSchedule_RetryPolicyUnset
}

func (x *SyncJobSchedule) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *SyncJobSchedule) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

// The release stream job info.
type SyncJobRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type SyncJob_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.SyncJob_Type" json:"type" gorm:"column:type;"`
	// Release status, 1 => "Active", 2 => "Suspended", 3 => "Deleted",
	Status SyncJobRelease_Status `protobuf:"varint,6,opt,name=status,proto3,enum=model.SyncJobRelease_Status" json:"status" gorm:"column:status;"`
	// Job release description.
	Desc string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// The user-id of release this job.
	CreatedBy string `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by" gorm:"column:created_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,9,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,10,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *SyncJobRelease) Reset() {
	*x = SyncJobRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJobRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJobRelease) ProtoMessage() {}

func (x *SyncJobRelease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJobRelease.ProtoReflect.Descriptor instead.
func (*SyncJobRelease) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{4}
}

func (x *SyncJobRelease) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SyncJobRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncJobRelease) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SyncJobRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SyncJobRelease) GetType() SyncJob_Type {
	if x != nil {
		return x.Type
	}
	return SyncJob_OfflineFull
}

func (x *SyncJobRelease) GetStatus() SyncJobRelease_Status {
	if x != nil {
		return x.Status
	}
	return SyncJobRelease_StatusUnset
}

func (x *SyncJobRelease) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SyncJobRelease) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SyncJobRelease) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SyncJobRelease) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" swaggerignore:"true"`
	// type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type" swaggerignore:"true"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{5}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RelationaldbSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// table
	Table []string `protobuf:"bytes,2,rep,name=table,proto3" json:"table" swaggerignore:"true"`
	// schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema" swaggerignore:"true"`
	// where
	Where string `protobuf:"bytes,4,opt,name=where,proto3" json:"where" swaggerignore:"true"`
	// splitpk
	Splitpk string `protobuf:"bytes,5,opt,name=splitpk,proto3" json:"splitpk" swaggerignore:"true"`
}

func (x *RelationaldbSource) Reset() {
	*x = RelationaldbSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationaldbSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationaldbSource) ProtoMessage() {}

func (x *RelationaldbSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationaldbSource.ProtoReflect.Descriptor instead.
func (*RelationaldbSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{6}
}

func (x *RelationaldbSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *RelationaldbSource) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *RelationaldbSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *RelationaldbSource) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *RelationaldbSource) GetSplitpk() string {
	if x != nil {
		return x.Splitpk
	}
	return ""
}

type RelationaldbTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// table
	Table []string `protobuf:"bytes,2,rep,name=table,proto3" json:"table" swaggerignore:"true"`
	// schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema" swaggerignore:"true"`
	// pre sql
	PreSql string `protobuf:"bytes,4,opt,name=pre_sql,json=preSql,proto3" json:"pre_sql" swaggerignore:"true"`
	// post sql
	PostSql string `protobuf:"bytes,5,opt,name=post_sql,json=postSql,proto3" json:"post_sql" swaggerignore:"true"`
	// write mode
	WriteMode string `protobuf:"bytes,6,opt,name=write_mode,json=writeMode,proto3" json:"write_mode" swaggerignore:"true"`
	// batch size
	BatchSize string `protobuf:"bytes,7,opt,name=batch_size,json=batchSize,proto3" json:"batch_size" swaggerignore:"true"`
	// update key
	UpdateKey string `protobuf:"bytes,8,opt,name=update_key,json=updateKey,proto3" json:"update_key" swaggerignore:"true"`
	// mode
	Mode string `protobuf:"bytes,9,opt,name=mode,proto3" json:"mode" swaggerignore:"true"`
	// semantic
	Semantic string `protobuf:"bytes,10,opt,name=semantic,proto3" json:"semantic" swaggerignore:"true"`
	// with no lock
	WithNoLock string `protobuf:"bytes,11,opt,name=with_no_lock,json=withNoLock,proto3" json:"with_no_lock" swaggerignore:"true"`
}

func (x *RelationaldbTarget) Reset() {
	*x = RelationaldbTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationaldbTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationaldbTarget) ProtoMessage() {}

func (x *RelationaldbTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationaldbTarget.ProtoReflect.Descriptor instead.
func (*RelationaldbTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{7}
}

func (x *RelationaldbTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *RelationaldbTarget) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *RelationaldbTarget) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *RelationaldbTarget) GetPreSql() string {
	if x != nil {
		return x.PreSql
	}
	return ""
}

func (x *RelationaldbTarget) GetPostSql() string {
	if x != nil {
		return x.PostSql
	}
	return ""
}

func (x *RelationaldbTarget) GetWriteMode() string {
	if x != nil {
		return x.WriteMode
	}
	return ""
}

func (x *RelationaldbTarget) GetBatchSize() string {
	if x != nil {
		return x.BatchSize
	}
	return ""
}

func (x *RelationaldbTarget) GetUpdateKey() string {
	if x != nil {
		return x.UpdateKey
	}
	return ""
}

func (x *RelationaldbTarget) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RelationaldbTarget) GetSemantic() string {
	if x != nil {
		return x.Semantic
	}
	return ""
}

func (x *RelationaldbTarget) GetWithNoLock() string {
	if x != nil {
		return x.WithNoLock
	}
	return ""
}

type MongodbSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// database
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database" swaggerignore:"true"`
	// collection name
	CollectionName string `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name" swaggerignore:"true"`
	// fetch size
	FetchSize int32 `protobuf:"varint,4,opt,name=fetch_size,json=fetchSize,proto3" json:"fetch_size" swaggerignore:"true"`
	// filter
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter" swaggerignore:"true"`
}

func (x *MongodbSource) Reset() {
	*x = MongodbSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodbSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSource) ProtoMessage() {}

func (x *MongodbSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSource.ProtoReflect.Descriptor instead.
func (*MongodbSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{8}
}

func (x *MongodbSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *MongodbSource) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MongodbSource) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *MongodbSource) GetFetchSize() int32 {
	if x != nil {
		return x.FetchSize
	}
	return 0
}

func (x *MongodbSource) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type MongodbTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// database
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database" swaggerignore:"true"`
	// collection name
	CollectionName string `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name" swaggerignore:"true"`
	// replace key
	ReplaceKey string `protobuf:"bytes,4,opt,name=replace_key,json=replaceKey,proto3" json:"replace_key" swaggerignore:"true"`
	// write mode
	WriteMode string `protobuf:"bytes,5,opt,name=write_mode,json=writeMode,proto3" json:"write_mode" swaggerignore:"true"`
	// batch size
	BatchSize int32 `protobuf:"varint,6,opt,name=batch_size,json=batchSize,proto3" json:"batch_size" swaggerignore:"true"`
	// flush interval mills
	FlushIntervalMills int32 `protobuf:"varint,7,opt,name=flush_interval_mills,json=flushIntervalMills,proto3" json:"flush_interval_mills" swaggerignore:"true"`
}

func (x *MongodbTarget) Reset() {
	*x = MongodbTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodbTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbTarget) ProtoMessage() {}

func (x *MongodbTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbTarget.ProtoReflect.Descriptor instead.
func (*MongodbTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{9}
}

func (x *MongodbTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *MongodbTarget) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MongodbTarget) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *MongodbTarget) GetReplaceKey() string {
	if x != nil {
		return x.ReplaceKey
	}
	return ""
}

func (x *MongodbTarget) GetWriteMode() string {
	if x != nil {
		return x.WriteMode
	}
	return ""
}

func (x *MongodbTarget) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *MongodbTarget) GetFlushIntervalMills() int32 {
	if x != nil {
		return x.FlushIntervalMills
	}
	return 0
}

type ElasticSearchSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version" swaggerignore:"true"`
	// index
	Index string `protobuf:"bytes,3,opt,name=index,proto3" json:"index" swaggerignore:"true"`
	// batch size
	BatchSize string `protobuf:"bytes,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size" swaggerignore:"true"`
}

func (x *ElasticSearchSource) Reset() {
	*x = ElasticSearchSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticSearchSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticSearchSource) ProtoMessage() {}

func (x *ElasticSearchSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticSearchSource.ProtoReflect.Descriptor instead.
func (*ElasticSearchSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{10}
}

func (x *ElasticSearchSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *ElasticSearchSource) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ElasticSearchSource) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *ElasticSearchSource) GetBatchSize() string {
	if x != nil {
		return x.BatchSize
	}
	return ""
}

type ElasticSearchTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version" swaggerignore:"true"`
	// index
	Index string `protobuf:"bytes,3,opt,name=index,proto3" json:"index" swaggerignore:"true"`
	// batch size
	BatchSize string `protobuf:"bytes,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size" swaggerignore:"true"`
	// key delimiter
	KeyDelimiter string `protobuf:"bytes,5,opt,name=key_delimiter,json=keyDelimiter,proto3" json:"key_delimiter" swaggerignore:"true"`
}

func (x *ElasticSearchTarget) Reset() {
	*x = ElasticSearchTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticSearchTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticSearchTarget) ProtoMessage() {}

func (x *ElasticSearchTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticSearchTarget.ProtoReflect.Descriptor instead.
func (*ElasticSearchTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{11}
}

func (x *ElasticSearchTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *ElasticSearchTarget) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ElasticSearchTarget) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *ElasticSearchTarget) GetBatchSize() string {
	if x != nil {
		return x.BatchSize
	}
	return ""
}

func (x *ElasticSearchTarget) GetKeyDelimiter() string {
	if x != nil {
		return x.KeyDelimiter
	}
	return ""
}

type LogminerSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table
	Table []string `protobuf:"bytes,1,rep,name=table,proto3" json:"table" swaggerignore:"true"`
	// split update
	SplitUpdate string `protobuf:"bytes,2,opt,name=split_update,json=splitUpdate,proto3" json:"split_update" swaggerignore:"true"`
	// paving data
	PavingData string `protobuf:"bytes,3,opt,name=paving_data,json=pavingData,proto3" json:"paving_data" swaggerignore:"true"`
	// cat
	Cat string `protobuf:"bytes,4,opt,name=cat,proto3" json:"cat" swaggerignore:"true"`
	// read position
	ReadPosition string `protobuf:"bytes,5,opt,name=read_position,json=readPosition,proto3" json:"read_position" swaggerignore:"true"`
	// start time
	StartTime int64 `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time" swaggerignore:"true"`
	// start scn
	StartScn int64 `protobuf:"varint,7,opt,name=start_scn,json=startScn,proto3" json:"start_scn" swaggerignore:"true"`
	// fetch size
	FetchSize int64 `protobuf:"varint,8,opt,name=fetch_size,json=fetchSize,proto3" json:"fetch_size" swaggerignore:"true"`
	// support auto add log
	SupportAutoAddLog int64 `protobuf:"varint,9,opt,name=support_auto_add_log,json=supportAutoAddLog,proto3" json:"support_auto_add_log" swaggerignore:"true"`
}

func (x *LogminerSource) Reset() {
	*x = LogminerSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogminerSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogminerSource) ProtoMessage() {}

func (x *LogminerSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogminerSource.ProtoReflect.Descriptor instead.
func (*LogminerSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{12}
}

func (x *LogminerSource) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *LogminerSource) GetSplitUpdate() string {
	if x != nil {
		return x.SplitUpdate
	}
	return ""
}

func (x *LogminerSource) GetPavingData() string {
	if x != nil {
		return x.PavingData
	}
	return ""
}

func (x *LogminerSource) GetCat() string {
	if x != nil {
		return x.Cat
	}
	return ""
}

func (x *LogminerSource) GetReadPosition() string {
	if x != nil {
		return x.ReadPosition
	}
	return ""
}

func (x *LogminerSource) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *LogminerSource) GetStartScn() int64 {
	if x != nil {
		return x.StartScn
	}
	return 0
}

func (x *LogminerSource) GetFetchSize() int64 {
	if x != nil {
		return x.FetchSize
	}
	return 0
}

func (x *LogminerSource) GetSupportAutoAddLog() int64 {
	if x != nil {
		return x.SupportAutoAddLog
	}
	return 0
}

type PgwalSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// database name
	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name" swaggerignore:"true"`
	// table list
	TableList []string `protobuf:"bytes,2,rep,name=table_list,json=tableList,proto3" json:"table_list" swaggerignore:"true"`
	// slot name
	SlotName string `protobuf:"bytes,3,opt,name=slot_name,json=slotName,proto3" json:"slot_name" swaggerignore:"true"`
	// split update
	SplitUpdate string `protobuf:"bytes,4,opt,name=split_update,json=splitUpdate,proto3" json:"split_update" swaggerignore:"true"`
	// allow created
	AllowCreated string `protobuf:"bytes,5,opt,name=allow_created,json=allowCreated,proto3" json:"allow_created" swaggerignore:"true"`
	// temporary
	Temporary string `protobuf:"bytes,6,opt,name=temporary,proto3" json:"temporary" swaggerignore:"true"`
	// paving data
	PavingData string `protobuf:"bytes,7,opt,name=paving_data,json=pavingData,proto3" json:"paving_data" swaggerignore:"true"`
	// lsn
	Lsn string `protobuf:"bytes,8,opt,name=lsn,proto3" json:"lsn" swaggerignore:"true"`
	// slot available
	SlotAvailable string `protobuf:"bytes,9,opt,name=slot_available,json=slotAvailable,proto3" json:"slot_available" swaggerignore:"true"`
}

func (x *PgwalSource) Reset() {
	*x = PgwalSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgwalSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgwalSource) ProtoMessage() {}

func (x *PgwalSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgwalSource.ProtoReflect.Descriptor instead.
func (*PgwalSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{13}
}

func (x *PgwalSource) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgwalSource) GetTableList() []string {
	if x != nil {
		return x.TableList
	}
	return nil
}

func (x *PgwalSource) GetSlotName() string {
	if x != nil {
		return x.SlotName
	}
	return ""
}

func (x *PgwalSource) GetSplitUpdate() string {
	if x != nil {
		return x.SplitUpdate
	}
	return ""
}

func (x *PgwalSource) GetAllowCreated() string {
	if x != nil {
		return x.AllowCreated
	}
	return ""
}

func (x *PgwalSource) GetTemporary() string {
	if x != nil {
		return x.Temporary
	}
	return ""
}

func (x *PgwalSource) GetPavingData() string {
	if x != nil {
		return x.PavingData
	}
	return ""
}

func (x *PgwalSource) GetLsn() string {
	if x != nil {
		return x.Lsn
	}
	return ""
}

func (x *PgwalSource) GetSlotAvailable() string {
	if x != nil {
		return x.SlotAvailable
	}
	return ""
}

type SqlServerCdcSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table list
	TableList []string `protobuf:"bytes,1,rep,name=table_list,json=tableList,proto3" json:"table_list" swaggerignore:"true"`
	// split update
	SplitUpdate string `protobuf:"bytes,2,opt,name=split_update,json=splitUpdate,proto3" json:"split_update" swaggerignore:"true"`
	// paving data
	PavingData string `protobuf:"bytes,3,opt,name=paving_data,json=pavingData,proto3" json:"paving_data" swaggerignore:"true"`
	// cat
	Cat string `protobuf:"bytes,4,opt,name=cat,proto3" json:"cat" swaggerignore:"true"`
	// lsn
	Lsn string `protobuf:"bytes,5,opt,name=lsn,proto3" json:"lsn" swaggerignore:"true"`
	// poll interval
	PollInterval string `protobuf:"bytes,6,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval" swaggerignore:"true"`
}

func (x *SqlServerCdcSource) Reset() {
	*x = SqlServerCdcSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlServerCdcSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlServerCdcSource) ProtoMessage() {}

func (x *SqlServerCdcSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlServerCdcSource.ProtoReflect.Descriptor instead.
func (*SqlServerCdcSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{14}
}

func (x *SqlServerCdcSource) GetTableList() []string {
	if x != nil {
		return x.TableList
	}
	return nil
}

func (x *SqlServerCdcSource) GetSplitUpdate() string {
	if x != nil {
		return x.SplitUpdate
	}
	return ""
}

func (x *SqlServerCdcSource) GetPavingData() string {
	if x != nil {
		return x.PavingData
	}
	return ""
}

func (x *SqlServerCdcSource) GetCat() string {
	if x != nil {
		return x.Cat
	}
	return ""
}

func (x *SqlServerCdcSource) GetLsn() string {
	if x != nil {
		return x.Lsn
	}
	return ""
}

func (x *SqlServerCdcSource) GetPollInterval() string {
	if x != nil {
		return x.PollInterval
	}
	return ""
}

type BinlogSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// schema
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema" swaggerignore:"true"`
	// cat
	Cat string `protobuf:"bytes,2,opt,name=cat,proto3" json:"cat" swaggerignore:"true"`
	// start
	Start *Start `protobuf:"bytes,3,opt,name=start,proto3" json:"start" swaggerignore:"true"`
	// table
	Table []string `protobuf:"bytes,4,rep,name=table,proto3" json:"table" swaggerignore:"true"`
	// split update
	SplitUpdate string `protobuf:"bytes,5,opt,name=split_update,json=splitUpdate,proto3" json:"split_update" swaggerignore:"true"`
	// paving data
	PavingData string `protobuf:"bytes,6,opt,name=paving_data,json=pavingData,proto3" json:"paving_data" swaggerignore:"true"`
	// filter
	Filter int64 `protobuf:"varint,7,opt,name=filter,proto3" json:"filter" swaggerignore:"true"`
	// is gtid mode
	IsGtidMode int64 `protobuf:"varint,8,opt,name=is_gtid_mode,json=isGtidMode,proto3" json:"is_gtid_mode" swaggerignore:"true"`
}

func (x *BinlogSource) Reset() {
	*x = BinlogSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinlogSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogSource) ProtoMessage() {}

func (x *BinlogSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogSource.ProtoReflect.Descriptor instead.
func (*BinlogSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{15}
}

func (x *BinlogSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *BinlogSource) GetCat() string {
	if x != nil {
		return x.Cat
	}
	return ""
}

func (x *BinlogSource) GetStart() *Start {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *BinlogSource) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *BinlogSource) GetSplitUpdate() string {
	if x != nil {
		return x.SplitUpdate
	}
	return ""
}

func (x *BinlogSource) GetPavingData() string {
	if x != nil {
		return x.PavingData
	}
	return ""
}

func (x *BinlogSource) GetFilter() int64 {
	if x != nil {
		return x.Filter
	}
	return 0
}

func (x *BinlogSource) GetIsGtidMode() int64 {
	if x != nil {
		return x.IsGtidMode
	}
	return 0
}

type Start struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp" swaggerignore:"true"`
	// journal name
	JournalName string `protobuf:"bytes,2,opt,name=journal_name,json=journalName,proto3" json:"journal_name" swaggerignore:"true"`
	// position
	Position string `protobuf:"bytes,3,opt,name=position,proto3" json:"position" swaggerignore:"true"`
}

func (x *Start) Reset() {
	*x = Start{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Start) ProtoMessage() {}

func (x *Start) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Start.ProtoReflect.Descriptor instead.
func (*Start) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{16}
}

func (x *Start) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Start) GetJournalName() string {
	if x != nil {
		return x.JournalName
	}
	return ""
}

func (x *Start) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type HiveTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// partition
	Partition string `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition" swaggerignore:"true"`
	// partition_type
	PartitionType string `protobuf:"bytes,2,opt,name=partition_type,json=partitionType,proto3" json:"partition_type" swaggerignore:"true"`
	// tables column
	TablesColumn string `protobuf:"bytes,3,opt,name=tables_column,json=tablesColumn,proto3" json:"tables_column" swaggerignore:"true"`
	// analytical rules
	AnalyticalRules string `protobuf:"bytes,4,opt,name=analytical_rules,json=analyticalRules,proto3" json:"analytical_rules" swaggerignore:"true"`
	// schema
	Schema string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema" swaggerignore:"true"`
	// distribute table
	DistributeTable string `protobuf:"bytes,6,opt,name=distribute_table,json=distributeTable,proto3" json:"distribute_table" swaggerignore:"true"`
	// write mode
	WriteMode int64 `protobuf:"varint,7,opt,name=write_mode,json=writeMode,proto3" json:"write_mode" swaggerignore:"true"`
	// Relationaldb column
	FileType int64 `protobuf:"varint,8,opt,name=file_type,json=fileType,proto3" json:"file_type" swaggerignore:"true"`
	// default_fs
	DefaultFs int64 `protobuf:"varint,9,opt,name=default_fs,json=defaultFs,proto3" json:"default_fs" swaggerignore:"true"`
	// max file size
	MaxFileSize int64 `protobuf:"varint,10,opt,name=max_file_size,json=maxFileSize,proto3" json:"max_file_size" swaggerignore:"true"`
	// next check rows
	NextCheckRows int64 `protobuf:"varint,11,opt,name=next_check_rows,json=nextCheckRows,proto3" json:"next_check_rows" swaggerignore:"true"`
	// row group size
	RowGroupSize int64 `protobuf:"varint,12,opt,name=row_group_size,json=rowGroupSize,proto3" json:"row_group_size" swaggerignore:"true"`
	// enable dictionary
	EnableDictionary int64 `protobuf:"varint,13,opt,name=enable_dictionary,json=enableDictionary,proto3" json:"enable_dictionary" swaggerignore:"true"`
	// encoding
	Encoding int64 `protobuf:"varint,14,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// field_delimiter
	FieldDelimiter int64 `protobuf:"varint,15,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter" swaggerignore:"true"`
	// compress
	Compress int64 `protobuf:"varint,16,opt,name=compress,proto3" json:"compress" swaggerignore:"true"`
	// charset_name
	CharsetName int64 `protobuf:"varint,17,opt,name=charset_name,json=charsetName,proto3" json:"charset_name" swaggerignore:"true"`
	// hadoop config
	Hadoop_Config string `protobuf:"bytes,18,opt,name=hadoop_Config,json=hadoopConfig,proto3" json:"hadoop_Config" swaggerignore:"true"`
}

func (x *HiveTarget) Reset() {
	*x = HiveTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiveTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiveTarget) ProtoMessage() {}

func (x *HiveTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiveTarget.ProtoReflect.Descriptor instead.
func (*HiveTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{17}
}

func (x *HiveTarget) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *HiveTarget) GetPartitionType() string {
	if x != nil {
		return x.PartitionType
	}
	return ""
}

func (x *HiveTarget) GetTablesColumn() string {
	if x != nil {
		return x.TablesColumn
	}
	return ""
}

func (x *HiveTarget) GetAnalyticalRules() string {
	if x != nil {
		return x.AnalyticalRules
	}
	return ""
}

func (x *HiveTarget) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *HiveTarget) GetDistributeTable() string {
	if x != nil {
		return x.DistributeTable
	}
	return ""
}

func (x *HiveTarget) GetWriteMode() int64 {
	if x != nil {
		return x.WriteMode
	}
	return 0
}

func (x *HiveTarget) GetFileType() int64 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *HiveTarget) GetDefaultFs() int64 {
	if x != nil {
		return x.DefaultFs
	}
	return 0
}

func (x *HiveTarget) GetMaxFileSize() int64 {
	if x != nil {
		return x.MaxFileSize
	}
	return 0
}

func (x *HiveTarget) GetNextCheckRows() int64 {
	if x != nil {
		return x.NextCheckRows
	}
	return 0
}

func (x *HiveTarget) GetRowGroupSize() int64 {
	if x != nil {
		return x.RowGroupSize
	}
	return 0
}

func (x *HiveTarget) GetEnableDictionary() int64 {
	if x != nil {
		return x.EnableDictionary
	}
	return 0
}

func (x *HiveTarget) GetEncoding() int64 {
	if x != nil {
		return x.Encoding
	}
	return 0
}

func (x *HiveTarget) GetFieldDelimiter() int64 {
	if x != nil {
		return x.FieldDelimiter
	}
	return 0
}

func (x *HiveTarget) GetCompress() int64 {
	if x != nil {
		return x.Compress
	}
	return 0
}

func (x *HiveTarget) GetCharsetName() int64 {
	if x != nil {
		return x.CharsetName
	}
	return 0
}

func (x *HiveTarget) GetHadoop_Config() string {
	if x != nil {
		return x.Hadoop_Config
	}
	return ""
}

type HdfsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path" swaggerignore:"true"`
	// file type
	FileType string `protobuf:"bytes,3,opt,name=file_type,json=fileType,proto3" json:"file_type" swaggerignore:"true"`
	// default_fs
	DefaultFs string `protobuf:"bytes,4,opt,name=default_fs,json=defaultFs,proto3" json:"default_fs" swaggerignore:"true"`
	// filter regex
	FilterRegex string `protobuf:"bytes,5,opt,name=filter_regex,json=filterRegex,proto3" json:"filter_regex" swaggerignore:"true"`
	// field delimiter
	FieldDelimiter string `protobuf:"bytes,6,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter" swaggerignore:"true"`
	// encoding
	Encoding string `protobuf:"bytes,7,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// hadoop config
	HadoopConfig string `protobuf:"bytes,8,opt,name=hadoop_config,json=hadoopConfig,proto3" json:"dfs_nameservices" swaggerignore:"true"`
}

func (x *HdfsSource) Reset() {
	*x = HdfsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdfsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdfsSource) ProtoMessage() {}

func (x *HdfsSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdfsSource.ProtoReflect.Descriptor instead.
func (*HdfsSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{18}
}

func (x *HdfsSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *HdfsSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HdfsSource) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *HdfsSource) GetDefaultFs() string {
	if x != nil {
		return x.DefaultFs
	}
	return ""
}

func (x *HdfsSource) GetFilterRegex() string {
	if x != nil {
		return x.FilterRegex
	}
	return ""
}

func (x *HdfsSource) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *HdfsSource) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *HdfsSource) GetHadoopConfig() string {
	if x != nil {
		return x.HadoopConfig
	}
	return ""
}

type HdfsTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// file column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// file path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path" swaggerignore:"true"`
	// file name
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name" swaggerignore:"true"`
	// file type
	FileType string `protobuf:"bytes,4,opt,name=file_type,json=fileType,proto3" json:"file_type" swaggerignore:"true"`
	// write mode
	WriteMode string `protobuf:"bytes,5,opt,name=write_mode,json=writeMode,proto3" json:"write_mode" swaggerignore:"true"`
	// default_fs
	DefaultFs string `protobuf:"bytes,6,opt,name=default_fs,json=defaultFs,proto3" json:"default_fs" swaggerignore:"true"`
	// filter_regex
	FilterRegex string `protobuf:"bytes,7,opt,name=filter_regex,json=filterRegex,proto3" json:"filter_regex" swaggerignore:"true"`
	// field delimiter
	FieldDelimiter string `protobuf:"bytes,8,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter" swaggerignore:"true"`
	// full column name
	FullColumnName string `protobuf:"bytes,9,opt,name=full_column_name,json=fullColumnName,proto3" json:"full_column_name" swaggerignore:"true"`
	// full column type
	FullColumnType string `protobuf:"bytes,10,opt,name=full_column_type,json=fullColumnType,proto3" json:"full_column_type" swaggerignore:"true"`
	// compress
	Compress string `protobuf:"bytes,11,opt,name=compress,proto3" json:"compress" swaggerignore:"true"`
	// max file size
	MaxFileSize string `protobuf:"bytes,12,opt,name=max_file_size,json=maxFileSize,proto3" json:"max_file_size" swaggerignore:"true"`
	// next check rows
	NextCheckRows string `protobuf:"bytes,13,opt,name=next_check_rows,json=nextCheckRows,proto3" json:"next_check_rows" swaggerignore:"true"`
	// row group size
	RowGroupSize string `protobuf:"bytes,14,opt,name=row_group_size,json=rowGroupSize,proto3" json:"row_group_size" swaggerignore:"true"`
	// enable dictionary
	EnableDictionary string `protobuf:"bytes,15,opt,name=enable_dictionary,json=enableDictionary,proto3" json:"enable_dictionary" swaggerignore:"true"`
	// encoding
	Encoding string `protobuf:"bytes,16,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// hadoop config
	HadoopConfig string `protobuf:"bytes,17,opt,name=hadoop_config,json=hadoopConfig,proto3" json:"hadoop_config" swaggerignore:"true"`
}

func (x *HdfsTarget) Reset() {
	*x = HdfsTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdfsTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdfsTarget) ProtoMessage() {}

func (x *HdfsTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdfsTarget.ProtoReflect.Descriptor instead.
func (*HdfsTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{19}
}

func (x *HdfsTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *HdfsTarget) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HdfsTarget) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *HdfsTarget) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *HdfsTarget) GetWriteMode() string {
	if x != nil {
		return x.WriteMode
	}
	return ""
}

func (x *HdfsTarget) GetDefaultFs() string {
	if x != nil {
		return x.DefaultFs
	}
	return ""
}

func (x *HdfsTarget) GetFilterRegex() string {
	if x != nil {
		return x.FilterRegex
	}
	return ""
}

func (x *HdfsTarget) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *HdfsTarget) GetFullColumnName() string {
	if x != nil {
		return x.FullColumnName
	}
	return ""
}

func (x *HdfsTarget) GetFullColumnType() string {
	if x != nil {
		return x.FullColumnType
	}
	return ""
}

func (x *HdfsTarget) GetCompress() string {
	if x != nil {
		return x.Compress
	}
	return ""
}

func (x *HdfsTarget) GetMaxFileSize() string {
	if x != nil {
		return x.MaxFileSize
	}
	return ""
}

func (x *HdfsTarget) GetNextCheckRows() string {
	if x != nil {
		return x.NextCheckRows
	}
	return ""
}

func (x *HdfsTarget) GetRowGroupSize() string {
	if x != nil {
		return x.RowGroupSize
	}
	return ""
}

func (x *HdfsTarget) GetEnableDictionary() string {
	if x != nil {
		return x.EnableDictionary
	}
	return ""
}

func (x *HdfsTarget) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *HdfsTarget) GetHadoopConfig() string {
	if x != nil {
		return x.HadoopConfig
	}
	return ""
}

type FtpSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// path
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path" swaggerignore:"true"`
	// private key path
	PrivateKeyPath string `protobuf:"bytes,3,opt,name=private_key_path,json=privateKeyPath,proto3" json:"private_key_path" swaggerignore:"true"`
	// connect pattern
	ConnectPattern string `protobuf:"bytes,4,opt,name=connect_pattern,json=connectPattern,proto3" json:"connect_pattern" swaggerignore:"true"`
	// field delimiter
	FieldDelimiter string `protobuf:"bytes,5,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter" swaggerignore:"true"`
	// encoding
	Encoding string `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// control encoding
	ControlEncoding string `protobuf:"bytes,7,opt,name=control_encoding,json=controlEncoding,proto3" json:"control_encoding" swaggerignore:"true"`
	// is first line header
	IsFirstLineHeader string `protobuf:"bytes,8,opt,name=is_first_line_header,json=isFirstLineHeader,proto3" json:"is_first_line_header" swaggerignore:"true"`
	// timeout
	Timeout string `protobuf:"bytes,9,opt,name=timeout,proto3" json:"timeout" swaggerignore:"true"`
	// file type
	FileType string `protobuf:"bytes,10,opt,name=file_type,json=fileType,proto3" json:"file_type" swaggerignore:"true"`
	// compress type
	CompressType string `protobuf:"bytes,11,opt,name=compress_type,json=compressType,proto3" json:"compress_type" swaggerignore:"true"`
	// file_config
	FileConfig string `protobuf:"bytes,12,opt,name=file_config,json=fileConfig,proto3" json:"file_config" swaggerignore:"true"`
}

func (x *FtpSource) Reset() {
	*x = FtpSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpSource) ProtoMessage() {}

func (x *FtpSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpSource.ProtoReflect.Descriptor instead.
func (*FtpSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{20}
}

func (x *FtpSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *FtpSource) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FtpSource) GetPrivateKeyPath() string {
	if x != nil {
		return x.PrivateKeyPath
	}
	return ""
}

func (x *FtpSource) GetConnectPattern() string {
	if x != nil {
		return x.ConnectPattern
	}
	return ""
}

func (x *FtpSource) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *FtpSource) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *FtpSource) GetControlEncoding() string {
	if x != nil {
		return x.ControlEncoding
	}
	return ""
}

func (x *FtpSource) GetIsFirstLineHeader() string {
	if x != nil {
		return x.IsFirstLineHeader
	}
	return ""
}

func (x *FtpSource) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *FtpSource) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FtpSource) GetCompressType() string {
	if x != nil {
		return x.CompressType
	}
	return ""
}

func (x *FtpSource) GetFileConfig() string {
	if x != nil {
		return x.FileConfig
	}
	return ""
}

type FtpTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// path
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path" swaggerignore:"true"`
	// private key path
	PrivateKeyPath string `protobuf:"bytes,3,opt,name=private_key_path,json=privateKeyPath,proto3" json:"private_key_path" swaggerignore:"true"`
	// connect pattern
	ConnectPattern string `protobuf:"bytes,4,opt,name=connect_pattern,json=connectPattern,proto3" json:"connect_pattern" swaggerignore:"true"`
	// field delimiter
	FieldDelimiter string `protobuf:"bytes,5,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter" swaggerignore:"true"`
	// encoding
	Encoding string `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// control encoding
	ControlEncoding string `protobuf:"bytes,7,opt,name=control_encoding,json=controlEncoding,proto3" json:"control_encoding" swaggerignore:"true"`
	// is first line header
	IsFirstLineHeader string `protobuf:"bytes,8,opt,name=is_first_line_header,json=isFirstLineHeader,proto3" json:"is_first_line_header" swaggerignore:"true"`
	// timeout
	Timeout string `protobuf:"bytes,9,opt,name=timeout,proto3" json:"timeout" swaggerignore:"true"`
}

func (x *FtpTarget) Reset() {
	*x = FtpTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpTarget) ProtoMessage() {}

func (x *FtpTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpTarget.ProtoReflect.Descriptor instead.
func (*FtpTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{21}
}

func (x *FtpTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *FtpTarget) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FtpTarget) GetPrivateKeyPath() string {
	if x != nil {
		return x.PrivateKeyPath
	}
	return ""
}

func (x *FtpTarget) GetConnectPattern() string {
	if x != nil {
		return x.ConnectPattern
	}
	return ""
}

func (x *FtpTarget) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *FtpTarget) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *FtpTarget) GetControlEncoding() string {
	if x != nil {
		return x.ControlEncoding
	}
	return ""
}

func (x *FtpTarget) GetIsFirstLineHeader() string {
	if x != nil {
		return x.IsFirstLineHeader
	}
	return ""
}

func (x *FtpTarget) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

type HbaseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hbase parameter
	Parameter *HbaseReadParameter `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter" swaggerignore:"true"`
	// hbase name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" swaggerignore:"true"`
	// hbase table
	Table *Table `protobuf:"bytes,3,opt,name=table,proto3" json:"table" swaggerignore:"true"`
}

func (x *HbaseSource) Reset() {
	*x = HbaseSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseSource) ProtoMessage() {}

func (x *HbaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseSource.ProtoReflect.Descriptor instead.
func (*HbaseSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{22}
}

func (x *HbaseSource) GetParameter() *HbaseReadParameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *HbaseSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HbaseSource) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type HbaseReadParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// hbaseConfig
	HbaseConfig string `protobuf:"bytes,2,opt,name=hbaseConfig,proto3" json:"hbaseConfig" swaggerignore:"true"`
	// range
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range" swaggerignore:"true"`
	// change_log
	ChangeLog string `protobuf:"bytes,4,opt,name=change_log,json=changeLog,proto3" json:"change_log" swaggerignore:"true"`
	// encoding
	Encoding string `protobuf:"bytes,5,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// hbase hadoopConfig
	HadoopConfig string `protobuf:"bytes,6,opt,name=hadoopConfig,proto3" json:"hadoopConfig" swaggerignore:"true"`
}

func (x *HbaseReadParameter) Reset() {
	*x = HbaseReadParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseReadParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseReadParameter) ProtoMessage() {}

func (x *HbaseReadParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseReadParameter.ProtoReflect.Descriptor instead.
func (*HbaseReadParameter) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{23}
}

func (x *HbaseReadParameter) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *HbaseReadParameter) GetHbaseConfig() string {
	if x != nil {
		return x.HbaseConfig
	}
	return ""
}

func (x *HbaseReadParameter) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *HbaseReadParameter) GetChangeLog() string {
	if x != nil {
		return x.ChangeLog
	}
	return ""
}

func (x *HbaseReadParameter) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *HbaseReadParameter) GetHadoopConfig() string {
	if x != nil {
		return x.HadoopConfig
	}
	return ""
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start row key
	StartRowKey int64 `protobuf:"varint,1,opt,name=start_row_key,json=startRowKey,proto3" json:"start_row_key" swaggerignore:"true"`
	// end row key
	EndRowKey int64 `protobuf:"varint,2,opt,name=end_row_key,json=endRowKey,proto3" json:"end_row_key" swaggerignore:"true"`
	// is binary rowkey
	IsBinaryRowkey int64 `protobuf:"varint,3,opt,name=is_binary_rowkey,json=isBinaryRowkey,proto3" json:"is_binary_rowkey" swaggerignore:"true"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{24}
}

func (x *Range) GetStartRowKey() int64 {
	if x != nil {
		return x.StartRowKey
	}
	return 0
}

func (x *Range) GetEndRowKey() int64 {
	if x != nil {
		return x.EndRowKey
	}
	return 0
}

func (x *Range) GetIsBinaryRowkey() int64 {
	if x != nil {
		return x.IsBinaryRowkey
	}
	return 0
}

type HbaseTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hbase parameter
	Parameter *HbaseWriteParameter `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter" swaggerignore:"true"`
	// name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" swaggerignore:"true"`
	// hbase table
	Table *Table `protobuf:"bytes,3,opt,name=table,proto3" json:"table" swaggerignore:"true"`
}

func (x *HbaseTarget) Reset() {
	*x = HbaseTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseTarget) ProtoMessage() {}

func (x *HbaseTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseTarget.ProtoReflect.Descriptor instead.
func (*HbaseTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{25}
}

func (x *HbaseTarget) GetParameter() *HbaseWriteParameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *HbaseTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HbaseTarget) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hbase tablename
	Tablename string `protobuf:"bytes,1,opt,name=tablename,proto3" json:"tablename" swaggerignore:"true"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{26}
}

func (x *Table) GetTablename() string {
	if x != nil {
		return x.Tablename
	}
	return ""
}

type HbaseWriteParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// hbaseConfig
	HbaseConfig string `protobuf:"bytes,2,opt,name=hbaseConfig,proto3" json:"hbaseConfig" swaggerignore:"true"`
	// null_mode
	NullMode string `protobuf:"bytes,3,opt,name=null_mode,json=nullMode,proto3" json:"null_mode" swaggerignore:"true"`
	// wal flag
	WalFlag bool `protobuf:"varint,4,opt,name=wal_flag,json=walFlag,proto3" json:"wal_flag" swaggerignore:"true"`
	// write buffer size
	WriteBufferSize string `protobuf:"bytes,5,opt,name=write_buffer_size,json=writeBufferSize,proto3" json:"write_buffer_size" swaggerignore:"true"`
	// change_log
	ChangeLog string `protobuf:"bytes,6,opt,name=change_log,json=changeLog,proto3" json:"change_log" swaggerignore:"true"`
	// rowkey express
	RowkeyExpress string `protobuf:"bytes,7,opt,name=rowkey_express,json=rowkeyExpress,proto3" json:"rowkey_express" swaggerignore:"true"`
	// version column index
	VersionColumnIndex string `protobuf:"bytes,8,opt,name=version_column_index,json=versionColumnIndex,proto3" json:"version_column_index" swaggerignore:"true"`
	// version column value
	VersionColumnValue string `protobuf:"bytes,9,opt,name=version_column_value,json=versionColumnValue,proto3" json:"version_column_value" swaggerignore:"true"`
}

func (x *HbaseWriteParameter) Reset() {
	*x = HbaseWriteParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseWriteParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseWriteParameter) ProtoMessage() {}

func (x *HbaseWriteParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseWriteParameter.ProtoReflect.Descriptor instead.
func (*HbaseWriteParameter) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{27}
}

func (x *HbaseWriteParameter) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *HbaseWriteParameter) GetHbaseConfig() string {
	if x != nil {
		return x.HbaseConfig
	}
	return ""
}

func (x *HbaseWriteParameter) GetNullMode() string {
	if x != nil {
		return x.NullMode
	}
	return ""
}

func (x *HbaseWriteParameter) GetWalFlag() bool {
	if x != nil {
		return x.WalFlag
	}
	return false
}

func (x *HbaseWriteParameter) GetWriteBufferSize() string {
	if x != nil {
		return x.WriteBufferSize
	}
	return ""
}

func (x *HbaseWriteParameter) GetChangeLog() string {
	if x != nil {
		return x.ChangeLog
	}
	return ""
}

func (x *HbaseWriteParameter) GetRowkeyExpress() string {
	if x != nil {
		return x.RowkeyExpress
	}
	return ""
}

func (x *HbaseWriteParameter) GetVersionColumnIndex() string {
	if x != nil {
		return x.VersionColumnIndex
	}
	return ""
}

func (x *HbaseWriteParameter) GetVersionColumnValue() string {
	if x != nil {
		return x.VersionColumnValue
	}
	return ""
}

type KafkaSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column" swaggerignore:"true"`
	// topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic" swaggerignore:"true"`
	// mode
	Mode string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode" swaggerignore:"true"`
	// timestamp
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp" swaggerignore:"true"`
	// offset
	Offset string `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset" swaggerignore:"true"`
	// consumer group_id
	GroupId string `protobuf:"bytes,6,opt,name=group_id,json=groupId,proto3" json:"group_id" swaggerignore:"true"`
	// encoding
	Encoding string `protobuf:"bytes,7,opt,name=encoding,proto3" json:"encoding" swaggerignore:"true"`
	// codec
	Codec string `protobuf:"bytes,8,opt,name=codec,proto3" json:"codec" swaggerignore:"true"`
	// kafka consumer settings
	Consumersettings *ConsumerSettings `protobuf:"bytes,9,opt,name=consumersettings,proto3" json:"consumersettings" swaggerignore:"true"`
}

func (x *KafkaSource) Reset() {
	*x = KafkaSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSource) ProtoMessage() {}

func (x *KafkaSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSource.ProtoReflect.Descriptor instead.
func (*KafkaSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{28}
}

func (x *KafkaSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *KafkaSource) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaSource) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *KafkaSource) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *KafkaSource) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *KafkaSource) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *KafkaSource) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *KafkaSource) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *KafkaSource) GetConsumersettings() *ConsumerSettings {
	if x != nil {
		return x.Consumersettings
	}
	return nil
}

type ConsumerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kafka server address
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers" swaggerignore:"true"`
	// auto commit position enable
	AutoCommitEnable string `protobuf:"bytes,2,opt,name=auto_commit_enable,json=autoCommitEnable,proto3" json:"auto_commit_enable" swaggerignore:"true"`
}

func (x *ConsumerSettings) Reset() {
	*x = ConsumerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerSettings) ProtoMessage() {}

func (x *ConsumerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerSettings.ProtoReflect.Descriptor instead.
func (*ConsumerSettings) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{29}
}

func (x *ConsumerSettings) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *ConsumerSettings) GetAutoCommitEnable() string {
	if x != nil {
		return x.AutoCommitEnable
	}
	return ""
}

type KafkaTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kafka tableFields
	TableFields []string `protobuf:"bytes,1,rep,name=tableFields,proto3" json:"tableFields" swaggerignore:"true"`
	// kafka topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic" swaggerignore:"true"`
	// kafka consumer settings
	Consumersettings *ConsumerSettings `protobuf:"bytes,3,opt,name=consumersettings,proto3" json:"consumersettings" swaggerignore:"true"`
}

func (x *KafkaTarget) Reset() {
	*x = KafkaTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTarget) ProtoMessage() {}

func (x *KafkaTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTarget.ProtoReflect.Descriptor instead.
func (*KafkaTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{30}
}

func (x *KafkaTarget) GetTableFields() []string {
	if x != nil {
		return x.TableFields
	}
	return nil
}

func (x *KafkaTarget) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaTarget) GetConsumersettings() *ConsumerSettings {
	if x != nil {
		return x.Consumersettings
	}
	return nil
}

type RedisTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// select database
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database" swaggerignore:"true"`
	// keyIndexes
	KeyIndexes []int32 `protobuf:"varint,2,rep,packed,name=keyIndexes,proto3" json:"keyIndexes" swaggerignore:"true"`
	// date_format
	DateFormat string `protobuf:"bytes,3,opt,name=date_format,json=dateFormat,proto3" json:"date_format" swaggerignore:"true"`
	// expire time
	ExpireTime string `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time" swaggerignore:"true"`
	// write type
	WriteType string `protobuf:"bytes,5,opt,name=write_type,json=writeType,proto3" json:"write_type" swaggerignore:"true"`
	// mode
	Mode string `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode" swaggerignore:"true"`
	// key field delimiter
	KeyFieldDelimiter string `protobuf:"bytes,7,opt,name=key_field_delimiter,json=keyFieldDelimiter,proto3" json:"key_field_delimiter" swaggerignore:"true"`
	// value field delimiter
	ValueFieldDelimiter string `protobuf:"bytes,8,opt,name=value_field_delimiter,json=valueFieldDelimiter,proto3" json:"value_field_delimiter" swaggerignore:"true"`
}

func (x *RedisTarget) Reset() {
	*x = RedisTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_sync_job_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisTarget) ProtoMessage() {}

func (x *RedisTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_sync_job_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisTarget.ProtoReflect.Descriptor instead.
func (*RedisTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_sync_job_proto_rawDescGZIP(), []int{31}
}

func (x *RedisTarget) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RedisTarget) GetKeyIndexes() []int32 {
	if x != nil {
		return x.KeyIndexes
	}
	return nil
}

func (x *RedisTarget) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *RedisTarget) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *RedisTarget) GetWriteType() string {
	if x != nil {
		return x.WriteType
	}
	return ""
}

func (x *RedisTarget) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RedisTarget) GetKeyFieldDelimiter() string {
	if x != nil {
		return x.KeyFieldDelimiter
	}
	return ""
}

func (x *RedisTarget) GetValueFieldDelimiter() string {
	if x != nil {
		return x.ValueFieldDelimiter
	}
	return ""
}

var File_proto_types_model_sync_job_proto protoreflect.FileDescriptor

var file_proto_types_model_sync_job_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x05, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12,
	0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca,
	0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe2, 0xdf,
	0x1f, 0x0e, 0x0a, 0x0c, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22, 0x00,
	0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73,
	0x74, 0x6a, 0x2d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0,
	0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x80, 0x02,
	0x01, 0x98, 0x02, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xc2, 0x01, 0x04, 0xc8, 0x01, 0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x05, 0xd2, 0x01, 0x02, 0x18,
	0x00, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0xe2, 0xdf, 0x1f,
	0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x98, 0x02, 0x40, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x56, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xf6, 0x01, 0x0a, 0x0f, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02,
	0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f,
	0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x79, 0x6a, 0x2d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0,
	0x01, 0x10, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0xfe, 0x0c, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01,
	0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d,
	0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x15, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30,
	0x00, 0x38, 0x64, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x15, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xa2, 0xa1, 0x1f,
	0x04, 0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x15, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06,
	0x01, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x01, 0x40, 0x00, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x12, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0d, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x65,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x65, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x64, 0x66,
	0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x64, 0x66, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0a, 0x68, 0x64, 0x66, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x68, 0x64, 0x66, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x64, 0x66, 0x73, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0a, 0x68, 0x64, 0x66, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x74,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x66, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x74, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x68, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x35, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x67, 0x77,
	0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x67, 0x77, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x67, 0x77, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x63, 0x64, 0x63,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x64, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x63, 0x64, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f,
	0x6c, 0x6f, 0x67, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x6f,
	0x67, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0a, 0x68, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x06, 0xca, 0xb2,
	0x04, 0x02, 0x0a, 0x00, 0x22, 0xb1, 0x08, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07,
	0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a,
	0x18, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2,
	0x01, 0x05, 0x40, 0x80, 0x86, 0x83, 0x0f, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x40, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x6e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18,
	0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x2b, 0x12, 0x29, 0xc2, 0x01,
	0x26, 0x4a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x4a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x4a,
	0x03, 0x64, 0x61, 0x79, 0x4a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x4a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x4a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda,
	0x01, 0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x05, 0x01,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09,
	0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x64, 0x40, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xe2,
	0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07,
	0xb2, 0x01, 0x04, 0x38, 0x64, 0x40, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xe2, 0xdf, 0x1f,
	0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01,
	0x04, 0x38, 0x1e, 0x40, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x5c, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x10, 0x03, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65,
	0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x02,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xf3, 0x03, 0x0a, 0x0e, 0x53, 0x79, 0x6e,
	0x63, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2,
	0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01,
	0x07, 0x90, 0x02, 0x02, 0x98, 0x02, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98,
	0x02, 0x40, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x30, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x22, 0x30,
	0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x70, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x70, 0x6b, 0x22, 0xcc, 0x02, 0x0a,
	0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x5f,
	0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x53, 0x71,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0xb2, 0x01, 0x0a, 0x0d,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x8c, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x73, 0x22,
	0x8b, 0x01, 0x0a, 0x13, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x13, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6b,
	0x65, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x22, 0xad, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67,
	0x22, 0xae, 0x02, 0x0a, 0x0b, 0x50, 0x67, 0x77, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x73, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x73, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x64, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x73, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x67, 0x74, 0x69, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x47,
	0x74, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x05,
	0x0a, 0x0a, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72,
	0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x5f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x48, 0x64, 0x66, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdb, 0x04, 0x0a, 0x0a, 0x48,
	0x64, 0x66, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb7, 0x03, 0x0a, 0x09, 0x46, 0x74, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xd4, 0x02, 0x0a, 0x09, 0x46, 0x74, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x7e, 0x0a, 0x0b, 0x48, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x48, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x75, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x77,
	0x6b, 0x65, 0x79, 0x22, 0x7f, 0x0a, 0x0b, 0x48, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62,
	0x61, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x25, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x13,
	0x48, 0x62, 0x61, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6c,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x77, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x77, 0x6b, 0x65, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x0b, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x43,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x6d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xa2, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x42, 0x6e, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x13, 0x50, 0x42, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x50,
	0x00, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_sync_job_proto_rawDescOnce sync.Once
	file_proto_types_model_sync_job_proto_rawDescData = file_proto_types_model_sync_job_proto_rawDesc
)

func file_proto_types_model_sync_job_proto_rawDescGZIP() []byte {
	file_proto_types_model_sync_job_proto_rawDescOnce.Do(func() {
		file_proto_types_model_sync_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_sync_job_proto_rawDescData)
	})
	return file_proto_types_model_sync_job_proto_rawDescData
}

var file_proto_types_model_sync_job_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_types_model_sync_job_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_proto_types_model_sync_job_proto_goTypes = []interface{}{
	(SyncJob_Type)(0),                      // 0: model.SyncJob.Type
	(SyncJob_Status)(0),                    // 1: model.SyncJob.Status
	(SyncJobSchedule_SchedulePolicy)(0),    // 2: model.SyncJobSchedule.SchedulePolicy
	(SyncJobSchedule_ConcurrencyPolicy)(0), // 3: model.SyncJobSchedule.ConcurrencyPolicy
	(SyncJobSchedule_RetryPolicy)(0),       // 4: model.SyncJobSchedule.RetryPolicy
	(SyncJobRelease_Status)(0),             // 5: model.SyncJobRelease.Status
	(*SyncJob)(nil),                        // 6: model.SyncJob
	(*SyncJobProperty)(nil),                // 7: model.SyncJobProperty
	(*SyncJobArgs)(nil),                    // 8: model.SyncJobArgs
	(*SyncJobSchedule)(nil),                // 9: model.SyncJobSchedule
	(*SyncJobRelease)(nil),                 // 10: model.SyncJobRelease
	(*Column)(nil),                         // 11: model.Column
	(*RelationaldbSource)(nil),             // 12: model.RelationaldbSource
	(*RelationaldbTarget)(nil),             // 13: model.RelationaldbTarget
	(*MongodbSource)(nil),                  // 14: model.MongodbSource
	(*MongodbTarget)(nil),                  // 15: model.MongodbTarget
	(*ElasticSearchSource)(nil),            // 16: model.ElasticSearchSource
	(*ElasticSearchTarget)(nil),            // 17: model.ElasticSearchTarget
	(*LogminerSource)(nil),                 // 18: model.LogminerSource
	(*PgwalSource)(nil),                    // 19: model.PgwalSource
	(*SqlServerCdcSource)(nil),             // 20: model.SqlServerCdcSource
	(*BinlogSource)(nil),                   // 21: model.BinlogSource
	(*Start)(nil),                          // 22: model.Start
	(*HiveTarget)(nil),                     // 23: model.HiveTarget
	(*HdfsSource)(nil),                     // 24: model.HdfsSource
	(*HdfsTarget)(nil),                     // 25: model.HdfsTarget
	(*FtpSource)(nil),                      // 26: model.FtpSource
	(*FtpTarget)(nil),                      // 27: model.FtpTarget
	(*HbaseSource)(nil),                    // 28: model.HbaseSource
	(*HbaseReadParameter)(nil),             // 29: model.HbaseReadParameter
	(*Range)(nil),                          // 30: model.Range
	(*HbaseTarget)(nil),                    // 31: model.HbaseTarget
	(*Table)(nil),                          // 32: model.Table
	(*HbaseWriteParameter)(nil),            // 33: model.HbaseWriteParameter
	(*KafkaSource)(nil),                    // 34: model.KafkaSource
	(*ConsumerSettings)(nil),               // 35: model.ConsumerSettings
	(*KafkaTarget)(nil),                    // 36: model.KafkaTarget
	(*RedisTarget)(nil),                    // 37: model.RedisTarget
}
var file_proto_types_model_sync_job_proto_depIdxs = []int32{
	0,  // 0: model.SyncJob.type:type_name -> model.SyncJob.Type
	1,  // 1: model.SyncJob.status:type_name -> model.SyncJob.Status
	8,  // 2: model.SyncJobProperty.args:type_name -> model.SyncJobArgs
	9,  // 3: model.SyncJobProperty.schedule:type_name -> model.SyncJobSchedule
	12, // 4: model.SyncJobArgs.relationaldb_source:type_name -> model.RelationaldbSource
	13, // 5: model.SyncJobArgs.relationaldb_target:type_name -> model.RelationaldbTarget
	14, // 6: model.SyncJobArgs.mongodb_source:type_name -> model.MongodbSource
	15, // 7: model.SyncJobArgs.mongodb_target:type_name -> model.MongodbTarget
	16, // 8: model.SyncJobArgs.elasticsearch_source:type_name -> model.ElasticSearchSource
	17, // 9: model.SyncJobArgs.elasticsearch_target:type_name -> model.ElasticSearchTarget
	24, // 10: model.SyncJobArgs.hdfs_source:type_name -> model.HdfsSource
	25, // 11: model.SyncJobArgs.hdfs_target:type_name -> model.HdfsTarget
	26, // 12: model.SyncJobArgs.ftp_source:type_name -> model.FtpSource
	27, // 13: model.SyncJobArgs.ftp_target:type_name -> model.FtpTarget
	28, // 14: model.SyncJobArgs.hbase_source:type_name -> model.HbaseSource
	31, // 15: model.SyncJobArgs.hbase_target:type_name -> model.HbaseTarget
	34, // 16: model.SyncJobArgs.kafka_source:type_name -> model.KafkaSource
	36, // 17: model.SyncJobArgs.kafka_target:type_name -> model.KafkaTarget
	21, // 18: model.SyncJobArgs.binlog_source:type_name -> model.BinlogSource
	19, // 19: model.SyncJobArgs.pgwal_source:type_name -> model.PgwalSource
	20, // 20: model.SyncJobArgs.sqlservercdc_source:type_name -> model.SqlServerCdcSource
	18, // 21: model.SyncJobArgs.logminer_source:type_name -> model.LogminerSource
	37, // 22: model.SyncJobArgs.redis_target:type_name -> model.RedisTarget
	23, // 23: model.SyncJobArgs.hive_target:type_name -> model.HiveTarget
	2,  // 24: model.SyncJobSchedule.schedule_policy:type_name -> model.SyncJobSchedule.SchedulePolicy
	3,  // 25: model.SyncJobSchedule.concurrency_policy:type_name -> model.SyncJobSchedule.ConcurrencyPolicy
	4,  // 26: model.SyncJobSchedule.retry_policy:type_name -> model.SyncJobSchedule.RetryPolicy
	0,  // 27: model.SyncJobRelease.type:type_name -> model.SyncJob.Type
	5,  // 28: model.SyncJobRelease.status:type_name -> model.SyncJobRelease.Status
	11, // 29: model.RelationaldbSource.column:type_name -> model.Column
	11, // 30: model.RelationaldbTarget.column:type_name -> model.Column
	11, // 31: model.MongodbSource.column:type_name -> model.Column
	11, // 32: model.MongodbTarget.column:type_name -> model.Column
	11, // 33: model.ElasticSearchSource.column:type_name -> model.Column
	11, // 34: model.ElasticSearchTarget.column:type_name -> model.Column
	22, // 35: model.BinlogSource.start:type_name -> model.Start
	11, // 36: model.HdfsSource.column:type_name -> model.Column
	11, // 37: model.HdfsTarget.column:type_name -> model.Column
	11, // 38: model.FtpSource.column:type_name -> model.Column
	11, // 39: model.FtpTarget.column:type_name -> model.Column
	29, // 40: model.HbaseSource.parameter:type_name -> model.HbaseReadParameter
	32, // 41: model.HbaseSource.table:type_name -> model.Table
	11, // 42: model.HbaseReadParameter.column:type_name -> model.Column
	30, // 43: model.HbaseReadParameter.range:type_name -> model.Range
	33, // 44: model.HbaseTarget.parameter:type_name -> model.HbaseWriteParameter
	32, // 45: model.HbaseTarget.table:type_name -> model.Table
	11, // 46: model.HbaseWriteParameter.column:type_name -> model.Column
	11, // 47: model.KafkaSource.column:type_name -> model.Column
	35, // 48: model.KafkaSource.consumersettings:type_name -> model.ConsumerSettings
	35, // 49: model.KafkaTarget.consumersettings:type_name -> model.ConsumerSettings
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_proto_types_model_sync_job_proto_init() }
func file_proto_types_model_sync_job_proto_init() {
	if File_proto_types_model_sync_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_sync_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJobRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationaldbSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationaldbTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodbSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodbTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticSearchSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticSearchTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogminerSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgwalSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlServerCdcSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinlogSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Start); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiveTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdfsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdfsTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseReadParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseWriteParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_sync_job_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_sync_job_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_sync_job_proto_goTypes,
		DependencyIndexes: file_proto_types_model_sync_job_proto_depIdxs,
		EnumInfos:         file_proto_types_model_sync_job_proto_enumTypes,
		MessageInfos:      file_proto_types_model_sync_job_proto_msgTypes,
	}.Build()
	File_proto_types_model_sync_job_proto = out.File
	file_proto_types_model_sync_job_proto_rawDesc = nil
	file_proto_types_model_sync_job_proto_goTypes = nil
	file_proto_types_model_sync_job_proto_depIdxs = nil
}
