// Code generated by protoc-gen-govalidator. DO NOT EDIT.
// versions:
// 		protoc-gen-govalidator 0.0.1
// source: proto/types/model/table.proto

package pbmodel

import (
	_ "github.com/DataWorkbench/gproto/xgo/types/pbmodel/pbflink"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protovalidator "github.com/yu31/protoc-plugin/xgo/pkg/protovalidator"
	strings "strings"
	utf8 "unicode/utf8"
)

func (this *FlinkTable) _xxx_xxx_Validator_Validate_table_id() error {
	if !(len(this.TableId) == 20) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'table_id' must be equal to '20'", protovalidator.StringByteLenToString(this.TableId))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_source_id() error {
	if !(len(this.SourceId) == 20) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'source_id' must be equal to '20'", protovalidator.StringByteLenToString(this.SourceId))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_space_id() error {
	if !(len(this.SpaceId) == 20) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'space_id' must be equal to '20'", protovalidator.StringByteLenToString(this.SpaceId))
	}
	if !(strings.HasPrefix(this.SpaceId, "wks-")) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'space_id' must start with string 'wks-'", this.SpaceId)
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_name() error {
	if !(len(this.Name) >= 2) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'name' must be greater than or equal to '2'", protovalidator.StringByteLenToString(this.Name))
	}
	if !(len(this.Name) <= 64) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Name))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_comment() error {
	if !(utf8.RuneCountInString(this.Comment) <= 256) {
		return protovalidator.FieldError1("FlinkTable", "the character length of field 'comment' must be less than or equal to '256'", protovalidator.StringCharsetLenToString(this.Comment))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_table_schema() error {
	if dt, ok := interface{}(this.TableSchema).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_created() error {
	if !(this.Created > 0) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'created' must be greater than '0'", protovalidator.Int64ToString(this.Created))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_updated() error {
	if !(this.Updated > 0) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'updated' must be greater than '0'", protovalidator.Int64ToString(this.Updated))
	}
	return nil
}

var _xxx_xxx_Validator_FlinkTable_InEnums_Status = map[FlinkTable_Status]bool{0: true, 1: true, 2: true, 3: true}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_status() error {
	if !(this.Status > 0) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'status' must be greater than '0'", protovalidator.Int32ToString(int32(this.Status)))
	}
	if !(_xxx_xxx_Validator_FlinkTable_InEnums_Status[this.Status]) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'status' must in enums of '[0 1 2 3]'", protovalidator.Int32ToString(int32(this.Status)))
	}
	return nil
}

var _xxx_xxx_Validator_FlinkTable_InEnums_TableKind = map[FlinkTable_Kind]bool{0: true, 1: true, 2: true, 3: true}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_table_kind() error {
	if !(this.TableKind > 0) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'table_kind' must be greater than '0'", protovalidator.Int32ToString(int32(this.TableKind)))
	}
	if !(_xxx_xxx_Validator_FlinkTable_InEnums_TableKind[this.TableKind]) {
		return protovalidator.FieldError1("FlinkTable", "the value of field 'table_kind' must in enums of '[0 1 2 3]'", protovalidator.Int32ToString(int32(this.TableKind)))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_source_name() error {
	if !(len(this.SourceName) >= 0) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'source_name' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.SourceName))
	}
	if !(len(this.SourceName) <= 64) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'source_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.SourceName))
	}
	return nil
}

func (this *FlinkTable) _xxx_xxx_Validator_Validate_create_by() error {
	if !(len(this.CreateBy) <= 64) {
		return protovalidator.FieldError1("FlinkTable", "the byte length of field 'create_by' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.CreateBy))
	}
	return nil
}

// Set default value for message model.FlinkTable
func (this *FlinkTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_table_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_source_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_space_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_comment(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_schema(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_created(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_updated(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_status(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_kind(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_source_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_create_by(); err != nil {
		return err
	}
	return nil
}
