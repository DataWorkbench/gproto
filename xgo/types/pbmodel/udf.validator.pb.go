// Code generated by protoc-gen-govalidator. DO NOT EDIT.
// versions:
// 		protoc-gen-govalidator 0.0.1
// source: proto/types/model/udf.proto

package pbmodel

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protovalidator "github.com/yu31/protoc-plugin/xgo/pkg/protovalidator"
	strings "strings"
	utf8 "unicode/utf8"
)

func (this *UDF) _xxx_xxx_Validator_Validate_space_id() error {
	if !(len(this.SpaceId) == 20) {
		return protovalidator.FieldError1("UDF", "the byte length of field 'space_id' must be equal to '20'", protovalidator.StringByteLenToString(this.SpaceId))
	}
	if !(strings.HasPrefix(this.SpaceId, "wks-")) {
		return protovalidator.FieldError1("UDF", "the value of field 'space_id' must start with string 'wks-'", this.SpaceId)
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_id() error {
	if !(len(this.Id) == 20) {
		return protovalidator.FieldError1("UDF", "the byte length of field 'id' must be equal to '20'", protovalidator.StringByteLenToString(this.Id))
	}
	if !(strings.HasPrefix(this.Id, "udf-")) {
		return protovalidator.FieldError1("UDF", "the value of field 'id' must start with string 'udf-'", this.Id)
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_name() error {
	if !(len(this.Name) >= 2) {
		return protovalidator.FieldError1("UDF", "the byte length of field 'name' must be greater than or equal to '2'", protovalidator.StringByteLenToString(this.Name))
	}
	if !(len(this.Name) <= 64) {
		return protovalidator.FieldError1("UDF", "the byte length of field 'name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Name))
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_desc() error {
	if !(utf8.RuneCountInString(this.Desc) <= 256) {
		return protovalidator.FieldError1("UDF", "the character length of field 'desc' must be less than or equal to '256'", protovalidator.StringCharsetLenToString(this.Desc))
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_define() error {
	if !(utf8.RuneCountInString(this.Define) <= 20000) {
		return protovalidator.FieldError1("UDF", "the character length of field 'define' must be less than or equal to '20000'", protovalidator.StringCharsetLenToString(this.Define))
	}
	return nil
}

var _xxx_xxx_Validator_UDF_InEnums_Type = map[UDF_Type]bool{0: true, 1: true, 2: true, 3: true}

func (this *UDF) _xxx_xxx_Validator_Validate_type() error {
	if !(this.Type > 0) {
		return protovalidator.FieldError1("UDF", "the value of field 'type' must be greater than '0'", protovalidator.Int32ToString(int32(this.Type)))
	}
	if !(_xxx_xxx_Validator_UDF_InEnums_Type[this.Type]) {
		return protovalidator.FieldError1("UDF", "the value of field 'type' must in enums of '[0 1 2 3]'", protovalidator.Int32ToString(int32(this.Type)))
	}
	return nil
}

var _xxx_xxx_Validator_UDF_InEnums_Status = map[UDF_Status]bool{0: true, 1: true, 2: true}

func (this *UDF) _xxx_xxx_Validator_Validate_status() error {
	if !(this.Status > 0) {
		return protovalidator.FieldError1("UDF", "the value of field 'status' must be greater than '0'", protovalidator.Int32ToString(int32(this.Status)))
	}
	if !(_xxx_xxx_Validator_UDF_InEnums_Status[this.Status]) {
		return protovalidator.FieldError1("UDF", "the value of field 'status' must in enums of '[0 1 2]'", protovalidator.Int32ToString(int32(this.Status)))
	}
	return nil
}

var _xxx_xxx_Validator_UDF_InEnums_Language = map[UDF_Language]bool{0: true, 1: true, 2: true, 3: true}

func (this *UDF) _xxx_xxx_Validator_Validate_language() error {
	if !(this.Language > 0) {
		return protovalidator.FieldError1("UDF", "the value of field 'language' must be greater than '0'", protovalidator.Int32ToString(int32(this.Language)))
	}
	if !(_xxx_xxx_Validator_UDF_InEnums_Language[this.Language]) {
		return protovalidator.FieldError1("UDF", "the value of field 'language' must in enums of '[0 1 2 3]'", protovalidator.Int32ToString(int32(this.Language)))
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_usage_sample() error {
	if !(utf8.RuneCountInString(this.UsageSample) <= 2000) {
		return protovalidator.FieldError1("UDF", "the character length of field 'usage_sample' must be less than or equal to '2000'", protovalidator.StringCharsetLenToString(this.UsageSample))
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_created_by() error {
	if !(len(this.CreatedBy) <= 64) {
		return protovalidator.FieldError1("UDF", "the byte length of field 'created_by' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.CreatedBy))
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_created() error {
	if !(this.Created > 0) {
		return protovalidator.FieldError1("UDF", "the value of field 'created' must be greater than '0'", protovalidator.Int64ToString(this.Created))
	}
	return nil
}

func (this *UDF) _xxx_xxx_Validator_Validate_updated() error {
	if !(this.Updated > 0) {
		return protovalidator.FieldError1("UDF", "the value of field 'updated' must be greater than '0'", protovalidator.Int64ToString(this.Updated))
	}
	return nil
}

// Set default value for message model.UDF
func (this *UDF) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_space_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_desc(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_define(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_status(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_language(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_usage_sample(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_created_by(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_created(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_updated(); err != nil {
		return err
	}
	return nil
}
