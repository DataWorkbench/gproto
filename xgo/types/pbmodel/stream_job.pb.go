// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/stream_job.proto

package pbmodel

import (
	pbflink "github.com/DataWorkbench/gproto/xgo/types/pbmodel/pbflink"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamJob_Type int32

const (
	StreamJob_TypeUnset StreamJob_Type = 0 // is useless.
	StreamJob_Operator  StreamJob_Type = 1
	StreamJob_SQL       StreamJob_Type = 2
	StreamJob_Jar       StreamJob_Type = 3
	StreamJob_Python    StreamJob_Type = 4
	StreamJob_Scala     StreamJob_Type = 5
)

// Enum value maps for StreamJob_Type.
var (
	StreamJob_Type_name = map[int32]string{
		0: "TypeUnset",
		1: "Operator",
		2: "SQL",
		3: "Jar",
		4: "Python",
		5: "Scala",
	}
	StreamJob_Type_value = map[string]int32{
		"TypeUnset": 0,
		"Operator":  1,
		"SQL":       2,
		"Jar":       3,
		"Python":    4,
		"Scala":     5,
	}
)

func (x StreamJob_Type) Enum() *StreamJob_Type {
	p := new(StreamJob_Type)
	*p = x
	return p
}

func (x StreamJob_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJob_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_stream_job_proto_enumTypes[0].Descriptor()
}

func (StreamJob_Type) Type() protoreflect.EnumType {
	return &file_proto_types_model_stream_job_proto_enumTypes[0]
}

func (x StreamJob_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJob_Type.Descriptor instead.
func (StreamJob_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{0, 0}
}

type StreamJob_Status int32

const (
	StreamJob_StatusUnset StreamJob_Status = 0
	StreamJob_Deleted     StreamJob_Status = 1
	StreamJob_Enabled     StreamJob_Status = 2
)

// Enum value maps for StreamJob_Status.
var (
	StreamJob_Status_name = map[int32]string{
		0: "StatusUnset",
		1: "Deleted",
		2: "Enabled",
	}
	StreamJob_Status_value = map[string]int32{
		"StatusUnset": 0,
		"Deleted":     1,
		"Enabled":     2,
	}
)

func (x StreamJob_Status) Enum() *StreamJob_Status {
	p := new(StreamJob_Status)
	*p = x
	return p
}

func (x StreamJob_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJob_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_stream_job_proto_enumTypes[1].Descriptor()
}

func (StreamJob_Status) Type() protoreflect.EnumType {
	return &file_proto_types_model_stream_job_proto_enumTypes[1]
}

func (x StreamJob_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJob_Status.Descriptor instead.
func (StreamJob_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{0, 1}
}

type StreamJobSchedule_SchedulePolicy int32

const (
	StreamJobSchedule_SchedulePolicyUnset StreamJobSchedule_SchedulePolicy = 0
	StreamJobSchedule_Periodicity         StreamJobSchedule_SchedulePolicy = 1
	StreamJobSchedule_AppointTime         StreamJobSchedule_SchedulePolicy = 2 // Execute job in a fixed time.
	StreamJobSchedule_Immediately         StreamJobSchedule_SchedulePolicy = 3 // Execute job immediately after publishing.
)

// Enum value maps for StreamJobSchedule_SchedulePolicy.
var (
	StreamJobSchedule_SchedulePolicy_name = map[int32]string{
		0: "SchedulePolicyUnset",
		1: "Periodicity",
		2: "AppointTime",
		3: "Immediately",
	}
	StreamJobSchedule_SchedulePolicy_value = map[string]int32{
		"SchedulePolicyUnset": 0,
		"Periodicity":         1,
		"AppointTime":         2,
		"Immediately":         3,
	}
)

func (x StreamJobSchedule_SchedulePolicy) Enum() *StreamJobSchedule_SchedulePolicy {
	p := new(StreamJobSchedule_SchedulePolicy)
	*p = x
	return p
}

func (x StreamJobSchedule_SchedulePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobSchedule_SchedulePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_stream_job_proto_enumTypes[2].Descriptor()
}

func (StreamJobSchedule_SchedulePolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_stream_job_proto_enumTypes[2]
}

func (x StreamJobSchedule_SchedulePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobSchedule_SchedulePolicy.Descriptor instead.
func (StreamJobSchedule_SchedulePolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{4, 0}
}

type StreamJobSchedule_ConcurrencyPolicy int32

const (
	StreamJobSchedule_ConcurrencyPolicyUnset StreamJobSchedule_ConcurrencyPolicy = 0 // Is useless.
	StreamJobSchedule_Allow                  StreamJobSchedule_ConcurrencyPolicy = 1
	StreamJobSchedule_Forbid                 StreamJobSchedule_ConcurrencyPolicy = 2
	StreamJobSchedule_Replace                StreamJobSchedule_ConcurrencyPolicy = 3
)

// Enum value maps for StreamJobSchedule_ConcurrencyPolicy.
var (
	StreamJobSchedule_ConcurrencyPolicy_name = map[int32]string{
		0: "ConcurrencyPolicyUnset",
		1: "Allow",
		2: "Forbid",
		3: "Replace",
	}
	StreamJobSchedule_ConcurrencyPolicy_value = map[string]int32{
		"ConcurrencyPolicyUnset": 0,
		"Allow":                  1,
		"Forbid":                 2,
		"Replace":                3,
	}
)

func (x StreamJobSchedule_ConcurrencyPolicy) Enum() *StreamJobSchedule_ConcurrencyPolicy {
	p := new(StreamJobSchedule_ConcurrencyPolicy)
	*p = x
	return p
}

func (x StreamJobSchedule_ConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobSchedule_ConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_stream_job_proto_enumTypes[3].Descriptor()
}

func (StreamJobSchedule_ConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_stream_job_proto_enumTypes[3]
}

func (x StreamJobSchedule_ConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobSchedule_ConcurrencyPolicy.Descriptor instead.
func (StreamJobSchedule_ConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{4, 1}
}

type StreamJobSchedule_RetryPolicy int32

const (
	StreamJobSchedule_RetryPolicyUnset StreamJobSchedule_RetryPolicy = 0 // Is useless.
	StreamJobSchedule_None             StreamJobSchedule_RetryPolicy = 1
	StreamJobSchedule_Auto             StreamJobSchedule_RetryPolicy = 2
)

// Enum value maps for StreamJobSchedule_RetryPolicy.
var (
	StreamJobSchedule_RetryPolicy_name = map[int32]string{
		0: "RetryPolicyUnset",
		1: "None",
		2: "Auto",
	}
	StreamJobSchedule_RetryPolicy_value = map[string]int32{
		"RetryPolicyUnset": 0,
		"None":             1,
		"Auto":             2,
	}
)

func (x StreamJobSchedule_RetryPolicy) Enum() *StreamJobSchedule_RetryPolicy {
	p := new(StreamJobSchedule_RetryPolicy)
	*p = x
	return p
}

func (x StreamJobSchedule_RetryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobSchedule_RetryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_stream_job_proto_enumTypes[4].Descriptor()
}

func (StreamJobSchedule_RetryPolicy) Type() protoreflect.EnumType {
	return &file_proto_types_model_stream_job_proto_enumTypes[4]
}

func (x StreamJobSchedule_RetryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobSchedule_RetryPolicy.Descriptor instead.
func (StreamJobSchedule_RetryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{4, 2}
}

type StreamJobRelease_Status int32

const (
	StreamJobRelease_StatusUnset StreamJobRelease_Status = 0
	StreamJobRelease_Active      StreamJobRelease_Status = 1
	StreamJobRelease_Suspended   StreamJobRelease_Status = 2
	StreamJobRelease_Deleted     StreamJobRelease_Status = 3
)

// Enum value maps for StreamJobRelease_Status.
var (
	StreamJobRelease_Status_name = map[int32]string{
		0: "StatusUnset",
		1: "Active",
		2: "Suspended",
		3: "Deleted",
	}
	StreamJobRelease_Status_value = map[string]int32{
		"StatusUnset": 0,
		"Active":      1,
		"Suspended":   2,
		"Deleted":     3,
	}
)

func (x StreamJobRelease_Status) Enum() *StreamJobRelease_Status {
	p := new(StreamJobRelease_Status)
	*p = x
	return p
}

func (x StreamJobRelease_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobRelease_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_stream_job_proto_enumTypes[5].Descriptor()
}

func (StreamJobRelease_Status) Type() protoreflect.EnumType {
	return &file_proto_types_model_stream_job_proto_enumTypes[5]
}

func (x StreamJobRelease_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobRelease_Status.Descriptor instead.
func (StreamJobRelease_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{5, 0}
}

// The stream job info
type StreamJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// PID is the parent id(directory). pid is "" means root(`/`)
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid" gorm:"column:pid;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The job version id, only used for Published job.
	// Only used in published job.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job Description.
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// IsDirectory represents this job whether a directory.
	IsDirectory bool `protobuf:"varint,7,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory" gorm:"column:is_directory;"`
	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type StreamJob_Type `protobuf:"varint,8,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type" gorm:"column:type;"`
	// Job status, 1 => "Deleted", 2 => "Enabled".
	Status StreamJob_Status `protobuf:"varint,9,opt,name=status,proto3,enum=model.StreamJob_Status" json:"status" gorm:"column:status;"`
	// The user-id of created this job.
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by" gorm:"column:created_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,11,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,12,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamJob) Reset() {
	*x = StreamJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_stream_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJob) ProtoMessage() {}

func (x *StreamJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_stream_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJob.ProtoReflect.Descriptor instead.
func (*StreamJob) Descriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{0}
}

func (x *StreamJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJob) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *StreamJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJob) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StreamJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamJob) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *StreamJob) GetType() StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return StreamJob_TypeUnset
}

func (x *StreamJob) GetStatus() StreamJob_Status {
	if x != nil {
		return x.Status
	}
	return StreamJob_StatusUnset
}

func (x *StreamJob) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *StreamJob) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamJob) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// StreamJobProperty represents property of job.
type StreamJobProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job Id, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version  string             `protobuf:"bytes,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey"`
	Code     *StreamJobCode     `protobuf:"bytes,4,opt,name=code,proto3" json:"code" gorm:"column:code;type:json"`
	Args     *StreamJobArgs     `protobuf:"bytes,5,opt,name=args,proto3" json:"args" gorm:"column:args;type:json"`
	Schedule *StreamJobSchedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule" gorm:"column:schedule;type:json"`
}

func (x *StreamJobProperty) Reset() {
	*x = StreamJobProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_stream_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobProperty) ProtoMessage() {}

func (x *StreamJobProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_stream_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobProperty.ProtoReflect.Descriptor instead.
func (*StreamJobProperty) Descriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{1}
}

func (x *StreamJobProperty) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJobProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJobProperty) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StreamJobProperty) GetCode() *StreamJobCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StreamJobProperty) GetArgs() *StreamJobArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *StreamJobProperty) GetSchedule() *StreamJobSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// StreamJobCode represents a job code info.
type StreamJobCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type StreamJob_Type `protobuf:"varint,1,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type"`
	// The flink operator nodes. Is useless on present.
	Operators []*pbflink.FlinkOperator `protobuf:"bytes,2,rep,name=operators,proto3" json:"operators"`
	Sql       *pbflink.FlinkSQL        `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql"`
	// Jar
	Jar *pbflink.FlinkJar `protobuf:"bytes,4,opt,name=jar,proto3" json:"jar"`
	// Python
	Python *pbflink.FlinkPython `protobuf:"bytes,5,opt,name=python,proto3" json:"python"`
	// Scala
	Scala *pbflink.FlinkScala `protobuf:"bytes,6,opt,name=scala,proto3" json:"scala"`
}

func (x *StreamJobCode) Reset() {
	*x = StreamJobCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_stream_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobCode) ProtoMessage() {}

func (x *StreamJobCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_stream_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobCode.ProtoReflect.Descriptor instead.
func (*StreamJobCode) Descriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{2}
}

func (x *StreamJobCode) GetType() StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return StreamJob_TypeUnset
}

func (x *StreamJobCode) GetOperators() []*pbflink.FlinkOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *StreamJobCode) GetSql() *pbflink.FlinkSQL {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (x *StreamJobCode) GetJar() *pbflink.FlinkJar {
	if x != nil {
		return x.Jar
	}
	return nil
}

func (x *StreamJobCode) GetPython() *pbflink.FlinkPython {
	if x != nil {
		return x.Python
	}
	return nil
}

func (x *StreamJobCode) GetScala() *pbflink.FlinkScala {
	if x != nil {
		return x.Scala
	}
	return nil
}

// StreamJobArgs represents a job running parameters.
// Not use with gorm.
type StreamJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flink cluster id. Is required.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id"`
	// Flink parallelism. Is required, Min 0, Max 100. default is 1.
	Parallelism int32 `protobuf:"varint,2,opt,name=parallelism,proto3" json:"parallelism"`
	// The list of function(udf). Not required
	Udfs []string `protobuf:"bytes,3,rep,name=udfs,proto3" json:"udfs"`
	// The list of connectors dependency package. Not required.
	Connectors []string `protobuf:"bytes,4,rep,name=connectors,proto3" json:"connectors"`
	// The list of built-in connectors. Not required.
	// Notice: check build-in connectors in `StreamJobManage Service`
	BuiltInConnectors []string `protobuf:"bytes,5,rep,name=built_in_connectors,json=builtInConnectors,proto3" json:"built_in_connectors"`
}

func (x *StreamJobArgs) Reset() {
	*x = StreamJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_stream_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobArgs) ProtoMessage() {}

func (x *StreamJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_stream_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobArgs.ProtoReflect.Descriptor instead.
func (*StreamJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{3}
}

func (x *StreamJobArgs) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamJobArgs) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *StreamJobArgs) GetUdfs() []string {
	if x != nil {
		return x.Udfs
	}
	return nil
}

func (x *StreamJobArgs) GetConnectors() []string {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *StreamJobArgs) GetBuiltInConnectors() []string {
	if x != nil {
		return x.BuiltInConnectors
	}
	return nil
}

// StreamJobSchedule represents a job schedule info.
// Not use with gorm.
type StreamJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Policy, Options Value: 1 => "Periodicity", 2 => "AppointTime", 3 => "Immediately"
	// Is Required.
	SchedulePolicy StreamJobSchedule_SchedulePolicy `protobuf:"varint,1,opt,name=schedule_policy,json=schedulePolicy,proto3,enum=model.StreamJobSchedule_SchedulePolicy" json:"schedule_policy"`
	// Timestamp of execute time for once. unit in seconds.
	// Not required, default the time of created job.
	Executed int64 `protobuf:"varint,2,opt,name=executed,proto3" json:"executed" default:"0" binding:"gte=0"`
	// ------ Period Options ------
	//
	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 31507200(1971-01-01 00:00:00), means no limit.
	Started int64 `protobuf:"varint,4,opt,name=started,proto3" json:"started"`
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
	Ended int64 `protobuf:"varint,5,opt,name=ended,proto3" json:"ended"`
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace". Is required .
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	ConcurrencyPolicy StreamJobSchedule_ConcurrencyPolicy `protobuf:"varint,6,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=model.StreamJobSchedule_ConcurrencyPolicy" json:"concurrency_policy"`
	// Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
	// Is required with with schedule_policy = 1.
	PeriodType string `protobuf:"bytes,7,opt,name=period_type,json=periodType,proto3" json:"period_type"`
	// Crontab Express. Is required with schedule_policy == 1
	Express string `protobuf:"bytes,8,opt,name=express,proto3" json:"express" binding:"-"`
	// ------ Advanced (Retry) options ------
	//
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 100 min.
	Timeout int32 `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout"`
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	RetryPolicy StreamJobSchedule_RetryPolicy `protobuf:"varint,10,opt,name=retry_policy,json=retryPolicy,proto3,enum=model.StreamJobSchedule_RetryPolicy" json:"retry_policy"`
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	RetryLimit int32 `protobuf:"varint,11,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit"`
	// Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
	RetryInterval int32 `protobuf:"varint,12,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval"`
}

func (x *StreamJobSchedule) Reset() {
	*x = StreamJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_stream_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobSchedule) ProtoMessage() {}

func (x *StreamJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_stream_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobSchedule.ProtoReflect.Descriptor instead.
func (*StreamJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{4}
}

func (x *StreamJobSchedule) GetSchedulePolicy() StreamJobSchedule_SchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return StreamJobSchedule_SchedulePolicyUnset
}

func (x *StreamJobSchedule) GetExecuted() int64 {
	if x != nil {
		return x.Executed
	}
	return 0
}

func (x *StreamJobSchedule) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *StreamJobSchedule) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *StreamJobSchedule) GetConcurrencyPolicy() StreamJobSchedule_ConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return StreamJobSchedule_ConcurrencyPolicyUnset
}

func (x *StreamJobSchedule) GetPeriodType() string {
	if x != nil {
		return x.PeriodType
	}
	return ""
}

func (x *StreamJobSchedule) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

func (x *StreamJobSchedule) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StreamJobSchedule) GetRetryPolicy() StreamJobSchedule_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return StreamJobSchedule_RetryPolicyUnset
}

func (x *StreamJobSchedule) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *StreamJobSchedule) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

// The release stream job info.
type StreamJobRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type StreamJob_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type" gorm:"column:type;"`
	// Release status, 1 => "Active", 2 => "Suspended", 3 => "Deleted",
	Status StreamJobRelease_Status `protobuf:"varint,6,opt,name=status,proto3,enum=model.StreamJobRelease_Status" json:"status" gorm:"column:status;"`
	// Job release description.
	Desc string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// The user-id of release this job.
	CreatedBy string `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by" gorm:"column:created_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,9,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,10,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamJobRelease) Reset() {
	*x = StreamJobRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_stream_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobRelease) ProtoMessage() {}

func (x *StreamJobRelease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_stream_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobRelease.ProtoReflect.Descriptor instead.
func (*StreamJobRelease) Descriptor() ([]byte, []int) {
	return file_proto_types_model_stream_job_proto_rawDescGZIP(), []int{5}
}

func (x *StreamJobRelease) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJobRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJobRelease) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StreamJobRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamJobRelease) GetType() StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return StreamJob_TypeUnset
}

func (x *StreamJobRelease) GetStatus() StreamJobRelease_Status {
	if x != nil {
		return x.Status
	}
	return StreamJobRelease_StatusUnset
}

func (x *StreamJobRelease) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamJobRelease) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *StreamJobRelease) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamJobRelease) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

var File_proto_types_model_stream_job_proto protoreflect.FileDescriptor

var file_proto_types_model_stream_job_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75,
	0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3,
	0x05, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77,
	0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe2, 0xdf, 0x1f, 0x0e, 0x0a,
	0x0c, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22, 0x00, 0xe2, 0xdf, 0x1f,
	0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca,
	0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x80, 0x02, 0x01, 0x98, 0x02,
	0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01,
	0x04, 0xc8, 0x01, 0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x53,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x05, 0xd2, 0x01, 0x02, 0x18, 0x00,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x80, 0x02, 0x00, 0x88, 0x02, 0x41, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30,
	0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x10, 0x05, 0x22,
	0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x02, 0x22, 0xac, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a,
	0x6f, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf,
	0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73,
	0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01,
	0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x10, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09,
	0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x1e, 0xe2, 0xdf, 0x1f, 0x0f, 0x0a, 0x0d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x30, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x51,
	0x4c, 0x42, 0x1e, 0xe2, 0xdf, 0x1f, 0x0f, 0x0a, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x41, 0x0a, 0x03, 0x6a, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x4a, 0x61, 0x72, 0x42, 0x1e, 0xe2, 0xdf, 0x1f, 0x0f, 0x0a, 0x0d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x03, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6a, 0x61, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x42, 0x1e, 0xe2,
	0xdf, 0x1f, 0x0f, 0x0a, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02,
	0x18, 0x04, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69,
	0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x42, 0x1e, 0xe2, 0xdf, 0x1f, 0x0f, 0x0a, 0x0d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x05, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xe2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x3a, 0x06,
	0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x15, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0xe2, 0xdf, 0x1f, 0x09,
	0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x64, 0x40, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x3c, 0x0a, 0x04, 0x75, 0x64, 0x66, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x0f, 0x0a, 0x0d, 0x0a, 0x04, 0x75, 0x64,
	0x66, 0x73, 0x12, 0x05, 0xea, 0x01, 0x02, 0x30, 0x00, 0xe2, 0xdf, 0x1f, 0x11, 0x12, 0x0f, 0xea,
	0x01, 0x0c, 0x5a, 0x0a, 0xc2, 0x01, 0x07, 0xca, 0x02, 0x04, 0x75, 0x64, 0x66, 0x2d, 0x52, 0x04,
	0x75, 0x64, 0x66, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0xe2, 0xdf, 0x1f, 0x15, 0x0a, 0x13,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x05, 0xea, 0x01,
	0x02, 0x30, 0x00, 0xe2, 0xdf, 0x1f, 0x11, 0x12, 0x0f, 0xea, 0x01, 0x0c, 0x5a, 0x0a, 0xc2, 0x01,
	0x07, 0xca, 0x02, 0x04, 0x72, 0x65, 0x73, 0x2d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xb9, 0x08, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30,
	0x00, 0x58, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05,
	0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x40, 0x80,
	0x86, 0x83, 0x0f, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x6e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x05, 0xda, 0x01, 0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x2b, 0x12, 0x29, 0xc2, 0x01, 0x26, 0x4a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x4a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x4a, 0x03, 0x64,
	0x61, 0x79, 0x4a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x4a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xe2, 0xdf, 0x1f, 0x1a, 0x0a, 0x18, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02,
	0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x05, 0x01, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07,
	0xb2, 0x01, 0x04, 0x38, 0x64, 0x40, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x56, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xe2,
	0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07,
	0xb2, 0x01, 0x04, 0x38, 0x64, 0x40, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xe2, 0xdf, 0x1f,
	0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01,
	0x04, 0x38, 0x1e, 0x40, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x5c, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x10, 0x03, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65,
	0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x02,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xfc, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12,
	0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01,
	0x10, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a,
	0xc2, 0x01, 0x07, 0x90, 0x02, 0x02, 0x98, 0x02, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04,
	0x30, 0x00, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x00, 0x88, 0x02, 0x41, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x42, 0x6b, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x10, 0x50,
	0x42, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x50,
	0x00, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_stream_job_proto_rawDescOnce sync.Once
	file_proto_types_model_stream_job_proto_rawDescData = file_proto_types_model_stream_job_proto_rawDesc
)

func file_proto_types_model_stream_job_proto_rawDescGZIP() []byte {
	file_proto_types_model_stream_job_proto_rawDescOnce.Do(func() {
		file_proto_types_model_stream_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_stream_job_proto_rawDescData)
	})
	return file_proto_types_model_stream_job_proto_rawDescData
}

var file_proto_types_model_stream_job_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_types_model_stream_job_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_types_model_stream_job_proto_goTypes = []interface{}{
	(StreamJob_Type)(0),                      // 0: model.StreamJob.Type
	(StreamJob_Status)(0),                    // 1: model.StreamJob.Status
	(StreamJobSchedule_SchedulePolicy)(0),    // 2: model.StreamJobSchedule.SchedulePolicy
	(StreamJobSchedule_ConcurrencyPolicy)(0), // 3: model.StreamJobSchedule.ConcurrencyPolicy
	(StreamJobSchedule_RetryPolicy)(0),       // 4: model.StreamJobSchedule.RetryPolicy
	(StreamJobRelease_Status)(0),             // 5: model.StreamJobRelease.Status
	(*StreamJob)(nil),                        // 6: model.StreamJob
	(*StreamJobProperty)(nil),                // 7: model.StreamJobProperty
	(*StreamJobCode)(nil),                    // 8: model.StreamJobCode
	(*StreamJobArgs)(nil),                    // 9: model.StreamJobArgs
	(*StreamJobSchedule)(nil),                // 10: model.StreamJobSchedule
	(*StreamJobRelease)(nil),                 // 11: model.StreamJobRelease
	(*pbflink.FlinkOperator)(nil),            // 12: flink.FlinkOperator
	(*pbflink.FlinkSQL)(nil),                 // 13: flink.FlinkSQL
	(*pbflink.FlinkJar)(nil),                 // 14: flink.FlinkJar
	(*pbflink.FlinkPython)(nil),              // 15: flink.FlinkPython
	(*pbflink.FlinkScala)(nil),               // 16: flink.FlinkScala
}
var file_proto_types_model_stream_job_proto_depIdxs = []int32{
	0,  // 0: model.StreamJob.type:type_name -> model.StreamJob.Type
	1,  // 1: model.StreamJob.status:type_name -> model.StreamJob.Status
	8,  // 2: model.StreamJobProperty.code:type_name -> model.StreamJobCode
	9,  // 3: model.StreamJobProperty.args:type_name -> model.StreamJobArgs
	10, // 4: model.StreamJobProperty.schedule:type_name -> model.StreamJobSchedule
	0,  // 5: model.StreamJobCode.type:type_name -> model.StreamJob.Type
	12, // 6: model.StreamJobCode.operators:type_name -> flink.FlinkOperator
	13, // 7: model.StreamJobCode.sql:type_name -> flink.FlinkSQL
	14, // 8: model.StreamJobCode.jar:type_name -> flink.FlinkJar
	15, // 9: model.StreamJobCode.python:type_name -> flink.FlinkPython
	16, // 10: model.StreamJobCode.scala:type_name -> flink.FlinkScala
	2,  // 11: model.StreamJobSchedule.schedule_policy:type_name -> model.StreamJobSchedule.SchedulePolicy
	3,  // 12: model.StreamJobSchedule.concurrency_policy:type_name -> model.StreamJobSchedule.ConcurrencyPolicy
	4,  // 13: model.StreamJobSchedule.retry_policy:type_name -> model.StreamJobSchedule.RetryPolicy
	0,  // 14: model.StreamJobRelease.type:type_name -> model.StreamJob.Type
	5,  // 15: model.StreamJobRelease.status:type_name -> model.StreamJobRelease.Status
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_types_model_stream_job_proto_init() }
func file_proto_types_model_stream_job_proto_init() {
	if File_proto_types_model_stream_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_stream_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_stream_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_stream_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_stream_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_stream_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_stream_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_stream_job_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_stream_job_proto_goTypes,
		DependencyIndexes: file_proto_types_model_stream_job_proto_depIdxs,
		EnumInfos:         file_proto_types_model_stream_job_proto_enumTypes,
		MessageInfos:      file_proto_types_model_stream_job_proto_msgTypes,
	}.Build()
	File_proto_types_model_stream_job_proto = out.File
	file_proto_types_model_stream_job_proto_rawDesc = nil
	file_proto_types_model_stream_job_proto_goTypes = nil
	file_proto_types_model_stream_job_proto_depIdxs = nil
}
