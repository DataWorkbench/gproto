// Code generated by protoc-gen-govalidator. DO NOT EDIT.
// versions:
// 		protoc-gen-govalidator 0.0.1
// source: proto/types/model/flink/flink_job.proto

package pbflink

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protovalidator "github.com/yu31/protoc-plugin/xgo/pkg/protovalidator"
	strings "strings"
	utf8 "unicode/utf8"
)

// Set default value for message flink.FlinkJob
func (this *FlinkJob) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

var _xxx_xxx_Validator_FlinkOperator_InEnums_Type = map[FlinkOperator_Type]bool{0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true, 7: true, 8: true, 9: true, 10: true, 11: true, 12: true, 13: true, 14: true, 15: true, 16: true, 17: true, 18: true}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_type() error {
	if !(this.Type > 0) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'type' must be greater than '0'", protovalidator.Int32ToString(int32(this.Type)))
	}
	if !(_xxx_xxx_Validator_FlinkOperator_InEnums_Type[this.Type]) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'type' must in enums of '[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]'", protovalidator.Int32ToString(int32(this.Type)))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_id() error {
	if !(len(this.Id) == 20) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'id' must be equal to '20'", protovalidator.StringByteLenToString(this.Id))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_name() error {
	if !(len(this.Name) < 65) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'name' must be less than '65'", protovalidator.StringByteLenToString(this.Name))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_upstream() error {
	if !(len(this.Upstream) == 20) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'upstream' must be equal to '20'", protovalidator.StringByteLenToString(this.Upstream))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_upstream_right() error {
	if !(len(this.UpstreamRight) == 20) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'upstream_right' must be equal to '20'", protovalidator.StringByteLenToString(this.UpstreamRight))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_down_stream() error {
	if !(len(this.DownStream) == 21) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'down_stream' must be equal to '21'", protovalidator.StringByteLenToString(this.DownStream))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_point_x() error {
	if !(this.PointX >= 1) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_x' must be greater than or equal to '1'", protovalidator.Int32ToString(this.PointX))
	}
	if !(this.PointX <= 200) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_x' must be less than or equal to '200'", protovalidator.Int32ToString(this.PointX))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_point_y() error {
	if !(this.PointY >= 1) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_y' must be greater than or equal to '1'", protovalidator.Int32ToString(this.PointY))
	}
	if !(this.PointY <= 200) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_y' must be less than or equal to '200'", protovalidator.Int32ToString(this.PointY))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_property() error {
	if dt, ok := interface{}(this.Property).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.FlinkOperator
func (this *FlinkOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_upstream(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_upstream_right(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_down_stream(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_point_x(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_point_y(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_property(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkJar) _xxx_xxx_Validator_Validate_file_id() error {
	if !(len(this.FileId) == 20) {
		return protovalidator.FieldError1("FlinkJar", "the byte length of field 'file_id' must be equal to '20'", protovalidator.StringByteLenToString(this.FileId))
	}
	if !(strings.HasPrefix(this.FileId, "res-")) {
		return protovalidator.FieldError1("FlinkJar", "the value of field 'file_id' must start with string 'res-'", this.FileId)
	}
	return nil
}

func (this *FlinkJar) _xxx_xxx_Validator_Validate_jar_args() error {
	if !(len(this.JarArgs) <= 1024) {
		return protovalidator.FieldError1("FlinkJar", "the byte length of field 'jar_args' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.JarArgs))
	}
	if !(utf8.ValidString(this.JarArgs)) {
		return protovalidator.FieldError1("FlinkJar", "the value of field 'jar_args' must be a UTF8 string", this.JarArgs)
	}
	return nil
}

func (this *FlinkJar) _xxx_xxx_Validator_Validate_jar_entry() error {
	if !(len(this.JarEntry) <= 1024) {
		return protovalidator.FieldError1("FlinkJar", "the byte length of field 'jar_entry' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.JarEntry))
	}
	if !(utf8.ValidString(this.JarEntry)) {
		return protovalidator.FieldError1("FlinkJar", "the value of field 'jar_entry' must be a UTF8 string", this.JarEntry)
	}
	return nil
}

func (this *FlinkJar) _xxx_xxx_Validator_CheckIf_delete_file_id() bool {
	if !(this.DeleteFileId != "") {
		return false
	}
	return true
}

func (this *FlinkJar) _xxx_xxx_Validator_Validate_delete_file_id() error {
	if !this._xxx_xxx_Validator_CheckIf_delete_file_id() {
		return nil
	}
	if !(len(this.DeleteFileId) == 20) {
		return protovalidator.FieldError1("FlinkJar", "the byte length of field 'delete_file_id' must be equal to '20'", protovalidator.StringByteLenToString(this.DeleteFileId))
	}
	if !(strings.HasPrefix(this.DeleteFileId, "res-")) {
		return protovalidator.FieldError1("FlinkJar", "the value of field 'delete_file_id' must start with string 'res-'", this.DeleteFileId)
	}
	return nil
}

// Set default value for message flink.FlinkJar
func (this *FlinkJar) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_file_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_jar_args(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_jar_entry(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_delete_file_id(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkPython) _xxx_xxx_Validator_Validate_code() error {
	if !(len(this.Code) <= 40000) {
		return protovalidator.FieldError1("FlinkPython", "the byte length of field 'code' must be less than or equal to '40000'", protovalidator.StringByteLenToString(this.Code))
	}
	if !(utf8.ValidString(this.Code)) {
		return protovalidator.FieldError1("FlinkPython", "the value of field 'code' must be a UTF8 string", this.Code)
	}
	return nil
}

// Set default value for message flink.FlinkPython
func (this *FlinkPython) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_code(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkSQL) _xxx_xxx_Validator_Validate_code() error {
	if !(len(this.Code) <= 40000) {
		return protovalidator.FieldError1("FlinkSQL", "the byte length of field 'code' must be less than or equal to '40000'", protovalidator.StringByteLenToString(this.Code))
	}
	if !(utf8.ValidString(this.Code)) {
		return protovalidator.FieldError1("FlinkSQL", "the value of field 'code' must be a UTF8 string", this.Code)
	}
	return nil
}

// Set default value for message flink.FlinkSQL
func (this *FlinkSQL) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_code(); err != nil {
		return err
	}
	return nil
}
