// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/flink/flink_job.proto

package pbflink

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlinkOperator_Type int32

const (
	FlinkOperator_Empty     FlinkOperator_Type = 0
	FlinkOperator_Values    FlinkOperator_Type = 1
	FlinkOperator_Const     FlinkOperator_Type = 2
	FlinkOperator_Source    FlinkOperator_Type = 3
	FlinkOperator_Dimension FlinkOperator_Type = 4
	FlinkOperator_Dest      FlinkOperator_Type = 5
	FlinkOperator_OrderBy   FlinkOperator_Type = 6
	FlinkOperator_Limit     FlinkOperator_Type = 7
	FlinkOperator_Offset    FlinkOperator_Type = 8
	FlinkOperator_Fetch     FlinkOperator_Type = 9
	FlinkOperator_Filter    FlinkOperator_Type = 10
	FlinkOperator_Union     FlinkOperator_Type = 11
	FlinkOperator_Except    FlinkOperator_Type = 12
	FlinkOperator_Intersect FlinkOperator_Type = 13
	FlinkOperator_GroupBy   FlinkOperator_Type = 14
	FlinkOperator_Having    FlinkOperator_Type = 15
	FlinkOperator_Join      FlinkOperator_Type = 16
	FlinkOperator_UDTF      FlinkOperator_Type = 17
	FlinkOperator_UDTTF     FlinkOperator_Type = 18
)

// Enum value maps for FlinkOperator_Type.
var (
	FlinkOperator_Type_name = map[int32]string{
		0:  "Empty",
		1:  "Values",
		2:  "Const",
		3:  "Source",
		4:  "Dimension",
		5:  "Dest",
		6:  "OrderBy",
		7:  "Limit",
		8:  "Offset",
		9:  "Fetch",
		10: "Filter",
		11: "Union",
		12: "Except",
		13: "Intersect",
		14: "GroupBy",
		15: "Having",
		16: "Join",
		17: "UDTF",
		18: "UDTTF",
	}
	FlinkOperator_Type_value = map[string]int32{
		"Empty":     0,
		"Values":    1,
		"Const":     2,
		"Source":    3,
		"Dimension": 4,
		"Dest":      5,
		"OrderBy":   6,
		"Limit":     7,
		"Offset":    8,
		"Fetch":     9,
		"Filter":    10,
		"Union":     11,
		"Except":    12,
		"Intersect": 13,
		"GroupBy":   14,
		"Having":    15,
		"Join":      16,
		"UDTF":      17,
		"UDTTF":     18,
	}
)

func (x FlinkOperator_Type) Enum() *FlinkOperator_Type {
	p := new(FlinkOperator_Type)
	*p = x
	return p
}

func (x FlinkOperator_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlinkOperator_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_flink_flink_job_proto_enumTypes[0].Descriptor()
}

func (FlinkOperator_Type) Type() protoreflect.EnumType {
	return &file_proto_types_model_flink_flink_job_proto_enumTypes[0]
}

func (x FlinkOperator_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlinkOperator_Type.Descriptor instead.
func (FlinkOperator_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_job_proto_rawDescGZIP(), []int{0, 0}
}

// FlinkOperator
type FlinkOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OperatorType, Optional Value:
	// "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy"
	// "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except"
	// "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
	Type FlinkOperator_Type `protobuf:"varint,1,opt,name=type,proto3,enum=flink.FlinkOperator_Type" json:"type"`
	// nodeid is unique in this flow.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
	// this node name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// the upstream node id
	Upstream string `protobuf:"bytes,4,opt,name=upstream,proto3" json:"upstream"`
	// the right upstream node id
	UpstreamRight string `protobuf:"bytes,5,opt,name=upstream_right,json=upstreamRight,proto3" json:"upstream_right"`
	// the downstream node id
	DownStream string `protobuf:"bytes,6,opt,name=down_stream,json=downStream,proto3" json:"down_stream"`
	// the PointX
	PointX int32 `protobuf:"varint,7,opt,name=point_x,json=pointX,proto3" json:"point_x"`
	// the PointY
	PointY int32 `protobuf:"varint,8,opt,name=point_y,json=pointY,proto3" json:"point_y"`
	// this operator's property
	Property *OperatorProperty `protobuf:"bytes,9,opt,name=property,proto3" json:"property"`
}

func (x *FlinkOperator) Reset() {
	*x = FlinkOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkOperator) ProtoMessage() {}

func (x *FlinkOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkOperator.ProtoReflect.Descriptor instead.
func (*FlinkOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_job_proto_rawDescGZIP(), []int{0}
}

func (x *FlinkOperator) GetType() FlinkOperator_Type {
	if x != nil {
		return x.Type
	}
	return FlinkOperator_Empty
}

func (x *FlinkOperator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlinkOperator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlinkOperator) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

func (x *FlinkOperator) GetUpstreamRight() string {
	if x != nil {
		return x.UpstreamRight
	}
	return ""
}

func (x *FlinkOperator) GetDownStream() string {
	if x != nil {
		return x.DownStream
	}
	return ""
}

func (x *FlinkOperator) GetPointX() int32 {
	if x != nil {
		return x.PointX
	}
	return 0
}

func (x *FlinkOperator) GetPointY() int32 {
	if x != nil {
		return x.PointY
	}
	return 0
}

func (x *FlinkOperator) GetProperty() *OperatorProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

// FlinkJar
type FlinkJar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jarid in resource manager. Is resource_id.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id"`
	// JarArgs
	JarArgs string `protobuf:"bytes,2,opt,name=jar_args,json=jarArgs,proto3" json:"jar_args"`
	// JarEntry
	JarEntry string `protobuf:"bytes,3,opt,name=jar_entry,json=jarEntry,proto3" json:"jar_entry"`
}

func (x *FlinkJar) Reset() {
	*x = FlinkJar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkJar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkJar) ProtoMessage() {}

func (x *FlinkJar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkJar.ProtoReflect.Descriptor instead.
func (*FlinkJar) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_job_proto_rawDescGZIP(), []int{1}
}

func (x *FlinkJar) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *FlinkJar) GetJarArgs() string {
	if x != nil {
		return x.JarArgs
	}
	return ""
}

func (x *FlinkJar) GetJarEntry() string {
	if x != nil {
		return x.JarEntry
	}
	return ""
}

// ScalaOperatorProperty
type FlinkScala struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
}

func (x *FlinkScala) Reset() {
	*x = FlinkScala{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkScala) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkScala) ProtoMessage() {}

func (x *FlinkScala) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkScala.ProtoReflect.Descriptor instead.
func (*FlinkScala) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_job_proto_rawDescGZIP(), []int{2}
}

func (x *FlinkScala) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// PythonOperatorProperty
type FlinkPython struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
}

func (x *FlinkPython) Reset() {
	*x = FlinkPython{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkPython) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkPython) ProtoMessage() {}

func (x *FlinkPython) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkPython.ProtoReflect.Descriptor instead.
func (*FlinkPython) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_job_proto_rawDescGZIP(), []int{3}
}

func (x *FlinkPython) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// FlinkSQL
type FlinkSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sql code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
}

func (x *FlinkSQL) Reset() {
	*x = FlinkSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkSQL) ProtoMessage() {}

func (x *FlinkSQL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkSQL.ProtoReflect.Descriptor instead.
func (*FlinkSQL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_job_proto_rawDescGZIP(), []int{4}
}

func (x *FlinkSQL) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

var File_proto_types_model_flink_flink_job_proto protoreflect.FileDescriptor

var file_proto_types_model_flink_flink_job_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x91, 0x05, 0x0a, 0x0d, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x41, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xf0, 0x01, 0x14, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x0a,
	0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xf0, 0x01, 0x14, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xf0, 0x01, 0x15, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x38, 0xc8, 0x01,
	0x40, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x38, 0xc8, 0x01, 0x40, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x59, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xe6,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x10, 0x0c,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x10, 0x0d, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e,
	0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x44, 0x54, 0x46, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x44, 0x54, 0x54, 0x46, 0x10, 0x12, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x4a, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x6a, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04,
	0x98, 0x02, 0x80, 0x08, 0x52, 0x07, 0x6a, 0x61, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a,
	0x09, 0x6a, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0x98, 0x02, 0x80, 0x08, 0x52,
	0x08, 0x6a, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x0a, 0x46, 0x6c, 0x69,
	0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x12, 0x0b, 0xc2, 0x01, 0x08,
	0x98, 0x02, 0xc0, 0xb8, 0x02, 0x88, 0x05, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x34,
	0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f,
	0x0d, 0x12, 0x0b, 0xc2, 0x01, 0x08, 0x98, 0x02, 0xc0, 0xb8, 0x02, 0x88, 0x05, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x51, 0x4c,
	0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xe2, 0xdf, 0x1f, 0x0d, 0x12, 0x0b, 0xc2, 0x01, 0x08, 0x98, 0x02, 0xc0, 0xb8, 0x02, 0x88, 0x05,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x62,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0a, 0x50, 0x42, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4a, 0x6f,
	0x62, 0x50, 0x00, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70,
	0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_flink_flink_job_proto_rawDescOnce sync.Once
	file_proto_types_model_flink_flink_job_proto_rawDescData = file_proto_types_model_flink_flink_job_proto_rawDesc
)

func file_proto_types_model_flink_flink_job_proto_rawDescGZIP() []byte {
	file_proto_types_model_flink_flink_job_proto_rawDescOnce.Do(func() {
		file_proto_types_model_flink_flink_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_flink_flink_job_proto_rawDescData)
	})
	return file_proto_types_model_flink_flink_job_proto_rawDescData
}

var file_proto_types_model_flink_flink_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_types_model_flink_flink_job_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_types_model_flink_flink_job_proto_goTypes = []interface{}{
	(FlinkOperator_Type)(0),  // 0: flink.FlinkOperator.Type
	(*FlinkOperator)(nil),    // 1: flink.FlinkOperator
	(*FlinkJar)(nil),         // 2: flink.FlinkJar
	(*FlinkScala)(nil),       // 3: flink.FlinkScala
	(*FlinkPython)(nil),      // 4: flink.FlinkPython
	(*FlinkSQL)(nil),         // 5: flink.FlinkSQL
	(*OperatorProperty)(nil), // 6: flink.OperatorProperty
}
var file_proto_types_model_flink_flink_job_proto_depIdxs = []int32{
	0, // 0: flink.FlinkOperator.type:type_name -> flink.FlinkOperator.Type
	6, // 1: flink.FlinkOperator.property:type_name -> flink.OperatorProperty
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_types_model_flink_flink_job_proto_init() }
func file_proto_types_model_flink_flink_job_proto_init() {
	if File_proto_types_model_flink_flink_job_proto != nil {
		return
	}
	file_proto_types_model_flink_flink_operator_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_flink_flink_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkJar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkScala); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkPython); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_flink_flink_job_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_flink_flink_job_proto_goTypes,
		DependencyIndexes: file_proto_types_model_flink_flink_job_proto_depIdxs,
		EnumInfos:         file_proto_types_model_flink_flink_job_proto_enumTypes,
		MessageInfos:      file_proto_types_model_flink_flink_job_proto_msgTypes,
	}.Build()
	File_proto_types_model_flink_flink_job_proto = out.File
	file_proto_types_model_flink_flink_job_proto_rawDesc = nil
	file_proto_types_model_flink_flink_job_proto_goTypes = nil
	file_proto_types_model_flink_flink_job_proto_depIdxs = nil
}
