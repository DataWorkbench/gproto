// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/flink/flink_config.proto

package pbflink

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FlinkConfig
type FlinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use-defined config. Not required.
	Custom []*FlinkConfig_Item `protobuf:"bytes,1,rep,name=custom,proto3" json:"custom"`
	// RestartStrategy settings. Is required.
	RestartStrategy *FlinkConfig_RestartStrategy `protobuf:"bytes,2,opt,name=restart_strategy,json=restartStrategy,proto3" json:"restart_strategy"`
	// Logger settings. Is required.
	Logger *FlinkConfig_Logger `protobuf:"bytes,3,opt,name=logger,proto3" json:"logger"`
}

func (x *FlinkConfig) Reset() {
	*x = FlinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig) ProtoMessage() {}

func (x *FlinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig.ProtoReflect.Descriptor instead.
func (*FlinkConfig) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_config_proto_rawDescGZIP(), []int{0}
}

func (x *FlinkConfig) GetCustom() []*FlinkConfig_Item {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *FlinkConfig) GetRestartStrategy() *FlinkConfig_RestartStrategy {
	if x != nil {
		return x.RestartStrategy
	}
	return nil
}

func (x *FlinkConfig) GetLogger() *FlinkConfig_Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

// Item for uses-defined config.
type FlinkConfig_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key in key/value item, Is required, Min: 1, Max: 1024.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// The value in key/value item, Is required, Min: 1, Max: 1024.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *FlinkConfig_Item) Reset() {
	*x = FlinkConfig_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_Item) ProtoMessage() {}

func (x *FlinkConfig_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_Item.ProtoReflect.Descriptor instead.
func (*FlinkConfig_Item) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FlinkConfig_Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FlinkConfig_Item) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Config for flink restart strategy.
type FlinkConfig_RestartStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
	RestartStrategy string `protobuf:"bytes,1,opt,name=restart_strategy,json=restartStrategy,proto3" json:"restart_strategy"`
	// Affect when restart_strategy == "fixed-delay". Min: 1, Max: 1000. Default 1.
	FixedDelayAttempts int32 `protobuf:"varint,2,opt,name=fixed_delay_attempts,json=fixedDelayAttempts,proto3" json:"fixed_delay_attempts"`
	// Affect when restart_strategy == "fixed-delay". Min: 1, Max: 86400. Default 1, unit is second.
	FixedDelayDelay int32 `protobuf:"varint,3,opt,name=fixed_delay_delay,json=fixedDelayDelay,proto3" json:"fixed_delay_delay,omitempty"`
	// Affect when restart_strategy == "failure-rate". Min: 1, Max: 1000. Default 1.
	FailureRateMaxFailuresPerInterval int32 `protobuf:"varint,4,opt,name=failure_rate_max_failures_per_interval,json=failureRateMaxFailuresPerInterval,proto3" json:"failure_rate_max_failures_per_interval"`
	// Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 1. unit is second.
	FailureRateDelay int32 `protobuf:"varint,5,opt,name=failure_rate_delay,json=failureRateDelay,proto3" json:"failure_rate_delay"`
	// Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 60, unit is second.
	FailureRateFailureRateInterval int32 `protobuf:"varint,6,opt,name=failure_rate_failure_rate_interval,json=failureRateFailureRateInterval,proto3" json:"failure_rate_failure_rate_interval"`
}

func (x *FlinkConfig_RestartStrategy) Reset() {
	*x = FlinkConfig_RestartStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_RestartStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_RestartStrategy) ProtoMessage() {}

func (x *FlinkConfig_RestartStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_RestartStrategy.ProtoReflect.Descriptor instead.
func (*FlinkConfig_RestartStrategy) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FlinkConfig_RestartStrategy) GetRestartStrategy() string {
	if x != nil {
		return x.RestartStrategy
	}
	return ""
}

func (x *FlinkConfig_RestartStrategy) GetFixedDelayAttempts() int32 {
	if x != nil {
		return x.FixedDelayAttempts
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFixedDelayDelay() int32 {
	if x != nil {
		return x.FixedDelayDelay
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFailureRateMaxFailuresPerInterval() int32 {
	if x != nil {
		return x.FailureRateMaxFailuresPerInterval
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFailureRateDelay() int32 {
	if x != nil {
		return x.FailureRateDelay
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFailureRateFailureRateInterval() int32 {
	if x != nil {
		return x.FailureRateFailureRateInterval
	}
	return 0
}

// Log config.
type FlinkConfig_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
	RootLogLevel string `protobuf:"bytes,1,opt,name=root_log_level,json=rootLogLevel,proto3" json:"root_log_level"`
}

func (x *FlinkConfig_Logger) Reset() {
	*x = FlinkConfig_Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_Logger) ProtoMessage() {}

func (x *FlinkConfig_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_Logger.ProtoReflect.Descriptor instead.
func (*FlinkConfig_Logger) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FlinkConfig_Logger) GetRootLogLevel() string {
	if x != nil {
		return x.RootLogLevel
	}
	return ""
}

var File_proto_types_model_flink_flink_config_proto protoreflect.FileDescriptor

var file_proto_types_model_flink_flink_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x07,
	0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xe2, 0x01, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x1a, 0x4c, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01,
	0x04, 0x98, 0x02, 0x80, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xc2, 0x01, 0x04, 0x98, 0x02, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xf1, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe2,
	0xdf, 0x1f, 0x26, 0x12, 0x24, 0xc2, 0x01, 0x21, 0x4a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x4a, 0x0b,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x48, 0x0a, 0x14, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06,
	0x01, 0x31, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x38, 0xe8, 0x07, 0x40, 0x01,
	0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x5b, 0x0a, 0x26, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x31, 0x52, 0x21, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x17, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0xa3, 0x05, 0x40, 0x01, 0x52, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x63,
	0x0a, 0x22, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x33, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0xa3,
	0x05, 0x40, 0x01, 0x52, 0x1e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0x65, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x5b, 0x0a,
	0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xa2, 0xa1, 0x1f, 0x07, 0xaa, 0x06, 0x04, 0x49, 0x4e,
	0x46, 0x4f, 0xe2, 0xdf, 0x1f, 0x26, 0x12, 0x24, 0xc2, 0x01, 0x21, 0x4a, 0x05, 0x54, 0x52, 0x41,
	0x43, 0x45, 0x4a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x4a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x4a,
	0x04, 0x57, 0x41, 0x52, 0x4e, 0x4a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x52, 0x0c, 0x72, 0x6f,
	0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x42, 0x78, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d,
	0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x62, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x42, 0x0d, 0x50, 0x42, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x00, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_flink_flink_config_proto_rawDescOnce sync.Once
	file_proto_types_model_flink_flink_config_proto_rawDescData = file_proto_types_model_flink_flink_config_proto_rawDesc
)

func file_proto_types_model_flink_flink_config_proto_rawDescGZIP() []byte {
	file_proto_types_model_flink_flink_config_proto_rawDescOnce.Do(func() {
		file_proto_types_model_flink_flink_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_flink_flink_config_proto_rawDescData)
	})
	return file_proto_types_model_flink_flink_config_proto_rawDescData
}

var file_proto_types_model_flink_flink_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_types_model_flink_flink_config_proto_goTypes = []interface{}{
	(*FlinkConfig)(nil),                 // 0: flink.FlinkConfig
	(*FlinkConfig_Item)(nil),            // 1: flink.FlinkConfig.Item
	(*FlinkConfig_RestartStrategy)(nil), // 2: flink.FlinkConfig.RestartStrategy
	(*FlinkConfig_Logger)(nil),          // 3: flink.FlinkConfig.Logger
}
var file_proto_types_model_flink_flink_config_proto_depIdxs = []int32{
	1, // 0: flink.FlinkConfig.custom:type_name -> flink.FlinkConfig.Item
	2, // 1: flink.FlinkConfig.restart_strategy:type_name -> flink.FlinkConfig.RestartStrategy
	3, // 2: flink.FlinkConfig.logger:type_name -> flink.FlinkConfig.Logger
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_types_model_flink_flink_config_proto_init() }
func file_proto_types_model_flink_flink_config_proto_init() {
	if File_proto_types_model_flink_flink_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_flink_flink_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_RestartStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_flink_flink_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_flink_flink_config_proto_goTypes,
		DependencyIndexes: file_proto_types_model_flink_flink_config_proto_depIdxs,
		MessageInfos:      file_proto_types_model_flink_flink_config_proto_msgTypes,
	}.Build()
	File_proto_types_model_flink_flink_config_proto = out.File
	file_proto_types_model_flink_flink_config_proto_rawDesc = nil
	file_proto_types_model_flink_flink_config_proto_goTypes = nil
	file_proto_types_model_flink_flink_config_proto_depIdxs = nil
}
