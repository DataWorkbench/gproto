// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/iaas/vpc.proto

package pbiaas

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EipName string `protobuf:"bytes,1,opt,name=eip_name,json=eipName,proto3" json:"eip_name"`
	EipId   string `protobuf:"bytes,2,opt,name=eip_id,json=eipId,proto3" json:"eip_id"`
	EipAddr string `protobuf:"bytes,3,opt,name=eip_addr,json=eipAddr,proto3" json:"eip_addr"`
}

func (x *EIP) Reset() {
	*x = EIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EIP) ProtoMessage() {}

func (x *EIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EIP.ProtoReflect.Descriptor instead.
func (*EIP) Descriptor() ([]byte, []int) {
	return file_proto_types_model_iaas_vpc_proto_rawDescGZIP(), []int{0}
}

func (x *EIP) GetEipName() string {
	if x != nil {
		return x.EipName
	}
	return ""
}

func (x *EIP) GetEipId() string {
	if x != nil {
		return x.EipId
	}
	return ""
}

func (x *EIP) GetEipAddr() string {
	if x != nil {
		return x.EipAddr
	}
	return ""
}

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId   string `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id"`
	RouterName string `protobuf:"bytes,2,opt,name=router_name,json=routerName,proto3" json:"router_name"`
	// The type of router. 0 => "?", 1 => "small-scale" 2 => "?" 3 = "?" 99 = "free-scale"
	RouterType int32  `protobuf:"varint,3,opt,name=router_type,json=routerType,proto3" json:"router_type"`
	Owner      string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner"`
	// The vpc's status, Optional Value: "active | pending | poweroffed | suspended"
	Status    string `protobuf:"bytes,5,opt,name=status,proto3" json:"status"`
	BaseVxnet string `protobuf:"bytes,6,opt,name=base_vxnet,json=baseVxnet,proto3" json:"base_vxnet"`
	// The ipv4 network range. e.g: 192.168.0.0/16
	VpcNetwork string `protobuf:"bytes,7,opt,name=vpc_network,json=vpcNetwork,proto3" json:"vpc_network"`
	// The ipv6 network range. default to empty.
	VpcIpv6Network string `protobuf:"bytes,8,opt,name=vpc_ipv6_network,json=vpcIpv6Network,proto3" json:"vpc_ipv6_network"`
	// The private ip. e.g: 10.140.148.93
	PrivateIp  string `protobuf:"bytes,9,opt,name=private_ip,json=privateIp,proto3" json:"private_ip"`
	VpcId      string `protobuf:"bytes,10,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id"`
	Eip        *EIP   `protobuf:"bytes,16,opt,name=eip,proto3" json:"eip"`
	StatusTime string `protobuf:"bytes,17,opt,name=status_time,json=statusTime,proto3" json:"status_time"`
	IsApplied  int32  `protobuf:"varint,18,opt,name=is_applied,json=isApplied,proto3" json:"is_applied"`
	IsDefault  int32  `protobuf:"varint,19,opt,name=is_default,json=isDefault,proto3" json:"is_default"`
	// Field for DescribeVxnets
	//
	ManagerIp       string `protobuf:"bytes,11,opt,name=manager_ip,json=managerIp,proto3" json:"manager_ip"`
	IpNetwork       string `protobuf:"bytes,12,opt,name=ip_network,json=ipNetwork,proto3" json:"ip_network"`
	DynIpStart      string `protobuf:"bytes,13,opt,name=dyn_ip_start,json=dynIpStart,proto3" json:"dyn_ip_start"`
	DynIpEnd        string `protobuf:"bytes,14,opt,name=dyn_ip_end,json=dynIpEnd,proto3" json:"dyn_ip_end"`
	BorderPrivateIp string `protobuf:"bytes,15,opt,name=border_private_ip,json=borderPrivateIp,proto3" json:"border_private_ip"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_proto_types_model_iaas_vpc_proto_rawDescGZIP(), []int{1}
}

func (x *Router) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *Router) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *Router) GetRouterType() int32 {
	if x != nil {
		return x.RouterType
	}
	return 0
}

func (x *Router) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Router) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Router) GetBaseVxnet() string {
	if x != nil {
		return x.BaseVxnet
	}
	return ""
}

func (x *Router) GetVpcNetwork() string {
	if x != nil {
		return x.VpcNetwork
	}
	return ""
}

func (x *Router) GetVpcIpv6Network() string {
	if x != nil {
		return x.VpcIpv6Network
	}
	return ""
}

func (x *Router) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *Router) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *Router) GetEip() *EIP {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *Router) GetStatusTime() string {
	if x != nil {
		return x.StatusTime
	}
	return ""
}

func (x *Router) GetIsApplied() int32 {
	if x != nil {
		return x.IsApplied
	}
	return 0
}

func (x *Router) GetIsDefault() int32 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *Router) GetManagerIp() string {
	if x != nil {
		return x.ManagerIp
	}
	return ""
}

func (x *Router) GetIpNetwork() string {
	if x != nil {
		return x.IpNetwork
	}
	return ""
}

func (x *Router) GetDynIpStart() string {
	if x != nil {
		return x.DynIpStart
	}
	return ""
}

func (x *Router) GetDynIpEnd() string {
	if x != nil {
		return x.DynIpEnd
	}
	return ""
}

func (x *Router) GetBorderPrivateIp() string {
	if x != nil {
		return x.BorderPrivateIp
	}
	return ""
}

type VXNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VxnetId     string  `protobuf:"bytes,1,opt,name=vxnet_id,json=vxnetId,proto3" json:"vxnet_id"`
	VxnetName   string  `protobuf:"bytes,2,opt,name=vxnet_name,json=vxnetName,proto3" json:"vxnet_name"`
	VxnetType   int32   `protobuf:"varint,3,opt,name=vxnet_type,json=vxnetType,proto3" json:"vxnet_type"`
	Owner       string  `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner"`
	TunnelType  string  `protobuf:"bytes,5,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type"`
	VpcRouterId string  `protobuf:"bytes,6,opt,name=vpc_router_id,json=vpcRouterId,proto3" json:"vpc_router_id"`
	Router      *Router `protobuf:"bytes,7,opt,name=router,proto3" json:"router"`
}

func (x *VXNet) Reset() {
	*x = VXNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VXNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VXNet) ProtoMessage() {}

func (x *VXNet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VXNet.ProtoReflect.Descriptor instead.
func (*VXNet) Descriptor() ([]byte, []int) {
	return file_proto_types_model_iaas_vpc_proto_rawDescGZIP(), []int{2}
}

func (x *VXNet) GetVxnetId() string {
	if x != nil {
		return x.VxnetId
	}
	return ""
}

func (x *VXNet) GetVxnetName() string {
	if x != nil {
		return x.VxnetName
	}
	return ""
}

func (x *VXNet) GetVxnetType() int32 {
	if x != nil {
		return x.VxnetType
	}
	return 0
}

func (x *VXNet) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *VXNet) GetTunnelType() string {
	if x != nil {
		return x.TunnelType
	}
	return ""
}

func (x *VXNet) GetVpcRouterId() string {
	if x != nil {
		return x.VpcRouterId
	}
	return ""
}

func (x *VXNet) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

// RouterVxnet for declares the vxnet information that in router.
type RouterVxnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId        string `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id"`
	VxnetId         string `protobuf:"bytes,2,opt,name=vxnet_id,json=vxnetId,proto3" json:"vxnet_id"`
	VxnetName       string `protobuf:"bytes,3,opt,name=vxnet_name,json=vxnetName,proto3" json:"vxnet_name"`
	DynIpStart      string `protobuf:"bytes,4,opt,name=dyn_ip_start,json=dynIpStart,proto3" json:"dyn_ip_start"`
	DynIpEnd        string `protobuf:"bytes,5,opt,name=dyn_ip_end,json=dynIpEnd,proto3" json:"dyn_ip_end"`
	DynIpv6Start    string `protobuf:"bytes,6,opt,name=dyn_ipv6_start,json=dynIpv6Start,proto3" json:"dyn_ipv6_start"`
	DynIpv6End      string `protobuf:"bytes,7,opt,name=dyn_ipv6_end,json=dynIpv6End,proto3" json:"dyn_ipv6_end"`
	Owner           string `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner"`
	BorderPrivateIp string `protobuf:"bytes,9,opt,name=border_private_ip,json=borderPrivateIp,proto3" json:"border_private_ip"`
	ManagerIp       string `protobuf:"bytes,10,opt,name=manager_ip,json=managerIp,proto3" json:"manager_ip"`
	BorderId        string `protobuf:"bytes,11,opt,name=border_id,json=borderId,proto3" json:"border_id"`
	IpNetwork       string `protobuf:"bytes,12,opt,name=ip_network,json=ipNetwork,proto3" json:"ip_network"`
	Ipv6Network     string `protobuf:"bytes,13,opt,name=ipv6_network,json=ipv6Network,proto3" json:"ipv6_network"`
	Mode            int32  `protobuf:"varint,14,opt,name=mode,proto3" json:"mode"`
	VpcId           string `protobuf:"bytes,15,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id"`
}

func (x *RouterVxnet) Reset() {
	*x = RouterVxnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterVxnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterVxnet) ProtoMessage() {}

func (x *RouterVxnet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_iaas_vpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterVxnet.ProtoReflect.Descriptor instead.
func (*RouterVxnet) Descriptor() ([]byte, []int) {
	return file_proto_types_model_iaas_vpc_proto_rawDescGZIP(), []int{3}
}

func (x *RouterVxnet) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterVxnet) GetVxnetId() string {
	if x != nil {
		return x.VxnetId
	}
	return ""
}

func (x *RouterVxnet) GetVxnetName() string {
	if x != nil {
		return x.VxnetName
	}
	return ""
}

func (x *RouterVxnet) GetDynIpStart() string {
	if x != nil {
		return x.DynIpStart
	}
	return ""
}

func (x *RouterVxnet) GetDynIpEnd() string {
	if x != nil {
		return x.DynIpEnd
	}
	return ""
}

func (x *RouterVxnet) GetDynIpv6Start() string {
	if x != nil {
		return x.DynIpv6Start
	}
	return ""
}

func (x *RouterVxnet) GetDynIpv6End() string {
	if x != nil {
		return x.DynIpv6End
	}
	return ""
}

func (x *RouterVxnet) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RouterVxnet) GetBorderPrivateIp() string {
	if x != nil {
		return x.BorderPrivateIp
	}
	return ""
}

func (x *RouterVxnet) GetManagerIp() string {
	if x != nil {
		return x.ManagerIp
	}
	return ""
}

func (x *RouterVxnet) GetBorderId() string {
	if x != nil {
		return x.BorderId
	}
	return ""
}

func (x *RouterVxnet) GetIpNetwork() string {
	if x != nil {
		return x.IpNetwork
	}
	return ""
}

func (x *RouterVxnet) GetIpv6Network() string {
	if x != nil {
		return x.Ipv6Network
	}
	return ""
}

func (x *RouterVxnet) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *RouterVxnet) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

var File_proto_types_model_iaas_vpc_proto protoreflect.FileDescriptor

var file_proto_types_model_iaas_vpc_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x69, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x69, 0x61, 0x61, 0x73, 0x22, 0x52, 0x0a, 0x03, 0x45, 0x49, 0x50, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0xdb, 0x04, 0x0a,
	0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x78, 0x6e,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x56, 0x78,
	0x6e, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x70, 0x63, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x15, 0x0a,
	0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x69, 0x61, 0x61, 0x73, 0x2e, 0x45, 0x49, 0x50, 0x52, 0x03, 0x65, 0x69,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x49, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x79, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x79, 0x6e, 0x49, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x05, 0x56,
	0x58, 0x4e, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x70, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x70, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x61, 0x61, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0xd7,
	0x03, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x78, 0x6e, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x78, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x78, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x78, 0x6e, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x5f, 0x69, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e,
	0x49, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x79, 0x6e, 0x5f, 0x69,
	0x70, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x79, 0x6e,
	0x49, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x79, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64,
	0x79, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x42, 0x72, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x62, 0x69, 0x61, 0x61, 0x73, 0x42, 0x09, 0x50, 0x42, 0x49, 0x61, 0x61, 0x73, 0x56, 0x50, 0x43,
	0x50, 0x00, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x69, 0x61, 0x61, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_iaas_vpc_proto_rawDescOnce sync.Once
	file_proto_types_model_iaas_vpc_proto_rawDescData = file_proto_types_model_iaas_vpc_proto_rawDesc
)

func file_proto_types_model_iaas_vpc_proto_rawDescGZIP() []byte {
	file_proto_types_model_iaas_vpc_proto_rawDescOnce.Do(func() {
		file_proto_types_model_iaas_vpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_iaas_vpc_proto_rawDescData)
	})
	return file_proto_types_model_iaas_vpc_proto_rawDescData
}

var file_proto_types_model_iaas_vpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_types_model_iaas_vpc_proto_goTypes = []interface{}{
	(*EIP)(nil),         // 0: iaas.EIP
	(*Router)(nil),      // 1: iaas.Router
	(*VXNet)(nil),       // 2: iaas.VXNet
	(*RouterVxnet)(nil), // 3: iaas.RouterVxnet
}
var file_proto_types_model_iaas_vpc_proto_depIdxs = []int32{
	0, // 0: iaas.Router.eip:type_name -> iaas.EIP
	1, // 1: iaas.VXNet.router:type_name -> iaas.Router
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_types_model_iaas_vpc_proto_init() }
func file_proto_types_model_iaas_vpc_proto_init() {
	if File_proto_types_model_iaas_vpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_iaas_vpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_iaas_vpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_iaas_vpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VXNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_iaas_vpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterVxnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_iaas_vpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_iaas_vpc_proto_goTypes,
		DependencyIndexes: file_proto_types_model_iaas_vpc_proto_depIdxs,
		MessageInfos:      file_proto_types_model_iaas_vpc_proto_msgTypes,
	}.Build()
	File_proto_types_model_iaas_vpc_proto = out.File
	file_proto_types_model_iaas_vpc_proto_rawDesc = nil
	file_proto_types_model_iaas_vpc_proto_goTypes = nil
	file_proto_types_model_iaas_vpc_proto_depIdxs = nil
}
