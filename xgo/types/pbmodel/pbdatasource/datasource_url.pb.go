// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/datasource/datasource_url.proto

package pbdatasource

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FtpURL_Protocol int32

const (
	FtpURL_ProtocolUnset FtpURL_Protocol = 0
	FtpURL_FTP           FtpURL_Protocol = 1
	FtpURL_SFTP          FtpURL_Protocol = 2
)

// Enum value maps for FtpURL_Protocol.
var (
	FtpURL_Protocol_name = map[int32]string{
		0: "ProtocolUnset",
		1: "FTP",
		2: "SFTP",
	}
	FtpURL_Protocol_value = map[string]int32{
		"ProtocolUnset": 0,
		"FTP":           1,
		"SFTP":          2,
	}
)

func (x FtpURL_Protocol) Enum() *FtpURL_Protocol {
	p := new(FtpURL_Protocol)
	*p = x
	return p
}

func (x FtpURL_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FtpURL_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_datasource_datasource_url_proto_enumTypes[0].Descriptor()
}

func (FtpURL_Protocol) Type() protoreflect.EnumType {
	return &file_proto_types_model_datasource_datasource_url_proto_enumTypes[0]
}

func (x FtpURL_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FtpURL_Protocol.Descriptor instead.
func (FtpURL_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{4, 0}
}

type FtpURL_ConnectionMode int32

const (
	FtpURL_ConnectionModeUnset FtpURL_ConnectionMode = 0
	FtpURL_Active              FtpURL_ConnectionMode = 1
	FtpURL_Passive             FtpURL_ConnectionMode = 2
)

// Enum value maps for FtpURL_ConnectionMode.
var (
	FtpURL_ConnectionMode_name = map[int32]string{
		0: "ConnectionModeUnset",
		1: "Active",
		2: "Passive",
	}
	FtpURL_ConnectionMode_value = map[string]int32{
		"ConnectionModeUnset": 0,
		"Active":              1,
		"Passive":             2,
	}
)

func (x FtpURL_ConnectionMode) Enum() *FtpURL_ConnectionMode {
	p := new(FtpURL_ConnectionMode)
	*p = x
	return p
}

func (x FtpURL_ConnectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FtpURL_ConnectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_datasource_datasource_url_proto_enumTypes[1].Descriptor()
}

func (FtpURL_ConnectionMode) Type() protoreflect.EnumType {
	return &file_proto_types_model_datasource_datasource_url_proto_enumTypes[1]
}

func (x FtpURL_ConnectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FtpURL_ConnectionMode.Descriptor instead.
func (FtpURL_ConnectionMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{4, 1}
}

// Host represents the pair of host(or ip):port
type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host or ip. Is Required. Min Length 0, Max Length 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port, Is Required. Min: 0, Max: 65535.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{0}
}

func (x *Host) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Host) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type MySQLURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *MySQLURL) Reset() {
	*x = MySQLURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLURL) ProtoMessage() {}

func (x *MySQLURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLURL.ProtoReflect.Descriptor instead.
func (*MySQLURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{1}
}

func (x *MySQLURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MySQLURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySQLURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// PostgreSQLURL used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *PostgreSQLURL) Reset() {
	*x = PostgreSQLURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLURL) ProtoMessage() {}

func (x *PostgreSQLURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLURL.ProtoReflect.Descriptor instead.
func (*PostgreSQLURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{2}
}

func (x *PostgreSQLURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgreSQLURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgreSQLURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgreSQLURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgreSQLURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// ClickHouseURL used as request parameters for RPC and HTTP(based on Body)
type ClickHouseURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *ClickHouseURL) Reset() {
	*x = ClickHouseURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseURL) ProtoMessage() {}

func (x *ClickHouseURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseURL.ProtoReflect.Descriptor instead.
func (*ClickHouseURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{3}
}

func (x *ClickHouseURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickHouseURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickHouseURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickHouseURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickHouseURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// FtpURL used as request parameters for RPC and HTTP(based on Body)
type FtpURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection protocol. 1 => "FTP" 2 = > "SFTP"; Is Required.
	Protocol FtpURL_Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=datasource.FtpURL_Protocol" json:"protocol"`
	// The connection modes.  Is Required if protocol == 1 (FTP).
	// 1 => "Active" 2 = > "Passive";
	ConnectionMode FtpURL_ConnectionMode `protobuf:"varint,2,opt,name=connection_mode,json=connectionMode,proto3,enum=datasource.FtpURL_ConnectionMode" json:"connection_mode"`
	// The SFTP private key content.  Is Required if protocol == 2 (SFTP).
	// Min Bytes Length: 1, Max Bytes Length: 2048
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key"`
	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,6,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,7,opt,name=password,proto3" json:"password"`
}

func (x *FtpURL) Reset() {
	*x = FtpURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpURL) ProtoMessage() {}

func (x *FtpURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpURL.ProtoReflect.Descriptor instead.
func (*FtpURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{4}
}

func (x *FtpURL) GetProtocol() FtpURL_Protocol {
	if x != nil {
		return x.Protocol
	}
	return FtpURL_ProtocolUnset
}

func (x *FtpURL) GetConnectionMode() FtpURL_ConnectionMode {
	if x != nil {
		return x.ConnectionMode
	}
	return FtpURL_ConnectionModeUnset
}

func (x *FtpURL) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *FtpURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FtpURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FtpURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FtpURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// S3Url used as request parameters for RPC and HTTP(based on Body)
type S3URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S3URL) Reset() {
	*x = S3URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3URL) ProtoMessage() {}

func (x *S3URL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3URL.ProtoReflect.Descriptor instead.
func (*S3URL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{5}
}

// KafkaURL used as request parameters for RPC and HTTP(based on Body)
type KafkaURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kafka brokers.
	// Is required. Min: 1, MAX: 128.
	KafkaBrokers []*Host `protobuf:"bytes,1,rep,name=kafka_brokers,json=kafkaBrokers,proto3" json:"kafka_brokers"`
}

func (x *KafkaURL) Reset() {
	*x = KafkaURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaURL) ProtoMessage() {}

func (x *KafkaURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaURL.ProtoReflect.Descriptor instead.
func (*KafkaURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{6}
}

func (x *KafkaURL) GetKafkaBrokers() []*Host {
	if x != nil {
		return x.KafkaBrokers
	}
	return nil
}

// HBaseURL used as request parameters for RPC and HTTP(based on Body)
type HBaseURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hbase config. Is Required. Must be a JSON format string.
	// Max Bytes Length: 1048576(16KB)
	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
}

func (x *HBaseURL) Reset() {
	*x = HBaseURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseURL) ProtoMessage() {}

func (x *HBaseURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseURL.ProtoReflect.Descriptor instead.
func (*HBaseURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{7}
}

func (x *HBaseURL) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

// HDFSURL used as request parameters for RPC and HTTP(based on Body)
type HDFSURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host of name node
	NameNode string `protobuf:"bytes,1,opt,name=name_node,json=nameNode,proto3" json:"name_node"`
	// The port of name node
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// The  hadoop advanced config. Not Required. Max Bytes Length: 1048576(16KB)
	Config string `protobuf:"bytes,3,opt,name=config,proto3" json:"config"`
}

func (x *HDFSURL) Reset() {
	*x = HDFSURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSURL) ProtoMessage() {}

func (x *HDFSURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSURL.ProtoReflect.Descriptor instead.
func (*HDFSURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{8}
}

func (x *HDFSURL) GetNameNode() string {
	if x != nil {
		return x.NameNode
	}
	return ""
}

func (x *HDFSURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HDFSURL) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

// SqlServerURL used as request parameters for RPC and HTTP(based on Body)
type SqlServerURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *SqlServerURL) Reset() {
	*x = SqlServerURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlServerURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlServerURL) ProtoMessage() {}

func (x *SqlServerURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlServerURL.ProtoReflect.Descriptor instead.
func (*SqlServerURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{9}
}

func (x *SqlServerURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SqlServerURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SqlServerURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SqlServerURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SqlServerURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// OracleURL used as request parameters for RPC and HTTP(based on Body)
type OracleURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *OracleURL) Reset() {
	*x = OracleURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleURL) ProtoMessage() {}

func (x *OracleURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleURL.ProtoReflect.Descriptor instead.
func (*OracleURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{10}
}

func (x *OracleURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OracleURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *OracleURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *OracleURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OracleURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// DB2URL used as request parameters for RPC and HTTP(based on Body)
type DB2URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *DB2URL) Reset() {
	*x = DB2URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB2URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB2URL) ProtoMessage() {}

func (x *DB2URL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB2URL.ProtoReflect.Descriptor instead.
func (*DB2URL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{11}
}

func (x *DB2URL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DB2URL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DB2URL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DB2URL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DB2URL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// SapHanaURL used as request parameters for RPC and HTTP(based on Body)
type SapHanaURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
}

func (x *SapHanaURL) Reset() {
	*x = SapHanaURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SapHanaURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SapHanaURL) ProtoMessage() {}

func (x *SapHanaURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SapHanaURL.ProtoReflect.Descriptor instead.
func (*SapHanaURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{12}
}

func (x *SapHanaURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SapHanaURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SapHanaURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SapHanaURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SapHanaURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// HiveURL used as request parameters for RPC and HTTP(based on Body)
type HiveURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database"`
	// hadoop config
	Config string `protobuf:"bytes,6,opt,name=config,proto3" json:"config"`
	// defaultFS
	DefaultFS string `protobuf:"bytes,7,opt,name=defaultFS,proto3" json:"defaultFS"`
}

func (x *HiveURL) Reset() {
	*x = HiveURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiveURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiveURL) ProtoMessage() {}

func (x *HiveURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiveURL.ProtoReflect.Descriptor instead.
func (*HiveURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{13}
}

func (x *HiveURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HiveURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HiveURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HiveURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *HiveURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *HiveURL) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *HiveURL) GetDefaultFS() string {
	if x != nil {
		return x.DefaultFS
	}
	return ""
}

// ElasticSearchURL used as request parameters for RPC and HTTP(based on Body)
type ElasticSearchURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host specifies the hostname of db. Is Required. Length Min: 1, Length Max: 64.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port specifies the port of db. Is Required. Min: 0, Length Max: 65536.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// User specifies the username of db
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	// version Is Required. Length Min: 1, Length Max: 64.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version"`
}

func (x *ElasticSearchURL) Reset() {
	*x = ElasticSearchURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticSearchURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticSearchURL) ProtoMessage() {}

func (x *ElasticSearchURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticSearchURL.ProtoReflect.Descriptor instead.
func (*ElasticSearchURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{14}
}

func (x *ElasticSearchURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ElasticSearchURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ElasticSearchURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ElasticSearchURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ElasticSearchURL) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// MongoDbURL used as request parameters for RPC and HTTP(based on Body)
type MongoDbURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host  ip:port
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts"`
	// User specifies the username of db. Is Required. Length Min: 1, Length Max: 64.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
	// Database specifies the database name of db. Is Required. Length Min: 1, Length Max: 64.
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database"`
}

func (x *MongoDbURL) Reset() {
	*x = MongoDbURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoDbURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDbURL) ProtoMessage() {}

func (x *MongoDbURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDbURL.ProtoReflect.Descriptor instead.
func (*MongoDbURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{15}
}

func (x *MongoDbURL) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *MongoDbURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MongoDbURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MongoDbURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// MongoDbURL used as request parameters for RPC and HTTP(based on Body)
type RedisURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host  ip:port
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts"`
	// Password specifies the password of db. Is Required. Length Min: 1, Length Max: 64.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
}

func (x *RedisURL) Reset() {
	*x = RedisURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisURL) ProtoMessage() {}

func (x *RedisURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_datasource_datasource_url_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisURL.ProtoReflect.Descriptor instead.
func (*RedisURL) Descriptor() ([]byte, []int) {
	return file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP(), []int{16}
}

func (x *RedisURL) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RedisURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_proto_types_model_datasource_datasource_url_proto protoreflect.FileDescriptor

var file_proto_types_model_datasource_datasource_url_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x28, 0xff, 0xff, 0x03, 0x30,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01,
	0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2,
	0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf,
	0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01,
	0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x53, 0x51, 0x4c, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09,
	0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09,
	0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01,
	0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09,
	0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa9, 0x04, 0x0a, 0x06,
	0x46, 0x74, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x74, 0x70, 0x55, 0x52, 0x4c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04,
	0x30, 0x00, 0x58, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x70,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x74, 0x70, 0x55, 0x52, 0x4c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x24, 0xe2, 0xdf, 0x1f, 0x13,
	0x0a, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x05, 0xda, 0x01,
	0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe2, 0xdf, 0x1f, 0x13, 0x0a, 0x11, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x02, 0xe2, 0xdf,
	0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0x80, 0x02, 0x01, 0x98, 0x02, 0x80, 0x10, 0x88, 0x05,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x54, 0x50, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x46, 0x54, 0x50, 0x10, 0x02, 0x22, 0x42, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x55,
	0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x02, 0x3a,
	0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x0f, 0x0a, 0x05, 0x53, 0x33, 0x55, 0x52, 0x4c,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x59, 0x0a, 0x08, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x55, 0x52, 0x4c, 0x12, 0x45, 0x0a, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01, 0x05, 0x38, 0x80, 0x01, 0x40, 0x01, 0x52, 0x0c, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04,
	0x02, 0x0a, 0x00, 0x22, 0x40, 0x0a, 0x08, 0x48, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xc2, 0x01, 0x0b, 0x90, 0x02, 0x01, 0x98, 0x02, 0x80,
	0x80, 0x01, 0xe8, 0x08, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x48, 0x44, 0x46, 0x53, 0x55, 0x52,
	0x4c, 0x12, 0x2c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90,
	0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x11, 0x0a, 0x0f, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22, 0x00, 0xe2, 0xdf, 0x1f, 0x0d, 0x12,
	0x0b, 0xc2, 0x01, 0x08, 0x98, 0x02, 0x80, 0x80, 0x01, 0xe8, 0x08, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xdf, 0x01, 0x0a,
	0x0c, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xdc,
	0x01, 0x0a, 0x09, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90,
	0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd9, 0x01,
	0x0a, 0x06, 0x44, 0x42, 0x32, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01,
	0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02,
	0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12,
	0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01,
	0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x53, 0x61,
	0x70, 0x48, 0x61, 0x6e, 0x61, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01,
	0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02,
	0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12,
	0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01,
	0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xee, 0x01, 0x0a, 0x07, 0x48, 0x69,
	0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02,
	0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09,
	0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98,
	0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x53, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x53, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x45,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x12,
	0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80,
	0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xcb, 0x01, 0x0a,
	0x0a, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x55, 0x52, 0x4c, 0x12, 0x36, 0x0a, 0x05, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0xe2, 0xdf,
	0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01, 0x05, 0x38, 0x80, 0x01, 0x40, 0x01, 0x52, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98,
	0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x66, 0x0a, 0x08, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x55, 0x52, 0x4c, 0x12, 0x36, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea,
	0x01, 0x05, 0x38, 0x80, 0x01, 0x40, 0x01, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x42, 0x84, 0x01, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f,
	0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0f, 0x50, 0x42, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x50, 0x00, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_types_model_datasource_datasource_url_proto_rawDescOnce sync.Once
	file_proto_types_model_datasource_datasource_url_proto_rawDescData = file_proto_types_model_datasource_datasource_url_proto_rawDesc
)

func file_proto_types_model_datasource_datasource_url_proto_rawDescGZIP() []byte {
	file_proto_types_model_datasource_datasource_url_proto_rawDescOnce.Do(func() {
		file_proto_types_model_datasource_datasource_url_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_datasource_datasource_url_proto_rawDescData)
	})
	return file_proto_types_model_datasource_datasource_url_proto_rawDescData
}

var file_proto_types_model_datasource_datasource_url_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_types_model_datasource_datasource_url_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_types_model_datasource_datasource_url_proto_goTypes = []interface{}{
	(FtpURL_Protocol)(0),       // 0: datasource.FtpURL.Protocol
	(FtpURL_ConnectionMode)(0), // 1: datasource.FtpURL.ConnectionMode
	(*Host)(nil),               // 2: datasource.Host
	(*MySQLURL)(nil),           // 3: datasource.MySQLURL
	(*PostgreSQLURL)(nil),      // 4: datasource.PostgreSQLURL
	(*ClickHouseURL)(nil),      // 5: datasource.ClickHouseURL
	(*FtpURL)(nil),             // 6: datasource.FtpURL
	(*S3URL)(nil),              // 7: datasource.S3URL
	(*KafkaURL)(nil),           // 8: datasource.KafkaURL
	(*HBaseURL)(nil),           // 9: datasource.HBaseURL
	(*HDFSURL)(nil),            // 10: datasource.HDFSURL
	(*SqlServerURL)(nil),       // 11: datasource.SqlServerURL
	(*OracleURL)(nil),          // 12: datasource.OracleURL
	(*DB2URL)(nil),             // 13: datasource.DB2URL
	(*SapHanaURL)(nil),         // 14: datasource.SapHanaURL
	(*HiveURL)(nil),            // 15: datasource.HiveURL
	(*ElasticSearchURL)(nil),   // 16: datasource.ElasticSearchURL
	(*MongoDbURL)(nil),         // 17: datasource.MongoDbURL
	(*RedisURL)(nil),           // 18: datasource.RedisURL
}
var file_proto_types_model_datasource_datasource_url_proto_depIdxs = []int32{
	0, // 0: datasource.FtpURL.protocol:type_name -> datasource.FtpURL.Protocol
	1, // 1: datasource.FtpURL.connection_mode:type_name -> datasource.FtpURL.ConnectionMode
	2, // 2: datasource.KafkaURL.kafka_brokers:type_name -> datasource.Host
	2, // 3: datasource.MongoDbURL.hosts:type_name -> datasource.Host
	2, // 4: datasource.RedisURL.hosts:type_name -> datasource.Host
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_types_model_datasource_datasource_url_proto_init() }
func file_proto_types_model_datasource_datasource_url_proto_init() {
	if File_proto_types_model_datasource_datasource_url_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlServerURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB2URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SapHanaURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiveURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticSearchURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoDbURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_datasource_datasource_url_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_datasource_datasource_url_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_datasource_datasource_url_proto_goTypes,
		DependencyIndexes: file_proto_types_model_datasource_datasource_url_proto_depIdxs,
		EnumInfos:         file_proto_types_model_datasource_datasource_url_proto_enumTypes,
		MessageInfos:      file_proto_types_model_datasource_datasource_url_proto_msgTypes,
	}.Build()
	File_proto_types_model_datasource_datasource_url_proto = out.File
	file_proto_types_model_datasource_datasource_url_proto_rawDesc = nil
	file_proto_types_model_datasource_datasource_url_proto_goTypes = nil
	file_proto_types_model_datasource_datasource_url_proto_depIdxs = nil
}
