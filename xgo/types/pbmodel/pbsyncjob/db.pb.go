// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/syncjob/db.proto

package pbsyncjob

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBSource_ConditionType int32

const (
	DBSource_ConditionTypeUnset DBSource_ConditionType = 0
	DBSource_Visualization      DBSource_ConditionType = 1
	DBSource_Express            DBSource_ConditionType = 2
)

// Enum value maps for DBSource_ConditionType.
var (
	DBSource_ConditionType_name = map[int32]string{
		0: "ConditionTypeUnset",
		1: "Visualization",
		2: "Express",
	}
	DBSource_ConditionType_value = map[string]int32{
		"ConditionTypeUnset": 0,
		"Visualization":      1,
		"Express":            2,
	}
)

func (x DBSource_ConditionType) Enum() *DBSource_ConditionType {
	p := new(DBSource_ConditionType)
	*p = x
	return p
}

func (x DBSource_ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBSource_ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_db_proto_enumTypes[0].Descriptor()
}

func (DBSource_ConditionType) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_db_proto_enumTypes[0]
}

func (x DBSource_ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBSource_ConditionType.Descriptor instead.
func (DBSource_ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_db_proto_rawDescGZIP(), []int{0, 0}
}

type DBTarget_WriteMode int32

const (
	DBTarget_WriteModeUnset DBTarget_WriteMode = 0
	DBTarget_insert         DBTarget_WriteMode = 1
	DBTarget_replace        DBTarget_WriteMode = 2
	DBTarget_update         DBTarget_WriteMode = 3
)

// Enum value maps for DBTarget_WriteMode.
var (
	DBTarget_WriteMode_name = map[int32]string{
		0: "WriteModeUnset",
		1: "insert",
		2: "replace",
		3: "update",
	}
	DBTarget_WriteMode_value = map[string]int32{
		"WriteModeUnset": 0,
		"insert":         1,
		"replace":        2,
		"update":         3,
	}
)

func (x DBTarget_WriteMode) Enum() *DBTarget_WriteMode {
	p := new(DBTarget_WriteMode)
	*p = x
	return p
}

func (x DBTarget_WriteMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTarget_WriteMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_db_proto_enumTypes[1].Descriptor()
}

func (DBTarget_WriteMode) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_db_proto_enumTypes[1]
}

func (x DBTarget_WriteMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTarget_WriteMode.Descriptor instead.
func (DBTarget_WriteMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_db_proto_rawDescGZIP(), []int{2, 0}
}

type DBTarget_Semantic int32

const (
	DBTarget_SemanticUnset DBTarget_Semantic = 0
	DBTarget_AtLeastOnce   DBTarget_Semantic = 1
	DBTarget_ExactlyOnce   DBTarget_Semantic = 2
)

// Enum value maps for DBTarget_Semantic.
var (
	DBTarget_Semantic_name = map[int32]string{
		0: "SemanticUnset",
		1: "AtLeastOnce",
		2: "ExactlyOnce",
	}
	DBTarget_Semantic_value = map[string]int32{
		"SemanticUnset": 0,
		"AtLeastOnce":   1,
		"ExactlyOnce":   2,
	}
)

func (x DBTarget_Semantic) Enum() *DBTarget_Semantic {
	p := new(DBTarget_Semantic)
	*p = x
	return p
}

func (x DBTarget_Semantic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTarget_Semantic) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_db_proto_enumTypes[2].Descriptor()
}

func (DBTarget_Semantic) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_db_proto_enumTypes[2]
}

func (x DBTarget_Semantic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTarget_Semantic.Descriptor instead.
func (DBTarget_Semantic) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_db_proto_rawDescGZIP(), []int{2, 1}
}

type DBSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column"`
	// table
	Table []string `protobuf:"bytes,2,rep,name=table,proto3" json:"table"`
	// schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema"`
	// where
	Where string `protobuf:"bytes,4,opt,name=where,proto3" json:"where"`
	// split_pk
	SplitPk string `protobuf:"bytes,5,opt,name=split_pk,json=splitPk,proto3" json:"split_pk"`
	// mapping type
	MappingType BaseEnum_ColumnMapping `protobuf:"varint,6,opt,name=mapping_type,json=mappingType,proto3,enum=model.BaseEnum_ColumnMapping" json:"mapping_type"`
	// condition type
	ConditionType DBSource_ConditionType `protobuf:"varint,7,opt,name=condition_type,json=conditionType,proto3,enum=model.DBSource_ConditionType" json:"condition_type"`
	// visualization condition
	Visualization *Condition `protobuf:"bytes,8,opt,name=visualization,proto3" json:"visualization"`
	// express condition
	Express string `protobuf:"bytes,9,opt,name=express,proto3" json:"express"`
}

func (x *DBSource) Reset() {
	*x = DBSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_syncjob_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSource) ProtoMessage() {}

func (x *DBSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_syncjob_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSource.ProtoReflect.Descriptor instead.
func (*DBSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_db_proto_rawDescGZIP(), []int{0}
}

func (x *DBSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *DBSource) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DBSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DBSource) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *DBSource) GetSplitPk() string {
	if x != nil {
		return x.SplitPk
	}
	return ""
}

func (x *DBSource) GetMappingType() BaseEnum_ColumnMapping {
	if x != nil {
		return x.MappingType
	}
	return BaseEnum_ColumnUnset
}

func (x *DBSource) GetConditionType() DBSource_ConditionType {
	if x != nil {
		return x.ConditionType
	}
	return DBSource_ConditionTypeUnset
}

func (x *DBSource) GetVisualization() *Condition {
	if x != nil {
		return x.Visualization
	}
	return nil
}

func (x *DBSource) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column"`
	// start condition
	StartCondition string `protobuf:"bytes,2,opt,name=start_condition,json=startCondition,proto3" json:"start_condition"`
	// start condition
	StartValue string `protobuf:"bytes,3,opt,name=start_value,json=startValue,proto3" json:"start_condition"`
	// end condition
	EndCondition string `protobuf:"bytes,4,opt,name=end_condition,json=endCondition,proto3" json:"end_condition"`
	// end value
	EndValue string `protobuf:"bytes,5,opt,name=end_value,json=endValue,proto3" json:"end_value"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_syncjob_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_syncjob_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_db_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Condition) GetStartCondition() string {
	if x != nil {
		return x.StartCondition
	}
	return ""
}

func (x *Condition) GetStartValue() string {
	if x != nil {
		return x.StartValue
	}
	return ""
}

func (x *Condition) GetEndCondition() string {
	if x != nil {
		return x.EndCondition
	}
	return ""
}

func (x *Condition) GetEndValue() string {
	if x != nil {
		return x.EndValue
	}
	return ""
}

type DBTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column"`
	// table
	Table []string `protobuf:"bytes,2,rep,name=table,proto3" json:"table"`
	// schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema"`
	// pre sql
	PreSql []string `protobuf:"bytes,4,rep,name=pre_sql,json=preSql,proto3" json:"pre_sql"`
	// post sql
	PostSql []string `protobuf:"bytes,5,rep,name=post_sql,json=postSql,proto3" json:"post_sql"`
	// write mode
	WriteMode DBTarget_WriteMode `protobuf:"varint,6,opt,name=write_mode,json=writeMode,proto3,enum=model.DBTarget_WriteMode" json:"write_mode"`
	// batch size
	BatchSize int32 `protobuf:"varint,7,opt,name=batch_size,json=batchSize,proto3" json:"batch_size"`
	// update key
	UpdateKey []string `protobuf:"bytes,8,rep,name=update_key,json=updateKey,proto3" json:"update_key"`
	// semantic
	Semantic DBTarget_Semantic `protobuf:"varint,9,opt,name=semantic,proto3,enum=model.DBTarget_Semantic" json:"semantic"`
	// with no lock
	WithNoLock string `protobuf:"bytes,10,opt,name=with_no_lock,json=withNoLock,proto3" json:"with_no_lock"`
}

func (x *DBTarget) Reset() {
	*x = DBTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_syncjob_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTarget) ProtoMessage() {}

func (x *DBTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_syncjob_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTarget.ProtoReflect.Descriptor instead.
func (*DBTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_db_proto_rawDescGZIP(), []int{2}
}

func (x *DBTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *DBTarget) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DBTarget) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DBTarget) GetPreSql() []string {
	if x != nil {
		return x.PreSql
	}
	return nil
}

func (x *DBTarget) GetPostSql() []string {
	if x != nil {
		return x.PostSql
	}
	return nil
}

func (x *DBTarget) GetWriteMode() DBTarget_WriteMode {
	if x != nil {
		return x.WriteMode
	}
	return DBTarget_WriteModeUnset
}

func (x *DBTarget) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *DBTarget) GetUpdateKey() []string {
	if x != nil {
		return x.UpdateKey
	}
	return nil
}

func (x *DBTarget) GetSemantic() DBTarget_Semantic {
	if x != nil {
		return x.Semantic
	}
	return DBTarget_SemanticUnset
}

func (x *DBTarget) GetWithNoLock() string {
	if x != nil {
		return x.WithNoLock
	}
	return ""
}

var File_proto_types_model_syncjob_db_proto protoreflect.FileDescriptor

var file_proto_types_model_syncjob_db_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x26, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73,
	0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
	0x03, 0x0a, 0x08, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x6b, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x73,
	0x65, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x02, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xb7, 0x01, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06,
	0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xf2, 0x03, 0x0a, 0x08, 0x44, 0x42, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x5f,
	0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x53, 0x71,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x12, 0x38, 0x0a, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x42, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x42, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x52, 0x08, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x44, 0x0a, 0x09,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x10, 0x03, 0x22, 0x3f, 0x0a, 0x08, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x63, 0x65,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x63,
	0x65, 0x10, 0x02, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x42, 0x7d, 0x0a, 0x2c, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x62, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x42, 0x0e, 0x50, 0x42, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x62, 0x50, 0x00, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78,
	0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x62, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_types_model_syncjob_db_proto_rawDescOnce sync.Once
	file_proto_types_model_syncjob_db_proto_rawDescData = file_proto_types_model_syncjob_db_proto_rawDesc
)

func file_proto_types_model_syncjob_db_proto_rawDescGZIP() []byte {
	file_proto_types_model_syncjob_db_proto_rawDescOnce.Do(func() {
		file_proto_types_model_syncjob_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_syncjob_db_proto_rawDescData)
	})
	return file_proto_types_model_syncjob_db_proto_rawDescData
}

var file_proto_types_model_syncjob_db_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_types_model_syncjob_db_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_types_model_syncjob_db_proto_goTypes = []interface{}{
	(DBSource_ConditionType)(0), // 0: model.DBSource.ConditionType
	(DBTarget_WriteMode)(0),     // 1: model.DBTarget.WriteMode
	(DBTarget_Semantic)(0),      // 2: model.DBTarget.Semantic
	(*DBSource)(nil),            // 3: model.DBSource
	(*Condition)(nil),           // 4: model.Condition
	(*DBTarget)(nil),            // 5: model.DBTarget
	(*Column)(nil),              // 6: model.Column
	(BaseEnum_ColumnMapping)(0), // 7: model.BaseEnum.ColumnMapping
}
var file_proto_types_model_syncjob_db_proto_depIdxs = []int32{
	6, // 0: model.DBSource.column:type_name -> model.Column
	7, // 1: model.DBSource.mapping_type:type_name -> model.BaseEnum.ColumnMapping
	0, // 2: model.DBSource.condition_type:type_name -> model.DBSource.ConditionType
	4, // 3: model.DBSource.visualization:type_name -> model.Condition
	6, // 4: model.DBTarget.column:type_name -> model.Column
	1, // 5: model.DBTarget.write_mode:type_name -> model.DBTarget.WriteMode
	2, // 6: model.DBTarget.semantic:type_name -> model.DBTarget.Semantic
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_types_model_syncjob_db_proto_init() }
func file_proto_types_model_syncjob_db_proto_init() {
	if File_proto_types_model_syncjob_db_proto != nil {
		return
	}
	file_proto_types_model_syncjob_column_proto_init()
	file_proto_types_model_syncjob_baseenum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_syncjob_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_syncjob_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_syncjob_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_syncjob_db_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_syncjob_db_proto_goTypes,
		DependencyIndexes: file_proto_types_model_syncjob_db_proto_depIdxs,
		EnumInfos:         file_proto_types_model_syncjob_db_proto_enumTypes,
		MessageInfos:      file_proto_types_model_syncjob_db_proto_msgTypes,
	}.Build()
	File_proto_types_model_syncjob_db_proto = out.File
	file_proto_types_model_syncjob_db_proto_rawDesc = nil
	file_proto_types_model_syncjob_db_proto_goTypes = nil
	file_proto_types_model_syncjob_db_proto_depIdxs = nil
}
