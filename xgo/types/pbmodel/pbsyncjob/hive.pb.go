// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/syncjob/hive.proto

package pbsyncjob

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HiveTarget_PartitionType int32

const (
	HiveTarget_DAY    HiveTarget_PartitionType = 0
	HiveTarget_HOUR   HiveTarget_PartitionType = 1
	HiveTarget_MINUTE HiveTarget_PartitionType = 2
)

// Enum value maps for HiveTarget_PartitionType.
var (
	HiveTarget_PartitionType_name = map[int32]string{
		0: "DAY",
		1: "HOUR",
		2: "MINUTE",
	}
	HiveTarget_PartitionType_value = map[string]int32{
		"DAY":    0,
		"HOUR":   1,
		"MINUTE": 2,
	}
)

func (x HiveTarget_PartitionType) Enum() *HiveTarget_PartitionType {
	p := new(HiveTarget_PartitionType)
	*p = x
	return p
}

func (x HiveTarget_PartitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiveTarget_PartitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_hive_proto_enumTypes[0].Descriptor()
}

func (HiveTarget_PartitionType) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_hive_proto_enumTypes[0]
}

func (x HiveTarget_PartitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HiveTarget_PartitionType.Descriptor instead.
func (HiveTarget_PartitionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hive_proto_rawDescGZIP(), []int{0, 0}
}

type HiveTarget_WriteMode int32

const (
	HiveTarget_append    HiveTarget_WriteMode = 0
	HiveTarget_overwrite HiveTarget_WriteMode = 1
)

// Enum value maps for HiveTarget_WriteMode.
var (
	HiveTarget_WriteMode_name = map[int32]string{
		0: "append",
		1: "overwrite",
	}
	HiveTarget_WriteMode_value = map[string]int32{
		"append":    0,
		"overwrite": 1,
	}
)

func (x HiveTarget_WriteMode) Enum() *HiveTarget_WriteMode {
	p := new(HiveTarget_WriteMode)
	*p = x
	return p
}

func (x HiveTarget_WriteMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiveTarget_WriteMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_hive_proto_enumTypes[1].Descriptor()
}

func (HiveTarget_WriteMode) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_hive_proto_enumTypes[1]
}

func (x HiveTarget_WriteMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HiveTarget_WriteMode.Descriptor instead.
func (HiveTarget_WriteMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hive_proto_rawDescGZIP(), []int{0, 1}
}

type HiveTarget_FileType int32

const (
	HiveTarget_text    HiveTarget_FileType = 0
	HiveTarget_orc     HiveTarget_FileType = 1
	HiveTarget_parquet HiveTarget_FileType = 2
)

// Enum value maps for HiveTarget_FileType.
var (
	HiveTarget_FileType_name = map[int32]string{
		0: "text",
		1: "orc",
		2: "parquet",
	}
	HiveTarget_FileType_value = map[string]int32{
		"text":    0,
		"orc":     1,
		"parquet": 2,
	}
)

func (x HiveTarget_FileType) Enum() *HiveTarget_FileType {
	p := new(HiveTarget_FileType)
	*p = x
	return p
}

func (x HiveTarget_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiveTarget_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_hive_proto_enumTypes[2].Descriptor()
}

func (HiveTarget_FileType) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_hive_proto_enumTypes[2]
}

func (x HiveTarget_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HiveTarget_FileType.Descriptor instead.
func (HiveTarget_FileType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hive_proto_rawDescGZIP(), []int{0, 2}
}

type HiveTarget_CompressType int32

const (
	HiveTarget_GZIP   HiveTarget_CompressType = 0
	HiveTarget_BZIP2  HiveTarget_CompressType = 1
	HiveTarget_SNAPPY HiveTarget_CompressType = 2
	HiveTarget_BZIP   HiveTarget_CompressType = 3
	HiveTarget_LZ4    HiveTarget_CompressType = 4
	HiveTarget_LZO    HiveTarget_CompressType = 5
)

// Enum value maps for HiveTarget_CompressType.
var (
	HiveTarget_CompressType_name = map[int32]string{
		0: "GZIP",
		1: "BZIP2",
		2: "SNAPPY",
		3: "BZIP",
		4: "LZ4",
		5: "LZO",
	}
	HiveTarget_CompressType_value = map[string]int32{
		"GZIP":   0,
		"BZIP2":  1,
		"SNAPPY": 2,
		"BZIP":   3,
		"LZ4":    4,
		"LZO":    5,
	}
)

func (x HiveTarget_CompressType) Enum() *HiveTarget_CompressType {
	p := new(HiveTarget_CompressType)
	*p = x
	return p
}

func (x HiveTarget_CompressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiveTarget_CompressType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_hive_proto_enumTypes[3].Descriptor()
}

func (HiveTarget_CompressType) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_hive_proto_enumTypes[3]
}

func (x HiveTarget_CompressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HiveTarget_CompressType.Descriptor instead.
func (HiveTarget_CompressType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hive_proto_rawDescGZIP(), []int{0, 3}
}

type HiveTarget_Encoding int32

const (
	HiveTarget_UTF8 HiveTarget_Encoding = 0
	HiveTarget_GBK  HiveTarget_Encoding = 1
)

// Enum value maps for HiveTarget_Encoding.
var (
	HiveTarget_Encoding_name = map[int32]string{
		0: "UTF8",
		1: "GBK",
	}
	HiveTarget_Encoding_value = map[string]int32{
		"UTF8": 0,
		"GBK":  1,
	}
)

func (x HiveTarget_Encoding) Enum() *HiveTarget_Encoding {
	p := new(HiveTarget_Encoding)
	*p = x
	return p
}

func (x HiveTarget_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiveTarget_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_syncjob_hive_proto_enumTypes[4].Descriptor()
}

func (HiveTarget_Encoding) Type() protoreflect.EnumType {
	return &file_proto_types_model_syncjob_hive_proto_enumTypes[4]
}

func (x HiveTarget_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HiveTarget_Encoding.Descriptor instead.
func (HiveTarget_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hive_proto_rawDescGZIP(), []int{0, 4}
}

type HiveTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// partition
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"partition"`
	// use partition
	UsePartition bool `protobuf:"varint,2,opt,name=use_partition,json=usePartition,proto3" json:"use_partition"`
	// partition
	Partition string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition"`
	// partition_type
	PartitionType HiveTarget_PartitionType `protobuf:"varint,4,opt,name=partition_type,json=partitionType,proto3,enum=model.HiveTarget_PartitionType" json:"partition_type"`
	// tables column
	TablesColumn string `protobuf:"bytes,5,opt,name=tables_column,json=tablesColumn,proto3" json:"tables_column"`
	// write mode
	WriteMode HiveTarget_WriteMode `protobuf:"varint,6,opt,name=write_mode,json=writeMode,proto3,enum=model.HiveTarget_WriteMode" json:"write_mode"`
	// file type
	FileType HiveTarget_FileType `protobuf:"varint,7,opt,name=file_type,json=fileType,proto3,enum=model.HiveTarget_FileType" json:"file_type"`
	// compress type
	Compress HiveTarget_CompressType `protobuf:"varint,8,opt,name=compress,proto3,enum=model.HiveTarget_CompressType" json:"compress"`
	// field_delimiter
	FieldDelimiter string `protobuf:"bytes,9,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter"`
	// encoding
	Encoding HiveTarget_Encoding `protobuf:"varint,10,opt,name=encoding,proto3,enum=model.HiveTarget_Encoding" json:"encoding"`
}

func (x *HiveTarget) Reset() {
	*x = HiveTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_syncjob_hive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiveTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiveTarget) ProtoMessage() {}

func (x *HiveTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_syncjob_hive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiveTarget.ProtoReflect.Descriptor instead.
func (*HiveTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hive_proto_rawDescGZIP(), []int{0}
}

func (x *HiveTarget) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *HiveTarget) GetUsePartition() bool {
	if x != nil {
		return x.UsePartition
	}
	return false
}

func (x *HiveTarget) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *HiveTarget) GetPartitionType() HiveTarget_PartitionType {
	if x != nil {
		return x.PartitionType
	}
	return HiveTarget_DAY
}

func (x *HiveTarget) GetTablesColumn() string {
	if x != nil {
		return x.TablesColumn
	}
	return ""
}

func (x *HiveTarget) GetWriteMode() HiveTarget_WriteMode {
	if x != nil {
		return x.WriteMode
	}
	return HiveTarget_append
}

func (x *HiveTarget) GetFileType() HiveTarget_FileType {
	if x != nil {
		return x.FileType
	}
	return HiveTarget_text
}

func (x *HiveTarget) GetCompress() HiveTarget_CompressType {
	if x != nil {
		return x.Compress
	}
	return HiveTarget_GZIP
}

func (x *HiveTarget) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *HiveTarget) GetEncoding() HiveTarget_Encoding {
	if x != nil {
		return x.Encoding
	}
	return HiveTarget_UTF8
}

var File_proto_types_model_syncjob_hive_proto protoreflect.FileDescriptor

var file_proto_types_model_syncjob_hive_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x06, 0x0a, 0x0a, 0x48, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07,
	0xda, 0x01, 0x04, 0x40, 0x00, 0x58, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x40, 0x00, 0x58, 0x01, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04,
	0x40, 0x00, 0x58, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x40, 0x00, 0x58, 0x01, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xe2, 0xdf, 0x1f, 0x14, 0x0a, 0x12, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x00, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x02, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01,
	0x04, 0x40, 0x00, 0x58, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x2e, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22,
	0x26, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x6f, 0x72, 0x63, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x10, 0x02, 0x22, 0x4b, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x5a, 0x49, 0x50, 0x32, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4e, 0x41, 0x50,
	0x50, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x5a, 0x49, 0x50, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x5a, 0x34, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x5a, 0x4f, 0x10, 0x05,
	0x22, 0x1d, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x54, 0x46, 0x38, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x4b, 0x10, 0x01, 0x42,
	0x75, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73,
	0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x62, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x42,
	0x06, 0x50, 0x42, 0x48, 0x69, 0x76, 0x65, 0x50, 0x00, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x73,
	0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_syncjob_hive_proto_rawDescOnce sync.Once
	file_proto_types_model_syncjob_hive_proto_rawDescData = file_proto_types_model_syncjob_hive_proto_rawDesc
)

func file_proto_types_model_syncjob_hive_proto_rawDescGZIP() []byte {
	file_proto_types_model_syncjob_hive_proto_rawDescOnce.Do(func() {
		file_proto_types_model_syncjob_hive_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_syncjob_hive_proto_rawDescData)
	})
	return file_proto_types_model_syncjob_hive_proto_rawDescData
}

var file_proto_types_model_syncjob_hive_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_types_model_syncjob_hive_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_types_model_syncjob_hive_proto_goTypes = []interface{}{
	(HiveTarget_PartitionType)(0), // 0: model.HiveTarget.PartitionType
	(HiveTarget_WriteMode)(0),     // 1: model.HiveTarget.WriteMode
	(HiveTarget_FileType)(0),      // 2: model.HiveTarget.FileType
	(HiveTarget_CompressType)(0),  // 3: model.HiveTarget.CompressType
	(HiveTarget_Encoding)(0),      // 4: model.HiveTarget.Encoding
	(*HiveTarget)(nil),            // 5: model.HiveTarget
}
var file_proto_types_model_syncjob_hive_proto_depIdxs = []int32{
	0, // 0: model.HiveTarget.partition_type:type_name -> model.HiveTarget.PartitionType
	1, // 1: model.HiveTarget.write_mode:type_name -> model.HiveTarget.WriteMode
	2, // 2: model.HiveTarget.file_type:type_name -> model.HiveTarget.FileType
	3, // 3: model.HiveTarget.compress:type_name -> model.HiveTarget.CompressType
	4, // 4: model.HiveTarget.encoding:type_name -> model.HiveTarget.Encoding
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_types_model_syncjob_hive_proto_init() }
func file_proto_types_model_syncjob_hive_proto_init() {
	if File_proto_types_model_syncjob_hive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_syncjob_hive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiveTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_syncjob_hive_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_syncjob_hive_proto_goTypes,
		DependencyIndexes: file_proto_types_model_syncjob_hive_proto_depIdxs,
		EnumInfos:         file_proto_types_model_syncjob_hive_proto_enumTypes,
		MessageInfos:      file_proto_types_model_syncjob_hive_proto_msgTypes,
	}.Build()
	File_proto_types_model_syncjob_hive_proto = out.File
	file_proto_types_model_syncjob_hive_proto_rawDesc = nil
	file_proto_types_model_syncjob_hive_proto_goTypes = nil
	file_proto_types_model_syncjob_hive_proto_depIdxs = nil
}
