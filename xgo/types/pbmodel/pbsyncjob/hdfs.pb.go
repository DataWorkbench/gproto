// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/syncjob/hdfs.proto

package pbsyncjob

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HdfsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column"`
	// path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path"`
	// file type
	FileType string `protobuf:"bytes,3,opt,name=file_type,json=fileType,proto3" json:"file_type"`
	// default_fs
	DefaultFs string `protobuf:"bytes,4,opt,name=default_fs,json=defaultFs,proto3" json:"default_fs"`
	// filter regex
	FilterRegex string `protobuf:"bytes,5,opt,name=filter_regex,json=filterRegex,proto3" json:"filter_regex"`
	// field delimiter
	FieldDelimiter string `protobuf:"bytes,6,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter"`
	// encoding
	Encoding string `protobuf:"bytes,7,opt,name=encoding,proto3" json:"encoding"`
	// hadoop config
	HadoopConfig string `protobuf:"bytes,8,opt,name=hadoop_config,json=hadoopConfig,proto3" json:"dfs_nameservices"`
}

func (x *HdfsSource) Reset() {
	*x = HdfsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_syncjob_hdfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdfsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdfsSource) ProtoMessage() {}

func (x *HdfsSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_syncjob_hdfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdfsSource.ProtoReflect.Descriptor instead.
func (*HdfsSource) Descriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hdfs_proto_rawDescGZIP(), []int{0}
}

func (x *HdfsSource) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *HdfsSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HdfsSource) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *HdfsSource) GetDefaultFs() string {
	if x != nil {
		return x.DefaultFs
	}
	return ""
}

func (x *HdfsSource) GetFilterRegex() string {
	if x != nil {
		return x.FilterRegex
	}
	return ""
}

func (x *HdfsSource) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *HdfsSource) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *HdfsSource) GetHadoopConfig() string {
	if x != nil {
		return x.HadoopConfig
	}
	return ""
}

type HdfsTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// file column
	Column []*Column `protobuf:"bytes,1,rep,name=column,proto3" json:"column"`
	// file path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path"`
	// file name
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name"`
	// file type
	FileType string `protobuf:"bytes,4,opt,name=file_type,json=fileType,proto3" json:"file_type"`
	// write mode
	WriteMode string `protobuf:"bytes,5,opt,name=write_mode,json=writeMode,proto3" json:"write_mode"`
	// default_fs
	DefaultFs string `protobuf:"bytes,6,opt,name=default_fs,json=defaultFs,proto3" json:"default_fs"`
	// encoding
	Encoding string `protobuf:"bytes,7,opt,name=encoding,proto3" json:"encoding"`
	// field delimiter
	FieldDelimiter string `protobuf:"bytes,8,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter"`
	// full column name
	FullColumnName []string `protobuf:"bytes,9,rep,name=full_column_name,json=fullColumnName,proto3" json:"full_column_name"`
	// full column type
	FullColumnType []string `protobuf:"bytes,10,rep,name=full_column_type,json=fullColumnType,proto3" json:"full_column_type"`
	// compress
	Compress string `protobuf:"bytes,11,opt,name=compress,proto3" json:"compress"`
	// max file size
	MaxFileSize int32 `protobuf:"varint,12,opt,name=max_file_size,json=maxFileSize,proto3" json:"max_file_size"`
	// next check rows
	NextCheckRows int64 `protobuf:"varint,13,opt,name=next_check_rows,json=nextCheckRows,proto3" json:"next_check_rows"`
	// row group size
	RowGroupSize int32 `protobuf:"varint,14,opt,name=row_group_size,json=rowGroupSize,proto3" json:"row_group_size"`
	// enable dictionary
	EnableDictionary bool `protobuf:"varint,15,opt,name=enable_dictionary,json=enableDictionary,proto3" json:"enable_dictionary"`
	// hadoop config
	HadoopConfig string `protobuf:"bytes,16,opt,name=hadoop_config,json=hadoopConfig,proto3" json:"hadoop_config"`
}

func (x *HdfsTarget) Reset() {
	*x = HdfsTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_syncjob_hdfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdfsTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdfsTarget) ProtoMessage() {}

func (x *HdfsTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_syncjob_hdfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdfsTarget.ProtoReflect.Descriptor instead.
func (*HdfsTarget) Descriptor() ([]byte, []int) {
	return file_proto_types_model_syncjob_hdfs_proto_rawDescGZIP(), []int{1}
}

func (x *HdfsTarget) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *HdfsTarget) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HdfsTarget) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *HdfsTarget) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *HdfsTarget) GetWriteMode() string {
	if x != nil {
		return x.WriteMode
	}
	return ""
}

func (x *HdfsTarget) GetDefaultFs() string {
	if x != nil {
		return x.DefaultFs
	}
	return ""
}

func (x *HdfsTarget) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *HdfsTarget) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *HdfsTarget) GetFullColumnName() []string {
	if x != nil {
		return x.FullColumnName
	}
	return nil
}

func (x *HdfsTarget) GetFullColumnType() []string {
	if x != nil {
		return x.FullColumnType
	}
	return nil
}

func (x *HdfsTarget) GetCompress() string {
	if x != nil {
		return x.Compress
	}
	return ""
}

func (x *HdfsTarget) GetMaxFileSize() int32 {
	if x != nil {
		return x.MaxFileSize
	}
	return 0
}

func (x *HdfsTarget) GetNextCheckRows() int64 {
	if x != nil {
		return x.NextCheckRows
	}
	return 0
}

func (x *HdfsTarget) GetRowGroupSize() int32 {
	if x != nil {
		return x.RowGroupSize
	}
	return 0
}

func (x *HdfsTarget) GetEnableDictionary() bool {
	if x != nil {
		return x.EnableDictionary
	}
	return false
}

func (x *HdfsTarget) GetHadoopConfig() string {
	if x != nil {
		return x.HadoopConfig
	}
	return ""
}

var File_proto_types_model_syncjob_hdfs_proto protoreflect.FileDescriptor

var file_proto_types_model_syncjob_hdfs_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x2f, 0x68, 0x64, 0x66, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x6a,
	0x6f, 0x62, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x90, 0x02, 0x0a, 0x0a, 0x48, 0x64, 0x66, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xb8, 0x04, 0x0a, 0x0a, 0x48, 0x64, 0x66, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x0a,
	0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x62, 0x73, 0x79, 0x6e, 0x63, 0x6a, 0x6f, 0x62, 0x42, 0x06, 0x50,
	0x42, 0x48, 0x64, 0x66, 0x73, 0x50, 0x00, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x73, 0x79, 0x6e,
	0x63, 0x6a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_syncjob_hdfs_proto_rawDescOnce sync.Once
	file_proto_types_model_syncjob_hdfs_proto_rawDescData = file_proto_types_model_syncjob_hdfs_proto_rawDesc
)

func file_proto_types_model_syncjob_hdfs_proto_rawDescGZIP() []byte {
	file_proto_types_model_syncjob_hdfs_proto_rawDescOnce.Do(func() {
		file_proto_types_model_syncjob_hdfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_syncjob_hdfs_proto_rawDescData)
	})
	return file_proto_types_model_syncjob_hdfs_proto_rawDescData
}

var file_proto_types_model_syncjob_hdfs_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_types_model_syncjob_hdfs_proto_goTypes = []interface{}{
	(*HdfsSource)(nil), // 0: model.HdfsSource
	(*HdfsTarget)(nil), // 1: model.HdfsTarget
	(*Column)(nil),     // 2: model.Column
}
var file_proto_types_model_syncjob_hdfs_proto_depIdxs = []int32{
	2, // 0: model.HdfsSource.column:type_name -> model.Column
	2, // 1: model.HdfsTarget.column:type_name -> model.Column
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_types_model_syncjob_hdfs_proto_init() }
func file_proto_types_model_syncjob_hdfs_proto_init() {
	if File_proto_types_model_syncjob_hdfs_proto != nil {
		return
	}
	file_proto_types_model_syncjob_column_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_syncjob_hdfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdfsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_syncjob_hdfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdfsTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_syncjob_hdfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_syncjob_hdfs_proto_goTypes,
		DependencyIndexes: file_proto_types_model_syncjob_hdfs_proto_depIdxs,
		MessageInfos:      file_proto_types_model_syncjob_hdfs_proto_msgTypes,
	}.Build()
	File_proto_types_model_syncjob_hdfs_proto = out.File
	file_proto_types_model_syncjob_hdfs_proto_rawDesc = nil
	file_proto_types_model_syncjob_hdfs_proto_goTypes = nil
	file_proto_types_model_syncjob_hdfs_proto_depIdxs = nil
}
