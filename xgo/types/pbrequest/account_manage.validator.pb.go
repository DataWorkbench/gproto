// Code generated by protoc-gen-govalidator. DO NOT EDIT.
// versions:
// 		protoc-gen-govalidator 0.0.1
// source: proto/types/request/account_manage.proto

package pbrequest

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protovalidator "github.com/yu31/protoc-plugin/xgo/pkg/protovalidator"
	strconv "strconv"
	strings "strings"
	utf8 "unicode/utf8"
)

func (this *ListUsers) _xxx_xxx_Validator_Validate_limit() error {
	if !(this.Limit > 0) {
		return protovalidator.FieldError1("ListUsers", "the value of field 'limit' must be greater than '0'", protovalidator.Int32ToString(this.Limit))
	}
	if !(this.Limit <= 100) {
		return protovalidator.FieldError1("ListUsers", "the value of field 'limit' must be less than or equal to '100'", protovalidator.Int32ToString(this.Limit))
	}
	return nil
}

// Set default value for message request.ListUsers
func (this *ListUsers) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_limit(); err != nil {
		return err
	}
	return nil
}

func (this *DeleteUsers) _xxx_xxx_Validator_Validate_user_ids() error {
	if !(len(this.UserIds) > 0) {
		return protovalidator.FieldError1("DeleteUsers", "the length of field 'user_ids' must be greater than '0'", strconv.Itoa(len(this.UserIds)))
	}
	return nil
}

// Set default value for message request.DeleteUsers
func (this *DeleteUsers) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_ids(); err != nil {
		return err
	}
	return nil
}

func (this *DescribeUser) _xxx_xxx_Validator_Validate_user_id() error {
	if !(this.UserId != "") {
		return protovalidator.FieldError1("DescribeUser", "the value of field 'user_id' must be not equal to ''", this.UserId)
	}
	return nil
}

// Set default value for message request.DescribeUser
func (this *DescribeUser) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_id(); err != nil {
		return err
	}
	return nil
}

func (this *CreateUser) _xxx_xxx_Validator_Validate_name() error {
	if !(utf8.RuneCountInString(this.Name) >= 2) {
		return protovalidator.FieldError1("CreateUser", "the character length of field 'name' must be greater than or equal to '2'", protovalidator.StringCharsetLenToString(this.Name))
	}
	if !(utf8.RuneCountInString(this.Name) <= 128) {
		return protovalidator.FieldError1("CreateUser", "the character length of field 'name' must be less than or equal to '128'", protovalidator.StringCharsetLenToString(this.Name))
	}
	return nil
}

func (this *CreateUser) _xxx_xxx_Validator_Validate_password() error {
	if !(utf8.RuneCountInString(this.Password) >= 2) {
		return protovalidator.FieldError1("CreateUser", "the character length of field 'password' must be greater than or equal to '2'", protovalidator.StringCharsetLenToString(this.Password))
	}
	if !(utf8.RuneCountInString(this.Password) <= 128) {
		return protovalidator.FieldError1("CreateUser", "the character length of field 'password' must be less than or equal to '128'", protovalidator.StringCharsetLenToString(this.Password))
	}
	return nil
}

func (this *CreateUser) _xxx_xxx_Validator_Validate_email() error {
	if !(len(this.Email) > 1) {
		return protovalidator.FieldError1("CreateUser", "the byte length of field 'email' must be greater than '1'", protovalidator.StringByteLenToString(this.Email))
	}
	if !(len(this.Email) <= 128) {
		return protovalidator.FieldError1("CreateUser", "the byte length of field 'email' must be less than or equal to '128'", protovalidator.StringByteLenToString(this.Email))
	}
	return nil
}

// Set default value for message request.CreateUser
func (this *CreateUser) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_password(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_email(); err != nil {
		return err
	}
	return nil
}

func (this *UpdateUser) _xxx_xxx_Validator_Validate_user_id() error {
	if !(len(this.UserId) == 20) {
		return protovalidator.FieldError1("UpdateUser", "the byte length of field 'user_id' must be equal to '20'", protovalidator.StringByteLenToString(this.UserId))
	}
	if !(strings.HasPrefix(this.UserId, "usr-")) {
		return protovalidator.FieldError1("UpdateUser", "the value of field 'user_id' must start with string 'usr-'", this.UserId)
	}
	return nil
}

// Set default value for message request.UpdateUser
func (this *UpdateUser) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_id(); err != nil {
		return err
	}
	return nil
}

func (this *ChangeUserPassword) _xxx_xxx_Validator_Validate_user_id() error {
	if !(this.UserId != "") {
		return protovalidator.FieldError1("ChangeUserPassword", "the value of field 'user_id' must be not equal to ''", this.UserId)
	}
	return nil
}

func (this *ChangeUserPassword) _xxx_xxx_Validator_Validate_old_password() error {
	if !(this.OldPassword != "") {
		return protovalidator.FieldError1("ChangeUserPassword", "the value of field 'old_password' must be not equal to ''", this.OldPassword)
	}
	return nil
}

func (this *ChangeUserPassword) _xxx_xxx_Validator_Validate_new_password() error {
	if !(this.NewPassword != "") {
		return protovalidator.FieldError1("ChangeUserPassword", "the value of field 'new_password' must be not equal to ''", this.NewPassword)
	}
	return nil
}

// Set default value for message request.ChangeUserPassword
func (this *ChangeUserPassword) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_old_password(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_new_password(); err != nil {
		return err
	}
	return nil
}

func (this *ResetUserPassword) _xxx_xxx_Validator_Validate_user_id() error {
	if !(this.UserId != "") {
		return protovalidator.FieldError1("ResetUserPassword", "the value of field 'user_id' must be not equal to ''", this.UserId)
	}
	return nil
}

func (this *ResetUserPassword) _xxx_xxx_Validator_Validate_new_password() error {
	if !(this.NewPassword != "") {
		return protovalidator.FieldError1("ResetUserPassword", "the value of field 'new_password' must be not equal to ''", this.NewPassword)
	}
	return nil
}

// Set default value for message request.ResetUserPassword
func (this *ResetUserPassword) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_new_password(); err != nil {
		return err
	}
	return nil
}

func (this *ListAccessKeys) _xxx_xxx_Validator_Validate_limit() error {
	if !(this.Limit > 0) {
		return protovalidator.FieldError1("ListAccessKeys", "the value of field 'limit' must be greater than '0'", protovalidator.Int32ToString(this.Limit))
	}
	if !(this.Limit <= 100) {
		return protovalidator.FieldError1("ListAccessKeys", "the value of field 'limit' must be less than or equal to '100'", protovalidator.Int32ToString(this.Limit))
	}
	return nil
}

// Set default value for message request.ListAccessKeys
func (this *ListAccessKeys) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_limit(); err != nil {
		return err
	}
	return nil
}

// Set default value for message request.DeleteAccessKeys
func (this *DeleteAccessKeys) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

// Set default value for message request.DescribeAccessKey
func (this *DescribeAccessKey) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

// Set default value for message request.CreateAccessKey
func (this *CreateAccessKey) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

// Set default value for message request.UpdatedAccessKey
func (this *UpdatedAccessKey) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

// Set default value for message request.CheckSession
func (this *CheckSession) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

func (this *CreateSession) _xxx_xxx_Validator_Validate_user_name() error {
	if !(utf8.RuneCountInString(this.UserName) >= 2) {
		return protovalidator.FieldError1("CreateSession", "the character length of field 'user_name' must be greater than or equal to '2'", protovalidator.StringCharsetLenToString(this.UserName))
	}
	if !(utf8.RuneCountInString(this.UserName) <= 128) {
		return protovalidator.FieldError1("CreateSession", "the character length of field 'user_name' must be less than or equal to '128'", protovalidator.StringCharsetLenToString(this.UserName))
	}
	return nil
}

func (this *CreateSession) _xxx_xxx_Validator_Validate_password() error {
	if !(utf8.RuneCountInString(this.Password) >= 0) {
		return protovalidator.FieldError1("CreateSession", "the character length of field 'password' must be greater than or equal to '0'", protovalidator.StringCharsetLenToString(this.Password))
	}
	if !(utf8.RuneCountInString(this.Password) <= 128) {
		return protovalidator.FieldError1("CreateSession", "the character length of field 'password' must be less than or equal to '128'", protovalidator.StringCharsetLenToString(this.Password))
	}
	return nil
}

// Set default value for message request.CreateSession
func (this *CreateSession) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_password(); err != nil {
		return err
	}
	return nil
}

func (this *CreateNotification) _xxx_xxx_Validator_Validate_user_id() error {
	if !(len(this.UserId) == 20) {
		return protovalidator.FieldError1("CreateNotification", "the byte length of field 'user_id' must be equal to '20'", protovalidator.StringByteLenToString(this.UserId))
	}
	if !(strings.HasPrefix(this.UserId, "usr-")) {
		return protovalidator.FieldError1("CreateNotification", "the value of field 'user_id' must start with string 'usr-'", this.UserId)
	}
	return nil
}

// Set default value for message request.CreateNotification
func (this *CreateNotification) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_id(); err != nil {
		return err
	}
	return nil
}

func (this *UpdateNotification) _xxx_xxx_Validator_Validate_nf_id() error {
	if !(this.NfId != "") {
		return protovalidator.FieldError1("UpdateNotification", "the value of field 'nf_id' must be not equal to ''", this.NfId)
	}
	return nil
}

// Set default value for message request.UpdateNotification
func (this *UpdateNotification) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_nf_id(); err != nil {
		return err
	}
	return nil
}

// Set default value for message request.DeleteNotifications
func (this *DeleteNotifications) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

func (this *ListNotifications) _xxx_xxx_Validator_Validate_user_id() error {
	if !(this.UserId != "") {
		return protovalidator.FieldError1("ListNotifications", "the value of field 'user_id' must be not equal to ''", this.UserId)
	}
	return nil
}

func (this *ListNotifications) _xxx_xxx_Validator_Validate_limit() error {
	if !(this.Limit > 0) {
		return protovalidator.FieldError1("ListNotifications", "the value of field 'limit' must be greater than '0'", protovalidator.Int32ToString(this.Limit))
	}
	if !(this.Limit <= 100) {
		return protovalidator.FieldError1("ListNotifications", "the value of field 'limit' must be less than or equal to '100'", protovalidator.Int32ToString(this.Limit))
	}
	return nil
}

func (this *ListNotifications) _xxx_xxx_Validator_Validate_nf_ids() error {
	if !(len(this.NfIds) >= 0) {
		return protovalidator.FieldError1("ListNotifications", "the length of field 'nf_ids' must be greater than or equal to '0'", strconv.Itoa(len(this.NfIds)))
	}
	if !(len(this.NfIds) <= 100) {
		return protovalidator.FieldError1("ListNotifications", "the length of field 'nf_ids' must be less than or equal to '100'", strconv.Itoa(len(this.NfIds)))
	}
	return nil
}

// Set default value for message request.ListNotifications
func (this *ListNotifications) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_user_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_limit(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_nf_ids(); err != nil {
		return err
	}
	return nil
}

func (this *DescribeNotification) _xxx_xxx_Validator_Validate_nf_id() error {
	if !(this.NfId != "") {
		return protovalidator.FieldError1("DescribeNotification", "the value of field 'nf_id' must be not equal to ''", this.NfId)
	}
	return nil
}

// Set default value for message request.DescribeNotification
func (this *DescribeNotification) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_nf_id(); err != nil {
		return err
	}
	return nil
}
