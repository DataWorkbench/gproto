// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/request/table_manage.proto

package pbrequest

import (
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbflink "github.com/DataWorkbench/gproto/xgo/types/pbmodel/pbflink"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateTable used as request parameters for RPC and HTTP(based on Body)
type CreateFlinkTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table id.
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" swaggerignore:"true"`
	// The source id.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
	// The space id.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	// describe this source.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment"`
	// this source connection info
	TableSchema *pbflink.TableSchema `protobuf:"bytes,6,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind pbmodel.FlinkTable_Kind `protobuf:"varint,7,opt,name=table_kind,json=tableKind,proto3,enum=model.FlinkTable_Kind" json:"table_kind"`
	// Table owner.
	CreatedBy string `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
}

func (x *CreateFlinkTable) Reset() {
	*x = CreateFlinkTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_table_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlinkTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlinkTable) ProtoMessage() {}

func (x *CreateFlinkTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_table_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlinkTable.ProtoReflect.Descriptor instead.
func (*CreateFlinkTable) Descriptor() ([]byte, []int) {
	return file_proto_types_request_table_manage_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFlinkTable) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *CreateFlinkTable) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CreateFlinkTable) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateFlinkTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlinkTable) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateFlinkTable) GetTableSchema() *pbflink.TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *CreateFlinkTable) GetTableKind() pbmodel.FlinkTable_Kind {
	if x != nil {
		return x.TableKind
	}
	return pbmodel.FlinkTable_Kind(0)
}

func (x *CreateFlinkTable) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

// UpdateTable used as request parameters for RPC and HTTP(based on Body)
type UpdateFlinkTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table id.
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" swaggerignore:"true"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// describe this source.
	Comment string `protobuf:"bytes,3,opt,name=Comment,proto3" json:"comment"`
	// this source connection info
	TableSchema *pbflink.TableSchema `protobuf:"bytes,4,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind pbmodel.FlinkTable_Kind `protobuf:"varint,5,opt,name=table_kind,json=tableKind,proto3,enum=model.FlinkTable_Kind" json:"table_kind"`
}

func (x *UpdateFlinkTable) Reset() {
	*x = UpdateFlinkTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_table_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlinkTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlinkTable) ProtoMessage() {}

func (x *UpdateFlinkTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_table_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlinkTable.ProtoReflect.Descriptor instead.
func (*UpdateFlinkTable) Descriptor() ([]byte, []int) {
	return file_proto_types_request_table_manage_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateFlinkTable) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *UpdateFlinkTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFlinkTable) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateFlinkTable) GetTableSchema() *pbflink.TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *UpdateFlinkTable) GetTableKind() pbmodel.FlinkTable_Kind {
	if x != nil {
		return x.TableKind
	}
	return pbmodel.FlinkTable_Kind(0)
}

// DeleteTable used as request parameters for RPC and HTTP(based on Body)
type DeleteFlinkTables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delete these tableIDs
	TableIds []string `protobuf:"bytes,1,rep,name=table_ids,json=tableIds,proto3" json:"table_ids"`
}

func (x *DeleteFlinkTables) Reset() {
	*x = DeleteFlinkTables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_table_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlinkTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlinkTables) ProtoMessage() {}

func (x *DeleteFlinkTables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_table_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlinkTables.ProtoReflect.Descriptor instead.
func (*DeleteFlinkTables) Descriptor() ([]byte, []int) {
	return file_proto_types_request_table_manage_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteFlinkTables) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

// DescribeTable used as request parameters for RPC and HTTP(based on Body)
type DescribeFlinkTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceIDs
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
}

func (x *DescribeFlinkTable) Reset() {
	*x = DescribeFlinkTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_table_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlinkTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlinkTable) ProtoMessage() {}

func (x *DescribeFlinkTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_table_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlinkTable.ProtoReflect.Descriptor instead.
func (*DescribeFlinkTable) Descriptor() ([]byte, []int) {
	return file_proto_types_request_table_manage_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeFlinkTable) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

// ListTable used as a request parameters for RPC and HTTP(based on URL-Query)
type ListFlinkTables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {table_id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="updated".
	// Not required, default: updatetime.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse"`
	// Search with name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search"`
	// get this spaceid tables.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id"`
	// get this source tables.
	SourceId string `protobuf:"bytes,7,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind pbmodel.FlinkTable_Kind `protobuf:"varint,8,opt,name=table_kind,json=tableKind,proto3,enum=model.FlinkTable_Kind" json:"table_kind" form:"table_kind"`
}

func (x *ListFlinkTables) Reset() {
	*x = ListFlinkTables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_table_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlinkTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlinkTables) ProtoMessage() {}

func (x *ListFlinkTables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_table_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlinkTables.ProtoReflect.Descriptor instead.
func (*ListFlinkTables) Descriptor() ([]byte, []int) {
	return file_proto_types_request_table_manage_proto_rawDescGZIP(), []int{4}
}

func (x *ListFlinkTables) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFlinkTables) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListFlinkTables) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListFlinkTables) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListFlinkTables) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListFlinkTables) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListFlinkTables) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *ListFlinkTables) GetTableKind() pbmodel.FlinkTable_Kind {
	if x != nil {
		return x.TableKind
	}
	return pbmodel.FlinkTable_Kind(0)
}

var File_proto_types_request_table_manage_proto protoreflect.FileDescriptor

var file_proto_types_request_table_manage_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75,
	0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x15, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xf0, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0x98, 0x02,
	0x80, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x0d,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x89, 0x02,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88,
	0x02, 0x15, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12,
	0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x80, 0x02, 0x01, 0x98,
	0x02, 0x80, 0x02, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42,
	0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01, 0x05, 0x38, 0xcc, 0x08, 0x40,
	0x01, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x12, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01,
	0x14, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2,
	0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x31, 0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2,
	0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xe2, 0xdf, 0x1f, 0x29, 0x12, 0x27, 0xc2, 0x01, 0x24, 0x4a, 0x00,
	0x4a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x4a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f,
	0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x73, 0x0a, 0x24, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x14, 0x50, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x00, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_request_table_manage_proto_rawDescOnce sync.Once
	file_proto_types_request_table_manage_proto_rawDescData = file_proto_types_request_table_manage_proto_rawDesc
)

func file_proto_types_request_table_manage_proto_rawDescGZIP() []byte {
	file_proto_types_request_table_manage_proto_rawDescOnce.Do(func() {
		file_proto_types_request_table_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_request_table_manage_proto_rawDescData)
	})
	return file_proto_types_request_table_manage_proto_rawDescData
}

var file_proto_types_request_table_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_types_request_table_manage_proto_goTypes = []interface{}{
	(*CreateFlinkTable)(nil),     // 0: request.CreateFlinkTable
	(*UpdateFlinkTable)(nil),     // 1: request.UpdateFlinkTable
	(*DeleteFlinkTables)(nil),    // 2: request.DeleteFlinkTables
	(*DescribeFlinkTable)(nil),   // 3: request.DescribeFlinkTable
	(*ListFlinkTables)(nil),      // 4: request.ListFlinkTables
	(*pbflink.TableSchema)(nil),  // 5: flink.TableSchema
	(pbmodel.FlinkTable_Kind)(0), // 6: model.FlinkTable.Kind
}
var file_proto_types_request_table_manage_proto_depIdxs = []int32{
	5, // 0: request.CreateFlinkTable.table_schema:type_name -> flink.TableSchema
	6, // 1: request.CreateFlinkTable.table_kind:type_name -> model.FlinkTable.Kind
	5, // 2: request.UpdateFlinkTable.table_schema:type_name -> flink.TableSchema
	6, // 3: request.UpdateFlinkTable.table_kind:type_name -> model.FlinkTable.Kind
	6, // 4: request.ListFlinkTables.table_kind:type_name -> model.FlinkTable.Kind
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_types_request_table_manage_proto_init() }
func file_proto_types_request_table_manage_proto_init() {
	if File_proto_types_request_table_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_request_table_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlinkTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_table_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlinkTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_table_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlinkTables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_table_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlinkTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_table_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlinkTables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_request_table_manage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_request_table_manage_proto_goTypes,
		DependencyIndexes: file_proto_types_request_table_manage_proto_depIdxs,
		MessageInfos:      file_proto_types_request_table_manage_proto_msgTypes,
	}.Build()
	File_proto_types_request_table_manage_proto = out.File
	file_proto_types_request_table_manage_proto_rawDesc = nil
	file_proto_types_request_table_manage_proto_goTypes = nil
	file_proto_types_request_table_manage_proto_depIdxs = nil
}
