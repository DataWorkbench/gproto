// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/request/datasource_manage.proto

package pbrequest

import (
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingDataSourceConnection_Stage int32

const (
	PingDataSourceConnection_PhaseUnset   PingDataSourceConnection_Stage = 0
	PingDataSourceConnection_BeforeCreate PingDataSourceConnection_Stage = 1
	PingDataSourceConnection_AfterCreate  PingDataSourceConnection_Stage = 2
)

// Enum value maps for PingDataSourceConnection_Stage.
var (
	PingDataSourceConnection_Stage_name = map[int32]string{
		0: "PhaseUnset",
		1: "BeforeCreate",
		2: "AfterCreate",
	}
	PingDataSourceConnection_Stage_value = map[string]int32{
		"PhaseUnset":   0,
		"BeforeCreate": 1,
		"AfterCreate":  2,
	}
)

func (x PingDataSourceConnection_Stage) Enum() *PingDataSourceConnection_Stage {
	p := new(PingDataSourceConnection_Stage)
	*p = x
	return p
}

func (x PingDataSourceConnection_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PingDataSourceConnection_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_request_datasource_manage_proto_enumTypes[0].Descriptor()
}

func (PingDataSourceConnection_Stage) Type() protoreflect.EnumType {
	return &file_proto_types_request_datasource_manage_proto_enumTypes[0]
}

func (x PingDataSourceConnection_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PingDataSourceConnection_Stage.Descriptor instead.
func (PingDataSourceConnection_Stage) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{8, 0}
}

// ListDataSources used as a request parameters for RPC and HTTP(based on URL-Query)
type ListDataSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SpaceID; required.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" swaggerignore:"true"`
	// Limit the maximum number of entries returned this time.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset" form:"offset"`
	// The field list used to sorted query results.
	// Optional values: {"id", "name", "created", "updated"}.
	// Multiple fields are separated by commas(","), eg: sort_by="created".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse" default:"false" form:"reverse"`
	// Search with name; Not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search"`
	// Filter by data source name; valid if `search` is empty; Not required.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name" form:"name"`
	// Verbose indicates the verbosity level.
	// If the value greater than 1, The details of the associated information will be returned.
	Verbose int32 `protobuf:"varint,8,opt,name=verbose,proto3" json:"verbose" form:"verbose"`
}

func (x *ListDataSources) Reset() {
	*x = ListDataSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSources) ProtoMessage() {}

func (x *ListDataSources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSources.ProtoReflect.Descriptor instead.
func (*ListDataSources) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{0}
}

func (x *ListDataSources) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListDataSources) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDataSources) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDataSources) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListDataSources) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListDataSources) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListDataSources) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListDataSources) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

// CreateDataSource used as request parameters for RPC and HTTP(based on Body)
type CreateDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The space id.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" swaggerignore:"true"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// describe this source.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	// Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	Type pbmodel.DataSource_Type `protobuf:"varint,4,opt,name=type,proto3,enum=model.DataSource_Type" json:"type"`
	// this source connection info
	Url *pbmodel.DataSource_URL `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	// Source owner.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	// The last connection record. The value is nil if never tested for usability.
	LastConnection *pbmodel.DataSourceConnection `protobuf:"bytes,7,opt,name=last_connection,json=lastConnection,proto3" json:"last_connection" gorm:"-"`
	// The owner of workspace, only used to check quota. Set by APIServer.
	SpaceOwner string `protobuf:"bytes,8,opt,name=space_owner,json=spaceOwner,proto3" json:"space_owner" swaggerignore:"true"`
}

func (x *CreateDataSource) Reset() {
	*x = CreateDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataSource) ProtoMessage() {}

func (x *CreateDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataSource.ProtoReflect.Descriptor instead.
func (*CreateDataSource) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDataSource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateDataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDataSource) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateDataSource) GetType() pbmodel.DataSource_Type {
	if x != nil {
		return x.Type
	}
	return pbmodel.DataSource_Type(0)
}

func (x *CreateDataSource) GetUrl() *pbmodel.DataSource_URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *CreateDataSource) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateDataSource) GetLastConnection() *pbmodel.DataSourceConnection {
	if x != nil {
		return x.LastConnection
	}
	return nil
}

func (x *CreateDataSource) GetSpaceOwner() string {
	if x != nil {
		return x.SpaceOwner
	}
	return ""
}

// UpdateDataSource used as request parameters for RPC and HTTP(based on Body)
type UpdateDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The space id.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" swaggerignore:"true"`
	// The source id.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id" swaggerignore:"true"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// describe this source.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`
	// Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	Type pbmodel.DataSource_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.DataSource_Type" json:"type"`
	// this source connection info
	Url *pbmodel.DataSource_URL `protobuf:"bytes,6,opt,name=url,proto3" json:"url"`
}

func (x *UpdateDataSource) Reset() {
	*x = UpdateDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataSource) ProtoMessage() {}

func (x *UpdateDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataSource.ProtoReflect.Descriptor instead.
func (*UpdateDataSource) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDataSource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateDataSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *UpdateDataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDataSource) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateDataSource) GetType() pbmodel.DataSource_Type {
	if x != nil {
		return x.Type
	}
	return pbmodel.DataSource_Type(0)
}

func (x *UpdateDataSource) GetUrl() *pbmodel.DataSource_URL {
	if x != nil {
		return x.Url
	}
	return nil
}

// DeleteDataSources used as request parameters for RPC and HTTP(based on Body)
type DeleteDataSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// delete these SourceIDs
	SourceIds []string `protobuf:"bytes,2,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids"`
}

func (x *DeleteDataSources) Reset() {
	*x = DeleteDataSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataSources) ProtoMessage() {}

func (x *DeleteDataSources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataSources.ProtoReflect.Descriptor instead.
func (*DeleteDataSources) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDataSources) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DeleteDataSources) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

// DescribeDataSource used as request parameters for RPC and HTTP(based on Body)
type DescribeDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceID
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
}

func (x *DescribeDataSource) Reset() {
	*x = DescribeDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDataSource) ProtoMessage() {}

func (x *DescribeDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDataSource.ProtoReflect.Descriptor instead.
func (*DescribeDataSource) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeDataSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

// EnableDataSources used as request parameters for RPC and HTTP(based on Body)
type EnableDataSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// enable these SourceIDs
	SourceIds []string `protobuf:"bytes,2,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids"`
}

func (x *EnableDataSources) Reset() {
	*x = EnableDataSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDataSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDataSources) ProtoMessage() {}

func (x *EnableDataSources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDataSources.ProtoReflect.Descriptor instead.
func (*EnableDataSources) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{5}
}

func (x *EnableDataSources) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *EnableDataSources) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

// DisableDataSources used as request parameters for RPC and HTTP(based on Body)
type DisableDataSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// delete these SourceIDs
	SourceIds []string `protobuf:"bytes,2,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids"`
}

func (x *DisableDataSources) Reset() {
	*x = DisableDataSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableDataSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDataSources) ProtoMessage() {}

func (x *DisableDataSources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDataSources.ProtoReflect.Descriptor instead.
func (*DisableDataSources) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{6}
}

func (x *DisableDataSources) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DisableDataSources) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

// ListDataSourceConnections used as a request parameters for RPC and HTTP(based on URL-Query)
type ListDataSourceConnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SpaceID; required.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" swaggerignore:"true"`
	// The source id.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id" swaggerignore:"true"`
	// Limit the maximum number of entries returned this time.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset" form:"offset"`
	// The field list used to sorted query results.
	// Optional values: {"source_id", "created"}.
	// Multiple fields are separated by commas(","), eg: sort_by="created".
	// Not required, default: source_id.
	SortBy string `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse" default:"false" form:"reverse"`
	// Verbose indicates the verbosity level.
	// If the value greater than 1, The details of the associated information will be returned.
	Verbose int32 `protobuf:"varint,7,opt,name=verbose,proto3" json:"verbose" form:"verbose"`
}

func (x *ListDataSourceConnections) Reset() {
	*x = ListDataSourceConnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataSourceConnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourceConnections) ProtoMessage() {}

func (x *ListDataSourceConnections) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourceConnections.ProtoReflect.Descriptor instead.
func (*ListDataSourceConnections) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{7}
}

func (x *ListDataSourceConnections) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListDataSourceConnections) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *ListDataSourceConnections) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDataSourceConnections) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDataSourceConnections) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListDataSourceConnections) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListDataSourceConnections) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

// PingDataSource used as request parameters for RPC and HTTP(based on Body)
type PingDataSourceConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The space id.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" swaggerignore:"true"`
	// The source id.
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id"`
	// Stage At what stage did the user perform the test.
	Stage PingDataSourceConnection_Stage `protobuf:"varint,3,opt,name=stage,proto3,enum=request.PingDataSourceConnection_Stage" json:"stage"`
	// The source id.
	SourceId string `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
	// Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	Type pbmodel.DataSource_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.DataSource_Type" json:"type"`
	// this source connection info
	Url *pbmodel.DataSource_URL `protobuf:"bytes,6,opt,name=url,proto3" json:"url"`
}

func (x *PingDataSourceConnection) Reset() {
	*x = PingDataSourceConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingDataSourceConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingDataSourceConnection) ProtoMessage() {}

func (x *PingDataSourceConnection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingDataSourceConnection.ProtoReflect.Descriptor instead.
func (*PingDataSourceConnection) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{8}
}

func (x *PingDataSourceConnection) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *PingDataSourceConnection) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *PingDataSourceConnection) GetStage() PingDataSourceConnection_Stage {
	if x != nil {
		return x.Stage
	}
	return PingDataSourceConnection_PhaseUnset
}

func (x *PingDataSourceConnection) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *PingDataSourceConnection) GetType() pbmodel.DataSource_Type {
	if x != nil {
		return x.Type
	}
	return pbmodel.DataSource_Type(0)
}

func (x *PingDataSourceConnection) GetUrl() *pbmodel.DataSource_URL {
	if x != nil {
		return x.Url
	}
	return nil
}

// DescribeDataSourceTables
type DescribeDataSourceTables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId  string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id"`
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
}

func (x *DescribeDataSourceTables) Reset() {
	*x = DescribeDataSourceTables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDataSourceTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDataSourceTables) ProtoMessage() {}

func (x *DescribeDataSourceTables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDataSourceTables.ProtoReflect.Descriptor instead.
func (*DescribeDataSourceTables) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{9}
}

func (x *DescribeDataSourceTables) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DescribeDataSourceTables) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type DescribeDataSourceTableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id"`
	SourceId  string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id"`
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name"`
}

func (x *DescribeDataSourceTableSchema) Reset() {
	*x = DescribeDataSourceTableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_datasource_manage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDataSourceTableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDataSourceTableSchema) ProtoMessage() {}

func (x *DescribeDataSourceTableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_datasource_manage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDataSourceTableSchema.ProtoReflect.Descriptor instead.
func (*DescribeDataSourceTableSchema) Descriptor() ([]byte, []int) {
	return file_proto_types_request_datasource_manage_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeDataSourceTableSchema) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DescribeDataSourceTableSchema) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *DescribeDataSourceTableSchema) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

var File_proto_types_request_datasource_manage_proto protoreflect.FileDescriptor

var file_proto_types_request_datasource_manage_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12,
	0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x31,
	0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe2, 0xdf,
	0x1f, 0x23, 0x12, 0x21, 0xc2, 0x01, 0x1e, 0x4a, 0x00, 0x4a, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x9d, 0x03,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0,
	0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x01, 0x98, 0x02,
	0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04,
	0xc8, 0x01, 0x80, 0x02, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x52, 0x4c, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xe2, 0x01, 0x04, 0x10, 0x01, 0x18, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22, 0x00, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22,
	0x00, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xaf, 0x02,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0,
	0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a,
	0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x00,
	0x98, 0x02, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2,
	0x01, 0x04, 0xc8, 0x01, 0x80, 0x02, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x52, 0x4c, 0x42, 0x0d, 0xe2, 0xdf, 0x1f,
	0x09, 0x12, 0x07, 0xe2, 0x01, 0x04, 0x10, 0x01, 0x18, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x7d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01,
	0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xe2, 0xdf, 0x1f, 0x15, 0x12, 0x13,
	0xea, 0x01, 0x10, 0x38, 0x64, 0x40, 0x01, 0x5a, 0x0a, 0xc2, 0x01, 0x07, 0xca, 0x02, 0x04, 0x73,
	0x6f, 0x6d, 0x2d, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x46,
	0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2,
	0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x19, 0xe2, 0xdf, 0x1f, 0x15, 0x12, 0x13, 0xea, 0x01, 0x10, 0x38, 0x64, 0x40, 0x01, 0x5a, 0x0a,
	0xc2, 0x01, 0x07, 0xca, 0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x19, 0xe2, 0xdf, 0x1f, 0x15, 0x12, 0x13, 0xea, 0x01, 0x10, 0x38, 0x64, 0x40, 0x01, 0x5a, 0x0a,
	0xc2, 0x01, 0x07, 0xca, 0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a,
	0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xf0, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2,
	0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x31, 0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2,
	0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x12, 0x19, 0xc2, 0x01, 0x16, 0x4a, 0x00,
	0x4a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x4a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x22, 0xdb, 0x03, 0x0a, 0x18, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58,
	0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f,
	0x10, 0x0a, 0x0e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18,
	0x02, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x21, 0xe2,
	0xdf, 0x1f, 0x10, 0x0a, 0x0e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x05, 0xda, 0x01,
	0x02, 0x18, 0x01, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x52, 0x4c, 0x42, 0x21, 0xe2, 0xdf, 0x1f, 0x10,
	0x0a, 0x0e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x01,
	0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xe2, 0x01, 0x04, 0x10, 0x01, 0x18, 0x01, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x3a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0x7c,
	0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf,
	0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73,
	0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x6f,
	0x6d, 0x2d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02,
	0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca,
	0x02, 0x04, 0x73, 0x6f, 0x6d, 0x2d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x80,
	0x02, 0x01, 0x98, 0x02, 0x80, 0x02, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x78, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e,
	0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x19, 0x50, 0x42, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x50, 0x00, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x70, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_types_request_datasource_manage_proto_rawDescOnce sync.Once
	file_proto_types_request_datasource_manage_proto_rawDescData = file_proto_types_request_datasource_manage_proto_rawDesc
)

func file_proto_types_request_datasource_manage_proto_rawDescGZIP() []byte {
	file_proto_types_request_datasource_manage_proto_rawDescOnce.Do(func() {
		file_proto_types_request_datasource_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_request_datasource_manage_proto_rawDescData)
	})
	return file_proto_types_request_datasource_manage_proto_rawDescData
}

var file_proto_types_request_datasource_manage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_types_request_datasource_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_types_request_datasource_manage_proto_goTypes = []interface{}{
	(PingDataSourceConnection_Stage)(0),   // 0: request.PingDataSourceConnection.Stage
	(*ListDataSources)(nil),               // 1: request.ListDataSources
	(*CreateDataSource)(nil),              // 2: request.CreateDataSource
	(*UpdateDataSource)(nil),              // 3: request.UpdateDataSource
	(*DeleteDataSources)(nil),             // 4: request.DeleteDataSources
	(*DescribeDataSource)(nil),            // 5: request.DescribeDataSource
	(*EnableDataSources)(nil),             // 6: request.EnableDataSources
	(*DisableDataSources)(nil),            // 7: request.DisableDataSources
	(*ListDataSourceConnections)(nil),     // 8: request.ListDataSourceConnections
	(*PingDataSourceConnection)(nil),      // 9: request.PingDataSourceConnection
	(*DescribeDataSourceTables)(nil),      // 10: request.DescribeDataSourceTables
	(*DescribeDataSourceTableSchema)(nil), // 11: request.DescribeDataSourceTableSchema
	(pbmodel.DataSource_Type)(0),          // 12: model.DataSource.Type
	(*pbmodel.DataSource_URL)(nil),        // 13: model.DataSource.URL
	(*pbmodel.DataSourceConnection)(nil),  // 14: model.DataSourceConnection
}
var file_proto_types_request_datasource_manage_proto_depIdxs = []int32{
	12, // 0: request.CreateDataSource.type:type_name -> model.DataSource.Type
	13, // 1: request.CreateDataSource.url:type_name -> model.DataSource.URL
	14, // 2: request.CreateDataSource.last_connection:type_name -> model.DataSourceConnection
	12, // 3: request.UpdateDataSource.type:type_name -> model.DataSource.Type
	13, // 4: request.UpdateDataSource.url:type_name -> model.DataSource.URL
	0,  // 5: request.PingDataSourceConnection.stage:type_name -> request.PingDataSourceConnection.Stage
	12, // 6: request.PingDataSourceConnection.type:type_name -> model.DataSource.Type
	13, // 7: request.PingDataSourceConnection.url:type_name -> model.DataSource.URL
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_types_request_datasource_manage_proto_init() }
func file_proto_types_request_datasource_manage_proto_init() {
	if File_proto_types_request_datasource_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_request_datasource_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDataSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableDataSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataSourceConnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingDataSourceConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDataSourceTables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_datasource_manage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDataSourceTableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_request_datasource_manage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_request_datasource_manage_proto_goTypes,
		DependencyIndexes: file_proto_types_request_datasource_manage_proto_depIdxs,
		EnumInfos:         file_proto_types_request_datasource_manage_proto_enumTypes,
		MessageInfos:      file_proto_types_request_datasource_manage_proto_msgTypes,
	}.Build()
	File_proto_types_request_datasource_manage_proto = out.File
	file_proto_types_request_datasource_manage_proto_rawDesc = nil
	file_proto_types_request_datasource_manage_proto_goTypes = nil
	file_proto_types_request_datasource_manage_proto_depIdxs = nil
}
