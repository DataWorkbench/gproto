// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/request/sync_job_manage.proto

package pbrequest

import (
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListSyncJobs used as a request parameters for RPC and HTTP(based on URL-Query)
type ListSyncJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset" form:"offset"`
	// The field list used to sorted query results. eg: sort_by="crated".
	// Optional values: {id, name, created, updated}.
	// Not required, default: id.
	SortBy string `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse" form:"reverse"`
	// Search with stream job name; Not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search"`
	// The parent id.
	Pid string `protobuf:"bytes,7,opt,name=pid,proto3" json:"pid" form:"pid"`
}

func (x *ListSyncJobs) Reset() {
	*x = ListSyncJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncJobs) ProtoMessage() {}

func (x *ListSyncJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncJobs.ProtoReflect.Descriptor instead.
func (*ListSyncJobs) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{0}
}

func (x *ListSyncJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListSyncJobs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSyncJobs) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSyncJobs) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListSyncJobs) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListSyncJobs) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListSyncJobs) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

// CreateSyncJob used as a request parameters for RPC and HTTP(based on Body)
type CreateSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The user-id of created this job. Fixed to the request user id.
	CreatedBy string `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by" swaggerignore:"true"`
	// PID is the parent id(directory). pid is "" means root(`/`)
	Pid string `protobuf:"bytes,3,opt,name=pid,proto3" json:"pid"`
	// IsDirectory represents this job whether a directory.
	IsDirectory bool `protobuf:"varint,4,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory"`
	// The job name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	// Description of the job, Not required, Max length 1024.
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc"`
	// The job Type. Is Required when not directory,
	// Optional Value: 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	// Desc: Cannot be modified after creation.
	Type pbmodel.SyncJob_Type `protobuf:"varint,7,opt,name=type,proto3,enum=model.SyncJob_Type" json:"type"`
	// The flink compute cluster id. Is required.
	ClusterId string `protobuf:"bytes,8,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id"`
	// The owner of workspace, only used to check quota. Set by APIServer.
	SpaceOwner string `protobuf:"bytes,9,opt,name=space_owner,json=spaceOwner,proto3" json:"space_owner" swaggerignore:"true"`
}

func (x *CreateSyncJob) Reset() {
	*x = CreateSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncJob) ProtoMessage() {}

func (x *CreateSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncJob.ProtoReflect.Descriptor instead.
func (*CreateSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateSyncJob) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateSyncJob) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *CreateSyncJob) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *CreateSyncJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSyncJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateSyncJob) GetType() pbmodel.SyncJob_Type {
	if x != nil {
		return x.Type
	}
	return pbmodel.SyncJob_Type(0)
}

func (x *CreateSyncJob) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateSyncJob) GetSpaceOwner() string {
	if x != nil {
		return x.SpaceOwner
	}
	return ""
}

// DeleteSyncJobs used as a request parameters for RPC and HTTP(based on Body)
type DeleteSyncJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The list of stream job id. Is required, Min 1, Max 100.
	JobIds []string `protobuf:"bytes,2,rep,name=job_ids,json=jobIds,proto3" json:"job_ids"`
}

func (x *DeleteSyncJobs) Reset() {
	*x = DeleteSyncJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyncJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncJobs) ProtoMessage() {}

func (x *DeleteSyncJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncJobs.ProtoReflect.Descriptor instead.
func (*DeleteSyncJobs) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteSyncJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DeleteSyncJobs) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

// MoveSyncJobs used as a request parameters for RPC and HTTP(based on Body)
type MoveSyncJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The list of stream job id. Is required, Min 1, Max 100.
	JobIds []string `protobuf:"bytes,2,rep,name=job_ids,json=jobIds,proto3" json:"job_ids"`
	// Target represents the target directory. `target` is "" means move to root(`/`)
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target"`
}

func (x *MoveSyncJobs) Reset() {
	*x = MoveSyncJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveSyncJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSyncJobs) ProtoMessage() {}

func (x *MoveSyncJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSyncJobs.ProtoReflect.Descriptor instead.
func (*MoveSyncJobs) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{3}
}

func (x *MoveSyncJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *MoveSyncJobs) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *MoveSyncJobs) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// UpdateSyncJob used as a request parameters for RPC and HTTP(based on Body).
type UpdateSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The stream job name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// Description of the workspace, Not required, Max length 1024.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`
}

func (x *UpdateSyncJob) Reset() {
	*x = UpdateSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncJob) ProtoMessage() {}

func (x *UpdateSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncJob.ProtoReflect.Descriptor instead.
func (*UpdateSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateSyncJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateSyncJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSyncJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// DescribeSyncJob used as a request parameters for RPC.
type DescribeSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version" uri:"ver_id" swaggerignore:"true"`
}

func (x *DescribeSyncJob) Reset() {
	*x = DescribeSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSyncJob) ProtoMessage() {}

func (x *DescribeSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSyncJob.ProtoReflect.Descriptor instead.
func (*DescribeSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeSyncJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DescribeSyncJob) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// SetSyncJobschedule used as a request parameters for RPC.
type SetSyncJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The stream job id it belongs to.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The schedule set.
	Schedule *pbmodel.SyncJobSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule"`
}

func (x *SetSyncJobSchedule) Reset() {
	*x = SetSyncJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSyncJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSyncJobSchedule) ProtoMessage() {}

func (x *SetSyncJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSyncJobSchedule.ProtoReflect.Descriptor instead.
func (*SetSyncJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{6}
}

func (x *SetSyncJobSchedule) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SetSyncJobSchedule) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SetSyncJobSchedule) GetSchedule() *pbmodel.SyncJobSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// SetSyncJobArgs used as a request parameters for RPC.
type SetSyncJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The stream job ID it belongs to.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The args set.
	Args *pbmodel.SyncJobArgs `protobuf:"bytes,3,opt,name=args,proto3" json:"args"`
}

func (x *SetSyncJobArgs) Reset() {
	*x = SetSyncJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSyncJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSyncJobArgs) ProtoMessage() {}

func (x *SetSyncJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSyncJobArgs.ProtoReflect.Descriptor instead.
func (*SetSyncJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{7}
}

func (x *SetSyncJobArgs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SetSyncJobArgs) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SetSyncJobArgs) GetArgs() *pbmodel.SyncJobArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

// GetSyncJobSchedule used as a request parameters for RPC.
type GetSyncJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version" uri:"ver_id" swaggerignore:"true"`
}

func (x *GetSyncJobSchedule) Reset() {
	*x = GetSyncJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncJobSchedule) ProtoMessage() {}

func (x *GetSyncJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncJobSchedule.ProtoReflect.Descriptor instead.
func (*GetSyncJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{8}
}

func (x *GetSyncJobSchedule) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetSyncJobSchedule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// GetSyncJobArgs used as a request parameters for RPC.
type GetSyncJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version" uri:"ver_id" swaggerignore:"true"`
}

func (x *GetSyncJobArgs) Reset() {
	*x = GetSyncJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncJobArgs) ProtoMessage() {}

func (x *GetSyncJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncJobArgs.ProtoReflect.Descriptor instead.
func (*GetSyncJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{9}
}

func (x *GetSyncJobArgs) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetSyncJobArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ListReleaseSyncJobs used as a request parameters for RPC and HTTP(based on URL-Query).
type ListReleaseSyncJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset"`
	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,5,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The field list used to sorted query results.
	// Optional values: {job_id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="updated".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse"`
	// Search with stream job name; Not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search"`
	// Filter by release status;  Not required.
	// Valid optional: 1 => "enabled", 2 => "disabled".
	Status pbmodel.SyncJobRelease_Status `protobuf:"varint,7,opt,name=status,proto3,enum=model.SyncJobRelease_Status" json:"status" form:"status"`
	// The stream job id.
	JobId string `protobuf:"bytes,8,opt,name=job_id,json=jobId,proto3" json:"job_id" form:"job_id"`
}

func (x *ListReleaseSyncJobs) Reset() {
	*x = ListReleaseSyncJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseSyncJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseSyncJobs) ProtoMessage() {}

func (x *ListReleaseSyncJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseSyncJobs.ProtoReflect.Descriptor instead.
func (*ListReleaseSyncJobs) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{10}
}

func (x *ListReleaseSyncJobs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListReleaseSyncJobs) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListReleaseSyncJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListReleaseSyncJobs) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListReleaseSyncJobs) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListReleaseSyncJobs) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListReleaseSyncJobs) GetStatus() pbmodel.SyncJobRelease_Status {
	if x != nil {
		return x.Status
	}
	return pbmodel.SyncJobRelease_Status(0)
}

func (x *ListReleaseSyncJobs) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// ReleaseSyncJob used as a request parameters for RPC and HTTP(based on Body.)
type ReleaseSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// The user-id of release this job. Fixed to the request user id.
	CreatedBy string `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by" swaggerignore:"true"`
	// Description for this releases. Not required, Max length 1024.
	Desc        string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	StopRunning bool   `protobuf:"varint,4,opt,name=stop_running,json=stopRunning,proto3" json:"stop_running"`
}

func (x *ReleaseSyncJob) Reset() {
	*x = ReleaseSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSyncJob) ProtoMessage() {}

func (x *ReleaseSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSyncJob.ProtoReflect.Descriptor instead.
func (*ReleaseSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseSyncJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ReleaseSyncJob) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ReleaseSyncJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseSyncJob) GetStopRunning() bool {
	if x != nil {
		return x.StopRunning
	}
	return false
}

// OfflineReleaseSyncJob used as a request parameters for RPC and HTTP(based on Body).
type OfflineReleaseSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
}

func (x *OfflineReleaseSyncJob) Reset() {
	*x = OfflineReleaseSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineReleaseSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineReleaseSyncJob) ProtoMessage() {}

func (x *OfflineReleaseSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineReleaseSyncJob.ProtoReflect.Descriptor instead.
func (*OfflineReleaseSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{12}
}

func (x *OfflineReleaseSyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *OfflineReleaseSyncJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// SuspendReleaseSyncJob used as a request parameters for RPC and HTTP(based on Body).
type SuspendReleaseSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The stream job id in HTTP Request-URI
	JobId       string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	StopRunning bool   `protobuf:"varint,3,opt,name=stop_running,json=stopRunning,proto3" json:"stop_running"`
}

func (x *SuspendReleaseSyncJob) Reset() {
	*x = SuspendReleaseSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendReleaseSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendReleaseSyncJob) ProtoMessage() {}

func (x *SuspendReleaseSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendReleaseSyncJob.ProtoReflect.Descriptor instead.
func (*SuspendReleaseSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{13}
}

func (x *SuspendReleaseSyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SuspendReleaseSyncJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SuspendReleaseSyncJob) GetStopRunning() bool {
	if x != nil {
		return x.StopRunning
	}
	return false
}

// ResumeReleaseSyncJobs used as a request parameters for RPC.
type ResumeReleaseSyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
}

func (x *ResumeReleaseSyncJob) Reset() {
	*x = ResumeReleaseSyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeReleaseSyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeReleaseSyncJob) ProtoMessage() {}

func (x *ResumeReleaseSyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeReleaseSyncJob.ProtoReflect.Descriptor instead.
func (*ResumeReleaseSyncJob) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{14}
}

func (x *ResumeReleaseSyncJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ResumeReleaseSyncJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// ListSyncJobVersions used as a request parameters for RPC and HTTP(based on URL-Query)
type ListSyncJobVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" swaggerignore:"true"`
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {version, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="version".
	// Not required, default: version.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse"`
}

func (x *ListSyncJobVersions) Reset() {
	*x = ListSyncJobVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncJobVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncJobVersions) ProtoMessage() {}

func (x *ListSyncJobVersions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncJobVersions.ProtoReflect.Descriptor instead.
func (*ListSyncJobVersions) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{15}
}

func (x *ListSyncJobVersions) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ListSyncJobVersions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSyncJobVersions) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSyncJobVersions) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListSyncJobVersions) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// DescribeFlinkUIByInstanceId used as a request parameters for RPC.
type DescribeSyncFlinkUIByInstanceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instance id in HTTP Request-URI. Is Required.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id" uri:"instance_id" swaggerignore:"true"`
}

func (x *DescribeSyncFlinkUIByInstanceId) Reset() {
	*x = DescribeSyncFlinkUIByInstanceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSyncFlinkUIByInstanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSyncFlinkUIByInstanceId) ProtoMessage() {}

func (x *DescribeSyncFlinkUIByInstanceId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_sync_job_manage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSyncFlinkUIByInstanceId.ProtoReflect.Descriptor instead.
func (*DescribeSyncFlinkUIByInstanceId) Descriptor() ([]byte, []int) {
	return file_proto_types_request_sync_job_manage_proto_rawDescGZIP(), []int{16}
}

func (x *DescribeSyncFlinkUIByInstanceId) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

var File_proto_types_request_sync_job_manage_proto protoreflect.FileDescriptor

var file_proto_types_request_sync_job_manage_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x98, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14,
	0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x17, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x31, 0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x23, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe2, 0xdf, 0x1f, 0x23, 0x12, 0x21, 0xc2, 0x01, 0x1e,
	0x4a, 0x00, 0x4a, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77,
	0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x41, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x37, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe2, 0xdf, 0x1f, 0x0e, 0x0a, 0x0c, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22, 0x00, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d,
	0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0xc0, 0x01,
	0x02, 0xc8, 0x01, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xc2, 0x01, 0x04, 0xc8, 0x01, 0xfc, 0x07, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x51,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x28, 0xe2, 0xdf, 0x1f, 0x17, 0x0a, 0x15, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x05, 0xd2, 0x01, 0x02, 0x18, 0x00, 0xe2, 0xdf,
	0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x30, 0x00, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xc2, 0x01, 0x02, 0x22, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d,
	0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xe2, 0xdf, 0x1f, 0x15, 0x12, 0x13, 0xea,
	0x01, 0x10, 0x30, 0x00, 0x38, 0x64, 0x5a, 0x0a, 0xc2, 0x01, 0x07, 0xca, 0x02, 0x04, 0x73, 0x74,
	0x6a, 0x2d, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x4d,
	0x6f, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xe2, 0xdf,
	0x1f, 0x15, 0x12, 0x13, 0xea, 0x01, 0x10, 0x30, 0x00, 0x38, 0x64, 0x5a, 0x0a, 0xc2, 0x01, 0x07,
	0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12,
	0x40, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe2, 0xdf, 0x1f, 0x11, 0x0a, 0x0f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x05, 0xc2, 0x01, 0x02, 0x22, 0x00, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0,
	0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a,
	0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01,
	0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2,
	0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0xc0, 0x01, 0x02, 0xc8, 0x01, 0x80, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0xc8, 0x01,
	0x80, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x5d, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f,
	0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02,
	0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73,
	0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02,
	0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73,
	0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x60, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a,
	0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01,
	0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xe7, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x31,
	0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe2, 0xdf,
	0x1f, 0x23, 0x12, 0x21, 0xc2, 0x01, 0x1e, 0x4a, 0x00, 0x4a, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf,
	0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a,
	0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x41, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x73, 0x0a, 0x15,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2,
	0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a,
	0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f,
	0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x72, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f,
	0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d,
	0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a, 0x2d, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x4a, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf,
	0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x73, 0x74, 0x6a,
	0x2d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03,
	0x31, 0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2,
	0xdf, 0x1f, 0x22, 0x12, 0x20, 0xc2, 0x01, 0x1d, 0x4a, 0x00, 0x4a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x49, 0x42, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x73, 0x74, 0x69, 0x2d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x75, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69,
	0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x16, 0x50, 0x42, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x50, 0x00, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_request_sync_job_manage_proto_rawDescOnce sync.Once
	file_proto_types_request_sync_job_manage_proto_rawDescData = file_proto_types_request_sync_job_manage_proto_rawDesc
)

func file_proto_types_request_sync_job_manage_proto_rawDescGZIP() []byte {
	file_proto_types_request_sync_job_manage_proto_rawDescOnce.Do(func() {
		file_proto_types_request_sync_job_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_request_sync_job_manage_proto_rawDescData)
	})
	return file_proto_types_request_sync_job_manage_proto_rawDescData
}

var file_proto_types_request_sync_job_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_types_request_sync_job_manage_proto_goTypes = []interface{}{
	(*ListSyncJobs)(nil),                    // 0: request.ListSyncJobs
	(*CreateSyncJob)(nil),                   // 1: request.CreateSyncJob
	(*DeleteSyncJobs)(nil),                  // 2: request.DeleteSyncJobs
	(*MoveSyncJobs)(nil),                    // 3: request.MoveSyncJobs
	(*UpdateSyncJob)(nil),                   // 4: request.UpdateSyncJob
	(*DescribeSyncJob)(nil),                 // 5: request.DescribeSyncJob
	(*SetSyncJobSchedule)(nil),              // 6: request.SetSyncJobSchedule
	(*SetSyncJobArgs)(nil),                  // 7: request.SetSyncJobArgs
	(*GetSyncJobSchedule)(nil),              // 8: request.GetSyncJobSchedule
	(*GetSyncJobArgs)(nil),                  // 9: request.GetSyncJobArgs
	(*ListReleaseSyncJobs)(nil),             // 10: request.ListReleaseSyncJobs
	(*ReleaseSyncJob)(nil),                  // 11: request.ReleaseSyncJob
	(*OfflineReleaseSyncJob)(nil),           // 12: request.OfflineReleaseSyncJob
	(*SuspendReleaseSyncJob)(nil),           // 13: request.SuspendReleaseSyncJob
	(*ResumeReleaseSyncJob)(nil),            // 14: request.ResumeReleaseSyncJob
	(*ListSyncJobVersions)(nil),             // 15: request.ListSyncJobVersions
	(*DescribeSyncFlinkUIByInstanceId)(nil), // 16: request.DescribeSyncFlinkUIByInstanceId
	(pbmodel.SyncJob_Type)(0),               // 17: model.SyncJob.Type
	(*pbmodel.SyncJobSchedule)(nil),         // 18: model.SyncJobSchedule
	(*pbmodel.SyncJobArgs)(nil),             // 19: model.SyncJobArgs
	(pbmodel.SyncJobRelease_Status)(0),      // 20: model.SyncJobRelease.Status
}
var file_proto_types_request_sync_job_manage_proto_depIdxs = []int32{
	17, // 0: request.CreateSyncJob.type:type_name -> model.SyncJob.Type
	18, // 1: request.SetSyncJobSchedule.schedule:type_name -> model.SyncJobSchedule
	19, // 2: request.SetSyncJobArgs.args:type_name -> model.SyncJobArgs
	20, // 3: request.ListReleaseSyncJobs.status:type_name -> model.SyncJobRelease.Status
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_types_request_sync_job_manage_proto_init() }
func file_proto_types_request_sync_job_manage_proto_init() {
	if File_proto_types_request_sync_job_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_request_sync_job_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyncJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveSyncJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSyncJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSyncJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseSyncJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineReleaseSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendReleaseSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeReleaseSyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncJobVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_sync_job_manage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSyncFlinkUIByInstanceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_request_sync_job_manage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_request_sync_job_manage_proto_goTypes,
		DependencyIndexes: file_proto_types_request_sync_job_manage_proto_depIdxs,
		MessageInfos:      file_proto_types_request_sync_job_manage_proto_msgTypes,
	}.Build()
	File_proto_types_request_sync_job_manage_proto = out.File
	file_proto_types_request_sync_job_manage_proto_rawDesc = nil
	file_proto_types_request_sync_job_manage_proto_goTypes = nil
	file_proto_types_request_sync_job_manage_proto_depIdxs = nil
}
