// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/dataservice/dataservice.proto

package pbsvcdataservice

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// rpc DeleteByWorkspaces  request space_ids
	CreateDataServiceCluster(ctx context.Context, in *pbrequest.CreateDataServiceCluster, opts ...grpc.CallOption) (*pbresponse.CreateDataServiceCluster, error)
	ListDataServiceClusters(ctx context.Context, in *pbrequest.ListDataServiceClusters, opts ...grpc.CallOption) (*pbresponse.ListDataServiceClusters, error)
	UpdateDataServiceCluster(ctx context.Context, in *pbrequest.UpdateDataServiceCluster, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeDataServiceCluster(ctx context.Context, in *pbrequest.DescribeDataServiceCluster, opts ...grpc.CallOption) (*pbresponse.DescribeDataServiceCluster, error)
	DeleteDataServiceClusters(ctx context.Context, in *pbrequest.DeleteDataServiceClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	StartDataServiceClusters(ctx context.Context, in *pbrequest.StartDataServiceClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	StopDataServiceClusters(ctx context.Context, in *pbrequest.StopDataServiceClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeServiceDataSourceKinds(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.DescribeServiceDataSourceKinds, error)
	CreateApiGroup(ctx context.Context, in *pbrequest.CreateApiGroup, opts ...grpc.CallOption) (*pbresponse.CreateApiGroup, error)
	ListApiGroups(ctx context.Context, in *pbrequest.ListApiGroups, opts ...grpc.CallOption) (*pbresponse.ListApiGroups, error)
	DeleteApiGroups(ctx context.Context, in *pbrequest.DeleteApiGroups, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UpdateApiGroup(ctx context.Context, in *pbrequest.UpdateApiGroup, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeApiGroup(ctx context.Context, in *pbrequest.DescribeApiGroup, opts ...grpc.CallOption) (*pbresponse.DescribeApiGroup, error)
	ListApiConfigs(ctx context.Context, in *pbrequest.ListApiConfigs, opts ...grpc.CallOption) (*pbresponse.ListApiConfigs, error)
	DescribeApiConfig(ctx context.Context, in *pbrequest.DescribeApiConfig, opts ...grpc.CallOption) (*pbresponse.DescribeApiConfig, error)
	CreateApiConfig(ctx context.Context, in *pbrequest.CreateApiConfig, opts ...grpc.CallOption) (*pbresponse.CreateApiConfig, error)
	UpdateApiConfig(ctx context.Context, in *pbrequest.UpdateApiConfig, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UpdateApiBaseConfig(ctx context.Context, in *pbrequest.UpdateApiBaseConfig, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteApiConfigs(ctx context.Context, in *pbrequest.DeleteApiConfigs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	TestDataServiceApi(ctx context.Context, in *pbrequest.TestDataServiceApi, opts ...grpc.CallOption) (*pbresponse.TestDataServiceApi, error)
	PublishDataServiceApi(ctx context.Context, in *pbrequest.PublishDataServiceApi, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	AbolishDataServiceApis(ctx context.Context, in *pbrequest.AbolishDataServiceApis, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribePublishedApiHttpDetails(ctx context.Context, in *pbrequest.DescribePublishedApiHttpDetails, opts ...grpc.CallOption) (*pbresponse.DescribePublishedApiHttpDetails, error)
	ListDataServiceApiVersions(ctx context.Context, in *pbrequest.ListDataServiceApiVersions, opts ...grpc.CallOption) (*pbresponse.ListDataServiceApiVersions, error)
	DescribeDataServiceApiVersion(ctx context.Context, in *pbrequest.DescribeDataServiceApiVersion, opts ...grpc.CallOption) (*pbresponse.DescribeDataServiceApiVersion, error)
	RepublishDataServiceApi(ctx context.Context, in *pbrequest.RepublishDataServiceApi, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListPublishedApiVersionsByClusterId(ctx context.Context, in *pbrequest.ListPublishedApiVersionsByClusterId, opts ...grpc.CallOption) (*pbresponse.ListPublishedApiVersionsByClusterId, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) CreateDataServiceCluster(ctx context.Context, in *pbrequest.CreateDataServiceCluster, opts ...grpc.CallOption) (*pbresponse.CreateDataServiceCluster, error) {
	out := new(pbresponse.CreateDataServiceCluster)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/CreateDataServiceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDataServiceClusters(ctx context.Context, in *pbrequest.ListDataServiceClusters, opts ...grpc.CallOption) (*pbresponse.ListDataServiceClusters, error) {
	out := new(pbresponse.ListDataServiceClusters)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/ListDataServiceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDataServiceCluster(ctx context.Context, in *pbrequest.UpdateDataServiceCluster, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/UpdateDataServiceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DescribeDataServiceCluster(ctx context.Context, in *pbrequest.DescribeDataServiceCluster, opts ...grpc.CallOption) (*pbresponse.DescribeDataServiceCluster, error) {
	out := new(pbresponse.DescribeDataServiceCluster)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DescribeDataServiceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteDataServiceClusters(ctx context.Context, in *pbrequest.DeleteDataServiceClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DeleteDataServiceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) StartDataServiceClusters(ctx context.Context, in *pbrequest.StartDataServiceClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/StartDataServiceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) StopDataServiceClusters(ctx context.Context, in *pbrequest.StopDataServiceClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/StopDataServiceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DescribeServiceDataSourceKinds(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.DescribeServiceDataSourceKinds, error) {
	out := new(pbresponse.DescribeServiceDataSourceKinds)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DescribeServiceDataSourceKinds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateApiGroup(ctx context.Context, in *pbrequest.CreateApiGroup, opts ...grpc.CallOption) (*pbresponse.CreateApiGroup, error) {
	out := new(pbresponse.CreateApiGroup)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/CreateApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListApiGroups(ctx context.Context, in *pbrequest.ListApiGroups, opts ...grpc.CallOption) (*pbresponse.ListApiGroups, error) {
	out := new(pbresponse.ListApiGroups)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/ListApiGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteApiGroups(ctx context.Context, in *pbrequest.DeleteApiGroups, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DeleteApiGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateApiGroup(ctx context.Context, in *pbrequest.UpdateApiGroup, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/UpdateApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DescribeApiGroup(ctx context.Context, in *pbrequest.DescribeApiGroup, opts ...grpc.CallOption) (*pbresponse.DescribeApiGroup, error) {
	out := new(pbresponse.DescribeApiGroup)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DescribeApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListApiConfigs(ctx context.Context, in *pbrequest.ListApiConfigs, opts ...grpc.CallOption) (*pbresponse.ListApiConfigs, error) {
	out := new(pbresponse.ListApiConfigs)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/ListApiConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DescribeApiConfig(ctx context.Context, in *pbrequest.DescribeApiConfig, opts ...grpc.CallOption) (*pbresponse.DescribeApiConfig, error) {
	out := new(pbresponse.DescribeApiConfig)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DescribeApiConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateApiConfig(ctx context.Context, in *pbrequest.CreateApiConfig, opts ...grpc.CallOption) (*pbresponse.CreateApiConfig, error) {
	out := new(pbresponse.CreateApiConfig)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/CreateApiConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateApiConfig(ctx context.Context, in *pbrequest.UpdateApiConfig, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/UpdateApiConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateApiBaseConfig(ctx context.Context, in *pbrequest.UpdateApiBaseConfig, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/UpdateApiBaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteApiConfigs(ctx context.Context, in *pbrequest.DeleteApiConfigs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DeleteApiConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) TestDataServiceApi(ctx context.Context, in *pbrequest.TestDataServiceApi, opts ...grpc.CallOption) (*pbresponse.TestDataServiceApi, error) {
	out := new(pbresponse.TestDataServiceApi)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/TestDataServiceApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) PublishDataServiceApi(ctx context.Context, in *pbrequest.PublishDataServiceApi, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/PublishDataServiceApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AbolishDataServiceApis(ctx context.Context, in *pbrequest.AbolishDataServiceApis, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/AbolishDataServiceApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DescribePublishedApiHttpDetails(ctx context.Context, in *pbrequest.DescribePublishedApiHttpDetails, opts ...grpc.CallOption) (*pbresponse.DescribePublishedApiHttpDetails, error) {
	out := new(pbresponse.DescribePublishedApiHttpDetails)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DescribePublishedApiHttpDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDataServiceApiVersions(ctx context.Context, in *pbrequest.ListDataServiceApiVersions, opts ...grpc.CallOption) (*pbresponse.ListDataServiceApiVersions, error) {
	out := new(pbresponse.ListDataServiceApiVersions)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/ListDataServiceApiVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DescribeDataServiceApiVersion(ctx context.Context, in *pbrequest.DescribeDataServiceApiVersion, opts ...grpc.CallOption) (*pbresponse.DescribeDataServiceApiVersion, error) {
	out := new(pbresponse.DescribeDataServiceApiVersion)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/DescribeDataServiceApiVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RepublishDataServiceApi(ctx context.Context, in *pbrequest.RepublishDataServiceApi, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/RepublishDataServiceApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListPublishedApiVersionsByClusterId(ctx context.Context, in *pbrequest.ListPublishedApiVersionsByClusterId, opts ...grpc.CallOption) (*pbresponse.ListPublishedApiVersionsByClusterId, error) {
	out := new(pbresponse.ListPublishedApiVersionsByClusterId)
	err := c.cc.Invoke(ctx, "/dataservice.DataService/ListPublishedApiVersionsByClusterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	// rpc DeleteByWorkspaces  request space_ids
	CreateDataServiceCluster(context.Context, *pbrequest.CreateDataServiceCluster) (*pbresponse.CreateDataServiceCluster, error)
	ListDataServiceClusters(context.Context, *pbrequest.ListDataServiceClusters) (*pbresponse.ListDataServiceClusters, error)
	UpdateDataServiceCluster(context.Context, *pbrequest.UpdateDataServiceCluster) (*pbmodel.EmptyStruct, error)
	DescribeDataServiceCluster(context.Context, *pbrequest.DescribeDataServiceCluster) (*pbresponse.DescribeDataServiceCluster, error)
	DeleteDataServiceClusters(context.Context, *pbrequest.DeleteDataServiceClusters) (*pbmodel.EmptyStruct, error)
	StartDataServiceClusters(context.Context, *pbrequest.StartDataServiceClusters) (*pbmodel.EmptyStruct, error)
	StopDataServiceClusters(context.Context, *pbrequest.StopDataServiceClusters) (*pbmodel.EmptyStruct, error)
	DescribeServiceDataSourceKinds(context.Context, *pbmodel.EmptyStruct) (*pbresponse.DescribeServiceDataSourceKinds, error)
	CreateApiGroup(context.Context, *pbrequest.CreateApiGroup) (*pbresponse.CreateApiGroup, error)
	ListApiGroups(context.Context, *pbrequest.ListApiGroups) (*pbresponse.ListApiGroups, error)
	DeleteApiGroups(context.Context, *pbrequest.DeleteApiGroups) (*pbmodel.EmptyStruct, error)
	UpdateApiGroup(context.Context, *pbrequest.UpdateApiGroup) (*pbmodel.EmptyStruct, error)
	DescribeApiGroup(context.Context, *pbrequest.DescribeApiGroup) (*pbresponse.DescribeApiGroup, error)
	ListApiConfigs(context.Context, *pbrequest.ListApiConfigs) (*pbresponse.ListApiConfigs, error)
	DescribeApiConfig(context.Context, *pbrequest.DescribeApiConfig) (*pbresponse.DescribeApiConfig, error)
	CreateApiConfig(context.Context, *pbrequest.CreateApiConfig) (*pbresponse.CreateApiConfig, error)
	UpdateApiConfig(context.Context, *pbrequest.UpdateApiConfig) (*pbmodel.EmptyStruct, error)
	UpdateApiBaseConfig(context.Context, *pbrequest.UpdateApiBaseConfig) (*pbmodel.EmptyStruct, error)
	DeleteApiConfigs(context.Context, *pbrequest.DeleteApiConfigs) (*pbmodel.EmptyStruct, error)
	TestDataServiceApi(context.Context, *pbrequest.TestDataServiceApi) (*pbresponse.TestDataServiceApi, error)
	PublishDataServiceApi(context.Context, *pbrequest.PublishDataServiceApi) (*pbmodel.EmptyStruct, error)
	AbolishDataServiceApis(context.Context, *pbrequest.AbolishDataServiceApis) (*pbmodel.EmptyStruct, error)
	DescribePublishedApiHttpDetails(context.Context, *pbrequest.DescribePublishedApiHttpDetails) (*pbresponse.DescribePublishedApiHttpDetails, error)
	ListDataServiceApiVersions(context.Context, *pbrequest.ListDataServiceApiVersions) (*pbresponse.ListDataServiceApiVersions, error)
	DescribeDataServiceApiVersion(context.Context, *pbrequest.DescribeDataServiceApiVersion) (*pbresponse.DescribeDataServiceApiVersion, error)
	RepublishDataServiceApi(context.Context, *pbrequest.RepublishDataServiceApi) (*pbmodel.EmptyStruct, error)
	ListPublishedApiVersionsByClusterId(context.Context, *pbrequest.ListPublishedApiVersionsByClusterId) (*pbresponse.ListPublishedApiVersionsByClusterId, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) CreateDataServiceCluster(context.Context, *pbrequest.CreateDataServiceCluster) (*pbresponse.CreateDataServiceCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataServiceCluster not implemented")
}
func (UnimplementedDataServiceServer) ListDataServiceClusters(context.Context, *pbrequest.ListDataServiceClusters) (*pbresponse.ListDataServiceClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataServiceClusters not implemented")
}
func (UnimplementedDataServiceServer) UpdateDataServiceCluster(context.Context, *pbrequest.UpdateDataServiceCluster) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataServiceCluster not implemented")
}
func (UnimplementedDataServiceServer) DescribeDataServiceCluster(context.Context, *pbrequest.DescribeDataServiceCluster) (*pbresponse.DescribeDataServiceCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataServiceCluster not implemented")
}
func (UnimplementedDataServiceServer) DeleteDataServiceClusters(context.Context, *pbrequest.DeleteDataServiceClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataServiceClusters not implemented")
}
func (UnimplementedDataServiceServer) StartDataServiceClusters(context.Context, *pbrequest.StartDataServiceClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDataServiceClusters not implemented")
}
func (UnimplementedDataServiceServer) StopDataServiceClusters(context.Context, *pbrequest.StopDataServiceClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDataServiceClusters not implemented")
}
func (UnimplementedDataServiceServer) DescribeServiceDataSourceKinds(context.Context, *pbmodel.EmptyStruct) (*pbresponse.DescribeServiceDataSourceKinds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeServiceDataSourceKinds not implemented")
}
func (UnimplementedDataServiceServer) CreateApiGroup(context.Context, *pbrequest.CreateApiGroup) (*pbresponse.CreateApiGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiGroup not implemented")
}
func (UnimplementedDataServiceServer) ListApiGroups(context.Context, *pbrequest.ListApiGroups) (*pbresponse.ListApiGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiGroups not implemented")
}
func (UnimplementedDataServiceServer) DeleteApiGroups(context.Context, *pbrequest.DeleteApiGroups) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiGroups not implemented")
}
func (UnimplementedDataServiceServer) UpdateApiGroup(context.Context, *pbrequest.UpdateApiGroup) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiGroup not implemented")
}
func (UnimplementedDataServiceServer) DescribeApiGroup(context.Context, *pbrequest.DescribeApiGroup) (*pbresponse.DescribeApiGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApiGroup not implemented")
}
func (UnimplementedDataServiceServer) ListApiConfigs(context.Context, *pbrequest.ListApiConfigs) (*pbresponse.ListApiConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiConfigs not implemented")
}
func (UnimplementedDataServiceServer) DescribeApiConfig(context.Context, *pbrequest.DescribeApiConfig) (*pbresponse.DescribeApiConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApiConfig not implemented")
}
func (UnimplementedDataServiceServer) CreateApiConfig(context.Context, *pbrequest.CreateApiConfig) (*pbresponse.CreateApiConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiConfig not implemented")
}
func (UnimplementedDataServiceServer) UpdateApiConfig(context.Context, *pbrequest.UpdateApiConfig) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiConfig not implemented")
}
func (UnimplementedDataServiceServer) UpdateApiBaseConfig(context.Context, *pbrequest.UpdateApiBaseConfig) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiBaseConfig not implemented")
}
func (UnimplementedDataServiceServer) DeleteApiConfigs(context.Context, *pbrequest.DeleteApiConfigs) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiConfigs not implemented")
}
func (UnimplementedDataServiceServer) TestDataServiceApi(context.Context, *pbrequest.TestDataServiceApi) (*pbresponse.TestDataServiceApi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDataServiceApi not implemented")
}
func (UnimplementedDataServiceServer) PublishDataServiceApi(context.Context, *pbrequest.PublishDataServiceApi) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDataServiceApi not implemented")
}
func (UnimplementedDataServiceServer) AbolishDataServiceApis(context.Context, *pbrequest.AbolishDataServiceApis) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbolishDataServiceApis not implemented")
}
func (UnimplementedDataServiceServer) DescribePublishedApiHttpDetails(context.Context, *pbrequest.DescribePublishedApiHttpDetails) (*pbresponse.DescribePublishedApiHttpDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePublishedApiHttpDetails not implemented")
}
func (UnimplementedDataServiceServer) ListDataServiceApiVersions(context.Context, *pbrequest.ListDataServiceApiVersions) (*pbresponse.ListDataServiceApiVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataServiceApiVersions not implemented")
}
func (UnimplementedDataServiceServer) DescribeDataServiceApiVersion(context.Context, *pbrequest.DescribeDataServiceApiVersion) (*pbresponse.DescribeDataServiceApiVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataServiceApiVersion not implemented")
}
func (UnimplementedDataServiceServer) RepublishDataServiceApi(context.Context, *pbrequest.RepublishDataServiceApi) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepublishDataServiceApi not implemented")
}
func (UnimplementedDataServiceServer) ListPublishedApiVersionsByClusterId(context.Context, *pbrequest.ListPublishedApiVersionsByClusterId) (*pbresponse.ListPublishedApiVersionsByClusterId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishedApiVersionsByClusterId not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_CreateDataServiceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateDataServiceCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateDataServiceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/CreateDataServiceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateDataServiceCluster(ctx, req.(*pbrequest.CreateDataServiceCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDataServiceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListDataServiceClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDataServiceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/ListDataServiceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDataServiceClusters(ctx, req.(*pbrequest.ListDataServiceClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDataServiceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateDataServiceCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDataServiceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/UpdateDataServiceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDataServiceCluster(ctx, req.(*pbrequest.UpdateDataServiceCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DescribeDataServiceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataServiceCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DescribeDataServiceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DescribeDataServiceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DescribeDataServiceCluster(ctx, req.(*pbrequest.DescribeDataServiceCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteDataServiceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteDataServiceClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteDataServiceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DeleteDataServiceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteDataServiceClusters(ctx, req.(*pbrequest.DeleteDataServiceClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_StartDataServiceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StartDataServiceClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).StartDataServiceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/StartDataServiceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).StartDataServiceClusters(ctx, req.(*pbrequest.StartDataServiceClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_StopDataServiceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopDataServiceClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).StopDataServiceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/StopDataServiceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).StopDataServiceClusters(ctx, req.(*pbrequest.StopDataServiceClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DescribeServiceDataSourceKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmodel.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DescribeServiceDataSourceKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DescribeServiceDataSourceKinds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DescribeServiceDataSourceKinds(ctx, req.(*pbmodel.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateApiGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/CreateApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateApiGroup(ctx, req.(*pbrequest.CreateApiGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListApiGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListApiGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListApiGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/ListApiGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListApiGroups(ctx, req.(*pbrequest.ListApiGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteApiGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteApiGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteApiGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DeleteApiGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteApiGroups(ctx, req.(*pbrequest.DeleteApiGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateApiGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/UpdateApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateApiGroup(ctx, req.(*pbrequest.UpdateApiGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DescribeApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeApiGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DescribeApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DescribeApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DescribeApiGroup(ctx, req.(*pbrequest.DescribeApiGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListApiConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListApiConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListApiConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/ListApiConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListApiConfigs(ctx, req.(*pbrequest.ListApiConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DescribeApiConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeApiConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DescribeApiConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DescribeApiConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DescribeApiConfig(ctx, req.(*pbrequest.DescribeApiConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateApiConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateApiConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateApiConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/CreateApiConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateApiConfig(ctx, req.(*pbrequest.CreateApiConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateApiConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateApiConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateApiConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/UpdateApiConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateApiConfig(ctx, req.(*pbrequest.UpdateApiConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateApiBaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateApiBaseConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateApiBaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/UpdateApiBaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateApiBaseConfig(ctx, req.(*pbrequest.UpdateApiBaseConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteApiConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteApiConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteApiConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DeleteApiConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteApiConfigs(ctx, req.(*pbrequest.DeleteApiConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_TestDataServiceApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.TestDataServiceApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).TestDataServiceApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/TestDataServiceApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).TestDataServiceApi(ctx, req.(*pbrequest.TestDataServiceApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_PublishDataServiceApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.PublishDataServiceApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).PublishDataServiceApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/PublishDataServiceApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).PublishDataServiceApi(ctx, req.(*pbrequest.PublishDataServiceApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AbolishDataServiceApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.AbolishDataServiceApis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AbolishDataServiceApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/AbolishDataServiceApis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AbolishDataServiceApis(ctx, req.(*pbrequest.AbolishDataServiceApis))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DescribePublishedApiHttpDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribePublishedApiHttpDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DescribePublishedApiHttpDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DescribePublishedApiHttpDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DescribePublishedApiHttpDetails(ctx, req.(*pbrequest.DescribePublishedApiHttpDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDataServiceApiVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListDataServiceApiVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDataServiceApiVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/ListDataServiceApiVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDataServiceApiVersions(ctx, req.(*pbrequest.ListDataServiceApiVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DescribeDataServiceApiVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataServiceApiVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DescribeDataServiceApiVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/DescribeDataServiceApiVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DescribeDataServiceApiVersion(ctx, req.(*pbrequest.DescribeDataServiceApiVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RepublishDataServiceApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.RepublishDataServiceApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RepublishDataServiceApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/RepublishDataServiceApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RepublishDataServiceApi(ctx, req.(*pbrequest.RepublishDataServiceApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListPublishedApiVersionsByClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListPublishedApiVersionsByClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListPublishedApiVersionsByClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.DataService/ListPublishedApiVersionsByClusterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListPublishedApiVersionsByClusterId(ctx, req.(*pbrequest.ListPublishedApiVersionsByClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataservice.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataServiceCluster",
			Handler:    _DataService_CreateDataServiceCluster_Handler,
		},
		{
			MethodName: "ListDataServiceClusters",
			Handler:    _DataService_ListDataServiceClusters_Handler,
		},
		{
			MethodName: "UpdateDataServiceCluster",
			Handler:    _DataService_UpdateDataServiceCluster_Handler,
		},
		{
			MethodName: "DescribeDataServiceCluster",
			Handler:    _DataService_DescribeDataServiceCluster_Handler,
		},
		{
			MethodName: "DeleteDataServiceClusters",
			Handler:    _DataService_DeleteDataServiceClusters_Handler,
		},
		{
			MethodName: "StartDataServiceClusters",
			Handler:    _DataService_StartDataServiceClusters_Handler,
		},
		{
			MethodName: "StopDataServiceClusters",
			Handler:    _DataService_StopDataServiceClusters_Handler,
		},
		{
			MethodName: "DescribeServiceDataSourceKinds",
			Handler:    _DataService_DescribeServiceDataSourceKinds_Handler,
		},
		{
			MethodName: "CreateApiGroup",
			Handler:    _DataService_CreateApiGroup_Handler,
		},
		{
			MethodName: "ListApiGroups",
			Handler:    _DataService_ListApiGroups_Handler,
		},
		{
			MethodName: "DeleteApiGroups",
			Handler:    _DataService_DeleteApiGroups_Handler,
		},
		{
			MethodName: "UpdateApiGroup",
			Handler:    _DataService_UpdateApiGroup_Handler,
		},
		{
			MethodName: "DescribeApiGroup",
			Handler:    _DataService_DescribeApiGroup_Handler,
		},
		{
			MethodName: "ListApiConfigs",
			Handler:    _DataService_ListApiConfigs_Handler,
		},
		{
			MethodName: "DescribeApiConfig",
			Handler:    _DataService_DescribeApiConfig_Handler,
		},
		{
			MethodName: "CreateApiConfig",
			Handler:    _DataService_CreateApiConfig_Handler,
		},
		{
			MethodName: "UpdateApiConfig",
			Handler:    _DataService_UpdateApiConfig_Handler,
		},
		{
			MethodName: "UpdateApiBaseConfig",
			Handler:    _DataService_UpdateApiBaseConfig_Handler,
		},
		{
			MethodName: "DeleteApiConfigs",
			Handler:    _DataService_DeleteApiConfigs_Handler,
		},
		{
			MethodName: "TestDataServiceApi",
			Handler:    _DataService_TestDataServiceApi_Handler,
		},
		{
			MethodName: "PublishDataServiceApi",
			Handler:    _DataService_PublishDataServiceApi_Handler,
		},
		{
			MethodName: "AbolishDataServiceApis",
			Handler:    _DataService_AbolishDataServiceApis_Handler,
		},
		{
			MethodName: "DescribePublishedApiHttpDetails",
			Handler:    _DataService_DescribePublishedApiHttpDetails_Handler,
		},
		{
			MethodName: "ListDataServiceApiVersions",
			Handler:    _DataService_ListDataServiceApiVersions_Handler,
		},
		{
			MethodName: "DescribeDataServiceApiVersion",
			Handler:    _DataService_DescribeDataServiceApiVersion_Handler,
		},
		{
			MethodName: "RepublishDataServiceApi",
			Handler:    _DataService_RepublishDataServiceApi_Handler,
		},
		{
			MethodName: "ListPublishedApiVersionsByClusterId",
			Handler:    _DataService_ListPublishedApiVersionsByClusterId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/dataservice/dataservice.proto",
}
