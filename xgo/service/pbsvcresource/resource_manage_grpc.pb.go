// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/resourcemanager/resource_manage.proto

package pbsvcresource

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceManageClient is the client API for ResourceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManageClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (ResourceManage_UploadFileClient, error)
	ReUploadFile(ctx context.Context, opts ...grpc.CallOption) (ResourceManage_ReUploadFileClient, error)
	DownloadFile(ctx context.Context, in *pbrequest.DownloadFile, opts ...grpc.CallOption) (ResourceManage_DownloadFileClient, error)
	DescribeFile(ctx context.Context, in *pbrequest.DescribeFile, opts ...grpc.CallOption) (*pbmodel.Resource, error)
	ListResources(ctx context.Context, in *pbrequest.ListResources, opts ...grpc.CallOption) (*pbresponse.ListResources, error)
	UpdateResource(ctx context.Context, in *pbrequest.UpdateResource, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteResources(ctx context.Context, in *pbrequest.DeleteResources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteSpaces(ctx context.Context, in *pbrequest.DeleteWorkspaces, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	RenameFlinkStatePath(ctx context.Context, in *pbrequest.RenameFlinkStatePath, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteFlinkState(ctx context.Context, in *pbrequest.DeleteFlinkState, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type resourceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManageClient(cc grpc.ClientConnInterface) ResourceManageClient {
	return &resourceManageClient{cc}
}

func (c *resourceManageClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ResourceManage_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceManage_ServiceDesc.Streams[0], "/resourcemanager.ResourceManage/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManageUploadFileClient{stream}
	return x, nil
}

type ResourceManage_UploadFileClient interface {
	Send(*pbrequest.UploadFileRequest) error
	CloseAndRecv() (*pbresponse.UploadFile, error)
	grpc.ClientStream
}

type resourceManageUploadFileClient struct {
	grpc.ClientStream
}

func (x *resourceManageUploadFileClient) Send(m *pbrequest.UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceManageUploadFileClient) CloseAndRecv() (*pbresponse.UploadFile, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(pbresponse.UploadFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManageClient) ReUploadFile(ctx context.Context, opts ...grpc.CallOption) (ResourceManage_ReUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceManage_ServiceDesc.Streams[1], "/resourcemanager.ResourceManage/ReUploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManageReUploadFileClient{stream}
	return x, nil
}

type ResourceManage_ReUploadFileClient interface {
	Send(*pbrequest.ReUploadFileRequest) error
	CloseAndRecv() (*pbmodel.EmptyStruct, error)
	grpc.ClientStream
}

type resourceManageReUploadFileClient struct {
	grpc.ClientStream
}

func (x *resourceManageReUploadFileClient) Send(m *pbrequest.ReUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceManageReUploadFileClient) CloseAndRecv() (*pbmodel.EmptyStruct, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(pbmodel.EmptyStruct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManageClient) DownloadFile(ctx context.Context, in *pbrequest.DownloadFile, opts ...grpc.CallOption) (ResourceManage_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceManage_ServiceDesc.Streams[2], "/resourcemanager.ResourceManage/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManageDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceManage_DownloadFileClient interface {
	Recv() (*pbresponse.DownloadFile, error)
	grpc.ClientStream
}

type resourceManageDownloadFileClient struct {
	grpc.ClientStream
}

func (x *resourceManageDownloadFileClient) Recv() (*pbresponse.DownloadFile, error) {
	m := new(pbresponse.DownloadFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManageClient) DescribeFile(ctx context.Context, in *pbrequest.DescribeFile, opts ...grpc.CallOption) (*pbmodel.Resource, error) {
	out := new(pbmodel.Resource)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/DescribeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManageClient) ListResources(ctx context.Context, in *pbrequest.ListResources, opts ...grpc.CallOption) (*pbresponse.ListResources, error) {
	out := new(pbresponse.ListResources)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManageClient) UpdateResource(ctx context.Context, in *pbrequest.UpdateResource, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManageClient) DeleteResources(ctx context.Context, in *pbrequest.DeleteResources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/DeleteResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManageClient) DeleteSpaces(ctx context.Context, in *pbrequest.DeleteWorkspaces, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/DeleteSpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManageClient) RenameFlinkStatePath(ctx context.Context, in *pbrequest.RenameFlinkStatePath, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/RenameFlinkStatePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManageClient) DeleteFlinkState(ctx context.Context, in *pbrequest.DeleteFlinkState, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManage/DeleteFlinkState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManageServer is the server API for ResourceManage service.
// All implementations must embed UnimplementedResourceManageServer
// for forward compatibility
type ResourceManageServer interface {
	UploadFile(ResourceManage_UploadFileServer) error
	ReUploadFile(ResourceManage_ReUploadFileServer) error
	DownloadFile(*pbrequest.DownloadFile, ResourceManage_DownloadFileServer) error
	DescribeFile(context.Context, *pbrequest.DescribeFile) (*pbmodel.Resource, error)
	ListResources(context.Context, *pbrequest.ListResources) (*pbresponse.ListResources, error)
	UpdateResource(context.Context, *pbrequest.UpdateResource) (*pbmodel.EmptyStruct, error)
	DeleteResources(context.Context, *pbrequest.DeleteResources) (*pbmodel.EmptyStruct, error)
	DeleteSpaces(context.Context, *pbrequest.DeleteWorkspaces) (*pbmodel.EmptyStruct, error)
	RenameFlinkStatePath(context.Context, *pbrequest.RenameFlinkStatePath) (*pbmodel.EmptyStruct, error)
	DeleteFlinkState(context.Context, *pbrequest.DeleteFlinkState) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedResourceManageServer()
}

// UnimplementedResourceManageServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManageServer struct {
}

func (UnimplementedResourceManageServer) UploadFile(ResourceManage_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedResourceManageServer) ReUploadFile(ResourceManage_ReUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReUploadFile not implemented")
}
func (UnimplementedResourceManageServer) DownloadFile(*pbrequest.DownloadFile, ResourceManage_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedResourceManageServer) DescribeFile(context.Context, *pbrequest.DescribeFile) (*pbmodel.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFile not implemented")
}
func (UnimplementedResourceManageServer) ListResources(context.Context, *pbrequest.ListResources) (*pbresponse.ListResources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedResourceManageServer) UpdateResource(context.Context, *pbrequest.UpdateResource) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedResourceManageServer) DeleteResources(context.Context, *pbrequest.DeleteResources) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResources not implemented")
}
func (UnimplementedResourceManageServer) DeleteSpaces(context.Context, *pbrequest.DeleteWorkspaces) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpaces not implemented")
}
func (UnimplementedResourceManageServer) RenameFlinkStatePath(context.Context, *pbrequest.RenameFlinkStatePath) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFlinkStatePath not implemented")
}
func (UnimplementedResourceManageServer) DeleteFlinkState(context.Context, *pbrequest.DeleteFlinkState) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlinkState not implemented")
}
func (UnimplementedResourceManageServer) mustEmbedUnimplementedResourceManageServer() {}

// UnsafeResourceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManageServer will
// result in compilation errors.
type UnsafeResourceManageServer interface {
	mustEmbedUnimplementedResourceManageServer()
}

func RegisterResourceManageServer(s grpc.ServiceRegistrar, srv ResourceManageServer) {
	s.RegisterService(&ResourceManage_ServiceDesc, srv)
}

func _ResourceManage_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceManageServer).UploadFile(&resourceManageUploadFileServer{stream})
}

type ResourceManage_UploadFileServer interface {
	SendAndClose(*pbresponse.UploadFile) error
	Recv() (*pbrequest.UploadFileRequest, error)
	grpc.ServerStream
}

type resourceManageUploadFileServer struct {
	grpc.ServerStream
}

func (x *resourceManageUploadFileServer) SendAndClose(m *pbresponse.UploadFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceManageUploadFileServer) Recv() (*pbrequest.UploadFileRequest, error) {
	m := new(pbrequest.UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceManage_ReUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceManageServer).ReUploadFile(&resourceManageReUploadFileServer{stream})
}

type ResourceManage_ReUploadFileServer interface {
	SendAndClose(*pbmodel.EmptyStruct) error
	Recv() (*pbrequest.ReUploadFileRequest, error)
	grpc.ServerStream
}

type resourceManageReUploadFileServer struct {
	grpc.ServerStream
}

func (x *resourceManageReUploadFileServer) SendAndClose(m *pbmodel.EmptyStruct) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceManageReUploadFileServer) Recv() (*pbrequest.ReUploadFileRequest, error) {
	m := new(pbrequest.ReUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceManage_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pbrequest.DownloadFile)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceManageServer).DownloadFile(m, &resourceManageDownloadFileServer{stream})
}

type ResourceManage_DownloadFileServer interface {
	Send(*pbresponse.DownloadFile) error
	grpc.ServerStream
}

type resourceManageDownloadFileServer struct {
	grpc.ServerStream
}

func (x *resourceManageDownloadFileServer) Send(m *pbresponse.DownloadFile) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceManage_DescribeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).DescribeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/DescribeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).DescribeFile(ctx, req.(*pbrequest.DescribeFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManage_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).ListResources(ctx, req.(*pbrequest.ListResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManage_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).UpdateResource(ctx, req.(*pbrequest.UpdateResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManage_DeleteResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).DeleteResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/DeleteResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).DeleteResources(ctx, req.(*pbrequest.DeleteResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManage_DeleteSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).DeleteSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/DeleteSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).DeleteSpaces(ctx, req.(*pbrequest.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManage_RenameFlinkStatePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.RenameFlinkStatePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).RenameFlinkStatePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/RenameFlinkStatePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).RenameFlinkStatePath(ctx, req.(*pbrequest.RenameFlinkStatePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManage_DeleteFlinkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFlinkState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManageServer).DeleteFlinkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManage/DeleteFlinkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManageServer).DeleteFlinkState(ctx, req.(*pbrequest.DeleteFlinkState))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManage_ServiceDesc is the grpc.ServiceDesc for ResourceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcemanager.ResourceManage",
	HandlerType: (*ResourceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeFile",
			Handler:    _ResourceManage_DescribeFile_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _ResourceManage_ListResources_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceManage_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResources",
			Handler:    _ResourceManage_DeleteResources_Handler,
		},
		{
			MethodName: "DeleteSpaces",
			Handler:    _ResourceManage_DeleteSpaces_Handler,
		},
		{
			MethodName: "RenameFlinkStatePath",
			Handler:    _ResourceManage_RenameFlinkStatePath_Handler,
		},
		{
			MethodName: "DeleteFlinkState",
			Handler:    _ResourceManage_DeleteFlinkState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ResourceManage_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReUploadFile",
			Handler:       _ResourceManage_ReUploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _ResourceManage_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service/resourcemanager/resource_manage.proto",
}
