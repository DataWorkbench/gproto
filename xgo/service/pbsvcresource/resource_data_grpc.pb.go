// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/resourcemanager/resource_data.proto

package pbsvcresource

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceDataClient is the client API for ResourceData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceDataClient interface {
	// WriteFileData used for create a new file.
	WriteFileData(ctx context.Context, opts ...grpc.CallOption) (ResourceData_WriteFileDataClient, error)
	// ReadFileData used to read data for giving file.
	ReadFileData(ctx context.Context, in *pbrequest.ReadFileData, opts ...grpc.CallOption) (ResourceData_ReadFileDataClient, error)
	// DeleteFileData used to delete a giving file.
	DeleteFileData(ctx context.Context, in *pbrequest.DeleteFileData, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteFileDataByFileIds(ctx context.Context, in *pbrequest.DeleteFileDataByFileIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteFileDataBySpaceIds(ctx context.Context, in *pbrequest.DeleteFileDataBySpaceIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type resourceDataClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceDataClient(cc grpc.ClientConnInterface) ResourceDataClient {
	return &resourceDataClient{cc}
}

func (c *resourceDataClient) WriteFileData(ctx context.Context, opts ...grpc.CallOption) (ResourceData_WriteFileDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceData_ServiceDesc.Streams[0], "/resourcemanager.ResourceData/WriteFileData", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceDataWriteFileDataClient{stream}
	return x, nil
}

type ResourceData_WriteFileDataClient interface {
	Send(*pbrequest.WriteFileData) error
	CloseAndRecv() (*pbresponse.WriteFileData, error)
	grpc.ClientStream
}

type resourceDataWriteFileDataClient struct {
	grpc.ClientStream
}

func (x *resourceDataWriteFileDataClient) Send(m *pbrequest.WriteFileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceDataWriteFileDataClient) CloseAndRecv() (*pbresponse.WriteFileData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(pbresponse.WriteFileData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceDataClient) ReadFileData(ctx context.Context, in *pbrequest.ReadFileData, opts ...grpc.CallOption) (ResourceData_ReadFileDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceData_ServiceDesc.Streams[1], "/resourcemanager.ResourceData/ReadFileData", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceDataReadFileDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceData_ReadFileDataClient interface {
	Recv() (*pbresponse.ReadFileData, error)
	grpc.ClientStream
}

type resourceDataReadFileDataClient struct {
	grpc.ClientStream
}

func (x *resourceDataReadFileDataClient) Recv() (*pbresponse.ReadFileData, error) {
	m := new(pbresponse.ReadFileData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceDataClient) DeleteFileData(ctx context.Context, in *pbrequest.DeleteFileData, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceData/DeleteFileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDataClient) DeleteFileDataByFileIds(ctx context.Context, in *pbrequest.DeleteFileDataByFileIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceData/DeleteFileDataByFileIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDataClient) DeleteFileDataBySpaceIds(ctx context.Context, in *pbrequest.DeleteFileDataBySpaceIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceData/DeleteFileDataBySpaceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceDataServer is the server API for ResourceData service.
// All implementations must embed UnimplementedResourceDataServer
// for forward compatibility
type ResourceDataServer interface {
	// WriteFileData used for create a new file.
	WriteFileData(ResourceData_WriteFileDataServer) error
	// ReadFileData used to read data for giving file.
	ReadFileData(*pbrequest.ReadFileData, ResourceData_ReadFileDataServer) error
	// DeleteFileData used to delete a giving file.
	DeleteFileData(context.Context, *pbrequest.DeleteFileData) (*pbmodel.EmptyStruct, error)
	DeleteFileDataByFileIds(context.Context, *pbrequest.DeleteFileDataByFileIds) (*pbmodel.EmptyStruct, error)
	DeleteFileDataBySpaceIds(context.Context, *pbrequest.DeleteFileDataBySpaceIds) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedResourceDataServer()
}

// UnimplementedResourceDataServer must be embedded to have forward compatible implementations.
type UnimplementedResourceDataServer struct {
}

func (UnimplementedResourceDataServer) WriteFileData(ResourceData_WriteFileDataServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFileData not implemented")
}
func (UnimplementedResourceDataServer) ReadFileData(*pbrequest.ReadFileData, ResourceData_ReadFileDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFileData not implemented")
}
func (UnimplementedResourceDataServer) DeleteFileData(context.Context, *pbrequest.DeleteFileData) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileData not implemented")
}
func (UnimplementedResourceDataServer) DeleteFileDataByFileIds(context.Context, *pbrequest.DeleteFileDataByFileIds) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileDataByFileIds not implemented")
}
func (UnimplementedResourceDataServer) DeleteFileDataBySpaceIds(context.Context, *pbrequest.DeleteFileDataBySpaceIds) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileDataBySpaceIds not implemented")
}
func (UnimplementedResourceDataServer) mustEmbedUnimplementedResourceDataServer() {}

// UnsafeResourceDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceDataServer will
// result in compilation errors.
type UnsafeResourceDataServer interface {
	mustEmbedUnimplementedResourceDataServer()
}

func RegisterResourceDataServer(s grpc.ServiceRegistrar, srv ResourceDataServer) {
	s.RegisterService(&ResourceData_ServiceDesc, srv)
}

func _ResourceData_WriteFileData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceDataServer).WriteFileData(&resourceDataWriteFileDataServer{stream})
}

type ResourceData_WriteFileDataServer interface {
	SendAndClose(*pbresponse.WriteFileData) error
	Recv() (*pbrequest.WriteFileData, error)
	grpc.ServerStream
}

type resourceDataWriteFileDataServer struct {
	grpc.ServerStream
}

func (x *resourceDataWriteFileDataServer) SendAndClose(m *pbresponse.WriteFileData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceDataWriteFileDataServer) Recv() (*pbrequest.WriteFileData, error) {
	m := new(pbrequest.WriteFileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceData_ReadFileData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pbrequest.ReadFileData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceDataServer).ReadFileData(m, &resourceDataReadFileDataServer{stream})
}

type ResourceData_ReadFileDataServer interface {
	Send(*pbresponse.ReadFileData) error
	grpc.ServerStream
}

type resourceDataReadFileDataServer struct {
	grpc.ServerStream
}

func (x *resourceDataReadFileDataServer) Send(m *pbresponse.ReadFileData) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceData_DeleteFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFileData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDataServer).DeleteFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceData/DeleteFileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDataServer).DeleteFileData(ctx, req.(*pbrequest.DeleteFileData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceData_DeleteFileDataByFileIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFileDataByFileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDataServer).DeleteFileDataByFileIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceData/DeleteFileDataByFileIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDataServer).DeleteFileDataByFileIds(ctx, req.(*pbrequest.DeleteFileDataByFileIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceData_DeleteFileDataBySpaceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFileDataBySpaceIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDataServer).DeleteFileDataBySpaceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceData/DeleteFileDataBySpaceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDataServer).DeleteFileDataBySpaceIds(ctx, req.(*pbrequest.DeleteFileDataBySpaceIds))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceData_ServiceDesc is the grpc.ServiceDesc for ResourceData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcemanager.ResourceData",
	HandlerType: (*ResourceDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFileData",
			Handler:    _ResourceData_DeleteFileData_Handler,
		},
		{
			MethodName: "DeleteFileDataByFileIds",
			Handler:    _ResourceData_DeleteFileDataByFileIds_Handler,
		},
		{
			MethodName: "DeleteFileDataBySpaceIds",
			Handler:    _ResourceData_DeleteFileDataBySpaceIds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteFileData",
			Handler:       _ResourceData_WriteFileData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFileData",
			Handler:       _ResourceData_ReadFileData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service/resourcemanager/resource_data.proto",
}
