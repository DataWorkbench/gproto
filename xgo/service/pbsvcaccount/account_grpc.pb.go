// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/account/account.proto

package pbsvcaccount

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	ValidateRequestSignature(ctx context.Context, in *pbrequest.ValidateRequestSignature, opts ...grpc.CallOption) (*pbresponse.ValidateRequestSignature, error)
	DescribeUsers(ctx context.Context, in *pbrequest.DescribeUsers, opts ...grpc.CallOption) (*pbresponse.DescribeUsers, error)
	DescribeAccessKey(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error)
	CreateUser(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error)
	UpdateUser(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error)
	DeleteUser(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error)
	CheckSession(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error)
	Login(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) ValidateRequestSignature(ctx context.Context, in *pbrequest.ValidateRequestSignature, opts ...grpc.CallOption) (*pbresponse.ValidateRequestSignature, error) {
	out := new(pbresponse.ValidateRequestSignature)
	err := c.cc.Invoke(ctx, "/account.Account/ValidateRequestSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DescribeUsers(ctx context.Context, in *pbrequest.DescribeUsers, opts ...grpc.CallOption) (*pbresponse.DescribeUsers, error) {
	out := new(pbresponse.DescribeUsers)
	err := c.cc.Invoke(ctx, "/account.Account/DescribeUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DescribeAccessKey(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error) {
	out := new(pbresponse.DescribeAccessKey)
	err := c.cc.Invoke(ctx, "/account.Account/DescribeAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateUser(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error) {
	out := new(pbresponse.DescribeAccessKey)
	err := c.cc.Invoke(ctx, "/account.Account/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateUser(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error) {
	out := new(pbresponse.DescribeAccessKey)
	err := c.cc.Invoke(ctx, "/account.Account/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteUser(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error) {
	out := new(pbresponse.DescribeAccessKey)
	err := c.cc.Invoke(ctx, "/account.Account/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CheckSession(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error) {
	out := new(pbresponse.DescribeAccessKey)
	err := c.cc.Invoke(ctx, "/account.Account/CheckSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *pbrequest.DescribeAccessKey, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKey, error) {
	out := new(pbresponse.DescribeAccessKey)
	err := c.cc.Invoke(ctx, "/account.Account/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	ValidateRequestSignature(context.Context, *pbrequest.ValidateRequestSignature) (*pbresponse.ValidateRequestSignature, error)
	DescribeUsers(context.Context, *pbrequest.DescribeUsers) (*pbresponse.DescribeUsers, error)
	DescribeAccessKey(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error)
	CreateUser(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error)
	UpdateUser(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error)
	DeleteUser(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error)
	CheckSession(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error)
	Login(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) ValidateRequestSignature(context.Context, *pbrequest.ValidateRequestSignature) (*pbresponse.ValidateRequestSignature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRequestSignature not implemented")
}
func (UnimplementedAccountServer) DescribeUsers(context.Context, *pbrequest.DescribeUsers) (*pbresponse.DescribeUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUsers not implemented")
}
func (UnimplementedAccountServer) DescribeAccessKey(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAccessKey not implemented")
}
func (UnimplementedAccountServer) CreateUser(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAccountServer) UpdateUser(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAccountServer) DeleteUser(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAccountServer) CheckSession(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSession not implemented")
}
func (UnimplementedAccountServer) Login(context.Context, *pbrequest.DescribeAccessKey) (*pbresponse.DescribeAccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_ValidateRequestSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ValidateRequestSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ValidateRequestSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ValidateRequestSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ValidateRequestSignature(ctx, req.(*pbrequest.ValidateRequestSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DescribeUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DescribeUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/DescribeUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DescribeUsers(ctx, req.(*pbrequest.DescribeUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DescribeAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DescribeAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/DescribeAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DescribeAccessKey(ctx, req.(*pbrequest.DescribeAccessKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateUser(ctx, req.(*pbrequest.DescribeAccessKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateUser(ctx, req.(*pbrequest.DescribeAccessKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteUser(ctx, req.(*pbrequest.DescribeAccessKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CheckSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CheckSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CheckSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CheckSession(ctx, req.(*pbrequest.DescribeAccessKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*pbrequest.DescribeAccessKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateRequestSignature",
			Handler:    _Account_ValidateRequestSignature_Handler,
		},
		{
			MethodName: "DescribeUsers",
			Handler:    _Account_DescribeUsers_Handler,
		},
		{
			MethodName: "DescribeAccessKey",
			Handler:    _Account_DescribeAccessKey_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Account_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Account_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Account_DeleteUser_Handler,
		},
		{
			MethodName: "CheckSession",
			Handler:    _Account_CheckSession_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/account/account.proto",
}
