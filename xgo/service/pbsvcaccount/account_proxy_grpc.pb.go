// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/account/account_proxy.proto

package pbsvcaccount

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountProxyClient is the client API for AccountProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountProxyClient interface {
	ListUsersByProxy(ctx context.Context, in *pbrequest.ListUsersByProxy, opts ...grpc.CallOption) (*pbresponse.ListUsersByProxy, error)
	DescribeAccessKeyByProxy(ctx context.Context, in *pbrequest.DescribeAccessKeyByProxy, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKeyByProxy, error)
	ListNotificationsByProxy(ctx context.Context, in *pbrequest.ListNotificationsByProxy, opts ...grpc.CallOption) (*pbresponse.ListNotificationsByProxy, error)
}

type accountProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountProxyClient(cc grpc.ClientConnInterface) AccountProxyClient {
	return &accountProxyClient{cc}
}

func (c *accountProxyClient) ListUsersByProxy(ctx context.Context, in *pbrequest.ListUsersByProxy, opts ...grpc.CallOption) (*pbresponse.ListUsersByProxy, error) {
	out := new(pbresponse.ListUsersByProxy)
	err := c.cc.Invoke(ctx, "/account.AccountProxy/ListUsersByProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountProxyClient) DescribeAccessKeyByProxy(ctx context.Context, in *pbrequest.DescribeAccessKeyByProxy, opts ...grpc.CallOption) (*pbresponse.DescribeAccessKeyByProxy, error) {
	out := new(pbresponse.DescribeAccessKeyByProxy)
	err := c.cc.Invoke(ctx, "/account.AccountProxy/DescribeAccessKeyByProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountProxyClient) ListNotificationsByProxy(ctx context.Context, in *pbrequest.ListNotificationsByProxy, opts ...grpc.CallOption) (*pbresponse.ListNotificationsByProxy, error) {
	out := new(pbresponse.ListNotificationsByProxy)
	err := c.cc.Invoke(ctx, "/account.AccountProxy/ListNotificationsByProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountProxyServer is the server API for AccountProxy service.
// All implementations must embed UnimplementedAccountProxyServer
// for forward compatibility
type AccountProxyServer interface {
	ListUsersByProxy(context.Context, *pbrequest.ListUsersByProxy) (*pbresponse.ListUsersByProxy, error)
	DescribeAccessKeyByProxy(context.Context, *pbrequest.DescribeAccessKeyByProxy) (*pbresponse.DescribeAccessKeyByProxy, error)
	ListNotificationsByProxy(context.Context, *pbrequest.ListNotificationsByProxy) (*pbresponse.ListNotificationsByProxy, error)
	mustEmbedUnimplementedAccountProxyServer()
}

// UnimplementedAccountProxyServer must be embedded to have forward compatible implementations.
type UnimplementedAccountProxyServer struct {
}

func (UnimplementedAccountProxyServer) ListUsersByProxy(context.Context, *pbrequest.ListUsersByProxy) (*pbresponse.ListUsersByProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersByProxy not implemented")
}
func (UnimplementedAccountProxyServer) DescribeAccessKeyByProxy(context.Context, *pbrequest.DescribeAccessKeyByProxy) (*pbresponse.DescribeAccessKeyByProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAccessKeyByProxy not implemented")
}
func (UnimplementedAccountProxyServer) ListNotificationsByProxy(context.Context, *pbrequest.ListNotificationsByProxy) (*pbresponse.ListNotificationsByProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationsByProxy not implemented")
}
func (UnimplementedAccountProxyServer) mustEmbedUnimplementedAccountProxyServer() {}

// UnsafeAccountProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountProxyServer will
// result in compilation errors.
type UnsafeAccountProxyServer interface {
	mustEmbedUnimplementedAccountProxyServer()
}

func RegisterAccountProxyServer(s grpc.ServiceRegistrar, srv AccountProxyServer) {
	s.RegisterService(&AccountProxy_ServiceDesc, srv)
}

func _AccountProxy_ListUsersByProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListUsersByProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProxyServer).ListUsersByProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountProxy/ListUsersByProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProxyServer).ListUsersByProxy(ctx, req.(*pbrequest.ListUsersByProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountProxy_DescribeAccessKeyByProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeAccessKeyByProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProxyServer).DescribeAccessKeyByProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountProxy/DescribeAccessKeyByProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProxyServer).DescribeAccessKeyByProxy(ctx, req.(*pbrequest.DescribeAccessKeyByProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountProxy_ListNotificationsByProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListNotificationsByProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProxyServer).ListNotificationsByProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountProxy/ListNotificationsByProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProxyServer).ListNotificationsByProxy(ctx, req.(*pbrequest.ListNotificationsByProxy))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountProxy_ServiceDesc is the grpc.ServiceDesc for AccountProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountProxy",
	HandlerType: (*AccountProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsersByProxy",
			Handler:    _AccountProxy_ListUsersByProxy_Handler,
		},
		{
			MethodName: "DescribeAccessKeyByProxy",
			Handler:    _AccountProxy_DescribeAccessKeyByProxy_Handler,
		},
		{
			MethodName: "ListNotificationsByProxy",
			Handler:    _AccountProxy_ListNotificationsByProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/account/account_proxy.proto",
}
