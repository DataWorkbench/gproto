// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/flink_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlinkManageClient is the client API for FlinkManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlinkManageClient interface {
	// Interface for manage flink cluster
	ListAvailableFlinkVersions(ctx context.Context, in *pbrequest.ListAvailableFlinkVersions, opts ...grpc.CallOption) (*pbresponse.ListAvailableFlinkVersions, error)
	// Describe flink cluster api that job-manager commit job to
	// FIXME: removed it.
	DescribeFlinkClusterAPI(ctx context.Context, in *pbrequest.DescribeFlinkClusterAPI, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkClusterAPI, error)
	ListFlinkClusters(ctx context.Context, in *pbrequest.ListFlinkClusters, opts ...grpc.CallOption) (*pbresponse.ListFlinkClusters, error)
	CreateFlinkCluster(ctx context.Context, in *pbrequest.CreateFlinkCluster, opts ...grpc.CallOption) (*pbresponse.CreateFlinkCluster, error)
	DescribeFlinkCluster(ctx context.Context, in *pbrequest.DescribeFlinkCluster, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkCluster, error)
	UpdateFlinkCluster(ctx context.Context, in *pbrequest.UpdateFlinkCluster, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteFlinkClusters(ctx context.Context, in *pbrequest.DeleteFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	StartFlinkClusters(ctx context.Context, in *pbrequest.StartFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	StopFlinkClusters(ctx context.Context, in *pbrequest.StopFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// UpdateFlinkClusterStatusByScheduler is an internal interface used by scheduler.
	UpdateFlinkClusterStatusByScheduler(ctx context.Context, in *pbrequest.UpdateFlinkClusterStatusByScheduler, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// StopFlinkClusterByScheduler is an internal interface used by scheduler.
	StopFlinkClusterByScheduler(ctx context.Context, in *pbrequest.StopFlinkClusterByScheduler, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type flinkManageClient struct {
	cc grpc.ClientConnInterface
}

func NewFlinkManageClient(cc grpc.ClientConnInterface) FlinkManageClient {
	return &flinkManageClient{cc}
}

func (c *flinkManageClient) ListAvailableFlinkVersions(ctx context.Context, in *pbrequest.ListAvailableFlinkVersions, opts ...grpc.CallOption) (*pbresponse.ListAvailableFlinkVersions, error) {
	out := new(pbresponse.ListAvailableFlinkVersions)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/ListAvailableFlinkVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) DescribeFlinkClusterAPI(ctx context.Context, in *pbrequest.DescribeFlinkClusterAPI, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkClusterAPI, error) {
	out := new(pbresponse.DescribeFlinkClusterAPI)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/DescribeFlinkClusterAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) ListFlinkClusters(ctx context.Context, in *pbrequest.ListFlinkClusters, opts ...grpc.CallOption) (*pbresponse.ListFlinkClusters, error) {
	out := new(pbresponse.ListFlinkClusters)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/ListFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) CreateFlinkCluster(ctx context.Context, in *pbrequest.CreateFlinkCluster, opts ...grpc.CallOption) (*pbresponse.CreateFlinkCluster, error) {
	out := new(pbresponse.CreateFlinkCluster)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/CreateFlinkCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) DescribeFlinkCluster(ctx context.Context, in *pbrequest.DescribeFlinkCluster, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkCluster, error) {
	out := new(pbresponse.DescribeFlinkCluster)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/DescribeFlinkCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) UpdateFlinkCluster(ctx context.Context, in *pbrequest.UpdateFlinkCluster, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/UpdateFlinkCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) DeleteFlinkClusters(ctx context.Context, in *pbrequest.DeleteFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/DeleteFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) StartFlinkClusters(ctx context.Context, in *pbrequest.StartFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/StartFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) StopFlinkClusters(ctx context.Context, in *pbrequest.StopFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/StopFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) UpdateFlinkClusterStatusByScheduler(ctx context.Context, in *pbrequest.UpdateFlinkClusterStatusByScheduler, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/UpdateFlinkClusterStatusByScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkManageClient) StopFlinkClusterByScheduler(ctx context.Context, in *pbrequest.StopFlinkClusterByScheduler, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FlinkManage/StopFlinkClusterByScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlinkManageServer is the server API for FlinkManage service.
// All implementations must embed UnimplementedFlinkManageServer
// for forward compatibility
type FlinkManageServer interface {
	// Interface for manage flink cluster
	ListAvailableFlinkVersions(context.Context, *pbrequest.ListAvailableFlinkVersions) (*pbresponse.ListAvailableFlinkVersions, error)
	// Describe flink cluster api that job-manager commit job to
	// FIXME: removed it.
	DescribeFlinkClusterAPI(context.Context, *pbrequest.DescribeFlinkClusterAPI) (*pbresponse.DescribeFlinkClusterAPI, error)
	ListFlinkClusters(context.Context, *pbrequest.ListFlinkClusters) (*pbresponse.ListFlinkClusters, error)
	CreateFlinkCluster(context.Context, *pbrequest.CreateFlinkCluster) (*pbresponse.CreateFlinkCluster, error)
	DescribeFlinkCluster(context.Context, *pbrequest.DescribeFlinkCluster) (*pbresponse.DescribeFlinkCluster, error)
	UpdateFlinkCluster(context.Context, *pbrequest.UpdateFlinkCluster) (*pbmodel.EmptyStruct, error)
	DeleteFlinkClusters(context.Context, *pbrequest.DeleteFlinkClusters) (*pbmodel.EmptyStruct, error)
	StartFlinkClusters(context.Context, *pbrequest.StartFlinkClusters) (*pbmodel.EmptyStruct, error)
	StopFlinkClusters(context.Context, *pbrequest.StopFlinkClusters) (*pbmodel.EmptyStruct, error)
	// UpdateFlinkClusterStatusByScheduler is an internal interface used by scheduler.
	UpdateFlinkClusterStatusByScheduler(context.Context, *pbrequest.UpdateFlinkClusterStatusByScheduler) (*pbmodel.EmptyStruct, error)
	// StopFlinkClusterByScheduler is an internal interface used by scheduler.
	StopFlinkClusterByScheduler(context.Context, *pbrequest.StopFlinkClusterByScheduler) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedFlinkManageServer()
}

// UnimplementedFlinkManageServer must be embedded to have forward compatible implementations.
type UnimplementedFlinkManageServer struct {
}

func (UnimplementedFlinkManageServer) ListAvailableFlinkVersions(context.Context, *pbrequest.ListAvailableFlinkVersions) (*pbresponse.ListAvailableFlinkVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableFlinkVersions not implemented")
}
func (UnimplementedFlinkManageServer) DescribeFlinkClusterAPI(context.Context, *pbrequest.DescribeFlinkClusterAPI) (*pbresponse.DescribeFlinkClusterAPI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFlinkClusterAPI not implemented")
}
func (UnimplementedFlinkManageServer) ListFlinkClusters(context.Context, *pbrequest.ListFlinkClusters) (*pbresponse.ListFlinkClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlinkClusters not implemented")
}
func (UnimplementedFlinkManageServer) CreateFlinkCluster(context.Context, *pbrequest.CreateFlinkCluster) (*pbresponse.CreateFlinkCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlinkCluster not implemented")
}
func (UnimplementedFlinkManageServer) DescribeFlinkCluster(context.Context, *pbrequest.DescribeFlinkCluster) (*pbresponse.DescribeFlinkCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFlinkCluster not implemented")
}
func (UnimplementedFlinkManageServer) UpdateFlinkCluster(context.Context, *pbrequest.UpdateFlinkCluster) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlinkCluster not implemented")
}
func (UnimplementedFlinkManageServer) DeleteFlinkClusters(context.Context, *pbrequest.DeleteFlinkClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlinkClusters not implemented")
}
func (UnimplementedFlinkManageServer) StartFlinkClusters(context.Context, *pbrequest.StartFlinkClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFlinkClusters not implemented")
}
func (UnimplementedFlinkManageServer) StopFlinkClusters(context.Context, *pbrequest.StopFlinkClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFlinkClusters not implemented")
}
func (UnimplementedFlinkManageServer) UpdateFlinkClusterStatusByScheduler(context.Context, *pbrequest.UpdateFlinkClusterStatusByScheduler) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlinkClusterStatusByScheduler not implemented")
}
func (UnimplementedFlinkManageServer) StopFlinkClusterByScheduler(context.Context, *pbrequest.StopFlinkClusterByScheduler) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFlinkClusterByScheduler not implemented")
}
func (UnimplementedFlinkManageServer) mustEmbedUnimplementedFlinkManageServer() {}

// UnsafeFlinkManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlinkManageServer will
// result in compilation errors.
type UnsafeFlinkManageServer interface {
	mustEmbedUnimplementedFlinkManageServer()
}

func RegisterFlinkManageServer(s grpc.ServiceRegistrar, srv FlinkManageServer) {
	s.RegisterService(&FlinkManage_ServiceDesc, srv)
}

func _FlinkManage_ListAvailableFlinkVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListAvailableFlinkVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).ListAvailableFlinkVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/ListAvailableFlinkVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).ListAvailableFlinkVersions(ctx, req.(*pbrequest.ListAvailableFlinkVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_DescribeFlinkClusterAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeFlinkClusterAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).DescribeFlinkClusterAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/DescribeFlinkClusterAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).DescribeFlinkClusterAPI(ctx, req.(*pbrequest.DescribeFlinkClusterAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_ListFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).ListFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/ListFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).ListFlinkClusters(ctx, req.(*pbrequest.ListFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_CreateFlinkCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateFlinkCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).CreateFlinkCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/CreateFlinkCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).CreateFlinkCluster(ctx, req.(*pbrequest.CreateFlinkCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_DescribeFlinkCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeFlinkCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).DescribeFlinkCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/DescribeFlinkCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).DescribeFlinkCluster(ctx, req.(*pbrequest.DescribeFlinkCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_UpdateFlinkCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateFlinkCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).UpdateFlinkCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/UpdateFlinkCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).UpdateFlinkCluster(ctx, req.(*pbrequest.UpdateFlinkCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_DeleteFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).DeleteFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/DeleteFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).DeleteFlinkClusters(ctx, req.(*pbrequest.DeleteFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_StartFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StartFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).StartFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/StartFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).StartFlinkClusters(ctx, req.(*pbrequest.StartFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_StopFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).StopFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/StopFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).StopFlinkClusters(ctx, req.(*pbrequest.StopFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_UpdateFlinkClusterStatusByScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateFlinkClusterStatusByScheduler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).UpdateFlinkClusterStatusByScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/UpdateFlinkClusterStatusByScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).UpdateFlinkClusterStatusByScheduler(ctx, req.(*pbrequest.UpdateFlinkClusterStatusByScheduler))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkManage_StopFlinkClusterByScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopFlinkClusterByScheduler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkManageServer).StopFlinkClusterByScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FlinkManage/StopFlinkClusterByScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkManageServer).StopFlinkClusterByScheduler(ctx, req.(*pbrequest.StopFlinkClusterByScheduler))
	}
	return interceptor(ctx, in, info, handler)
}

// FlinkManage_ServiceDesc is the grpc.ServiceDesc for FlinkManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlinkManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.FlinkManage",
	HandlerType: (*FlinkManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableFlinkVersions",
			Handler:    _FlinkManage_ListAvailableFlinkVersions_Handler,
		},
		{
			MethodName: "DescribeFlinkClusterAPI",
			Handler:    _FlinkManage_DescribeFlinkClusterAPI_Handler,
		},
		{
			MethodName: "ListFlinkClusters",
			Handler:    _FlinkManage_ListFlinkClusters_Handler,
		},
		{
			MethodName: "CreateFlinkCluster",
			Handler:    _FlinkManage_CreateFlinkCluster_Handler,
		},
		{
			MethodName: "DescribeFlinkCluster",
			Handler:    _FlinkManage_DescribeFlinkCluster_Handler,
		},
		{
			MethodName: "UpdateFlinkCluster",
			Handler:    _FlinkManage_UpdateFlinkCluster_Handler,
		},
		{
			MethodName: "DeleteFlinkClusters",
			Handler:    _FlinkManage_DeleteFlinkClusters_Handler,
		},
		{
			MethodName: "StartFlinkClusters",
			Handler:    _FlinkManage_StartFlinkClusters_Handler,
		},
		{
			MethodName: "StopFlinkClusters",
			Handler:    _FlinkManage_StopFlinkClusters_Handler,
		},
		{
			MethodName: "UpdateFlinkClusterStatusByScheduler",
			Handler:    _FlinkManage_UpdateFlinkClusterStatusByScheduler_Handler,
		},
		{
			MethodName: "StopFlinkClusterByScheduler",
			Handler:    _FlinkManage_StopFlinkClusterByScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/flink_manage.proto",
}
