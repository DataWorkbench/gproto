// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/quota_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuotaManageClient is the client API for QuotaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaManageClient interface {
	DescribeUserQuota(ctx context.Context, in *pbrequest.DescribeUserQuota, opts ...grpc.CallOption) (*pbresponse.DescribeUserQuota, error)
	UpsertUserQuota(ctx context.Context, in *pbrequest.UpsertUserQuota, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeWorkspaceQuota(ctx context.Context, in *pbrequest.DescribeWorkspaceQuota, opts ...grpc.CallOption) (*pbresponse.DescribeWorkspaceQuota, error)
	UpsertWorkspaceQuota(ctx context.Context, in *pbrequest.UpsertWorkspaceQuota, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeMemberQuota(ctx context.Context, in *pbrequest.DescribeMemberQuota, opts ...grpc.CallOption) (*pbresponse.DescribeMemberQuota, error)
	UpsertMemberQuota(ctx context.Context, in *pbrequest.UpsertMemberQuota, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type quotaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaManageClient(cc grpc.ClientConnInterface) QuotaManageClient {
	return &quotaManageClient{cc}
}

func (c *quotaManageClient) DescribeUserQuota(ctx context.Context, in *pbrequest.DescribeUserQuota, opts ...grpc.CallOption) (*pbresponse.DescribeUserQuota, error) {
	out := new(pbresponse.DescribeUserQuota)
	err := c.cc.Invoke(ctx, "/spacemanager.QuotaManage/DescribeUserQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManageClient) UpsertUserQuota(ctx context.Context, in *pbrequest.UpsertUserQuota, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.QuotaManage/UpsertUserQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManageClient) DescribeWorkspaceQuota(ctx context.Context, in *pbrequest.DescribeWorkspaceQuota, opts ...grpc.CallOption) (*pbresponse.DescribeWorkspaceQuota, error) {
	out := new(pbresponse.DescribeWorkspaceQuota)
	err := c.cc.Invoke(ctx, "/spacemanager.QuotaManage/DescribeWorkspaceQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManageClient) UpsertWorkspaceQuota(ctx context.Context, in *pbrequest.UpsertWorkspaceQuota, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.QuotaManage/UpsertWorkspaceQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManageClient) DescribeMemberQuota(ctx context.Context, in *pbrequest.DescribeMemberQuota, opts ...grpc.CallOption) (*pbresponse.DescribeMemberQuota, error) {
	out := new(pbresponse.DescribeMemberQuota)
	err := c.cc.Invoke(ctx, "/spacemanager.QuotaManage/DescribeMemberQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManageClient) UpsertMemberQuota(ctx context.Context, in *pbrequest.UpsertMemberQuota, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.QuotaManage/UpsertMemberQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaManageServer is the server API for QuotaManage service.
// All implementations must embed UnimplementedQuotaManageServer
// for forward compatibility
type QuotaManageServer interface {
	DescribeUserQuota(context.Context, *pbrequest.DescribeUserQuota) (*pbresponse.DescribeUserQuota, error)
	UpsertUserQuota(context.Context, *pbrequest.UpsertUserQuota) (*pbmodel.EmptyStruct, error)
	DescribeWorkspaceQuota(context.Context, *pbrequest.DescribeWorkspaceQuota) (*pbresponse.DescribeWorkspaceQuota, error)
	UpsertWorkspaceQuota(context.Context, *pbrequest.UpsertWorkspaceQuota) (*pbmodel.EmptyStruct, error)
	DescribeMemberQuota(context.Context, *pbrequest.DescribeMemberQuota) (*pbresponse.DescribeMemberQuota, error)
	UpsertMemberQuota(context.Context, *pbrequest.UpsertMemberQuota) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedQuotaManageServer()
}

// UnimplementedQuotaManageServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaManageServer struct {
}

func (UnimplementedQuotaManageServer) DescribeUserQuota(context.Context, *pbrequest.DescribeUserQuota) (*pbresponse.DescribeUserQuota, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUserQuota not implemented")
}
func (UnimplementedQuotaManageServer) UpsertUserQuota(context.Context, *pbrequest.UpsertUserQuota) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserQuota not implemented")
}
func (UnimplementedQuotaManageServer) DescribeWorkspaceQuota(context.Context, *pbrequest.DescribeWorkspaceQuota) (*pbresponse.DescribeWorkspaceQuota, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWorkspaceQuota not implemented")
}
func (UnimplementedQuotaManageServer) UpsertWorkspaceQuota(context.Context, *pbrequest.UpsertWorkspaceQuota) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWorkspaceQuota not implemented")
}
func (UnimplementedQuotaManageServer) DescribeMemberQuota(context.Context, *pbrequest.DescribeMemberQuota) (*pbresponse.DescribeMemberQuota, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMemberQuota not implemented")
}
func (UnimplementedQuotaManageServer) UpsertMemberQuota(context.Context, *pbrequest.UpsertMemberQuota) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMemberQuota not implemented")
}
func (UnimplementedQuotaManageServer) mustEmbedUnimplementedQuotaManageServer() {}

// UnsafeQuotaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaManageServer will
// result in compilation errors.
type UnsafeQuotaManageServer interface {
	mustEmbedUnimplementedQuotaManageServer()
}

func RegisterQuotaManageServer(s grpc.ServiceRegistrar, srv QuotaManageServer) {
	s.RegisterService(&QuotaManage_ServiceDesc, srv)
}

func _QuotaManage_DescribeUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeUserQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManageServer).DescribeUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.QuotaManage/DescribeUserQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManageServer).DescribeUserQuota(ctx, req.(*pbrequest.DescribeUserQuota))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManage_UpsertUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpsertUserQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManageServer).UpsertUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.QuotaManage/UpsertUserQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManageServer).UpsertUserQuota(ctx, req.(*pbrequest.UpsertUserQuota))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManage_DescribeWorkspaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeWorkspaceQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManageServer).DescribeWorkspaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.QuotaManage/DescribeWorkspaceQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManageServer).DescribeWorkspaceQuota(ctx, req.(*pbrequest.DescribeWorkspaceQuota))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManage_UpsertWorkspaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpsertWorkspaceQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManageServer).UpsertWorkspaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.QuotaManage/UpsertWorkspaceQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManageServer).UpsertWorkspaceQuota(ctx, req.(*pbrequest.UpsertWorkspaceQuota))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManage_DescribeMemberQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeMemberQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManageServer).DescribeMemberQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.QuotaManage/DescribeMemberQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManageServer).DescribeMemberQuota(ctx, req.(*pbrequest.DescribeMemberQuota))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManage_UpsertMemberQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpsertMemberQuota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManageServer).UpsertMemberQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.QuotaManage/UpsertMemberQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManageServer).UpsertMemberQuota(ctx, req.(*pbrequest.UpsertMemberQuota))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaManage_ServiceDesc is the grpc.ServiceDesc for QuotaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.QuotaManage",
	HandlerType: (*QuotaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeUserQuota",
			Handler:    _QuotaManage_DescribeUserQuota_Handler,
		},
		{
			MethodName: "UpsertUserQuota",
			Handler:    _QuotaManage_UpsertUserQuota_Handler,
		},
		{
			MethodName: "DescribeWorkspaceQuota",
			Handler:    _QuotaManage_DescribeWorkspaceQuota_Handler,
		},
		{
			MethodName: "UpsertWorkspaceQuota",
			Handler:    _QuotaManage_UpsertWorkspaceQuota_Handler,
		},
		{
			MethodName: "DescribeMemberQuota",
			Handler:    _QuotaManage_DescribeMemberQuota_Handler,
		},
		{
			MethodName: "UpsertMemberQuota",
			Handler:    _QuotaManage_UpsertMemberQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/quota_manage.proto",
}
