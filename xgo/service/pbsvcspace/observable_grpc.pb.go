// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/observable.proto

package pbsvcspace

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObservableClient is the client API for Observable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObservableClient interface {
	DescribeWorkspaceOverview(ctx context.Context, in *pbrequest.DescribeWorkspaceOverview, opts ...grpc.CallOption) (*pbresponse.DescribeWorkspaceOverview, error)
}

type observableClient struct {
	cc grpc.ClientConnInterface
}

func NewObservableClient(cc grpc.ClientConnInterface) ObservableClient {
	return &observableClient{cc}
}

func (c *observableClient) DescribeWorkspaceOverview(ctx context.Context, in *pbrequest.DescribeWorkspaceOverview, opts ...grpc.CallOption) (*pbresponse.DescribeWorkspaceOverview, error) {
	out := new(pbresponse.DescribeWorkspaceOverview)
	err := c.cc.Invoke(ctx, "/spacemanager.Observable/DescribeWorkspaceOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObservableServer is the server API for Observable service.
// All implementations must embed UnimplementedObservableServer
// for forward compatibility
type ObservableServer interface {
	DescribeWorkspaceOverview(context.Context, *pbrequest.DescribeWorkspaceOverview) (*pbresponse.DescribeWorkspaceOverview, error)
	mustEmbedUnimplementedObservableServer()
}

// UnimplementedObservableServer must be embedded to have forward compatible implementations.
type UnimplementedObservableServer struct {
}

func (UnimplementedObservableServer) DescribeWorkspaceOverview(context.Context, *pbrequest.DescribeWorkspaceOverview) (*pbresponse.DescribeWorkspaceOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWorkspaceOverview not implemented")
}
func (UnimplementedObservableServer) mustEmbedUnimplementedObservableServer() {}

// UnsafeObservableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObservableServer will
// result in compilation errors.
type UnsafeObservableServer interface {
	mustEmbedUnimplementedObservableServer()
}

func RegisterObservableServer(s grpc.ServiceRegistrar, srv ObservableServer) {
	s.RegisterService(&Observable_ServiceDesc, srv)
}

func _Observable_DescribeWorkspaceOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeWorkspaceOverview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservableServer).DescribeWorkspaceOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.Observable/DescribeWorkspaceOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservableServer).DescribeWorkspaceOverview(ctx, req.(*pbrequest.DescribeWorkspaceOverview))
	}
	return interceptor(ctx, in, info, handler)
}

// Observable_ServiceDesc is the grpc.ServiceDesc for Observable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Observable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.Observable",
	HandlerType: (*ObservableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeWorkspaceOverview",
			Handler:    _Observable_DescribeWorkspaceOverview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/observable.proto",
}
