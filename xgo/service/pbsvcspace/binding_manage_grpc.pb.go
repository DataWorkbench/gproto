// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/binding_manage.proto

package pbsvcspace

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BindingManageClient is the client API for BindingManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BindingManageClient interface {
	// DescribeResourceBinding to get a module lists that bound this resource.
	DescribeResourceBinding(ctx context.Context, in *pbrequest.DescribeResourceBinding, opts ...grpc.CallOption) (*pbresponse.DescribeResourceBinding, error)
}

type bindingManageClient struct {
	cc grpc.ClientConnInterface
}

func NewBindingManageClient(cc grpc.ClientConnInterface) BindingManageClient {
	return &bindingManageClient{cc}
}

func (c *bindingManageClient) DescribeResourceBinding(ctx context.Context, in *pbrequest.DescribeResourceBinding, opts ...grpc.CallOption) (*pbresponse.DescribeResourceBinding, error) {
	out := new(pbresponse.DescribeResourceBinding)
	err := c.cc.Invoke(ctx, "/spacemanager.BindingManage/DescribeResourceBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BindingManageServer is the server API for BindingManage service.
// All implementations must embed UnimplementedBindingManageServer
// for forward compatibility
type BindingManageServer interface {
	// DescribeResourceBinding to get a module lists that bound this resource.
	DescribeResourceBinding(context.Context, *pbrequest.DescribeResourceBinding) (*pbresponse.DescribeResourceBinding, error)
	mustEmbedUnimplementedBindingManageServer()
}

// UnimplementedBindingManageServer must be embedded to have forward compatible implementations.
type UnimplementedBindingManageServer struct {
}

func (UnimplementedBindingManageServer) DescribeResourceBinding(context.Context, *pbrequest.DescribeResourceBinding) (*pbresponse.DescribeResourceBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeResourceBinding not implemented")
}
func (UnimplementedBindingManageServer) mustEmbedUnimplementedBindingManageServer() {}

// UnsafeBindingManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BindingManageServer will
// result in compilation errors.
type UnsafeBindingManageServer interface {
	mustEmbedUnimplementedBindingManageServer()
}

func RegisterBindingManageServer(s grpc.ServiceRegistrar, srv BindingManageServer) {
	s.RegisterService(&BindingManage_ServiceDesc, srv)
}

func _BindingManage_DescribeResourceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeResourceBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingManageServer).DescribeResourceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.BindingManage/DescribeResourceBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingManageServer).DescribeResourceBinding(ctx, req.(*pbrequest.DescribeResourceBinding))
	}
	return interceptor(ctx, in, info, handler)
}

// BindingManage_ServiceDesc is the grpc.ServiceDesc for BindingManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BindingManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.BindingManage",
	HandlerType: (*BindingManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeResourceBinding",
			Handler:    _BindingManage_DescribeResourceBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/binding_manage.proto",
}
