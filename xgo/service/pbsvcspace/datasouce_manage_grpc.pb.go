// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/datasouce_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSourceManageClient is the client API for DataSourceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourceManageClient interface {
	// datasource
	ListDataSources(ctx context.Context, in *pbrequest.ListDataSources, opts ...grpc.CallOption) (*pbresponse.ListDataSources, error)
	CreateDataSource(ctx context.Context, in *pbrequest.CreateDataSource, opts ...grpc.CallOption) (*pbresponse.CreateDataSource, error)
	UpdateDataSource(ctx context.Context, in *pbrequest.UpdateDataSource, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeDataSource(ctx context.Context, in *pbrequest.DescribeDataSource, opts ...grpc.CallOption) (*pbresponse.DescribeDataSource, error)
	DisableDataSources(ctx context.Context, in *pbrequest.DisableDataSources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	EnableDataSources(ctx context.Context, in *pbrequest.EnableDataSources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteDataSources(ctx context.Context, in *pbrequest.DeleteDataSources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeDataSourceKinds(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceKinds, error)
	ListDataSourceConnections(ctx context.Context, in *pbrequest.ListDataSourceConnections, opts ...grpc.CallOption) (*pbresponse.ListDataSourceConnections, error)
	PingDataSourceConnection(ctx context.Context, in *pbrequest.PingDataSourceConnection, opts ...grpc.CallOption) (*pbresponse.PingDataSourceConnection, error)
	// DescribeDataSourceTables get a table list of specified data source.
	DescribeDataSourceTables(ctx context.Context, in *pbrequest.DescribeDataSourceTables, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTables, error)
	// DescribeDataSourceTableSchema get the table schema of specified table in datasource.
	DescribeDataSourceTableSchema(ctx context.Context, in *pbrequest.DescribeDataSourceTableSchema, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTableSchema, error)
	DescribeTableSchemaDataServiceApi(ctx context.Context, in *pbrequest.DescribeTableSchemaDataServiceApi, opts ...grpc.CallOption) (*pbresponse.DescribeTableSchemaDataServiceApi, error)
}

type dataSourceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourceManageClient(cc grpc.ClientConnInterface) DataSourceManageClient {
	return &dataSourceManageClient{cc}
}

func (c *dataSourceManageClient) ListDataSources(ctx context.Context, in *pbrequest.ListDataSources, opts ...grpc.CallOption) (*pbresponse.ListDataSources, error) {
	out := new(pbresponse.ListDataSources)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/ListDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) CreateDataSource(ctx context.Context, in *pbrequest.CreateDataSource, opts ...grpc.CallOption) (*pbresponse.CreateDataSource, error) {
	out := new(pbresponse.CreateDataSource)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/CreateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) UpdateDataSource(ctx context.Context, in *pbrequest.UpdateDataSource, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/UpdateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DescribeDataSource(ctx context.Context, in *pbrequest.DescribeDataSource, opts ...grpc.CallOption) (*pbresponse.DescribeDataSource, error) {
	out := new(pbresponse.DescribeDataSource)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DescribeDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DisableDataSources(ctx context.Context, in *pbrequest.DisableDataSources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DisableDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) EnableDataSources(ctx context.Context, in *pbrequest.EnableDataSources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/EnableDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DeleteDataSources(ctx context.Context, in *pbrequest.DeleteDataSources, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DeleteDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DescribeDataSourceKinds(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceKinds, error) {
	out := new(pbresponse.DescribeDataSourceKinds)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DescribeDataSourceKinds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) ListDataSourceConnections(ctx context.Context, in *pbrequest.ListDataSourceConnections, opts ...grpc.CallOption) (*pbresponse.ListDataSourceConnections, error) {
	out := new(pbresponse.ListDataSourceConnections)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/ListDataSourceConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) PingDataSourceConnection(ctx context.Context, in *pbrequest.PingDataSourceConnection, opts ...grpc.CallOption) (*pbresponse.PingDataSourceConnection, error) {
	out := new(pbresponse.PingDataSourceConnection)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/PingDataSourceConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DescribeDataSourceTables(ctx context.Context, in *pbrequest.DescribeDataSourceTables, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTables, error) {
	out := new(pbresponse.DescribeDataSourceTables)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DescribeDataSourceTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DescribeDataSourceTableSchema(ctx context.Context, in *pbrequest.DescribeDataSourceTableSchema, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTableSchema, error) {
	out := new(pbresponse.DescribeDataSourceTableSchema)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DescribeDataSourceTableSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceManageClient) DescribeTableSchemaDataServiceApi(ctx context.Context, in *pbrequest.DescribeTableSchemaDataServiceApi, opts ...grpc.CallOption) (*pbresponse.DescribeTableSchemaDataServiceApi, error) {
	out := new(pbresponse.DescribeTableSchemaDataServiceApi)
	err := c.cc.Invoke(ctx, "/spacemanager.DataSourceManage/DescribeTableSchemaDataServiceApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceManageServer is the server API for DataSourceManage service.
// All implementations must embed UnimplementedDataSourceManageServer
// for forward compatibility
type DataSourceManageServer interface {
	// datasource
	ListDataSources(context.Context, *pbrequest.ListDataSources) (*pbresponse.ListDataSources, error)
	CreateDataSource(context.Context, *pbrequest.CreateDataSource) (*pbresponse.CreateDataSource, error)
	UpdateDataSource(context.Context, *pbrequest.UpdateDataSource) (*pbmodel.EmptyStruct, error)
	DescribeDataSource(context.Context, *pbrequest.DescribeDataSource) (*pbresponse.DescribeDataSource, error)
	DisableDataSources(context.Context, *pbrequest.DisableDataSources) (*pbmodel.EmptyStruct, error)
	EnableDataSources(context.Context, *pbrequest.EnableDataSources) (*pbmodel.EmptyStruct, error)
	DeleteDataSources(context.Context, *pbrequest.DeleteDataSources) (*pbmodel.EmptyStruct, error)
	DescribeDataSourceKinds(context.Context, *pbmodel.EmptyStruct) (*pbresponse.DescribeDataSourceKinds, error)
	ListDataSourceConnections(context.Context, *pbrequest.ListDataSourceConnections) (*pbresponse.ListDataSourceConnections, error)
	PingDataSourceConnection(context.Context, *pbrequest.PingDataSourceConnection) (*pbresponse.PingDataSourceConnection, error)
	// DescribeDataSourceTables get a table list of specified data source.
	DescribeDataSourceTables(context.Context, *pbrequest.DescribeDataSourceTables) (*pbresponse.DescribeDataSourceTables, error)
	// DescribeDataSourceTableSchema get the table schema of specified table in datasource.
	DescribeDataSourceTableSchema(context.Context, *pbrequest.DescribeDataSourceTableSchema) (*pbresponse.DescribeDataSourceTableSchema, error)
	DescribeTableSchemaDataServiceApi(context.Context, *pbrequest.DescribeTableSchemaDataServiceApi) (*pbresponse.DescribeTableSchemaDataServiceApi, error)
	mustEmbedUnimplementedDataSourceManageServer()
}

// UnimplementedDataSourceManageServer must be embedded to have forward compatible implementations.
type UnimplementedDataSourceManageServer struct {
}

func (UnimplementedDataSourceManageServer) ListDataSources(context.Context, *pbrequest.ListDataSources) (*pbresponse.ListDataSources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSources not implemented")
}
func (UnimplementedDataSourceManageServer) CreateDataSource(context.Context, *pbrequest.CreateDataSource) (*pbresponse.CreateDataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataSource not implemented")
}
func (UnimplementedDataSourceManageServer) UpdateDataSource(context.Context, *pbrequest.UpdateDataSource) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSource not implemented")
}
func (UnimplementedDataSourceManageServer) DescribeDataSource(context.Context, *pbrequest.DescribeDataSource) (*pbresponse.DescribeDataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataSource not implemented")
}
func (UnimplementedDataSourceManageServer) DisableDataSources(context.Context, *pbrequest.DisableDataSources) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDataSources not implemented")
}
func (UnimplementedDataSourceManageServer) EnableDataSources(context.Context, *pbrequest.EnableDataSources) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDataSources not implemented")
}
func (UnimplementedDataSourceManageServer) DeleteDataSources(context.Context, *pbrequest.DeleteDataSources) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSources not implemented")
}
func (UnimplementedDataSourceManageServer) DescribeDataSourceKinds(context.Context, *pbmodel.EmptyStruct) (*pbresponse.DescribeDataSourceKinds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataSourceKinds not implemented")
}
func (UnimplementedDataSourceManageServer) ListDataSourceConnections(context.Context, *pbrequest.ListDataSourceConnections) (*pbresponse.ListDataSourceConnections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSourceConnections not implemented")
}
func (UnimplementedDataSourceManageServer) PingDataSourceConnection(context.Context, *pbrequest.PingDataSourceConnection) (*pbresponse.PingDataSourceConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDataSourceConnection not implemented")
}
func (UnimplementedDataSourceManageServer) DescribeDataSourceTables(context.Context, *pbrequest.DescribeDataSourceTables) (*pbresponse.DescribeDataSourceTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataSourceTables not implemented")
}
func (UnimplementedDataSourceManageServer) DescribeDataSourceTableSchema(context.Context, *pbrequest.DescribeDataSourceTableSchema) (*pbresponse.DescribeDataSourceTableSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataSourceTableSchema not implemented")
}
func (UnimplementedDataSourceManageServer) DescribeTableSchemaDataServiceApi(context.Context, *pbrequest.DescribeTableSchemaDataServiceApi) (*pbresponse.DescribeTableSchemaDataServiceApi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTableSchemaDataServiceApi not implemented")
}
func (UnimplementedDataSourceManageServer) mustEmbedUnimplementedDataSourceManageServer() {}

// UnsafeDataSourceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourceManageServer will
// result in compilation errors.
type UnsafeDataSourceManageServer interface {
	mustEmbedUnimplementedDataSourceManageServer()
}

func RegisterDataSourceManageServer(s grpc.ServiceRegistrar, srv DataSourceManageServer) {
	s.RegisterService(&DataSourceManage_ServiceDesc, srv)
}

func _DataSourceManage_ListDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListDataSources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).ListDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/ListDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).ListDataSources(ctx, req.(*pbrequest.ListDataSources))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_CreateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateDataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).CreateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/CreateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).CreateDataSource(ctx, req.(*pbrequest.CreateDataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_UpdateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateDataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).UpdateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/UpdateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).UpdateDataSource(ctx, req.(*pbrequest.UpdateDataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DescribeDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DescribeDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DescribeDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DescribeDataSource(ctx, req.(*pbrequest.DescribeDataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DisableDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DisableDataSources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DisableDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DisableDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DisableDataSources(ctx, req.(*pbrequest.DisableDataSources))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_EnableDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.EnableDataSources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).EnableDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/EnableDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).EnableDataSources(ctx, req.(*pbrequest.EnableDataSources))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DeleteDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteDataSources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DeleteDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DeleteDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DeleteDataSources(ctx, req.(*pbrequest.DeleteDataSources))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DescribeDataSourceKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmodel.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DescribeDataSourceKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DescribeDataSourceKinds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DescribeDataSourceKinds(ctx, req.(*pbmodel.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_ListDataSourceConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListDataSourceConnections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).ListDataSourceConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/ListDataSourceConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).ListDataSourceConnections(ctx, req.(*pbrequest.ListDataSourceConnections))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_PingDataSourceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.PingDataSourceConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).PingDataSourceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/PingDataSourceConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).PingDataSourceConnection(ctx, req.(*pbrequest.PingDataSourceConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DescribeDataSourceTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataSourceTables)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DescribeDataSourceTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DescribeDataSourceTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DescribeDataSourceTables(ctx, req.(*pbrequest.DescribeDataSourceTables))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DescribeDataSourceTableSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataSourceTableSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DescribeDataSourceTableSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DescribeDataSourceTableSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DescribeDataSourceTableSchema(ctx, req.(*pbrequest.DescribeDataSourceTableSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceManage_DescribeTableSchemaDataServiceApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeTableSchemaDataServiceApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceManageServer).DescribeTableSchemaDataServiceApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.DataSourceManage/DescribeTableSchemaDataServiceApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceManageServer).DescribeTableSchemaDataServiceApi(ctx, req.(*pbrequest.DescribeTableSchemaDataServiceApi))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourceManage_ServiceDesc is the grpc.ServiceDesc for DataSourceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.DataSourceManage",
	HandlerType: (*DataSourceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataSources",
			Handler:    _DataSourceManage_ListDataSources_Handler,
		},
		{
			MethodName: "CreateDataSource",
			Handler:    _DataSourceManage_CreateDataSource_Handler,
		},
		{
			MethodName: "UpdateDataSource",
			Handler:    _DataSourceManage_UpdateDataSource_Handler,
		},
		{
			MethodName: "DescribeDataSource",
			Handler:    _DataSourceManage_DescribeDataSource_Handler,
		},
		{
			MethodName: "DisableDataSources",
			Handler:    _DataSourceManage_DisableDataSources_Handler,
		},
		{
			MethodName: "EnableDataSources",
			Handler:    _DataSourceManage_EnableDataSources_Handler,
		},
		{
			MethodName: "DeleteDataSources",
			Handler:    _DataSourceManage_DeleteDataSources_Handler,
		},
		{
			MethodName: "DescribeDataSourceKinds",
			Handler:    _DataSourceManage_DescribeDataSourceKinds_Handler,
		},
		{
			MethodName: "ListDataSourceConnections",
			Handler:    _DataSourceManage_ListDataSourceConnections_Handler,
		},
		{
			MethodName: "PingDataSourceConnection",
			Handler:    _DataSourceManage_PingDataSourceConnection_Handler,
		},
		{
			MethodName: "DescribeDataSourceTables",
			Handler:    _DataSourceManage_DescribeDataSourceTables_Handler,
		},
		{
			MethodName: "DescribeDataSourceTableSchema",
			Handler:    _DataSourceManage_DescribeDataSourceTableSchema_Handler,
		},
		{
			MethodName: "DescribeTableSchemaDataServiceApi",
			Handler:    _DataSourceManage_DescribeTableSchemaDataServiceApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/datasouce_manage.proto",
}
