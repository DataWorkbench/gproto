// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/network_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkManageClient is the client API for NetworkManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkManageClient interface {
	// Interface for manage network configuration from iaas-pvc
	CreateNetwork(ctx context.Context, in *pbrequest.CreateNetwork, opts ...grpc.CallOption) (*pbresponse.CreateNetwork, error)
	ListNetworks(ctx context.Context, in *pbrequest.ListNetworks, opts ...grpc.CallOption) (*pbresponse.ListNetworks, error)
	DescribeNetwork(ctx context.Context, in *pbrequest.DescribeNetwork, opts ...grpc.CallOption) (*pbresponse.DescribeNetwork, error)
	UpdateNetwork(ctx context.Context, in *pbrequest.UpdateNetwork, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteNetworks(ctx context.Context, in *pbrequest.DeleteNetworks, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type networkManageClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkManageClient(cc grpc.ClientConnInterface) NetworkManageClient {
	return &networkManageClient{cc}
}

func (c *networkManageClient) CreateNetwork(ctx context.Context, in *pbrequest.CreateNetwork, opts ...grpc.CallOption) (*pbresponse.CreateNetwork, error) {
	out := new(pbresponse.CreateNetwork)
	err := c.cc.Invoke(ctx, "/spacemanager.NetworkManage/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManageClient) ListNetworks(ctx context.Context, in *pbrequest.ListNetworks, opts ...grpc.CallOption) (*pbresponse.ListNetworks, error) {
	out := new(pbresponse.ListNetworks)
	err := c.cc.Invoke(ctx, "/spacemanager.NetworkManage/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManageClient) DescribeNetwork(ctx context.Context, in *pbrequest.DescribeNetwork, opts ...grpc.CallOption) (*pbresponse.DescribeNetwork, error) {
	out := new(pbresponse.DescribeNetwork)
	err := c.cc.Invoke(ctx, "/spacemanager.NetworkManage/DescribeNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManageClient) UpdateNetwork(ctx context.Context, in *pbrequest.UpdateNetwork, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.NetworkManage/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManageClient) DeleteNetworks(ctx context.Context, in *pbrequest.DeleteNetworks, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.NetworkManage/DeleteNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkManageServer is the server API for NetworkManage service.
// All implementations must embed UnimplementedNetworkManageServer
// for forward compatibility
type NetworkManageServer interface {
	// Interface for manage network configuration from iaas-pvc
	CreateNetwork(context.Context, *pbrequest.CreateNetwork) (*pbresponse.CreateNetwork, error)
	ListNetworks(context.Context, *pbrequest.ListNetworks) (*pbresponse.ListNetworks, error)
	DescribeNetwork(context.Context, *pbrequest.DescribeNetwork) (*pbresponse.DescribeNetwork, error)
	UpdateNetwork(context.Context, *pbrequest.UpdateNetwork) (*pbmodel.EmptyStruct, error)
	DeleteNetworks(context.Context, *pbrequest.DeleteNetworks) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedNetworkManageServer()
}

// UnimplementedNetworkManageServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkManageServer struct {
}

func (UnimplementedNetworkManageServer) CreateNetwork(context.Context, *pbrequest.CreateNetwork) (*pbresponse.CreateNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedNetworkManageServer) ListNetworks(context.Context, *pbrequest.ListNetworks) (*pbresponse.ListNetworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedNetworkManageServer) DescribeNetwork(context.Context, *pbrequest.DescribeNetwork) (*pbresponse.DescribeNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeNetwork not implemented")
}
func (UnimplementedNetworkManageServer) UpdateNetwork(context.Context, *pbrequest.UpdateNetwork) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedNetworkManageServer) DeleteNetworks(context.Context, *pbrequest.DeleteNetworks) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworks not implemented")
}
func (UnimplementedNetworkManageServer) mustEmbedUnimplementedNetworkManageServer() {}

// UnsafeNetworkManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkManageServer will
// result in compilation errors.
type UnsafeNetworkManageServer interface {
	mustEmbedUnimplementedNetworkManageServer()
}

func RegisterNetworkManageServer(s grpc.ServiceRegistrar, srv NetworkManageServer) {
	s.RegisterService(&NetworkManage_ServiceDesc, srv)
}

func _NetworkManage_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManageServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.NetworkManage/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManageServer).CreateNetwork(ctx, req.(*pbrequest.CreateNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManage_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListNetworks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManageServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.NetworkManage/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManageServer).ListNetworks(ctx, req.(*pbrequest.ListNetworks))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManage_DescribeNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManageServer).DescribeNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.NetworkManage/DescribeNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManageServer).DescribeNetwork(ctx, req.(*pbrequest.DescribeNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManage_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManageServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.NetworkManage/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManageServer).UpdateNetwork(ctx, req.(*pbrequest.UpdateNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManage_DeleteNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteNetworks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManageServer).DeleteNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.NetworkManage/DeleteNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManageServer).DeleteNetworks(ctx, req.(*pbrequest.DeleteNetworks))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkManage_ServiceDesc is the grpc.ServiceDesc for NetworkManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.NetworkManage",
	HandlerType: (*NetworkManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _NetworkManage_CreateNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _NetworkManage_ListNetworks_Handler,
		},
		{
			MethodName: "DescribeNetwork",
			Handler:    _NetworkManage_DescribeNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _NetworkManage_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetworks",
			Handler:    _NetworkManage_DeleteNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/network_manage.proto",
}
