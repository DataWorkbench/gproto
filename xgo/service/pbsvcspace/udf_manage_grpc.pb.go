// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/udf_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UDFManageClient is the client API for UDFManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UDFManageClient interface {
	ListUDFs(ctx context.Context, in *pbrequest.ListUDFs, opts ...grpc.CallOption) (*pbresponse.ListUDFs, error)
	DeleteUDFs(ctx context.Context, in *pbrequest.DeleteUDFs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	CreateUDF(ctx context.Context, in *pbrequest.CreateUDF, opts ...grpc.CallOption) (*pbresponse.CreateUDF, error)
	UpdateUDF(ctx context.Context, in *pbrequest.UpdateUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeUDF(ctx context.Context, in *pbrequest.DescribeUDF, opts ...grpc.CallOption) (*pbresponse.DescribeUDF, error)
}

type uDFManageClient struct {
	cc grpc.ClientConnInterface
}

func NewUDFManageClient(cc grpc.ClientConnInterface) UDFManageClient {
	return &uDFManageClient{cc}
}

func (c *uDFManageClient) ListUDFs(ctx context.Context, in *pbrequest.ListUDFs, opts ...grpc.CallOption) (*pbresponse.ListUDFs, error) {
	out := new(pbresponse.ListUDFs)
	err := c.cc.Invoke(ctx, "/spacemanager.UDFManage/ListUDFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDFManageClient) DeleteUDFs(ctx context.Context, in *pbrequest.DeleteUDFs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.UDFManage/DeleteUDFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDFManageClient) CreateUDF(ctx context.Context, in *pbrequest.CreateUDF, opts ...grpc.CallOption) (*pbresponse.CreateUDF, error) {
	out := new(pbresponse.CreateUDF)
	err := c.cc.Invoke(ctx, "/spacemanager.UDFManage/CreateUDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDFManageClient) UpdateUDF(ctx context.Context, in *pbrequest.UpdateUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.UDFManage/UpdateUDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDFManageClient) DescribeUDF(ctx context.Context, in *pbrequest.DescribeUDF, opts ...grpc.CallOption) (*pbresponse.DescribeUDF, error) {
	out := new(pbresponse.DescribeUDF)
	err := c.cc.Invoke(ctx, "/spacemanager.UDFManage/DescribeUDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UDFManageServer is the server API for UDFManage service.
// All implementations must embed UnimplementedUDFManageServer
// for forward compatibility
type UDFManageServer interface {
	ListUDFs(context.Context, *pbrequest.ListUDFs) (*pbresponse.ListUDFs, error)
	DeleteUDFs(context.Context, *pbrequest.DeleteUDFs) (*pbmodel.EmptyStruct, error)
	CreateUDF(context.Context, *pbrequest.CreateUDF) (*pbresponse.CreateUDF, error)
	UpdateUDF(context.Context, *pbrequest.UpdateUDF) (*pbmodel.EmptyStruct, error)
	DescribeUDF(context.Context, *pbrequest.DescribeUDF) (*pbresponse.DescribeUDF, error)
	mustEmbedUnimplementedUDFManageServer()
}

// UnimplementedUDFManageServer must be embedded to have forward compatible implementations.
type UnimplementedUDFManageServer struct {
}

func (UnimplementedUDFManageServer) ListUDFs(context.Context, *pbrequest.ListUDFs) (*pbresponse.ListUDFs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUDFs not implemented")
}
func (UnimplementedUDFManageServer) DeleteUDFs(context.Context, *pbrequest.DeleteUDFs) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUDFs not implemented")
}
func (UnimplementedUDFManageServer) CreateUDF(context.Context, *pbrequest.CreateUDF) (*pbresponse.CreateUDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUDF not implemented")
}
func (UnimplementedUDFManageServer) UpdateUDF(context.Context, *pbrequest.UpdateUDF) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUDF not implemented")
}
func (UnimplementedUDFManageServer) DescribeUDF(context.Context, *pbrequest.DescribeUDF) (*pbresponse.DescribeUDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUDF not implemented")
}
func (UnimplementedUDFManageServer) mustEmbedUnimplementedUDFManageServer() {}

// UnsafeUDFManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UDFManageServer will
// result in compilation errors.
type UnsafeUDFManageServer interface {
	mustEmbedUnimplementedUDFManageServer()
}

func RegisterUDFManageServer(s grpc.ServiceRegistrar, srv UDFManageServer) {
	s.RegisterService(&UDFManage_ServiceDesc, srv)
}

func _UDFManage_ListUDFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListUDFs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDFManageServer).ListUDFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.UDFManage/ListUDFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDFManageServer).ListUDFs(ctx, req.(*pbrequest.ListUDFs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDFManage_DeleteUDFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteUDFs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDFManageServer).DeleteUDFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.UDFManage/DeleteUDFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDFManageServer).DeleteUDFs(ctx, req.(*pbrequest.DeleteUDFs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDFManage_CreateUDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDFManageServer).CreateUDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.UDFManage/CreateUDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDFManageServer).CreateUDF(ctx, req.(*pbrequest.CreateUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDFManage_UpdateUDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDFManageServer).UpdateUDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.UDFManage/UpdateUDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDFManageServer).UpdateUDF(ctx, req.(*pbrequest.UpdateUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDFManage_DescribeUDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDFManageServer).DescribeUDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.UDFManage/DescribeUDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDFManageServer).DescribeUDF(ctx, req.(*pbrequest.DescribeUDF))
	}
	return interceptor(ctx, in, info, handler)
}

// UDFManage_ServiceDesc is the grpc.ServiceDesc for UDFManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UDFManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.UDFManage",
	HandlerType: (*UDFManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUDFs",
			Handler:    _UDFManage_ListUDFs_Handler,
		},
		{
			MethodName: "DeleteUDFs",
			Handler:    _UDFManage_DeleteUDFs_Handler,
		},
		{
			MethodName: "CreateUDF",
			Handler:    _UDFManage_CreateUDF_Handler,
		},
		{
			MethodName: "UpdateUDF",
			Handler:    _UDFManage_UpdateUDF_Handler,
		},
		{
			MethodName: "DescribeUDF",
			Handler:    _UDFManage_DescribeUDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/udf_manage.proto",
}
