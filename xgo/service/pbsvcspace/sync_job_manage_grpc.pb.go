// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/sync_job_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncJobManageClient is the client API for SyncJobManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncJobManageClient interface {
	// Interface for Sync job dev.
	//
	// ListSyncJobs to get a list of Sync job of the workspace.
	ListSyncJobs(ctx context.Context, in *pbrequest.ListSyncJobs, opts ...grpc.CallOption) (*pbresponse.ListSyncJobs, error)
	// DeleteSyncJobs delete Sync job ant its related resources where in ids.
	// Cannot not delete directory in this API.
	// Resources includes:
	//  - History version and Released's job.
	//  - code, env schedule and its history version.
	//  - Offline job and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteSyncJobs(ctx context.Context, in *pbrequest.DeleteSyncJobs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// Move SyncJob to other directory.
	MoveSyncJobs(ctx context.Context, in *pbrequest.MoveSyncJobs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// CreateSyncJob to create a new Sync job.
	CreateSyncJob(ctx context.Context, in *pbrequest.CreateSyncJob, opts ...grpc.CallOption) (*pbresponse.CreateSyncJob, error)
	// UpdateSyncJob to update the info for the specified Sync job.
	UpdateSyncJob(ctx context.Context, in *pbrequest.UpdateSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// DescribeSyncJob to get the info of the specified Sync job.
	DescribeSyncJob(ctx context.Context, in *pbrequest.DescribeSyncJob, opts ...grpc.CallOption) (*pbresponse.DescribeSyncJob, error)
	// SetSyncJobConf to set the run parameters of the specified Sync job.
	SetSyncJobConf(ctx context.Context, in *pbrequest.SetSyncJobConf, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// GetSyncJobConf to get the run parameters of the specified Sync job.
	GetSyncJobConf(ctx context.Context, in *pbrequest.GetSyncJobConf, opts ...grpc.CallOption) (*pbresponse.GetSyncJobConf, error)
	// SetSyncJobSchedule to set the schedule properties of the specified Sync job.
	SetSyncJobSchedule(ctx context.Context, in *pbrequest.SetSyncJobSchedule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// GetSyncJobSchedule to get the schedule properties of the specified Sync job.
	GetSyncJobSchedule(ctx context.Context, in *pbrequest.GetSyncJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetSyncJobSchedule, error)
	// Interface for Sync job release.
	//
	// ReleaseSyncJob to publish the specified job to schedule system with a new version.
	ReleaseSyncJob(ctx context.Context, in *pbrequest.ReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseSyncJobs to suspend the specified job list in schedule system.
	OfflineReleaseSyncJob(ctx context.Context, in *pbrequest.OfflineReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseSyncJob to suspend the specified job list in schedule system.
	SuspendReleaseSyncJob(ctx context.Context, in *pbrequest.SuspendReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// ResumeReleaseSyncJob to resume the suspended job list in schedule system.
	ResumeReleaseSyncJob(ctx context.Context, in *pbrequest.ResumeReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// ListReleaseSyncJobs for gets a list of all published job in the workspace.
	ListReleaseSyncJobs(ctx context.Context, in *pbrequest.ListReleaseSyncJobs, opts ...grpc.CallOption) (*pbresponse.ListReleaseSyncJobs, error)
	// Interface for Sync job versions.
	//
	// ListSyncJobVersions for gets a list of all versions of the specified job.
	ListSyncJobVersions(ctx context.Context, in *pbrequest.ListSyncJobVersions, opts ...grpc.CallOption) (*pbresponse.ListSyncJobVersions, error)
	// DescribeSyncJobVersion for get the info of the job of the specified version.
	DescribeSyncJobVersion(ctx context.Context, in *pbrequest.DescribeSyncJob, opts ...grpc.CallOption) (*pbresponse.DescribeSyncJob, error)
	// GetSyncJobVersionArgs for get the run parameters of the job of the specified version.
	GetSyncJobVersionConf(ctx context.Context, in *pbrequest.GetSyncJobConf, opts ...grpc.CallOption) (*pbresponse.GetSyncJobConf, error)
	// GetSyncJobVersionSchedule for get the schedule properties of the job of the specified version.
	GetSyncJobVersionSchedule(ctx context.Context, in *pbrequest.GetSyncJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetSyncJobSchedule, error)
	// Interface for helper.
	//
	DescribeSyncFlinkUIByInstanceId(ctx context.Context, in *pbrequest.DescribeSyncFlinkUIByInstanceId, opts ...grpc.CallOption) (*pbresponse.DescribeSyncFlinkUIByInstanceId, error)
}

type syncJobManageClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncJobManageClient(cc grpc.ClientConnInterface) SyncJobManageClient {
	return &syncJobManageClient{cc}
}

func (c *syncJobManageClient) ListSyncJobs(ctx context.Context, in *pbrequest.ListSyncJobs, opts ...grpc.CallOption) (*pbresponse.ListSyncJobs, error) {
	out := new(pbresponse.ListSyncJobs)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/ListSyncJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) DeleteSyncJobs(ctx context.Context, in *pbrequest.DeleteSyncJobs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/DeleteSyncJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) MoveSyncJobs(ctx context.Context, in *pbrequest.MoveSyncJobs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/MoveSyncJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) CreateSyncJob(ctx context.Context, in *pbrequest.CreateSyncJob, opts ...grpc.CallOption) (*pbresponse.CreateSyncJob, error) {
	out := new(pbresponse.CreateSyncJob)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/CreateSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) UpdateSyncJob(ctx context.Context, in *pbrequest.UpdateSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/UpdateSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) DescribeSyncJob(ctx context.Context, in *pbrequest.DescribeSyncJob, opts ...grpc.CallOption) (*pbresponse.DescribeSyncJob, error) {
	out := new(pbresponse.DescribeSyncJob)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/DescribeSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) SetSyncJobConf(ctx context.Context, in *pbrequest.SetSyncJobConf, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/SetSyncJobConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) GetSyncJobConf(ctx context.Context, in *pbrequest.GetSyncJobConf, opts ...grpc.CallOption) (*pbresponse.GetSyncJobConf, error) {
	out := new(pbresponse.GetSyncJobConf)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/GetSyncJobConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) SetSyncJobSchedule(ctx context.Context, in *pbrequest.SetSyncJobSchedule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/SetSyncJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) GetSyncJobSchedule(ctx context.Context, in *pbrequest.GetSyncJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetSyncJobSchedule, error) {
	out := new(pbresponse.GetSyncJobSchedule)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/GetSyncJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) ReleaseSyncJob(ctx context.Context, in *pbrequest.ReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/ReleaseSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) OfflineReleaseSyncJob(ctx context.Context, in *pbrequest.OfflineReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/OfflineReleaseSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) SuspendReleaseSyncJob(ctx context.Context, in *pbrequest.SuspendReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/SuspendReleaseSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) ResumeReleaseSyncJob(ctx context.Context, in *pbrequest.ResumeReleaseSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/ResumeReleaseSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) ListReleaseSyncJobs(ctx context.Context, in *pbrequest.ListReleaseSyncJobs, opts ...grpc.CallOption) (*pbresponse.ListReleaseSyncJobs, error) {
	out := new(pbresponse.ListReleaseSyncJobs)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/ListReleaseSyncJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) ListSyncJobVersions(ctx context.Context, in *pbrequest.ListSyncJobVersions, opts ...grpc.CallOption) (*pbresponse.ListSyncJobVersions, error) {
	out := new(pbresponse.ListSyncJobVersions)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/ListSyncJobVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) DescribeSyncJobVersion(ctx context.Context, in *pbrequest.DescribeSyncJob, opts ...grpc.CallOption) (*pbresponse.DescribeSyncJob, error) {
	out := new(pbresponse.DescribeSyncJob)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/DescribeSyncJobVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) GetSyncJobVersionConf(ctx context.Context, in *pbrequest.GetSyncJobConf, opts ...grpc.CallOption) (*pbresponse.GetSyncJobConf, error) {
	out := new(pbresponse.GetSyncJobConf)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/GetSyncJobVersionConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) GetSyncJobVersionSchedule(ctx context.Context, in *pbrequest.GetSyncJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetSyncJobSchedule, error) {
	out := new(pbresponse.GetSyncJobSchedule)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/GetSyncJobVersionSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncJobManageClient) DescribeSyncFlinkUIByInstanceId(ctx context.Context, in *pbrequest.DescribeSyncFlinkUIByInstanceId, opts ...grpc.CallOption) (*pbresponse.DescribeSyncFlinkUIByInstanceId, error) {
	out := new(pbresponse.DescribeSyncFlinkUIByInstanceId)
	err := c.cc.Invoke(ctx, "/spacemanager.SyncJobManage/DescribeSyncFlinkUIByInstanceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncJobManageServer is the server API for SyncJobManage service.
// All implementations must embed UnimplementedSyncJobManageServer
// for forward compatibility
type SyncJobManageServer interface {
	// Interface for Sync job dev.
	//
	// ListSyncJobs to get a list of Sync job of the workspace.
	ListSyncJobs(context.Context, *pbrequest.ListSyncJobs) (*pbresponse.ListSyncJobs, error)
	// DeleteSyncJobs delete Sync job ant its related resources where in ids.
	// Cannot not delete directory in this API.
	// Resources includes:
	//  - History version and Released's job.
	//  - code, env schedule and its history version.
	//  - Offline job and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteSyncJobs(context.Context, *pbrequest.DeleteSyncJobs) (*pbmodel.EmptyStruct, error)
	// Move SyncJob to other directory.
	MoveSyncJobs(context.Context, *pbrequest.MoveSyncJobs) (*pbmodel.EmptyStruct, error)
	// CreateSyncJob to create a new Sync job.
	CreateSyncJob(context.Context, *pbrequest.CreateSyncJob) (*pbresponse.CreateSyncJob, error)
	// UpdateSyncJob to update the info for the specified Sync job.
	UpdateSyncJob(context.Context, *pbrequest.UpdateSyncJob) (*pbmodel.EmptyStruct, error)
	// DescribeSyncJob to get the info of the specified Sync job.
	DescribeSyncJob(context.Context, *pbrequest.DescribeSyncJob) (*pbresponse.DescribeSyncJob, error)
	// SetSyncJobConf to set the run parameters of the specified Sync job.
	SetSyncJobConf(context.Context, *pbrequest.SetSyncJobConf) (*pbmodel.EmptyStruct, error)
	// GetSyncJobConf to get the run parameters of the specified Sync job.
	GetSyncJobConf(context.Context, *pbrequest.GetSyncJobConf) (*pbresponse.GetSyncJobConf, error)
	// SetSyncJobSchedule to set the schedule properties of the specified Sync job.
	SetSyncJobSchedule(context.Context, *pbrequest.SetSyncJobSchedule) (*pbmodel.EmptyStruct, error)
	// GetSyncJobSchedule to get the schedule properties of the specified Sync job.
	GetSyncJobSchedule(context.Context, *pbrequest.GetSyncJobSchedule) (*pbresponse.GetSyncJobSchedule, error)
	// Interface for Sync job release.
	//
	// ReleaseSyncJob to publish the specified job to schedule system with a new version.
	ReleaseSyncJob(context.Context, *pbrequest.ReleaseSyncJob) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseSyncJobs to suspend the specified job list in schedule system.
	OfflineReleaseSyncJob(context.Context, *pbrequest.OfflineReleaseSyncJob) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseSyncJob to suspend the specified job list in schedule system.
	SuspendReleaseSyncJob(context.Context, *pbrequest.SuspendReleaseSyncJob) (*pbmodel.EmptyStruct, error)
	// ResumeReleaseSyncJob to resume the suspended job list in schedule system.
	ResumeReleaseSyncJob(context.Context, *pbrequest.ResumeReleaseSyncJob) (*pbmodel.EmptyStruct, error)
	// ListReleaseSyncJobs for gets a list of all published job in the workspace.
	ListReleaseSyncJobs(context.Context, *pbrequest.ListReleaseSyncJobs) (*pbresponse.ListReleaseSyncJobs, error)
	// Interface for Sync job versions.
	//
	// ListSyncJobVersions for gets a list of all versions of the specified job.
	ListSyncJobVersions(context.Context, *pbrequest.ListSyncJobVersions) (*pbresponse.ListSyncJobVersions, error)
	// DescribeSyncJobVersion for get the info of the job of the specified version.
	DescribeSyncJobVersion(context.Context, *pbrequest.DescribeSyncJob) (*pbresponse.DescribeSyncJob, error)
	// GetSyncJobVersionArgs for get the run parameters of the job of the specified version.
	GetSyncJobVersionConf(context.Context, *pbrequest.GetSyncJobConf) (*pbresponse.GetSyncJobConf, error)
	// GetSyncJobVersionSchedule for get the schedule properties of the job of the specified version.
	GetSyncJobVersionSchedule(context.Context, *pbrequest.GetSyncJobSchedule) (*pbresponse.GetSyncJobSchedule, error)
	// Interface for helper.
	//
	DescribeSyncFlinkUIByInstanceId(context.Context, *pbrequest.DescribeSyncFlinkUIByInstanceId) (*pbresponse.DescribeSyncFlinkUIByInstanceId, error)
	mustEmbedUnimplementedSyncJobManageServer()
}

// UnimplementedSyncJobManageServer must be embedded to have forward compatible implementations.
type UnimplementedSyncJobManageServer struct {
}

func (UnimplementedSyncJobManageServer) ListSyncJobs(context.Context, *pbrequest.ListSyncJobs) (*pbresponse.ListSyncJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncJobs not implemented")
}
func (UnimplementedSyncJobManageServer) DeleteSyncJobs(context.Context, *pbrequest.DeleteSyncJobs) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncJobs not implemented")
}
func (UnimplementedSyncJobManageServer) MoveSyncJobs(context.Context, *pbrequest.MoveSyncJobs) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSyncJobs not implemented")
}
func (UnimplementedSyncJobManageServer) CreateSyncJob(context.Context, *pbrequest.CreateSyncJob) (*pbresponse.CreateSyncJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) UpdateSyncJob(context.Context, *pbrequest.UpdateSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) DescribeSyncJob(context.Context, *pbrequest.DescribeSyncJob) (*pbresponse.DescribeSyncJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) SetSyncJobConf(context.Context, *pbrequest.SetSyncJobConf) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSyncJobConf not implemented")
}
func (UnimplementedSyncJobManageServer) GetSyncJobConf(context.Context, *pbrequest.GetSyncJobConf) (*pbresponse.GetSyncJobConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncJobConf not implemented")
}
func (UnimplementedSyncJobManageServer) SetSyncJobSchedule(context.Context, *pbrequest.SetSyncJobSchedule) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSyncJobSchedule not implemented")
}
func (UnimplementedSyncJobManageServer) GetSyncJobSchedule(context.Context, *pbrequest.GetSyncJobSchedule) (*pbresponse.GetSyncJobSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncJobSchedule not implemented")
}
func (UnimplementedSyncJobManageServer) ReleaseSyncJob(context.Context, *pbrequest.ReleaseSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) OfflineReleaseSyncJob(context.Context, *pbrequest.OfflineReleaseSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineReleaseSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) SuspendReleaseSyncJob(context.Context, *pbrequest.SuspendReleaseSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendReleaseSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) ResumeReleaseSyncJob(context.Context, *pbrequest.ResumeReleaseSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReleaseSyncJob not implemented")
}
func (UnimplementedSyncJobManageServer) ListReleaseSyncJobs(context.Context, *pbrequest.ListReleaseSyncJobs) (*pbresponse.ListReleaseSyncJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseSyncJobs not implemented")
}
func (UnimplementedSyncJobManageServer) ListSyncJobVersions(context.Context, *pbrequest.ListSyncJobVersions) (*pbresponse.ListSyncJobVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncJobVersions not implemented")
}
func (UnimplementedSyncJobManageServer) DescribeSyncJobVersion(context.Context, *pbrequest.DescribeSyncJob) (*pbresponse.DescribeSyncJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSyncJobVersion not implemented")
}
func (UnimplementedSyncJobManageServer) GetSyncJobVersionConf(context.Context, *pbrequest.GetSyncJobConf) (*pbresponse.GetSyncJobConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncJobVersionConf not implemented")
}
func (UnimplementedSyncJobManageServer) GetSyncJobVersionSchedule(context.Context, *pbrequest.GetSyncJobSchedule) (*pbresponse.GetSyncJobSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncJobVersionSchedule not implemented")
}
func (UnimplementedSyncJobManageServer) DescribeSyncFlinkUIByInstanceId(context.Context, *pbrequest.DescribeSyncFlinkUIByInstanceId) (*pbresponse.DescribeSyncFlinkUIByInstanceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSyncFlinkUIByInstanceId not implemented")
}
func (UnimplementedSyncJobManageServer) mustEmbedUnimplementedSyncJobManageServer() {}

// UnsafeSyncJobManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncJobManageServer will
// result in compilation errors.
type UnsafeSyncJobManageServer interface {
	mustEmbedUnimplementedSyncJobManageServer()
}

func RegisterSyncJobManageServer(s grpc.ServiceRegistrar, srv SyncJobManageServer) {
	s.RegisterService(&SyncJobManage_ServiceDesc, srv)
}

func _SyncJobManage_ListSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListSyncJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).ListSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/ListSyncJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).ListSyncJobs(ctx, req.(*pbrequest.ListSyncJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_DeleteSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteSyncJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).DeleteSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/DeleteSyncJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).DeleteSyncJobs(ctx, req.(*pbrequest.DeleteSyncJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_MoveSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.MoveSyncJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).MoveSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/MoveSyncJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).MoveSyncJobs(ctx, req.(*pbrequest.MoveSyncJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_CreateSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).CreateSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/CreateSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).CreateSyncJob(ctx, req.(*pbrequest.CreateSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_UpdateSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).UpdateSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/UpdateSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).UpdateSyncJob(ctx, req.(*pbrequest.UpdateSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_DescribeSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).DescribeSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/DescribeSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).DescribeSyncJob(ctx, req.(*pbrequest.DescribeSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_SetSyncJobConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SetSyncJobConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).SetSyncJobConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/SetSyncJobConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).SetSyncJobConf(ctx, req.(*pbrequest.SetSyncJobConf))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_GetSyncJobConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetSyncJobConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).GetSyncJobConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/GetSyncJobConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).GetSyncJobConf(ctx, req.(*pbrequest.GetSyncJobConf))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_SetSyncJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SetSyncJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).SetSyncJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/SetSyncJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).SetSyncJobSchedule(ctx, req.(*pbrequest.SetSyncJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_GetSyncJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetSyncJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).GetSyncJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/GetSyncJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).GetSyncJobSchedule(ctx, req.(*pbrequest.GetSyncJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_ReleaseSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ReleaseSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).ReleaseSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/ReleaseSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).ReleaseSyncJob(ctx, req.(*pbrequest.ReleaseSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_OfflineReleaseSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.OfflineReleaseSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).OfflineReleaseSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/OfflineReleaseSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).OfflineReleaseSyncJob(ctx, req.(*pbrequest.OfflineReleaseSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_SuspendReleaseSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SuspendReleaseSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).SuspendReleaseSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/SuspendReleaseSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).SuspendReleaseSyncJob(ctx, req.(*pbrequest.SuspendReleaseSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_ResumeReleaseSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ResumeReleaseSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).ResumeReleaseSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/ResumeReleaseSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).ResumeReleaseSyncJob(ctx, req.(*pbrequest.ResumeReleaseSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_ListReleaseSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListReleaseSyncJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).ListReleaseSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/ListReleaseSyncJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).ListReleaseSyncJobs(ctx, req.(*pbrequest.ListReleaseSyncJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_ListSyncJobVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListSyncJobVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).ListSyncJobVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/ListSyncJobVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).ListSyncJobVersions(ctx, req.(*pbrequest.ListSyncJobVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_DescribeSyncJobVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).DescribeSyncJobVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/DescribeSyncJobVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).DescribeSyncJobVersion(ctx, req.(*pbrequest.DescribeSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_GetSyncJobVersionConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetSyncJobConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).GetSyncJobVersionConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/GetSyncJobVersionConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).GetSyncJobVersionConf(ctx, req.(*pbrequest.GetSyncJobConf))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_GetSyncJobVersionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetSyncJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).GetSyncJobVersionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/GetSyncJobVersionSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).GetSyncJobVersionSchedule(ctx, req.(*pbrequest.GetSyncJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncJobManage_DescribeSyncFlinkUIByInstanceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeSyncFlinkUIByInstanceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncJobManageServer).DescribeSyncFlinkUIByInstanceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.SyncJobManage/DescribeSyncFlinkUIByInstanceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncJobManageServer).DescribeSyncFlinkUIByInstanceId(ctx, req.(*pbrequest.DescribeSyncFlinkUIByInstanceId))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncJobManage_ServiceDesc is the grpc.ServiceDesc for SyncJobManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncJobManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.SyncJobManage",
	HandlerType: (*SyncJobManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSyncJobs",
			Handler:    _SyncJobManage_ListSyncJobs_Handler,
		},
		{
			MethodName: "DeleteSyncJobs",
			Handler:    _SyncJobManage_DeleteSyncJobs_Handler,
		},
		{
			MethodName: "MoveSyncJobs",
			Handler:    _SyncJobManage_MoveSyncJobs_Handler,
		},
		{
			MethodName: "CreateSyncJob",
			Handler:    _SyncJobManage_CreateSyncJob_Handler,
		},
		{
			MethodName: "UpdateSyncJob",
			Handler:    _SyncJobManage_UpdateSyncJob_Handler,
		},
		{
			MethodName: "DescribeSyncJob",
			Handler:    _SyncJobManage_DescribeSyncJob_Handler,
		},
		{
			MethodName: "SetSyncJobConf",
			Handler:    _SyncJobManage_SetSyncJobConf_Handler,
		},
		{
			MethodName: "GetSyncJobConf",
			Handler:    _SyncJobManage_GetSyncJobConf_Handler,
		},
		{
			MethodName: "SetSyncJobSchedule",
			Handler:    _SyncJobManage_SetSyncJobSchedule_Handler,
		},
		{
			MethodName: "GetSyncJobSchedule",
			Handler:    _SyncJobManage_GetSyncJobSchedule_Handler,
		},
		{
			MethodName: "ReleaseSyncJob",
			Handler:    _SyncJobManage_ReleaseSyncJob_Handler,
		},
		{
			MethodName: "OfflineReleaseSyncJob",
			Handler:    _SyncJobManage_OfflineReleaseSyncJob_Handler,
		},
		{
			MethodName: "SuspendReleaseSyncJob",
			Handler:    _SyncJobManage_SuspendReleaseSyncJob_Handler,
		},
		{
			MethodName: "ResumeReleaseSyncJob",
			Handler:    _SyncJobManage_ResumeReleaseSyncJob_Handler,
		},
		{
			MethodName: "ListReleaseSyncJobs",
			Handler:    _SyncJobManage_ListReleaseSyncJobs_Handler,
		},
		{
			MethodName: "ListSyncJobVersions",
			Handler:    _SyncJobManage_ListSyncJobVersions_Handler,
		},
		{
			MethodName: "DescribeSyncJobVersion",
			Handler:    _SyncJobManage_DescribeSyncJobVersion_Handler,
		},
		{
			MethodName: "GetSyncJobVersionConf",
			Handler:    _SyncJobManage_GetSyncJobVersionConf_Handler,
		},
		{
			MethodName: "GetSyncJobVersionSchedule",
			Handler:    _SyncJobManage_GetSyncJobVersionSchedule_Handler,
		},
		{
			MethodName: "DescribeSyncFlinkUIByInstanceId",
			Handler:    _SyncJobManage_DescribeSyncFlinkUIByInstanceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/sync_job_manage.proto",
}
