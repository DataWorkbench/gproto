// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/iaas_proxy.proto

package pbsvcspace

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IaaSProxyClient is the client API for IaaSProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IaaSProxyClient interface {
	ListIaaSRouters(ctx context.Context, in *pbrequest.ListIaaSRouters, opts ...grpc.CallOption) (*pbresponse.ListIaaSRouters, error)
	ListIaaSRouterVXNets(ctx context.Context, in *pbrequest.ListIaaSRouterVXNets, opts ...grpc.CallOption) (*pbresponse.ListIaaSRouterVXNets, error)
}

type iaaSProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewIaaSProxyClient(cc grpc.ClientConnInterface) IaaSProxyClient {
	return &iaaSProxyClient{cc}
}

func (c *iaaSProxyClient) ListIaaSRouters(ctx context.Context, in *pbrequest.ListIaaSRouters, opts ...grpc.CallOption) (*pbresponse.ListIaaSRouters, error) {
	out := new(pbresponse.ListIaaSRouters)
	err := c.cc.Invoke(ctx, "/spacemanager.IaaSProxy/ListIaaSRouters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iaaSProxyClient) ListIaaSRouterVXNets(ctx context.Context, in *pbrequest.ListIaaSRouterVXNets, opts ...grpc.CallOption) (*pbresponse.ListIaaSRouterVXNets, error) {
	out := new(pbresponse.ListIaaSRouterVXNets)
	err := c.cc.Invoke(ctx, "/spacemanager.IaaSProxy/ListIaaSRouterVXNets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IaaSProxyServer is the server API for IaaSProxy service.
// All implementations must embed UnimplementedIaaSProxyServer
// for forward compatibility
type IaaSProxyServer interface {
	ListIaaSRouters(context.Context, *pbrequest.ListIaaSRouters) (*pbresponse.ListIaaSRouters, error)
	ListIaaSRouterVXNets(context.Context, *pbrequest.ListIaaSRouterVXNets) (*pbresponse.ListIaaSRouterVXNets, error)
	mustEmbedUnimplementedIaaSProxyServer()
}

// UnimplementedIaaSProxyServer must be embedded to have forward compatible implementations.
type UnimplementedIaaSProxyServer struct {
}

func (UnimplementedIaaSProxyServer) ListIaaSRouters(context.Context, *pbrequest.ListIaaSRouters) (*pbresponse.ListIaaSRouters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIaaSRouters not implemented")
}
func (UnimplementedIaaSProxyServer) ListIaaSRouterVXNets(context.Context, *pbrequest.ListIaaSRouterVXNets) (*pbresponse.ListIaaSRouterVXNets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIaaSRouterVXNets not implemented")
}
func (UnimplementedIaaSProxyServer) mustEmbedUnimplementedIaaSProxyServer() {}

// UnsafeIaaSProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IaaSProxyServer will
// result in compilation errors.
type UnsafeIaaSProxyServer interface {
	mustEmbedUnimplementedIaaSProxyServer()
}

func RegisterIaaSProxyServer(s grpc.ServiceRegistrar, srv IaaSProxyServer) {
	s.RegisterService(&IaaSProxy_ServiceDesc, srv)
}

func _IaaSProxy_ListIaaSRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListIaaSRouters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IaaSProxyServer).ListIaaSRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.IaaSProxy/ListIaaSRouters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IaaSProxyServer).ListIaaSRouters(ctx, req.(*pbrequest.ListIaaSRouters))
	}
	return interceptor(ctx, in, info, handler)
}

func _IaaSProxy_ListIaaSRouterVXNets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListIaaSRouterVXNets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IaaSProxyServer).ListIaaSRouterVXNets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.IaaSProxy/ListIaaSRouterVXNets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IaaSProxyServer).ListIaaSRouterVXNets(ctx, req.(*pbrequest.ListIaaSRouterVXNets))
	}
	return interceptor(ctx, in, info, handler)
}

// IaaSProxy_ServiceDesc is the grpc.ServiceDesc for IaaSProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IaaSProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.IaaSProxy",
	HandlerType: (*IaaSProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIaaSRouters",
			Handler:    _IaaSProxy_ListIaaSRouters_Handler,
		},
		{
			MethodName: "ListIaaSRouterVXNets",
			Handler:    _IaaSProxy_ListIaaSRouterVXNets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/iaas_proxy.proto",
}
