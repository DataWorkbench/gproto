// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/file_meta_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileMetaManageClient is the client API for FileMetaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileMetaManageClient interface {
	// CreateFilePrepare used for before write data.
	// Do:
	//   Generated a new id.
	//   Generated a new version.
	//   Check name conflict.
	//   Check quota.
	CreateFilePrepare(ctx context.Context, in *pbrequest.CreateFilePrepare, opts ...grpc.CallOption) (*pbresponse.CreateFilePrepare, error)
	// CreateFileMeta for create metadata after write data success.
	CreateFileMeta(ctx context.Context, in *pbrequest.CreateFileMeta, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// CreateFilePrepare used for before write data.
	// Do:
	//   Generated a new version.
	//   Check quota.
	ReCreateFilePrepare(ctx context.Context, in *pbrequest.ReCreateFilePrepare, opts ...grpc.CallOption) (*pbresponse.ReCreateFilePrepare, error)
	// ReCreateFileMeta for update meta after re-upload file.
	ReCreateFileMeta(ctx context.Context, in *pbrequest.ReCreateFileMeta, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeFileMeta(ctx context.Context, in *pbrequest.DescribeFileMeta, opts ...grpc.CallOption) (*pbresponse.DescribeFileMeta, error)
	UpdateFileMeta(ctx context.Context, in *pbrequest.UpdateFileMeta, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListFileMetas(ctx context.Context, in *pbrequest.ListFileMetas, opts ...grpc.CallOption) (*pbresponse.ListFileMetas, error)
	DeleteFileMetas(ctx context.Context, in *pbrequest.DeleteFileMetas, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type fileMetaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewFileMetaManageClient(cc grpc.ClientConnInterface) FileMetaManageClient {
	return &fileMetaManageClient{cc}
}

func (c *fileMetaManageClient) CreateFilePrepare(ctx context.Context, in *pbrequest.CreateFilePrepare, opts ...grpc.CallOption) (*pbresponse.CreateFilePrepare, error) {
	out := new(pbresponse.CreateFilePrepare)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/CreateFilePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) CreateFileMeta(ctx context.Context, in *pbrequest.CreateFileMeta, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/CreateFileMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) ReCreateFilePrepare(ctx context.Context, in *pbrequest.ReCreateFilePrepare, opts ...grpc.CallOption) (*pbresponse.ReCreateFilePrepare, error) {
	out := new(pbresponse.ReCreateFilePrepare)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/ReCreateFilePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) ReCreateFileMeta(ctx context.Context, in *pbrequest.ReCreateFileMeta, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/ReCreateFileMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) DescribeFileMeta(ctx context.Context, in *pbrequest.DescribeFileMeta, opts ...grpc.CallOption) (*pbresponse.DescribeFileMeta, error) {
	out := new(pbresponse.DescribeFileMeta)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/DescribeFileMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) UpdateFileMeta(ctx context.Context, in *pbrequest.UpdateFileMeta, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/UpdateFileMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) ListFileMetas(ctx context.Context, in *pbrequest.ListFileMetas, opts ...grpc.CallOption) (*pbresponse.ListFileMetas, error) {
	out := new(pbresponse.ListFileMetas)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/ListFileMetas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetaManageClient) DeleteFileMetas(ctx context.Context, in *pbrequest.DeleteFileMetas, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.FileMetaManage/DeleteFileMetas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileMetaManageServer is the server API for FileMetaManage service.
// All implementations must embed UnimplementedFileMetaManageServer
// for forward compatibility
type FileMetaManageServer interface {
	// CreateFilePrepare used for before write data.
	// Do:
	//   Generated a new id.
	//   Generated a new version.
	//   Check name conflict.
	//   Check quota.
	CreateFilePrepare(context.Context, *pbrequest.CreateFilePrepare) (*pbresponse.CreateFilePrepare, error)
	// CreateFileMeta for create metadata after write data success.
	CreateFileMeta(context.Context, *pbrequest.CreateFileMeta) (*pbmodel.EmptyStruct, error)
	// CreateFilePrepare used for before write data.
	// Do:
	//   Generated a new version.
	//   Check quota.
	ReCreateFilePrepare(context.Context, *pbrequest.ReCreateFilePrepare) (*pbresponse.ReCreateFilePrepare, error)
	// ReCreateFileMeta for update meta after re-upload file.
	ReCreateFileMeta(context.Context, *pbrequest.ReCreateFileMeta) (*pbmodel.EmptyStruct, error)
	DescribeFileMeta(context.Context, *pbrequest.DescribeFileMeta) (*pbresponse.DescribeFileMeta, error)
	UpdateFileMeta(context.Context, *pbrequest.UpdateFileMeta) (*pbmodel.EmptyStruct, error)
	ListFileMetas(context.Context, *pbrequest.ListFileMetas) (*pbresponse.ListFileMetas, error)
	DeleteFileMetas(context.Context, *pbrequest.DeleteFileMetas) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedFileMetaManageServer()
}

// UnimplementedFileMetaManageServer must be embedded to have forward compatible implementations.
type UnimplementedFileMetaManageServer struct {
}

func (UnimplementedFileMetaManageServer) CreateFilePrepare(context.Context, *pbrequest.CreateFilePrepare) (*pbresponse.CreateFilePrepare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilePrepare not implemented")
}
func (UnimplementedFileMetaManageServer) CreateFileMeta(context.Context, *pbrequest.CreateFileMeta) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileMeta not implemented")
}
func (UnimplementedFileMetaManageServer) ReCreateFilePrepare(context.Context, *pbrequest.ReCreateFilePrepare) (*pbresponse.ReCreateFilePrepare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReCreateFilePrepare not implemented")
}
func (UnimplementedFileMetaManageServer) ReCreateFileMeta(context.Context, *pbrequest.ReCreateFileMeta) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReCreateFileMeta not implemented")
}
func (UnimplementedFileMetaManageServer) DescribeFileMeta(context.Context, *pbrequest.DescribeFileMeta) (*pbresponse.DescribeFileMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFileMeta not implemented")
}
func (UnimplementedFileMetaManageServer) UpdateFileMeta(context.Context, *pbrequest.UpdateFileMeta) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMeta not implemented")
}
func (UnimplementedFileMetaManageServer) ListFileMetas(context.Context, *pbrequest.ListFileMetas) (*pbresponse.ListFileMetas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileMetas not implemented")
}
func (UnimplementedFileMetaManageServer) DeleteFileMetas(context.Context, *pbrequest.DeleteFileMetas) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileMetas not implemented")
}
func (UnimplementedFileMetaManageServer) mustEmbedUnimplementedFileMetaManageServer() {}

// UnsafeFileMetaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileMetaManageServer will
// result in compilation errors.
type UnsafeFileMetaManageServer interface {
	mustEmbedUnimplementedFileMetaManageServer()
}

func RegisterFileMetaManageServer(s grpc.ServiceRegistrar, srv FileMetaManageServer) {
	s.RegisterService(&FileMetaManage_ServiceDesc, srv)
}

func _FileMetaManage_CreateFilePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateFilePrepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).CreateFilePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/CreateFilePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).CreateFilePrepare(ctx, req.(*pbrequest.CreateFilePrepare))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_CreateFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateFileMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).CreateFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/CreateFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).CreateFileMeta(ctx, req.(*pbrequest.CreateFileMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_ReCreateFilePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ReCreateFilePrepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).ReCreateFilePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/ReCreateFilePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).ReCreateFilePrepare(ctx, req.(*pbrequest.ReCreateFilePrepare))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_ReCreateFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ReCreateFileMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).ReCreateFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/ReCreateFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).ReCreateFileMeta(ctx, req.(*pbrequest.ReCreateFileMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_DescribeFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeFileMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).DescribeFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/DescribeFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).DescribeFileMeta(ctx, req.(*pbrequest.DescribeFileMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_UpdateFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateFileMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).UpdateFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/UpdateFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).UpdateFileMeta(ctx, req.(*pbrequest.UpdateFileMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_ListFileMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListFileMetas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).ListFileMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/ListFileMetas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).ListFileMetas(ctx, req.(*pbrequest.ListFileMetas))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetaManage_DeleteFileMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFileMetas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetaManageServer).DeleteFileMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.FileMetaManage/DeleteFileMetas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetaManageServer).DeleteFileMetas(ctx, req.(*pbrequest.DeleteFileMetas))
	}
	return interceptor(ctx, in, info, handler)
}

// FileMetaManage_ServiceDesc is the grpc.ServiceDesc for FileMetaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileMetaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.FileMetaManage",
	HandlerType: (*FileMetaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilePrepare",
			Handler:    _FileMetaManage_CreateFilePrepare_Handler,
		},
		{
			MethodName: "CreateFileMeta",
			Handler:    _FileMetaManage_CreateFileMeta_Handler,
		},
		{
			MethodName: "ReCreateFilePrepare",
			Handler:    _FileMetaManage_ReCreateFilePrepare_Handler,
		},
		{
			MethodName: "ReCreateFileMeta",
			Handler:    _FileMetaManage_ReCreateFileMeta_Handler,
		},
		{
			MethodName: "DescribeFileMeta",
			Handler:    _FileMetaManage_DescribeFileMeta_Handler,
		},
		{
			MethodName: "UpdateFileMeta",
			Handler:    _FileMetaManage_UpdateFileMeta_Handler,
		},
		{
			MethodName: "ListFileMetas",
			Handler:    _FileMetaManage_ListFileMetas_Handler,
		},
		{
			MethodName: "DeleteFileMetas",
			Handler:    _FileMetaManage_DeleteFileMetas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/file_meta_manage.proto",
}
