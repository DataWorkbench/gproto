// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/opaudit_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpAuditManageClient is the client API for OpAuditManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpAuditManageClient interface {
	// API of workspace operation audit log.
	ListOpAudits(ctx context.Context, in *pbrequest.ListOpAudits, opts ...grpc.CallOption) (*pbresponse.ListOpAudits, error)
	AddOpAudit(ctx context.Context, in *pbrequest.AddOpAudit, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type opAuditManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOpAuditManageClient(cc grpc.ClientConnInterface) OpAuditManageClient {
	return &opAuditManageClient{cc}
}

func (c *opAuditManageClient) ListOpAudits(ctx context.Context, in *pbrequest.ListOpAudits, opts ...grpc.CallOption) (*pbresponse.ListOpAudits, error) {
	out := new(pbresponse.ListOpAudits)
	err := c.cc.Invoke(ctx, "/spacemanager.OpAuditManage/ListOpAudits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opAuditManageClient) AddOpAudit(ctx context.Context, in *pbrequest.AddOpAudit, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.OpAuditManage/AddOpAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpAuditManageServer is the server API for OpAuditManage service.
// All implementations must embed UnimplementedOpAuditManageServer
// for forward compatibility
type OpAuditManageServer interface {
	// API of workspace operation audit log.
	ListOpAudits(context.Context, *pbrequest.ListOpAudits) (*pbresponse.ListOpAudits, error)
	AddOpAudit(context.Context, *pbrequest.AddOpAudit) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedOpAuditManageServer()
}

// UnimplementedOpAuditManageServer must be embedded to have forward compatible implementations.
type UnimplementedOpAuditManageServer struct {
}

func (UnimplementedOpAuditManageServer) ListOpAudits(context.Context, *pbrequest.ListOpAudits) (*pbresponse.ListOpAudits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpAudits not implemented")
}
func (UnimplementedOpAuditManageServer) AddOpAudit(context.Context, *pbrequest.AddOpAudit) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOpAudit not implemented")
}
func (UnimplementedOpAuditManageServer) mustEmbedUnimplementedOpAuditManageServer() {}

// UnsafeOpAuditManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpAuditManageServer will
// result in compilation errors.
type UnsafeOpAuditManageServer interface {
	mustEmbedUnimplementedOpAuditManageServer()
}

func RegisterOpAuditManageServer(s grpc.ServiceRegistrar, srv OpAuditManageServer) {
	s.RegisterService(&OpAuditManage_ServiceDesc, srv)
}

func _OpAuditManage_ListOpAudits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListOpAudits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpAuditManageServer).ListOpAudits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.OpAuditManage/ListOpAudits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpAuditManageServer).ListOpAudits(ctx, req.(*pbrequest.ListOpAudits))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpAuditManage_AddOpAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.AddOpAudit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpAuditManageServer).AddOpAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.OpAuditManage/AddOpAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpAuditManageServer).AddOpAudit(ctx, req.(*pbrequest.AddOpAudit))
	}
	return interceptor(ctx, in, info, handler)
}

// OpAuditManage_ServiceDesc is the grpc.ServiceDesc for OpAuditManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpAuditManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.OpAuditManage",
	HandlerType: (*OpAuditManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOpAudits",
			Handler:    _OpAuditManage_ListOpAudits_Handler,
		},
		{
			MethodName: "AddOpAudit",
			Handler:    _OpAuditManage_AddOpAudit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/opaudit_manage.proto",
}
