// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/udfmanager/udf_manage.proto

package pbsvcudf

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UdfManageClient is the client API for UdfManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UdfManageClient interface {
	Create(ctx context.Context, in *pbrequest.CreateUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	Update(ctx context.Context, in *pbrequest.UpdateUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	Describe(ctx context.Context, in *pbrequest.DescribeUDF, opts ...grpc.CallOption) (*pbresponse.DescribeUDF, error)
	Delete(ctx context.Context, in *pbrequest.DeleteUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteAll(ctx context.Context, in *pbrequest.DeleteWorkspaces, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	List(ctx context.Context, in *pbrequest.ListUDF, opts ...grpc.CallOption) (*pbresponse.ListUDF, error)
	CommonFunc(ctx context.Context, in *pbrequest.UDFCommonFunc, opts ...grpc.CallOption) (*pbresponse.JsonList, error)
}

type udfManageClient struct {
	cc grpc.ClientConnInterface
}

func NewUdfManageClient(cc grpc.ClientConnInterface) UdfManageClient {
	return &udfManageClient{cc}
}

func (c *udfManageClient) Create(ctx context.Context, in *pbrequest.CreateUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfManageClient) Update(ctx context.Context, in *pbrequest.UpdateUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfManageClient) Describe(ctx context.Context, in *pbrequest.DescribeUDF, opts ...grpc.CallOption) (*pbresponse.DescribeUDF, error) {
	out := new(pbresponse.DescribeUDF)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfManageClient) Delete(ctx context.Context, in *pbrequest.DeleteUDF, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfManageClient) DeleteAll(ctx context.Context, in *pbrequest.DeleteWorkspaces, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfManageClient) List(ctx context.Context, in *pbrequest.ListUDF, opts ...grpc.CallOption) (*pbresponse.ListUDF, error) {
	out := new(pbresponse.ListUDF)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfManageClient) CommonFunc(ctx context.Context, in *pbrequest.UDFCommonFunc, opts ...grpc.CallOption) (*pbresponse.JsonList, error) {
	out := new(pbresponse.JsonList)
	err := c.cc.Invoke(ctx, "/udfmanager.UdfManage/CommonFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UdfManageServer is the server API for UdfManage service.
// All implementations must embed UnimplementedUdfManageServer
// for forward compatibility
type UdfManageServer interface {
	Create(context.Context, *pbrequest.CreateUDF) (*pbmodel.EmptyStruct, error)
	Update(context.Context, *pbrequest.UpdateUDF) (*pbmodel.EmptyStruct, error)
	Describe(context.Context, *pbrequest.DescribeUDF) (*pbresponse.DescribeUDF, error)
	Delete(context.Context, *pbrequest.DeleteUDF) (*pbmodel.EmptyStruct, error)
	DeleteAll(context.Context, *pbrequest.DeleteWorkspaces) (*pbmodel.EmptyStruct, error)
	List(context.Context, *pbrequest.ListUDF) (*pbresponse.ListUDF, error)
	CommonFunc(context.Context, *pbrequest.UDFCommonFunc) (*pbresponse.JsonList, error)
	mustEmbedUnimplementedUdfManageServer()
}

// UnimplementedUdfManageServer must be embedded to have forward compatible implementations.
type UnimplementedUdfManageServer struct {
}

func (UnimplementedUdfManageServer) Create(context.Context, *pbrequest.CreateUDF) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUdfManageServer) Update(context.Context, *pbrequest.UpdateUDF) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUdfManageServer) Describe(context.Context, *pbrequest.DescribeUDF) (*pbresponse.DescribeUDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedUdfManageServer) Delete(context.Context, *pbrequest.DeleteUDF) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUdfManageServer) DeleteAll(context.Context, *pbrequest.DeleteWorkspaces) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedUdfManageServer) List(context.Context, *pbrequest.ListUDF) (*pbresponse.ListUDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUdfManageServer) CommonFunc(context.Context, *pbrequest.UDFCommonFunc) (*pbresponse.JsonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonFunc not implemented")
}
func (UnimplementedUdfManageServer) mustEmbedUnimplementedUdfManageServer() {}

// UnsafeUdfManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UdfManageServer will
// result in compilation errors.
type UnsafeUdfManageServer interface {
	mustEmbedUnimplementedUdfManageServer()
}

func RegisterUdfManageServer(s grpc.ServiceRegistrar, srv UdfManageServer) {
	s.RegisterService(&UdfManage_ServiceDesc, srv)
}

func _UdfManage_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).Create(ctx, req.(*pbrequest.CreateUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdfManage_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).Update(ctx, req.(*pbrequest.UpdateUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdfManage_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).Describe(ctx, req.(*pbrequest.DescribeUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdfManage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).Delete(ctx, req.(*pbrequest.DeleteUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdfManage_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).DeleteAll(ctx, req.(*pbrequest.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdfManage_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).List(ctx, req.(*pbrequest.ListUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdfManage_CommonFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UDFCommonFunc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfManageServer).CommonFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfmanager.UdfManage/CommonFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfManageServer).CommonFunc(ctx, req.(*pbrequest.UDFCommonFunc))
	}
	return interceptor(ctx, in, info, handler)
}

// UdfManage_ServiceDesc is the grpc.ServiceDesc for UdfManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UdfManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "udfmanager.UdfManage",
	HandlerType: (*UdfManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UdfManage_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UdfManage_Update_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _UdfManage_Describe_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UdfManage_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _UdfManage_DeleteAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UdfManage_List_Handler,
		},
		{
			MethodName: "CommonFunc",
			Handler:    _UdfManage_CommonFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/udfmanager/udf_manage.proto",
}
