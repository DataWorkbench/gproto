// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/developer/job_manage.proto

package pbsvcdeveloper

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobManageClient is the client API for JobManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManageClient interface {
	FreeFlinkJob(ctx context.Context, in *pbrequest.FreeFlinkJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	InitFlinkJob(ctx context.Context, in *pbrequest.InitFlinkJob, opts ...grpc.CallOption) (*pbresponse.InitFlinkJob, error)
	SubmitFlinkJob(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.SubmitFlinkJob, error)
	GetFlinkJob(ctx context.Context, in *pbrequest.GetFlinkJob, opts ...grpc.CallOption) (*pbresponse.GetFlinkJob, error)
	CancelFlinkJob(ctx context.Context, in *pbrequest.CancelFlinkJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ValidateFlinkJob(ctx context.Context, in *pbrequest.ValidateFlinkJob, opts ...grpc.CallOption) (*pbresponse.StreamJobCodeSyntax, error)
}

type jobManageClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManageClient(cc grpc.ClientConnInterface) JobManageClient {
	return &jobManageClient{cc}
}

func (c *jobManageClient) FreeFlinkJob(ctx context.Context, in *pbrequest.FreeFlinkJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/developer.JobManage/FreeFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManageClient) InitFlinkJob(ctx context.Context, in *pbrequest.InitFlinkJob, opts ...grpc.CallOption) (*pbresponse.InitFlinkJob, error) {
	out := new(pbresponse.InitFlinkJob)
	err := c.cc.Invoke(ctx, "/developer.JobManage/InitFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManageClient) SubmitFlinkJob(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.SubmitFlinkJob, error) {
	out := new(pbresponse.SubmitFlinkJob)
	err := c.cc.Invoke(ctx, "/developer.JobManage/SubmitFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManageClient) GetFlinkJob(ctx context.Context, in *pbrequest.GetFlinkJob, opts ...grpc.CallOption) (*pbresponse.GetFlinkJob, error) {
	out := new(pbresponse.GetFlinkJob)
	err := c.cc.Invoke(ctx, "/developer.JobManage/GetFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManageClient) CancelFlinkJob(ctx context.Context, in *pbrequest.CancelFlinkJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/developer.JobManage/CancelFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManageClient) ValidateFlinkJob(ctx context.Context, in *pbrequest.ValidateFlinkJob, opts ...grpc.CallOption) (*pbresponse.StreamJobCodeSyntax, error) {
	out := new(pbresponse.StreamJobCodeSyntax)
	err := c.cc.Invoke(ctx, "/developer.JobManage/ValidateFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManageServer is the server API for JobManage service.
// All implementations must embed UnimplementedJobManageServer
// for forward compatibility
type JobManageServer interface {
	FreeFlinkJob(context.Context, *pbrequest.FreeFlinkJob) (*pbmodel.EmptyStruct, error)
	InitFlinkJob(context.Context, *pbrequest.InitFlinkJob) (*pbresponse.InitFlinkJob, error)
	SubmitFlinkJob(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.SubmitFlinkJob, error)
	GetFlinkJob(context.Context, *pbrequest.GetFlinkJob) (*pbresponse.GetFlinkJob, error)
	CancelFlinkJob(context.Context, *pbrequest.CancelFlinkJob) (*pbmodel.EmptyStruct, error)
	ValidateFlinkJob(context.Context, *pbrequest.ValidateFlinkJob) (*pbresponse.StreamJobCodeSyntax, error)
	mustEmbedUnimplementedJobManageServer()
}

// UnimplementedJobManageServer must be embedded to have forward compatible implementations.
type UnimplementedJobManageServer struct {
}

func (UnimplementedJobManageServer) FreeFlinkJob(context.Context, *pbrequest.FreeFlinkJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeFlinkJob not implemented")
}
func (UnimplementedJobManageServer) InitFlinkJob(context.Context, *pbrequest.InitFlinkJob) (*pbresponse.InitFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFlinkJob not implemented")
}
func (UnimplementedJobManageServer) SubmitFlinkJob(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.SubmitFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFlinkJob not implemented")
}
func (UnimplementedJobManageServer) GetFlinkJob(context.Context, *pbrequest.GetFlinkJob) (*pbresponse.GetFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlinkJob not implemented")
}
func (UnimplementedJobManageServer) CancelFlinkJob(context.Context, *pbrequest.CancelFlinkJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlinkJob not implemented")
}
func (UnimplementedJobManageServer) ValidateFlinkJob(context.Context, *pbrequest.ValidateFlinkJob) (*pbresponse.StreamJobCodeSyntax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateFlinkJob not implemented")
}
func (UnimplementedJobManageServer) mustEmbedUnimplementedJobManageServer() {}

// UnsafeJobManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManageServer will
// result in compilation errors.
type UnsafeJobManageServer interface {
	mustEmbedUnimplementedJobManageServer()
}

func RegisterJobManageServer(s grpc.ServiceRegistrar, srv JobManageServer) {
	s.RegisterService(&JobManage_ServiceDesc, srv)
}

func _JobManage_FreeFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.FreeFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManageServer).FreeFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.JobManage/FreeFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManageServer).FreeFlinkJob(ctx, req.(*pbrequest.FreeFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManage_InitFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.InitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManageServer).InitFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.JobManage/InitFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManageServer).InitFlinkJob(ctx, req.(*pbrequest.InitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManage_SubmitFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManageServer).SubmitFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.JobManage/SubmitFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManageServer).SubmitFlinkJob(ctx, req.(*pbrequest.SubmitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManage_GetFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManageServer).GetFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.JobManage/GetFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManageServer).GetFlinkJob(ctx, req.(*pbrequest.GetFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManage_CancelFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CancelFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManageServer).CancelFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.JobManage/CancelFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManageServer).CancelFlinkJob(ctx, req.(*pbrequest.CancelFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManage_ValidateFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ValidateFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManageServer).ValidateFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.JobManage/ValidateFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManageServer).ValidateFlinkJob(ctx, req.(*pbrequest.ValidateFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

// JobManage_ServiceDesc is the grpc.ServiceDesc for JobManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "developer.JobManage",
	HandlerType: (*JobManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FreeFlinkJob",
			Handler:    _JobManage_FreeFlinkJob_Handler,
		},
		{
			MethodName: "InitFlinkJob",
			Handler:    _JobManage_InitFlinkJob_Handler,
		},
		{
			MethodName: "SubmitFlinkJob",
			Handler:    _JobManage_SubmitFlinkJob_Handler,
		},
		{
			MethodName: "GetFlinkJob",
			Handler:    _JobManage_GetFlinkJob_Handler,
		},
		{
			MethodName: "CancelFlinkJob",
			Handler:    _JobManage_CancelFlinkJob_Handler,
		},
		{
			MethodName: "ValidateFlinkJob",
			Handler:    _JobManage_ValidateFlinkJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/developer/job_manage.proto",
}
