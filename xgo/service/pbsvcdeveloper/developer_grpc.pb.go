// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/developer/developer.proto

package pbsvcdeveloper

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeveloperClient is the client API for Developer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperClient interface {
	SubmitFlinkJob(ctx context.Context, in *pbrequest.SubmitFlinkJobV2, opts ...grpc.CallOption) (*pbresponse.SubmitFlinkJobV2, error)
	GetFlinkJob(ctx context.Context, in *pbrequest.GetFlinkJobV2, opts ...grpc.CallOption) (*pbresponse.GetFlinkJobV2, error)
	CancelFlinkJob(ctx context.Context, in *pbrequest.CancelFlinkJobV2, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ValidateFlinkJob(ctx context.Context, in *pbrequest.ValidateFlinkJobV2, opts ...grpc.CallOption) (*pbresponse.ValidateFlinkJobV2, error)
}

type developerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperClient(cc grpc.ClientConnInterface) DeveloperClient {
	return &developerClient{cc}
}

func (c *developerClient) SubmitFlinkJob(ctx context.Context, in *pbrequest.SubmitFlinkJobV2, opts ...grpc.CallOption) (*pbresponse.SubmitFlinkJobV2, error) {
	out := new(pbresponse.SubmitFlinkJobV2)
	err := c.cc.Invoke(ctx, "/developer.Developer/SubmitFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) GetFlinkJob(ctx context.Context, in *pbrequest.GetFlinkJobV2, opts ...grpc.CallOption) (*pbresponse.GetFlinkJobV2, error) {
	out := new(pbresponse.GetFlinkJobV2)
	err := c.cc.Invoke(ctx, "/developer.Developer/GetFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) CancelFlinkJob(ctx context.Context, in *pbrequest.CancelFlinkJobV2, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/developer.Developer/CancelFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) ValidateFlinkJob(ctx context.Context, in *pbrequest.ValidateFlinkJobV2, opts ...grpc.CallOption) (*pbresponse.ValidateFlinkJobV2, error) {
	out := new(pbresponse.ValidateFlinkJobV2)
	err := c.cc.Invoke(ctx, "/developer.Developer/ValidateFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperServer is the server API for Developer service.
// All implementations must embed UnimplementedDeveloperServer
// for forward compatibility
type DeveloperServer interface {
	SubmitFlinkJob(context.Context, *pbrequest.SubmitFlinkJobV2) (*pbresponse.SubmitFlinkJobV2, error)
	GetFlinkJob(context.Context, *pbrequest.GetFlinkJobV2) (*pbresponse.GetFlinkJobV2, error)
	CancelFlinkJob(context.Context, *pbrequest.CancelFlinkJobV2) (*pbmodel.EmptyStruct, error)
	ValidateFlinkJob(context.Context, *pbrequest.ValidateFlinkJobV2) (*pbresponse.ValidateFlinkJobV2, error)
	mustEmbedUnimplementedDeveloperServer()
}

// UnimplementedDeveloperServer must be embedded to have forward compatible implementations.
type UnimplementedDeveloperServer struct {
}

func (UnimplementedDeveloperServer) SubmitFlinkJob(context.Context, *pbrequest.SubmitFlinkJobV2) (*pbresponse.SubmitFlinkJobV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFlinkJob not implemented")
}
func (UnimplementedDeveloperServer) GetFlinkJob(context.Context, *pbrequest.GetFlinkJobV2) (*pbresponse.GetFlinkJobV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlinkJob not implemented")
}
func (UnimplementedDeveloperServer) CancelFlinkJob(context.Context, *pbrequest.CancelFlinkJobV2) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlinkJob not implemented")
}
func (UnimplementedDeveloperServer) ValidateFlinkJob(context.Context, *pbrequest.ValidateFlinkJobV2) (*pbresponse.ValidateFlinkJobV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateFlinkJob not implemented")
}
func (UnimplementedDeveloperServer) mustEmbedUnimplementedDeveloperServer() {}

// UnsafeDeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperServer will
// result in compilation errors.
type UnsafeDeveloperServer interface {
	mustEmbedUnimplementedDeveloperServer()
}

func RegisterDeveloperServer(s grpc.ServiceRegistrar, srv DeveloperServer) {
	s.RegisterService(&Developer_ServiceDesc, srv)
}

func _Developer_SubmitFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitFlinkJobV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).SubmitFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.Developer/SubmitFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).SubmitFlinkJob(ctx, req.(*pbrequest.SubmitFlinkJobV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_GetFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetFlinkJobV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).GetFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.Developer/GetFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).GetFlinkJob(ctx, req.(*pbrequest.GetFlinkJobV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_CancelFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CancelFlinkJobV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).CancelFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.Developer/CancelFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).CancelFlinkJob(ctx, req.(*pbrequest.CancelFlinkJobV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_ValidateFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ValidateFlinkJobV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).ValidateFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.Developer/ValidateFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).ValidateFlinkJob(ctx, req.(*pbrequest.ValidateFlinkJobV2))
	}
	return interceptor(ctx, in, info, handler)
}

// Developer_ServiceDesc is the grpc.ServiceDesc for Developer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Developer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "developer.Developer",
	HandlerType: (*DeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFlinkJob",
			Handler:    _Developer_SubmitFlinkJob_Handler,
		},
		{
			MethodName: "GetFlinkJob",
			Handler:    _Developer_GetFlinkJob_Handler,
		},
		{
			MethodName: "CancelFlinkJob",
			Handler:    _Developer_CancelFlinkJob_Handler,
		},
		{
			MethodName: "ValidateFlinkJob",
			Handler:    _Developer_ValidateFlinkJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/developer/developer.proto",
}
