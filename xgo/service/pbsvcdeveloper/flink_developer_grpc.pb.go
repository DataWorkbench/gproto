// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/developer/flink_developer.proto

package pbsvcdeveloper

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlinkDeveloperClient is the client API for FlinkDeveloper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlinkDeveloperClient interface {
	SubmitFlinkJob(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.SubmitFlinkJob, error)
	GetFlinkJobStatus(ctx context.Context, in *pbrequest.GetFlinkJobStatus, opts ...grpc.CallOption) (*pbresponse.GetFlinkJobStatus, error)
	CancelFlinkJob(ctx context.Context, in *pbrequest.CancelFlinkJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ValidateFlinkJob(ctx context.Context, in *pbrequest.ValidateFlinkJob, opts ...grpc.CallOption) (*pbresponse.ValidateFlinkJob, error)
	ValidateFlinkJobContext(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.ValidateFlinkJob, error)
	ParseFlinkJobToGraph(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.ParseFlinkJobToGraph, error)
	GetFlinkJobsByUrl(ctx context.Context, in *pbrequest.GetFlinkJobsByUrl, opts ...grpc.CallOption) (*pbresponse.GetFlinkJobsByUrl, error)
}

type flinkDeveloperClient struct {
	cc grpc.ClientConnInterface
}

func NewFlinkDeveloperClient(cc grpc.ClientConnInterface) FlinkDeveloperClient {
	return &flinkDeveloperClient{cc}
}

func (c *flinkDeveloperClient) SubmitFlinkJob(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.SubmitFlinkJob, error) {
	out := new(pbresponse.SubmitFlinkJob)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/SubmitFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkDeveloperClient) GetFlinkJobStatus(ctx context.Context, in *pbrequest.GetFlinkJobStatus, opts ...grpc.CallOption) (*pbresponse.GetFlinkJobStatus, error) {
	out := new(pbresponse.GetFlinkJobStatus)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/GetFlinkJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkDeveloperClient) CancelFlinkJob(ctx context.Context, in *pbrequest.CancelFlinkJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/CancelFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkDeveloperClient) ValidateFlinkJob(ctx context.Context, in *pbrequest.ValidateFlinkJob, opts ...grpc.CallOption) (*pbresponse.ValidateFlinkJob, error) {
	out := new(pbresponse.ValidateFlinkJob)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/ValidateFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkDeveloperClient) ValidateFlinkJobContext(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.ValidateFlinkJob, error) {
	out := new(pbresponse.ValidateFlinkJob)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/ValidateFlinkJobContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkDeveloperClient) ParseFlinkJobToGraph(ctx context.Context, in *pbrequest.SubmitFlinkJob, opts ...grpc.CallOption) (*pbresponse.ParseFlinkJobToGraph, error) {
	out := new(pbresponse.ParseFlinkJobToGraph)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/ParseFlinkJobToGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkDeveloperClient) GetFlinkJobsByUrl(ctx context.Context, in *pbrequest.GetFlinkJobsByUrl, opts ...grpc.CallOption) (*pbresponse.GetFlinkJobsByUrl, error) {
	out := new(pbresponse.GetFlinkJobsByUrl)
	err := c.cc.Invoke(ctx, "/developer.FlinkDeveloper/GetFlinkJobsByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlinkDeveloperServer is the server API for FlinkDeveloper service.
// All implementations must embed UnimplementedFlinkDeveloperServer
// for forward compatibility
type FlinkDeveloperServer interface {
	SubmitFlinkJob(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.SubmitFlinkJob, error)
	GetFlinkJobStatus(context.Context, *pbrequest.GetFlinkJobStatus) (*pbresponse.GetFlinkJobStatus, error)
	CancelFlinkJob(context.Context, *pbrequest.CancelFlinkJob) (*pbmodel.EmptyStruct, error)
	ValidateFlinkJob(context.Context, *pbrequest.ValidateFlinkJob) (*pbresponse.ValidateFlinkJob, error)
	ValidateFlinkJobContext(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.ValidateFlinkJob, error)
	ParseFlinkJobToGraph(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.ParseFlinkJobToGraph, error)
	GetFlinkJobsByUrl(context.Context, *pbrequest.GetFlinkJobsByUrl) (*pbresponse.GetFlinkJobsByUrl, error)
	mustEmbedUnimplementedFlinkDeveloperServer()
}

// UnimplementedFlinkDeveloperServer must be embedded to have forward compatible implementations.
type UnimplementedFlinkDeveloperServer struct {
}

func (UnimplementedFlinkDeveloperServer) SubmitFlinkJob(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.SubmitFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFlinkJob not implemented")
}
func (UnimplementedFlinkDeveloperServer) GetFlinkJobStatus(context.Context, *pbrequest.GetFlinkJobStatus) (*pbresponse.GetFlinkJobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlinkJobStatus not implemented")
}
func (UnimplementedFlinkDeveloperServer) CancelFlinkJob(context.Context, *pbrequest.CancelFlinkJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlinkJob not implemented")
}
func (UnimplementedFlinkDeveloperServer) ValidateFlinkJob(context.Context, *pbrequest.ValidateFlinkJob) (*pbresponse.ValidateFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateFlinkJob not implemented")
}
func (UnimplementedFlinkDeveloperServer) ValidateFlinkJobContext(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.ValidateFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateFlinkJobContext not implemented")
}
func (UnimplementedFlinkDeveloperServer) ParseFlinkJobToGraph(context.Context, *pbrequest.SubmitFlinkJob) (*pbresponse.ParseFlinkJobToGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFlinkJobToGraph not implemented")
}
func (UnimplementedFlinkDeveloperServer) GetFlinkJobsByUrl(context.Context, *pbrequest.GetFlinkJobsByUrl) (*pbresponse.GetFlinkJobsByUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlinkJobsByUrl not implemented")
}
func (UnimplementedFlinkDeveloperServer) mustEmbedUnimplementedFlinkDeveloperServer() {}

// UnsafeFlinkDeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlinkDeveloperServer will
// result in compilation errors.
type UnsafeFlinkDeveloperServer interface {
	mustEmbedUnimplementedFlinkDeveloperServer()
}

func RegisterFlinkDeveloperServer(s grpc.ServiceRegistrar, srv FlinkDeveloperServer) {
	s.RegisterService(&FlinkDeveloper_ServiceDesc, srv)
}

func _FlinkDeveloper_SubmitFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).SubmitFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/SubmitFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).SubmitFlinkJob(ctx, req.(*pbrequest.SubmitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkDeveloper_GetFlinkJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetFlinkJobStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).GetFlinkJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/GetFlinkJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).GetFlinkJobStatus(ctx, req.(*pbrequest.GetFlinkJobStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkDeveloper_CancelFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CancelFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).CancelFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/CancelFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).CancelFlinkJob(ctx, req.(*pbrequest.CancelFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkDeveloper_ValidateFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ValidateFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).ValidateFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/ValidateFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).ValidateFlinkJob(ctx, req.(*pbrequest.ValidateFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkDeveloper_ValidateFlinkJobContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).ValidateFlinkJobContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/ValidateFlinkJobContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).ValidateFlinkJobContext(ctx, req.(*pbrequest.SubmitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkDeveloper_ParseFlinkJobToGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).ParseFlinkJobToGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/ParseFlinkJobToGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).ParseFlinkJobToGraph(ctx, req.(*pbrequest.SubmitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkDeveloper_GetFlinkJobsByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetFlinkJobsByUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkDeveloperServer).GetFlinkJobsByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/developer.FlinkDeveloper/GetFlinkJobsByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkDeveloperServer).GetFlinkJobsByUrl(ctx, req.(*pbrequest.GetFlinkJobsByUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// FlinkDeveloper_ServiceDesc is the grpc.ServiceDesc for FlinkDeveloper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlinkDeveloper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "developer.FlinkDeveloper",
	HandlerType: (*FlinkDeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFlinkJob",
			Handler:    _FlinkDeveloper_SubmitFlinkJob_Handler,
		},
		{
			MethodName: "GetFlinkJobStatus",
			Handler:    _FlinkDeveloper_GetFlinkJobStatus_Handler,
		},
		{
			MethodName: "CancelFlinkJob",
			Handler:    _FlinkDeveloper_CancelFlinkJob_Handler,
		},
		{
			MethodName: "ValidateFlinkJob",
			Handler:    _FlinkDeveloper_ValidateFlinkJob_Handler,
		},
		{
			MethodName: "ValidateFlinkJobContext",
			Handler:    _FlinkDeveloper_ValidateFlinkJobContext_Handler,
		},
		{
			MethodName: "ParseFlinkJobToGraph",
			Handler:    _FlinkDeveloper_ParseFlinkJobToGraph_Handler,
		},
		{
			MethodName: "GetFlinkJobsByUrl",
			Handler:    _FlinkDeveloper_GetFlinkJobsByUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/developer/flink_developer.proto",
}
