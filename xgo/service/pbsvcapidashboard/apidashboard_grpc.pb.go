// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/apidashboard/apidashboard.proto

package pbsvcapidashboard

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiDashboardClient is the client API for ApiDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiDashboardClient interface {
	CreateRoute(ctx context.Context, in *pbrequest.CreateRoute, opts ...grpc.CallOption) (*pbresponse.CreateRoute, error)
	DeleteRoute(ctx context.Context, in *pbrequest.DeleteRoute, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListRoutes(ctx context.Context, in *pbrequest.ListRoutes, opts ...grpc.CallOption) (*pbresponse.ListRoutes, error)
	UpdateRoute(ctx context.Context, in *pbrequest.UpdateRoute, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	CreateUpstream(ctx context.Context, in *pbrequest.CreateUpstream, opts ...grpc.CallOption) (*pbresponse.CreateUpstream, error)
	DeleteUpstream(ctx context.Context, in *pbrequest.DeleteUpstream, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UpdateUpstream(ctx context.Context, in *pbrequest.UpdateUpstream, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListUpstreams(ctx context.Context, in *pbrequest.ListUpstreams, opts ...grpc.CallOption) (*pbresponse.ListUpstreams, error)
	CreateSSL(ctx context.Context, in *pbrequest.CreateSSL, opts ...grpc.CallOption) (*pbresponse.CreateSSL, error)
	DeleteSSL(ctx context.Context, in *pbrequest.DeleteSSL, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListSSLs(ctx context.Context, in *pbrequest.ListSSLs, opts ...grpc.CallOption) (*pbresponse.ListSSLs, error)
	CreateApiService(ctx context.Context, in *pbrequest.CreateApiService, opts ...grpc.CallOption) (*pbresponse.CreateApiService, error)
	DeleteApiService(ctx context.Context, in *pbrequest.DeleteApiService, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UpdateApiService(ctx context.Context, in *pbrequest.UpdateApiService, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListApiServices(ctx context.Context, in *pbrequest.ListApiServices, opts ...grpc.CallOption) (*pbresponse.ListApiServices, error)
	AddSvcReqCount(ctx context.Context, in *pbrequest.AddSvcReqCount, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	GetSvcReqCount(ctx context.Context, in *pbrequest.GetSvcReqCount, opts ...grpc.CallOption) (*pbresponse.GetSvcReqCount, error)
	DeleteClusterRoutes(ctx context.Context, in *pbrequest.DeleteClusterRoutes, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	CreateAuthKey(ctx context.Context, in *pbrequest.CreateAuthKey, opts ...grpc.CallOption) (*pbresponse.CreateAuthKey, error)
	DeleteAuthKey(ctx context.Context, in *pbrequest.DeleteAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UpdateAuthKey(ctx context.Context, in *pbrequest.UpdateAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ListAuthKeys(ctx context.Context, in *pbrequest.ListAuthKeys, opts ...grpc.CallOption) (*pbresponse.ListAuthKeys, error)
	BindAuthKey(ctx context.Context, in *pbrequest.BindAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UnbindAuthKey(ctx context.Context, in *pbrequest.UnbindAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type apiDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewApiDashboardClient(cc grpc.ClientConnInterface) ApiDashboardClient {
	return &apiDashboardClient{cc}
}

func (c *apiDashboardClient) CreateRoute(ctx context.Context, in *pbrequest.CreateRoute, opts ...grpc.CallOption) (*pbresponse.CreateRoute, error) {
	out := new(pbresponse.CreateRoute)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/CreateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) DeleteRoute(ctx context.Context, in *pbrequest.DeleteRoute, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) ListRoutes(ctx context.Context, in *pbrequest.ListRoutes, opts ...grpc.CallOption) (*pbresponse.ListRoutes, error) {
	out := new(pbresponse.ListRoutes)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) UpdateRoute(ctx context.Context, in *pbrequest.UpdateRoute, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/UpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) CreateUpstream(ctx context.Context, in *pbrequest.CreateUpstream, opts ...grpc.CallOption) (*pbresponse.CreateUpstream, error) {
	out := new(pbresponse.CreateUpstream)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/CreateUpstream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) DeleteUpstream(ctx context.Context, in *pbrequest.DeleteUpstream, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/DeleteUpstream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) UpdateUpstream(ctx context.Context, in *pbrequest.UpdateUpstream, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/UpdateUpstream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) ListUpstreams(ctx context.Context, in *pbrequest.ListUpstreams, opts ...grpc.CallOption) (*pbresponse.ListUpstreams, error) {
	out := new(pbresponse.ListUpstreams)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/ListUpstreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) CreateSSL(ctx context.Context, in *pbrequest.CreateSSL, opts ...grpc.CallOption) (*pbresponse.CreateSSL, error) {
	out := new(pbresponse.CreateSSL)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/CreateSSL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) DeleteSSL(ctx context.Context, in *pbrequest.DeleteSSL, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/DeleteSSL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) ListSSLs(ctx context.Context, in *pbrequest.ListSSLs, opts ...grpc.CallOption) (*pbresponse.ListSSLs, error) {
	out := new(pbresponse.ListSSLs)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/ListSSLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) CreateApiService(ctx context.Context, in *pbrequest.CreateApiService, opts ...grpc.CallOption) (*pbresponse.CreateApiService, error) {
	out := new(pbresponse.CreateApiService)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/CreateApiService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) DeleteApiService(ctx context.Context, in *pbrequest.DeleteApiService, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/DeleteApiService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) UpdateApiService(ctx context.Context, in *pbrequest.UpdateApiService, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/UpdateApiService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) ListApiServices(ctx context.Context, in *pbrequest.ListApiServices, opts ...grpc.CallOption) (*pbresponse.ListApiServices, error) {
	out := new(pbresponse.ListApiServices)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/ListApiServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) AddSvcReqCount(ctx context.Context, in *pbrequest.AddSvcReqCount, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/AddSvcReqCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) GetSvcReqCount(ctx context.Context, in *pbrequest.GetSvcReqCount, opts ...grpc.CallOption) (*pbresponse.GetSvcReqCount, error) {
	out := new(pbresponse.GetSvcReqCount)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/GetSvcReqCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) DeleteClusterRoutes(ctx context.Context, in *pbrequest.DeleteClusterRoutes, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/DeleteClusterRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) CreateAuthKey(ctx context.Context, in *pbrequest.CreateAuthKey, opts ...grpc.CallOption) (*pbresponse.CreateAuthKey, error) {
	out := new(pbresponse.CreateAuthKey)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/CreateAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) DeleteAuthKey(ctx context.Context, in *pbrequest.DeleteAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/DeleteAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) UpdateAuthKey(ctx context.Context, in *pbrequest.UpdateAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/UpdateAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) ListAuthKeys(ctx context.Context, in *pbrequest.ListAuthKeys, opts ...grpc.CallOption) (*pbresponse.ListAuthKeys, error) {
	out := new(pbresponse.ListAuthKeys)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/ListAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) BindAuthKey(ctx context.Context, in *pbrequest.BindAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/BindAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDashboardClient) UnbindAuthKey(ctx context.Context, in *pbrequest.UnbindAuthKey, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/apidashboard.ApiDashboard/UnbindAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiDashboardServer is the server API for ApiDashboard service.
// All implementations must embed UnimplementedApiDashboardServer
// for forward compatibility
type ApiDashboardServer interface {
	CreateRoute(context.Context, *pbrequest.CreateRoute) (*pbresponse.CreateRoute, error)
	DeleteRoute(context.Context, *pbrequest.DeleteRoute) (*pbmodel.EmptyStruct, error)
	ListRoutes(context.Context, *pbrequest.ListRoutes) (*pbresponse.ListRoutes, error)
	UpdateRoute(context.Context, *pbrequest.UpdateRoute) (*pbmodel.EmptyStruct, error)
	CreateUpstream(context.Context, *pbrequest.CreateUpstream) (*pbresponse.CreateUpstream, error)
	DeleteUpstream(context.Context, *pbrequest.DeleteUpstream) (*pbmodel.EmptyStruct, error)
	UpdateUpstream(context.Context, *pbrequest.UpdateUpstream) (*pbmodel.EmptyStruct, error)
	ListUpstreams(context.Context, *pbrequest.ListUpstreams) (*pbresponse.ListUpstreams, error)
	CreateSSL(context.Context, *pbrequest.CreateSSL) (*pbresponse.CreateSSL, error)
	DeleteSSL(context.Context, *pbrequest.DeleteSSL) (*pbmodel.EmptyStruct, error)
	ListSSLs(context.Context, *pbrequest.ListSSLs) (*pbresponse.ListSSLs, error)
	CreateApiService(context.Context, *pbrequest.CreateApiService) (*pbresponse.CreateApiService, error)
	DeleteApiService(context.Context, *pbrequest.DeleteApiService) (*pbmodel.EmptyStruct, error)
	UpdateApiService(context.Context, *pbrequest.UpdateApiService) (*pbmodel.EmptyStruct, error)
	ListApiServices(context.Context, *pbrequest.ListApiServices) (*pbresponse.ListApiServices, error)
	AddSvcReqCount(context.Context, *pbrequest.AddSvcReqCount) (*pbmodel.EmptyStruct, error)
	GetSvcReqCount(context.Context, *pbrequest.GetSvcReqCount) (*pbresponse.GetSvcReqCount, error)
	DeleteClusterRoutes(context.Context, *pbrequest.DeleteClusterRoutes) (*pbmodel.EmptyStruct, error)
	CreateAuthKey(context.Context, *pbrequest.CreateAuthKey) (*pbresponse.CreateAuthKey, error)
	DeleteAuthKey(context.Context, *pbrequest.DeleteAuthKey) (*pbmodel.EmptyStruct, error)
	UpdateAuthKey(context.Context, *pbrequest.UpdateAuthKey) (*pbmodel.EmptyStruct, error)
	ListAuthKeys(context.Context, *pbrequest.ListAuthKeys) (*pbresponse.ListAuthKeys, error)
	BindAuthKey(context.Context, *pbrequest.BindAuthKey) (*pbmodel.EmptyStruct, error)
	UnbindAuthKey(context.Context, *pbrequest.UnbindAuthKey) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedApiDashboardServer()
}

// UnimplementedApiDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedApiDashboardServer struct {
}

func (UnimplementedApiDashboardServer) CreateRoute(context.Context, *pbrequest.CreateRoute) (*pbresponse.CreateRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedApiDashboardServer) DeleteRoute(context.Context, *pbrequest.DeleteRoute) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedApiDashboardServer) ListRoutes(context.Context, *pbrequest.ListRoutes) (*pbresponse.ListRoutes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedApiDashboardServer) UpdateRoute(context.Context, *pbrequest.UpdateRoute) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (UnimplementedApiDashboardServer) CreateUpstream(context.Context, *pbrequest.CreateUpstream) (*pbresponse.CreateUpstream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpstream not implemented")
}
func (UnimplementedApiDashboardServer) DeleteUpstream(context.Context, *pbrequest.DeleteUpstream) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUpstream not implemented")
}
func (UnimplementedApiDashboardServer) UpdateUpstream(context.Context, *pbrequest.UpdateUpstream) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUpstream not implemented")
}
func (UnimplementedApiDashboardServer) ListUpstreams(context.Context, *pbrequest.ListUpstreams) (*pbresponse.ListUpstreams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUpstreams not implemented")
}
func (UnimplementedApiDashboardServer) CreateSSL(context.Context, *pbrequest.CreateSSL) (*pbresponse.CreateSSL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSL not implemented")
}
func (UnimplementedApiDashboardServer) DeleteSSL(context.Context, *pbrequest.DeleteSSL) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSSL not implemented")
}
func (UnimplementedApiDashboardServer) ListSSLs(context.Context, *pbrequest.ListSSLs) (*pbresponse.ListSSLs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSLs not implemented")
}
func (UnimplementedApiDashboardServer) CreateApiService(context.Context, *pbrequest.CreateApiService) (*pbresponse.CreateApiService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiService not implemented")
}
func (UnimplementedApiDashboardServer) DeleteApiService(context.Context, *pbrequest.DeleteApiService) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiService not implemented")
}
func (UnimplementedApiDashboardServer) UpdateApiService(context.Context, *pbrequest.UpdateApiService) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiService not implemented")
}
func (UnimplementedApiDashboardServer) ListApiServices(context.Context, *pbrequest.ListApiServices) (*pbresponse.ListApiServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiServices not implemented")
}
func (UnimplementedApiDashboardServer) AddSvcReqCount(context.Context, *pbrequest.AddSvcReqCount) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSvcReqCount not implemented")
}
func (UnimplementedApiDashboardServer) GetSvcReqCount(context.Context, *pbrequest.GetSvcReqCount) (*pbresponse.GetSvcReqCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSvcReqCount not implemented")
}
func (UnimplementedApiDashboardServer) DeleteClusterRoutes(context.Context, *pbrequest.DeleteClusterRoutes) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterRoutes not implemented")
}
func (UnimplementedApiDashboardServer) CreateAuthKey(context.Context, *pbrequest.CreateAuthKey) (*pbresponse.CreateAuthKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthKey not implemented")
}
func (UnimplementedApiDashboardServer) DeleteAuthKey(context.Context, *pbrequest.DeleteAuthKey) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthKey not implemented")
}
func (UnimplementedApiDashboardServer) UpdateAuthKey(context.Context, *pbrequest.UpdateAuthKey) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthKey not implemented")
}
func (UnimplementedApiDashboardServer) ListAuthKeys(context.Context, *pbrequest.ListAuthKeys) (*pbresponse.ListAuthKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthKeys not implemented")
}
func (UnimplementedApiDashboardServer) BindAuthKey(context.Context, *pbrequest.BindAuthKey) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAuthKey not implemented")
}
func (UnimplementedApiDashboardServer) UnbindAuthKey(context.Context, *pbrequest.UnbindAuthKey) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindAuthKey not implemented")
}
func (UnimplementedApiDashboardServer) mustEmbedUnimplementedApiDashboardServer() {}

// UnsafeApiDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiDashboardServer will
// result in compilation errors.
type UnsafeApiDashboardServer interface {
	mustEmbedUnimplementedApiDashboardServer()
}

func RegisterApiDashboardServer(s grpc.ServiceRegistrar, srv ApiDashboardServer) {
	s.RegisterService(&ApiDashboard_ServiceDesc, srv)
}

func _ApiDashboard_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/CreateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).CreateRoute(ctx, req.(*pbrequest.CreateRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).DeleteRoute(ctx, req.(*pbrequest.DeleteRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListRoutes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).ListRoutes(ctx, req.(*pbrequest.ListRoutes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).UpdateRoute(ctx, req.(*pbrequest.UpdateRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_CreateUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateUpstream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).CreateUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/CreateUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).CreateUpstream(ctx, req.(*pbrequest.CreateUpstream))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_DeleteUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteUpstream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).DeleteUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/DeleteUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).DeleteUpstream(ctx, req.(*pbrequest.DeleteUpstream))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_UpdateUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateUpstream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).UpdateUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/UpdateUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).UpdateUpstream(ctx, req.(*pbrequest.UpdateUpstream))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_ListUpstreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListUpstreams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).ListUpstreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/ListUpstreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).ListUpstreams(ctx, req.(*pbrequest.ListUpstreams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_CreateSSL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateSSL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).CreateSSL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/CreateSSL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).CreateSSL(ctx, req.(*pbrequest.CreateSSL))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_DeleteSSL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteSSL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).DeleteSSL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/DeleteSSL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).DeleteSSL(ctx, req.(*pbrequest.DeleteSSL))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_ListSSLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListSSLs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).ListSSLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/ListSSLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).ListSSLs(ctx, req.(*pbrequest.ListSSLs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_CreateApiService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateApiService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).CreateApiService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/CreateApiService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).CreateApiService(ctx, req.(*pbrequest.CreateApiService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_DeleteApiService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteApiService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).DeleteApiService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/DeleteApiService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).DeleteApiService(ctx, req.(*pbrequest.DeleteApiService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_UpdateApiService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateApiService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).UpdateApiService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/UpdateApiService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).UpdateApiService(ctx, req.(*pbrequest.UpdateApiService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_ListApiServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListApiServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).ListApiServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/ListApiServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).ListApiServices(ctx, req.(*pbrequest.ListApiServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_AddSvcReqCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.AddSvcReqCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).AddSvcReqCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/AddSvcReqCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).AddSvcReqCount(ctx, req.(*pbrequest.AddSvcReqCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_GetSvcReqCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetSvcReqCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).GetSvcReqCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/GetSvcReqCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).GetSvcReqCount(ctx, req.(*pbrequest.GetSvcReqCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_DeleteClusterRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteClusterRoutes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).DeleteClusterRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/DeleteClusterRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).DeleteClusterRoutes(ctx, req.(*pbrequest.DeleteClusterRoutes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_CreateAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).CreateAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/CreateAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).CreateAuthKey(ctx, req.(*pbrequest.CreateAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_DeleteAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).DeleteAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/DeleteAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).DeleteAuthKey(ctx, req.(*pbrequest.DeleteAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_UpdateAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).UpdateAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/UpdateAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).UpdateAuthKey(ctx, req.(*pbrequest.UpdateAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_ListAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListAuthKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).ListAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/ListAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).ListAuthKeys(ctx, req.(*pbrequest.ListAuthKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_BindAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.BindAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).BindAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/BindAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).BindAuthKey(ctx, req.(*pbrequest.BindAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiDashboard_UnbindAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UnbindAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDashboardServer).UnbindAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidashboard.ApiDashboard/UnbindAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDashboardServer).UnbindAuthKey(ctx, req.(*pbrequest.UnbindAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiDashboard_ServiceDesc is the grpc.ServiceDesc for ApiDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidashboard.ApiDashboard",
	HandlerType: (*ApiDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoute",
			Handler:    _ApiDashboard_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _ApiDashboard_DeleteRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _ApiDashboard_ListRoutes_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _ApiDashboard_UpdateRoute_Handler,
		},
		{
			MethodName: "CreateUpstream",
			Handler:    _ApiDashboard_CreateUpstream_Handler,
		},
		{
			MethodName: "DeleteUpstream",
			Handler:    _ApiDashboard_DeleteUpstream_Handler,
		},
		{
			MethodName: "UpdateUpstream",
			Handler:    _ApiDashboard_UpdateUpstream_Handler,
		},
		{
			MethodName: "ListUpstreams",
			Handler:    _ApiDashboard_ListUpstreams_Handler,
		},
		{
			MethodName: "CreateSSL",
			Handler:    _ApiDashboard_CreateSSL_Handler,
		},
		{
			MethodName: "DeleteSSL",
			Handler:    _ApiDashboard_DeleteSSL_Handler,
		},
		{
			MethodName: "ListSSLs",
			Handler:    _ApiDashboard_ListSSLs_Handler,
		},
		{
			MethodName: "CreateApiService",
			Handler:    _ApiDashboard_CreateApiService_Handler,
		},
		{
			MethodName: "DeleteApiService",
			Handler:    _ApiDashboard_DeleteApiService_Handler,
		},
		{
			MethodName: "UpdateApiService",
			Handler:    _ApiDashboard_UpdateApiService_Handler,
		},
		{
			MethodName: "ListApiServices",
			Handler:    _ApiDashboard_ListApiServices_Handler,
		},
		{
			MethodName: "AddSvcReqCount",
			Handler:    _ApiDashboard_AddSvcReqCount_Handler,
		},
		{
			MethodName: "GetSvcReqCount",
			Handler:    _ApiDashboard_GetSvcReqCount_Handler,
		},
		{
			MethodName: "DeleteClusterRoutes",
			Handler:    _ApiDashboard_DeleteClusterRoutes_Handler,
		},
		{
			MethodName: "CreateAuthKey",
			Handler:    _ApiDashboard_CreateAuthKey_Handler,
		},
		{
			MethodName: "DeleteAuthKey",
			Handler:    _ApiDashboard_DeleteAuthKey_Handler,
		},
		{
			MethodName: "UpdateAuthKey",
			Handler:    _ApiDashboard_UpdateAuthKey_Handler,
		},
		{
			MethodName: "ListAuthKeys",
			Handler:    _ApiDashboard_ListAuthKeys_Handler,
		},
		{
			MethodName: "BindAuthKey",
			Handler:    _ApiDashboard_BindAuthKey_Handler,
		},
		{
			MethodName: "UnbindAuthKey",
			Handler:    _ApiDashboard_UnbindAuthKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/apidashboard/apidashboard.proto",
}
