// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/networkbroker/dataousrce_broker.proto

package pbsvcnetworkbroker

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSourceBrokerClient is the client API for DataSourceBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourceBrokerClient interface {
	PingDataSourceConnectionByBroker(ctx context.Context, in *pbrequest.PingDataSourceConnectionByBroker, opts ...grpc.CallOption) (*pbresponse.PingDataSourceConnectionByBroker, error)
	// DescribeDataSourceTables get a table list of specified data source.
	DescribeDataSourceTablesByBroker(ctx context.Context, in *pbrequest.DescribeDataSourceTablesByBroker, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTables, error)
	// DescribeDataSourceTableSchema get the table schema of specified table in datasource.
	DescribeDataSourceTableSchemaByBroker(ctx context.Context, in *pbrequest.DescribeDataSourceTableSchemaByBroker, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTableSchema, error)
}

type dataSourceBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourceBrokerClient(cc grpc.ClientConnInterface) DataSourceBrokerClient {
	return &dataSourceBrokerClient{cc}
}

func (c *dataSourceBrokerClient) PingDataSourceConnectionByBroker(ctx context.Context, in *pbrequest.PingDataSourceConnectionByBroker, opts ...grpc.CallOption) (*pbresponse.PingDataSourceConnectionByBroker, error) {
	out := new(pbresponse.PingDataSourceConnectionByBroker)
	err := c.cc.Invoke(ctx, "/networkbroker.DataSourceBroker/PingDataSourceConnectionByBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceBrokerClient) DescribeDataSourceTablesByBroker(ctx context.Context, in *pbrequest.DescribeDataSourceTablesByBroker, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTables, error) {
	out := new(pbresponse.DescribeDataSourceTables)
	err := c.cc.Invoke(ctx, "/networkbroker.DataSourceBroker/DescribeDataSourceTablesByBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceBrokerClient) DescribeDataSourceTableSchemaByBroker(ctx context.Context, in *pbrequest.DescribeDataSourceTableSchemaByBroker, opts ...grpc.CallOption) (*pbresponse.DescribeDataSourceTableSchema, error) {
	out := new(pbresponse.DescribeDataSourceTableSchema)
	err := c.cc.Invoke(ctx, "/networkbroker.DataSourceBroker/DescribeDataSourceTableSchemaByBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceBrokerServer is the server API for DataSourceBroker service.
// All implementations must embed UnimplementedDataSourceBrokerServer
// for forward compatibility
type DataSourceBrokerServer interface {
	PingDataSourceConnectionByBroker(context.Context, *pbrequest.PingDataSourceConnectionByBroker) (*pbresponse.PingDataSourceConnectionByBroker, error)
	// DescribeDataSourceTables get a table list of specified data source.
	DescribeDataSourceTablesByBroker(context.Context, *pbrequest.DescribeDataSourceTablesByBroker) (*pbresponse.DescribeDataSourceTables, error)
	// DescribeDataSourceTableSchema get the table schema of specified table in datasource.
	DescribeDataSourceTableSchemaByBroker(context.Context, *pbrequest.DescribeDataSourceTableSchemaByBroker) (*pbresponse.DescribeDataSourceTableSchema, error)
	mustEmbedUnimplementedDataSourceBrokerServer()
}

// UnimplementedDataSourceBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedDataSourceBrokerServer struct {
}

func (UnimplementedDataSourceBrokerServer) PingDataSourceConnectionByBroker(context.Context, *pbrequest.PingDataSourceConnectionByBroker) (*pbresponse.PingDataSourceConnectionByBroker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDataSourceConnectionByBroker not implemented")
}
func (UnimplementedDataSourceBrokerServer) DescribeDataSourceTablesByBroker(context.Context, *pbrequest.DescribeDataSourceTablesByBroker) (*pbresponse.DescribeDataSourceTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataSourceTablesByBroker not implemented")
}
func (UnimplementedDataSourceBrokerServer) DescribeDataSourceTableSchemaByBroker(context.Context, *pbrequest.DescribeDataSourceTableSchemaByBroker) (*pbresponse.DescribeDataSourceTableSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataSourceTableSchemaByBroker not implemented")
}
func (UnimplementedDataSourceBrokerServer) mustEmbedUnimplementedDataSourceBrokerServer() {}

// UnsafeDataSourceBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourceBrokerServer will
// result in compilation errors.
type UnsafeDataSourceBrokerServer interface {
	mustEmbedUnimplementedDataSourceBrokerServer()
}

func RegisterDataSourceBrokerServer(s grpc.ServiceRegistrar, srv DataSourceBrokerServer) {
	s.RegisterService(&DataSourceBroker_ServiceDesc, srv)
}

func _DataSourceBroker_PingDataSourceConnectionByBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.PingDataSourceConnectionByBroker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceBrokerServer).PingDataSourceConnectionByBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkbroker.DataSourceBroker/PingDataSourceConnectionByBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceBrokerServer).PingDataSourceConnectionByBroker(ctx, req.(*pbrequest.PingDataSourceConnectionByBroker))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceBroker_DescribeDataSourceTablesByBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataSourceTablesByBroker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceBrokerServer).DescribeDataSourceTablesByBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkbroker.DataSourceBroker/DescribeDataSourceTablesByBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceBrokerServer).DescribeDataSourceTablesByBroker(ctx, req.(*pbrequest.DescribeDataSourceTablesByBroker))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceBroker_DescribeDataSourceTableSchemaByBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeDataSourceTableSchemaByBroker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceBrokerServer).DescribeDataSourceTableSchemaByBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkbroker.DataSourceBroker/DescribeDataSourceTableSchemaByBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceBrokerServer).DescribeDataSourceTableSchemaByBroker(ctx, req.(*pbrequest.DescribeDataSourceTableSchemaByBroker))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourceBroker_ServiceDesc is the grpc.ServiceDesc for DataSourceBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourceBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkbroker.DataSourceBroker",
	HandlerType: (*DataSourceBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingDataSourceConnectionByBroker",
			Handler:    _DataSourceBroker_PingDataSourceConnectionByBroker_Handler,
		},
		{
			MethodName: "DescribeDataSourceTablesByBroker",
			Handler:    _DataSourceBroker_DescribeDataSourceTablesByBroker_Handler,
		},
		{
			MethodName: "DescribeDataSourceTableSchemaByBroker",
			Handler:    _DataSourceBroker_DescribeDataSourceTableSchemaByBroker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/networkbroker/dataousrce_broker.proto",
}
