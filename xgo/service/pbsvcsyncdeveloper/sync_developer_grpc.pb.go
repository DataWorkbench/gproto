// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/syncmanager/sync_developer.proto

package pbsvcsyncdeveloper

import (
	context "context"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncDeveloperClient is the client API for SyncDeveloper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncDeveloperClient interface {
	SubmitSyncJobToFlink(ctx context.Context, in *pbrequest.SubmitSyncJobToFlink, opts ...grpc.CallOption) (*pbresponse.SubmitSyncJobToFlink, error)
}

type syncDeveloperClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncDeveloperClient(cc grpc.ClientConnInterface) SyncDeveloperClient {
	return &syncDeveloperClient{cc}
}

func (c *syncDeveloperClient) SubmitSyncJobToFlink(ctx context.Context, in *pbrequest.SubmitSyncJobToFlink, opts ...grpc.CallOption) (*pbresponse.SubmitSyncJobToFlink, error) {
	out := new(pbresponse.SubmitSyncJobToFlink)
	err := c.cc.Invoke(ctx, "/syncdeveloper.SyncDeveloper/SubmitSyncJobToFlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncDeveloperServer is the server API for SyncDeveloper service.
// All implementations must embed UnimplementedSyncDeveloperServer
// for forward compatibility
type SyncDeveloperServer interface {
	SubmitSyncJobToFlink(context.Context, *pbrequest.SubmitSyncJobToFlink) (*pbresponse.SubmitSyncJobToFlink, error)
	mustEmbedUnimplementedSyncDeveloperServer()
}

// UnimplementedSyncDeveloperServer must be embedded to have forward compatible implementations.
type UnimplementedSyncDeveloperServer struct {
}

func (UnimplementedSyncDeveloperServer) SubmitSyncJobToFlink(context.Context, *pbrequest.SubmitSyncJobToFlink) (*pbresponse.SubmitSyncJobToFlink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSyncJobToFlink not implemented")
}
func (UnimplementedSyncDeveloperServer) mustEmbedUnimplementedSyncDeveloperServer() {}

// UnsafeSyncDeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncDeveloperServer will
// result in compilation errors.
type UnsafeSyncDeveloperServer interface {
	mustEmbedUnimplementedSyncDeveloperServer()
}

func RegisterSyncDeveloperServer(s grpc.ServiceRegistrar, srv SyncDeveloperServer) {
	s.RegisterService(&SyncDeveloper_ServiceDesc, srv)
}

func _SyncDeveloper_SubmitSyncJobToFlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitSyncJobToFlink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncDeveloperServer).SubmitSyncJobToFlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncdeveloper.SyncDeveloper/SubmitSyncJobToFlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncDeveloperServer).SubmitSyncJobToFlink(ctx, req.(*pbrequest.SubmitSyncJobToFlink))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncDeveloper_ServiceDesc is the grpc.ServiceDesc for SyncDeveloper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncDeveloper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncdeveloper.SyncDeveloper",
	HandlerType: (*SyncDeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitSyncJobToFlink",
			Handler:    _SyncDeveloper_SubmitSyncJobToFlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/syncmanager/sync_developer.proto",
}
