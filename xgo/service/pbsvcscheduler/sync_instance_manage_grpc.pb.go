// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/scheduler/sync_instance_manage.proto

package pbsvcscheduler

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncInstanceManageClient is the client API for SyncInstanceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncInstanceManageClient interface {
	ListSyncInstances(ctx context.Context, in *pbrequest.ListSyncInstances, opts ...grpc.CallOption) (*pbresponse.ListSyncInstances, error)
	TerminateSyncInstances(ctx context.Context, in *pbrequest.TerminateSyncInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	SuspendSyncInstances(ctx context.Context, in *pbrequest.SuspendSyncInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ResumeSyncInstances(ctx context.Context, in *pbrequest.ResumeSyncInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeSyncInstance(ctx context.Context, in *pbrequest.DescribeSyncInstance, opts ...grpc.CallOption) (*pbresponse.DescribeSyncInstance, error)
}

type syncInstanceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncInstanceManageClient(cc grpc.ClientConnInterface) SyncInstanceManageClient {
	return &syncInstanceManageClient{cc}
}

func (c *syncInstanceManageClient) ListSyncInstances(ctx context.Context, in *pbrequest.ListSyncInstances, opts ...grpc.CallOption) (*pbresponse.ListSyncInstances, error) {
	out := new(pbresponse.ListSyncInstances)
	err := c.cc.Invoke(ctx, "/scheduler.SyncInstanceManage/ListSyncInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncInstanceManageClient) TerminateSyncInstances(ctx context.Context, in *pbrequest.TerminateSyncInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.SyncInstanceManage/TerminateSyncInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncInstanceManageClient) SuspendSyncInstances(ctx context.Context, in *pbrequest.SuspendSyncInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.SyncInstanceManage/SuspendSyncInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncInstanceManageClient) ResumeSyncInstances(ctx context.Context, in *pbrequest.ResumeSyncInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.SyncInstanceManage/ResumeSyncInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncInstanceManageClient) DescribeSyncInstance(ctx context.Context, in *pbrequest.DescribeSyncInstance, opts ...grpc.CallOption) (*pbresponse.DescribeSyncInstance, error) {
	out := new(pbresponse.DescribeSyncInstance)
	err := c.cc.Invoke(ctx, "/scheduler.SyncInstanceManage/DescribeSyncInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncInstanceManageServer is the server API for SyncInstanceManage service.
// All implementations must embed UnimplementedSyncInstanceManageServer
// for forward compatibility
type SyncInstanceManageServer interface {
	ListSyncInstances(context.Context, *pbrequest.ListSyncInstances) (*pbresponse.ListSyncInstances, error)
	TerminateSyncInstances(context.Context, *pbrequest.TerminateSyncInstances) (*pbmodel.EmptyStruct, error)
	SuspendSyncInstances(context.Context, *pbrequest.SuspendSyncInstances) (*pbmodel.EmptyStruct, error)
	ResumeSyncInstances(context.Context, *pbrequest.ResumeSyncInstances) (*pbmodel.EmptyStruct, error)
	DescribeSyncInstance(context.Context, *pbrequest.DescribeSyncInstance) (*pbresponse.DescribeSyncInstance, error)
	mustEmbedUnimplementedSyncInstanceManageServer()
}

// UnimplementedSyncInstanceManageServer must be embedded to have forward compatible implementations.
type UnimplementedSyncInstanceManageServer struct {
}

func (UnimplementedSyncInstanceManageServer) ListSyncInstances(context.Context, *pbrequest.ListSyncInstances) (*pbresponse.ListSyncInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncInstances not implemented")
}
func (UnimplementedSyncInstanceManageServer) TerminateSyncInstances(context.Context, *pbrequest.TerminateSyncInstances) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSyncInstances not implemented")
}
func (UnimplementedSyncInstanceManageServer) SuspendSyncInstances(context.Context, *pbrequest.SuspendSyncInstances) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendSyncInstances not implemented")
}
func (UnimplementedSyncInstanceManageServer) ResumeSyncInstances(context.Context, *pbrequest.ResumeSyncInstances) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeSyncInstances not implemented")
}
func (UnimplementedSyncInstanceManageServer) DescribeSyncInstance(context.Context, *pbrequest.DescribeSyncInstance) (*pbresponse.DescribeSyncInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSyncInstance not implemented")
}
func (UnimplementedSyncInstanceManageServer) mustEmbedUnimplementedSyncInstanceManageServer() {}

// UnsafeSyncInstanceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncInstanceManageServer will
// result in compilation errors.
type UnsafeSyncInstanceManageServer interface {
	mustEmbedUnimplementedSyncInstanceManageServer()
}

func RegisterSyncInstanceManageServer(s grpc.ServiceRegistrar, srv SyncInstanceManageServer) {
	s.RegisterService(&SyncInstanceManage_ServiceDesc, srv)
}

func _SyncInstanceManage_ListSyncInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListSyncInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstanceManageServer).ListSyncInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SyncInstanceManage/ListSyncInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstanceManageServer).ListSyncInstances(ctx, req.(*pbrequest.ListSyncInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncInstanceManage_TerminateSyncInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.TerminateSyncInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstanceManageServer).TerminateSyncInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SyncInstanceManage/TerminateSyncInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstanceManageServer).TerminateSyncInstances(ctx, req.(*pbrequest.TerminateSyncInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncInstanceManage_SuspendSyncInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SuspendSyncInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstanceManageServer).SuspendSyncInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SyncInstanceManage/SuspendSyncInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstanceManageServer).SuspendSyncInstances(ctx, req.(*pbrequest.SuspendSyncInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncInstanceManage_ResumeSyncInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ResumeSyncInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstanceManageServer).ResumeSyncInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SyncInstanceManage/ResumeSyncInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstanceManageServer).ResumeSyncInstances(ctx, req.(*pbrequest.ResumeSyncInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncInstanceManage_DescribeSyncInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeSyncInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstanceManageServer).DescribeSyncInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SyncInstanceManage/DescribeSyncInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstanceManageServer).DescribeSyncInstance(ctx, req.(*pbrequest.DescribeSyncInstance))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncInstanceManage_ServiceDesc is the grpc.ServiceDesc for SyncInstanceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncInstanceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.SyncInstanceManage",
	HandlerType: (*SyncInstanceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSyncInstances",
			Handler:    _SyncInstanceManage_ListSyncInstances_Handler,
		},
		{
			MethodName: "TerminateSyncInstances",
			Handler:    _SyncInstanceManage_TerminateSyncInstances_Handler,
		},
		{
			MethodName: "SuspendSyncInstances",
			Handler:    _SyncInstanceManage_SuspendSyncInstances_Handler,
		},
		{
			MethodName: "ResumeSyncInstances",
			Handler:    _SyncInstanceManage_ResumeSyncInstances_Handler,
		},
		{
			MethodName: "DescribeSyncInstance",
			Handler:    _SyncInstanceManage_DescribeSyncInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/scheduler/sync_instance_manage.proto",
}
