// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/scheduler/stream_instance_manage.proto

package pbsvcscheduler

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/xgo/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamInstanceManageClient is the client API for StreamInstanceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamInstanceManageClient interface {
	ListStreamInstances(ctx context.Context, in *pbrequest.ListStreamInstances, opts ...grpc.CallOption) (*pbresponse.ListStreamInstances, error)
	TerminateStreamInstances(ctx context.Context, in *pbrequest.TerminateStreamInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	SuspendStreamInstances(ctx context.Context, in *pbrequest.SuspendStreamInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	ResumeStreamInstances(ctx context.Context, in *pbrequest.ResumeStreamInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeStreamInstance(ctx context.Context, in *pbrequest.DescribeStreamInstance, opts ...grpc.CallOption) (*pbresponse.DescribeStreamInstance, error)
}

type streamInstanceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamInstanceManageClient(cc grpc.ClientConnInterface) StreamInstanceManageClient {
	return &streamInstanceManageClient{cc}
}

func (c *streamInstanceManageClient) ListStreamInstances(ctx context.Context, in *pbrequest.ListStreamInstances, opts ...grpc.CallOption) (*pbresponse.ListStreamInstances, error) {
	out := new(pbresponse.ListStreamInstances)
	err := c.cc.Invoke(ctx, "/scheduler.StreamInstanceManage/ListStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamInstanceManageClient) TerminateStreamInstances(ctx context.Context, in *pbrequest.TerminateStreamInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.StreamInstanceManage/TerminateStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamInstanceManageClient) SuspendStreamInstances(ctx context.Context, in *pbrequest.SuspendStreamInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.StreamInstanceManage/SuspendStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamInstanceManageClient) ResumeStreamInstances(ctx context.Context, in *pbrequest.ResumeStreamInstances, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.StreamInstanceManage/ResumeStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamInstanceManageClient) DescribeStreamInstance(ctx context.Context, in *pbrequest.DescribeStreamInstance, opts ...grpc.CallOption) (*pbresponse.DescribeStreamInstance, error) {
	out := new(pbresponse.DescribeStreamInstance)
	err := c.cc.Invoke(ctx, "/scheduler.StreamInstanceManage/DescribeStreamInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamInstanceManageServer is the server API for StreamInstanceManage service.
// All implementations must embed UnimplementedStreamInstanceManageServer
// for forward compatibility
type StreamInstanceManageServer interface {
	ListStreamInstances(context.Context, *pbrequest.ListStreamInstances) (*pbresponse.ListStreamInstances, error)
	TerminateStreamInstances(context.Context, *pbrequest.TerminateStreamInstances) (*pbmodel.EmptyStruct, error)
	SuspendStreamInstances(context.Context, *pbrequest.SuspendStreamInstances) (*pbmodel.EmptyStruct, error)
	ResumeStreamInstances(context.Context, *pbrequest.ResumeStreamInstances) (*pbmodel.EmptyStruct, error)
	DescribeStreamInstance(context.Context, *pbrequest.DescribeStreamInstance) (*pbresponse.DescribeStreamInstance, error)
	mustEmbedUnimplementedStreamInstanceManageServer()
}

// UnimplementedStreamInstanceManageServer must be embedded to have forward compatible implementations.
type UnimplementedStreamInstanceManageServer struct {
}

func (UnimplementedStreamInstanceManageServer) ListStreamInstances(context.Context, *pbrequest.ListStreamInstances) (*pbresponse.ListStreamInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamInstances not implemented")
}
func (UnimplementedStreamInstanceManageServer) TerminateStreamInstances(context.Context, *pbrequest.TerminateStreamInstances) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateStreamInstances not implemented")
}
func (UnimplementedStreamInstanceManageServer) SuspendStreamInstances(context.Context, *pbrequest.SuspendStreamInstances) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendStreamInstances not implemented")
}
func (UnimplementedStreamInstanceManageServer) ResumeStreamInstances(context.Context, *pbrequest.ResumeStreamInstances) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeStreamInstances not implemented")
}
func (UnimplementedStreamInstanceManageServer) DescribeStreamInstance(context.Context, *pbrequest.DescribeStreamInstance) (*pbresponse.DescribeStreamInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamInstance not implemented")
}
func (UnimplementedStreamInstanceManageServer) mustEmbedUnimplementedStreamInstanceManageServer() {}

// UnsafeStreamInstanceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamInstanceManageServer will
// result in compilation errors.
type UnsafeStreamInstanceManageServer interface {
	mustEmbedUnimplementedStreamInstanceManageServer()
}

func RegisterStreamInstanceManageServer(s grpc.ServiceRegistrar, srv StreamInstanceManageServer) {
	s.RegisterService(&StreamInstanceManage_ServiceDesc, srv)
}

func _StreamInstanceManage_ListStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamInstanceManageServer).ListStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.StreamInstanceManage/ListStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamInstanceManageServer).ListStreamInstances(ctx, req.(*pbrequest.ListStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamInstanceManage_TerminateStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.TerminateStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamInstanceManageServer).TerminateStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.StreamInstanceManage/TerminateStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamInstanceManageServer).TerminateStreamInstances(ctx, req.(*pbrequest.TerminateStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamInstanceManage_SuspendStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SuspendStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamInstanceManageServer).SuspendStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.StreamInstanceManage/SuspendStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamInstanceManageServer).SuspendStreamInstances(ctx, req.(*pbrequest.SuspendStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamInstanceManage_ResumeStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ResumeStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamInstanceManageServer).ResumeStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.StreamInstanceManage/ResumeStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamInstanceManageServer).ResumeStreamInstances(ctx, req.(*pbrequest.ResumeStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamInstanceManage_DescribeStreamInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeStreamInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamInstanceManageServer).DescribeStreamInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.StreamInstanceManage/DescribeStreamInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamInstanceManageServer).DescribeStreamInstance(ctx, req.(*pbrequest.DescribeStreamInstance))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamInstanceManage_ServiceDesc is the grpc.ServiceDesc for StreamInstanceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamInstanceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.StreamInstanceManage",
	HandlerType: (*StreamInstanceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStreamInstances",
			Handler:    _StreamInstanceManage_ListStreamInstances_Handler,
		},
		{
			MethodName: "TerminateStreamInstances",
			Handler:    _StreamInstanceManage_TerminateStreamInstances_Handler,
		},
		{
			MethodName: "SuspendStreamInstances",
			Handler:    _StreamInstanceManage_SuspendStreamInstances_Handler,
		},
		{
			MethodName: "ResumeStreamInstances",
			Handler:    _StreamInstanceManage_ResumeStreamInstances_Handler,
		},
		{
			MethodName: "DescribeStreamInstance",
			Handler:    _StreamInstanceManage_DescribeStreamInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/scheduler/stream_instance_manage.proto",
}
