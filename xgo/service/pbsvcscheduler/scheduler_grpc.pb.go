// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/scheduler/scheduler.proto

package pbsvcscheduler

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/xgo/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/xgo/types/pbrequest"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	// SubmitStreamJob used when release new stream job or resume stream job.
	SubmitStreamJob(ctx context.Context, in *pbrequest.SubmitStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// StopStreamJob used when offline stream job.
	StopStreamJob(ctx context.Context, in *pbrequest.StopStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// DeleteStreamJobsBySpaceIds used when delete workspaces.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteStreamJobsBySpaceIds(ctx context.Context, in *pbrequest.DeleteStreamJobsBySpaceIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// DeleteStreamJobsByJobIds used when delete stream jobs.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteStreamJobsByJobIds(ctx context.Context, in *pbrequest.DeleteStreamJobsByJobIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// SubmitSyncJob used when release new sync job or resume sync job.
	SubmitSyncJob(ctx context.Context, in *pbrequest.SubmitSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// StopSyncJob used when offline stream job.
	StopSyncJob(ctx context.Context, in *pbrequest.StopSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// DeleteSyncJobsBySpaceIds used when delete workspaces.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteSyncJobsBySpaceIds(ctx context.Context, in *pbrequest.DeleteSyncJobsBySpaceIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// DeleteSyncJobsByJobIds used when delete stream jobs.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteSyncJobsByJobIds(ctx context.Context, in *pbrequest.DeleteSyncJobsByJobIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// SubmitFlinkClusterMonitor used when a flink cluster create or start.
	SubmitFlinkClusterMonitor(ctx context.Context, in *pbrequest.SubmitFlinkClusterMonitor, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// StopFlinkClusterMonitor used when a flink cluster delete or stop.
	StopFlinkClusterMonitor(ctx context.Context, in *pbrequest.StopFlinkClusterMonitor, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) SubmitStreamJob(ctx context.Context, in *pbrequest.SubmitStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/SubmitStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StopStreamJob(ctx context.Context, in *pbrequest.StopStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/StopStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteStreamJobsBySpaceIds(ctx context.Context, in *pbrequest.DeleteStreamJobsBySpaceIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/DeleteStreamJobsBySpaceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteStreamJobsByJobIds(ctx context.Context, in *pbrequest.DeleteStreamJobsByJobIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/DeleteStreamJobsByJobIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SubmitSyncJob(ctx context.Context, in *pbrequest.SubmitSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/SubmitSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StopSyncJob(ctx context.Context, in *pbrequest.StopSyncJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/StopSyncJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteSyncJobsBySpaceIds(ctx context.Context, in *pbrequest.DeleteSyncJobsBySpaceIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/DeleteSyncJobsBySpaceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteSyncJobsByJobIds(ctx context.Context, in *pbrequest.DeleteSyncJobsByJobIds, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/DeleteSyncJobsByJobIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SubmitFlinkClusterMonitor(ctx context.Context, in *pbrequest.SubmitFlinkClusterMonitor, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/SubmitFlinkClusterMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StopFlinkClusterMonitor(ctx context.Context, in *pbrequest.StopFlinkClusterMonitor, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/StopFlinkClusterMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	// SubmitStreamJob used when release new stream job or resume stream job.
	SubmitStreamJob(context.Context, *pbrequest.SubmitStreamJob) (*pbmodel.EmptyStruct, error)
	// StopStreamJob used when offline stream job.
	StopStreamJob(context.Context, *pbrequest.StopStreamJob) (*pbmodel.EmptyStruct, error)
	// DeleteStreamJobsBySpaceIds used when delete workspaces.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteStreamJobsBySpaceIds(context.Context, *pbrequest.DeleteStreamJobsBySpaceIds) (*pbmodel.EmptyStruct, error)
	// DeleteStreamJobsByJobIds used when delete stream jobs.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteStreamJobsByJobIds(context.Context, *pbrequest.DeleteStreamJobsByJobIds) (*pbmodel.EmptyStruct, error)
	// SubmitSyncJob used when release new sync job or resume sync job.
	SubmitSyncJob(context.Context, *pbrequest.SubmitSyncJob) (*pbmodel.EmptyStruct, error)
	// StopSyncJob used when offline stream job.
	StopSyncJob(context.Context, *pbrequest.StopSyncJob) (*pbmodel.EmptyStruct, error)
	// DeleteSyncJobsBySpaceIds used when delete workspaces.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteSyncJobsBySpaceIds(context.Context, *pbrequest.DeleteSyncJobsBySpaceIds) (*pbmodel.EmptyStruct, error)
	// DeleteSyncJobsByJobIds used when delete stream jobs.
	// It will stop all stream jobs and terminate all instances.
	// And delete all instances.
	DeleteSyncJobsByJobIds(context.Context, *pbrequest.DeleteSyncJobsByJobIds) (*pbmodel.EmptyStruct, error)
	// SubmitFlinkClusterMonitor used when a flink cluster create or start.
	SubmitFlinkClusterMonitor(context.Context, *pbrequest.SubmitFlinkClusterMonitor) (*pbmodel.EmptyStruct, error)
	// StopFlinkClusterMonitor used when a flink cluster delete or stop.
	StopFlinkClusterMonitor(context.Context, *pbrequest.StopFlinkClusterMonitor) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) SubmitStreamJob(context.Context, *pbrequest.SubmitStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitStreamJob not implemented")
}
func (UnimplementedSchedulerServer) StopStreamJob(context.Context, *pbrequest.StopStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStreamJob not implemented")
}
func (UnimplementedSchedulerServer) DeleteStreamJobsBySpaceIds(context.Context, *pbrequest.DeleteStreamJobsBySpaceIds) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamJobsBySpaceIds not implemented")
}
func (UnimplementedSchedulerServer) DeleteStreamJobsByJobIds(context.Context, *pbrequest.DeleteStreamJobsByJobIds) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamJobsByJobIds not implemented")
}
func (UnimplementedSchedulerServer) SubmitSyncJob(context.Context, *pbrequest.SubmitSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSyncJob not implemented")
}
func (UnimplementedSchedulerServer) StopSyncJob(context.Context, *pbrequest.StopSyncJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyncJob not implemented")
}
func (UnimplementedSchedulerServer) DeleteSyncJobsBySpaceIds(context.Context, *pbrequest.DeleteSyncJobsBySpaceIds) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncJobsBySpaceIds not implemented")
}
func (UnimplementedSchedulerServer) DeleteSyncJobsByJobIds(context.Context, *pbrequest.DeleteSyncJobsByJobIds) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncJobsByJobIds not implemented")
}
func (UnimplementedSchedulerServer) SubmitFlinkClusterMonitor(context.Context, *pbrequest.SubmitFlinkClusterMonitor) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFlinkClusterMonitor not implemented")
}
func (UnimplementedSchedulerServer) StopFlinkClusterMonitor(context.Context, *pbrequest.StopFlinkClusterMonitor) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFlinkClusterMonitor not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_SubmitStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SubmitStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/SubmitStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SubmitStreamJob(ctx, req.(*pbrequest.SubmitStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StopStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StopStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/StopStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StopStreamJob(ctx, req.(*pbrequest.StopStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteStreamJobsBySpaceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteStreamJobsBySpaceIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteStreamJobsBySpaceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/DeleteStreamJobsBySpaceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteStreamJobsBySpaceIds(ctx, req.(*pbrequest.DeleteStreamJobsBySpaceIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteStreamJobsByJobIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteStreamJobsByJobIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteStreamJobsByJobIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/DeleteStreamJobsByJobIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteStreamJobsByJobIds(ctx, req.(*pbrequest.DeleteStreamJobsByJobIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SubmitSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SubmitSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/SubmitSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SubmitSyncJob(ctx, req.(*pbrequest.SubmitSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StopSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StopSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/StopSyncJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StopSyncJob(ctx, req.(*pbrequest.StopSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteSyncJobsBySpaceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteSyncJobsBySpaceIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteSyncJobsBySpaceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/DeleteSyncJobsBySpaceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteSyncJobsBySpaceIds(ctx, req.(*pbrequest.DeleteSyncJobsBySpaceIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteSyncJobsByJobIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteSyncJobsByJobIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteSyncJobsByJobIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/DeleteSyncJobsByJobIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteSyncJobsByJobIds(ctx, req.(*pbrequest.DeleteSyncJobsByJobIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SubmitFlinkClusterMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SubmitFlinkClusterMonitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SubmitFlinkClusterMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/SubmitFlinkClusterMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SubmitFlinkClusterMonitor(ctx, req.(*pbrequest.SubmitFlinkClusterMonitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StopFlinkClusterMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopFlinkClusterMonitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StopFlinkClusterMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/StopFlinkClusterMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StopFlinkClusterMonitor(ctx, req.(*pbrequest.StopFlinkClusterMonitor))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitStreamJob",
			Handler:    _Scheduler_SubmitStreamJob_Handler,
		},
		{
			MethodName: "StopStreamJob",
			Handler:    _Scheduler_StopStreamJob_Handler,
		},
		{
			MethodName: "DeleteStreamJobsBySpaceIds",
			Handler:    _Scheduler_DeleteStreamJobsBySpaceIds_Handler,
		},
		{
			MethodName: "DeleteStreamJobsByJobIds",
			Handler:    _Scheduler_DeleteStreamJobsByJobIds_Handler,
		},
		{
			MethodName: "SubmitSyncJob",
			Handler:    _Scheduler_SubmitSyncJob_Handler,
		},
		{
			MethodName: "StopSyncJob",
			Handler:    _Scheduler_StopSyncJob_Handler,
		},
		{
			MethodName: "DeleteSyncJobsBySpaceIds",
			Handler:    _Scheduler_DeleteSyncJobsBySpaceIds_Handler,
		},
		{
			MethodName: "DeleteSyncJobsByJobIds",
			Handler:    _Scheduler_DeleteSyncJobsByJobIds_Handler,
		},
		{
			MethodName: "SubmitFlinkClusterMonitor",
			Handler:    _Scheduler_SubmitFlinkClusterMonitor_Handler,
		},
		{
			MethodName: "StopFlinkClusterMonitor",
			Handler:    _Scheduler_StopFlinkClusterMonitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/scheduler/scheduler.proto",
}
