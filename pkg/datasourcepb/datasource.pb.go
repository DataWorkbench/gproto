// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/datasource.proto

package datasourcepb

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/gosqlpb"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/validatorpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DatasourceNetwork_Type int32

const (
	DatasourceNetwork_TypeUnset DatasourceNetwork_Type = 0
	DatasourceNetwork_Eip       DatasourceNetwork_Type = 1
	DatasourceNetwork_Vpc       DatasourceNetwork_Type = 2
)

// Enum value maps for DatasourceNetwork_Type.
var (
	DatasourceNetwork_Type_name = map[int32]string{
		0: "TypeUnset",
		1: "Eip",
		2: "Vpc",
	}
	DatasourceNetwork_Type_value = map[string]int32{
		"TypeUnset": 0,
		"Eip":       1,
		"Vpc":       2,
	}
)

func (x DatasourceNetwork_Type) Enum() *DatasourceNetwork_Type {
	p := new(DatasourceNetwork_Type)
	*p = x
	return p
}

func (x DatasourceNetwork_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasourceNetwork_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_datasource_proto_enumTypes[0].Descriptor()
}

func (DatasourceNetwork_Type) Type() protoreflect.EnumType {
	return &file_proto_datasource_proto_enumTypes[0]
}

func (x DatasourceNetwork_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasourceNetwork_Type.Descriptor instead.
func (DatasourceNetwork_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{0, 0}
}

// DatasourceNetwork
type DatasourceNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Network type, 1 => eip, 2 => vpc(internal vpc)
	Type DatasourceNetwork_Type `protobuf:"varint,1,opt,name=type,proto3,enum=datasource.DatasourceNetwork_Type" json:"type" binding:"gte=1,lte=2" required:"true" minLength:"1" maxLength:"2"`
	// The internal Network
	VpcNetwork *DatasourceNetwork_VpcNetwork `protobuf:"bytes,2,opt,name=vpc_network,json=vpcNetwork,proto3" json:"vpc_network"`
}

func (x *DatasourceNetwork) Reset() {
	*x = DatasourceNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasourceNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasourceNetwork) ProtoMessage() {}

func (x *DatasourceNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasourceNetwork.ProtoReflect.Descriptor instead.
func (*DatasourceNetwork) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{0}
}

func (x *DatasourceNetwork) GetType() DatasourceNetwork_Type {
	if x != nil {
		return x.Type
	}
	return DatasourceNetwork_TypeUnset
}

func (x *DatasourceNetwork) GetVpcNetwork() *DatasourceNetwork_VpcNetwork {
	if x != nil {
		return x.VpcNetwork
	}
	return nil
}

type MySQLURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
	// The database
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,6,opt,name=network,proto3" json:"network"`
}

func (x *MySQLURL) Reset() {
	*x = MySQLURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLURL) ProtoMessage() {}

func (x *MySQLURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLURL.ProtoReflect.Descriptor instead.
func (*MySQLURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{1}
}

func (x *MySQLURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySQLURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MySQLURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MySQLURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// PostgreSQLURL used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
	// The database
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,6,opt,name=network,proto3" json:"network"`
}

func (x *PostgreSQLURL) Reset() {
	*x = PostgreSQLURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLURL) ProtoMessage() {}

func (x *PostgreSQLURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLURL.ProtoReflect.Descriptor instead.
func (*PostgreSQLURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{2}
}

func (x *PostgreSQLURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgreSQLURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgreSQLURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgreSQLURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgreSQLURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgreSQLURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// ClickHouseURL used as request parameters for RPC and HTTP(based on Body)
type ClickHouseURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
	// The database
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,6,opt,name=network,proto3" json:"network"`
}

func (x *ClickHouseURL) Reset() {
	*x = ClickHouseURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseURL) ProtoMessage() {}

func (x *ClickHouseURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseURL.ProtoReflect.Descriptor instead.
func (*ClickHouseURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{3}
}

func (x *ClickHouseURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickHouseURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickHouseURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickHouseURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickHouseURL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickHouseURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// KafkaURL used as request parameters for RPC and HTTP(based on Body)
type KafkaURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kafak brokers.
	KafkaBrokers string `protobuf:"bytes,1,opt,name=kafka_brokers,json=kafkaBrokers,proto3" json:"kafka_brokers" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,2,opt,name=network,proto3" json:"network"`
}

func (x *KafkaURL) Reset() {
	*x = KafkaURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaURL) ProtoMessage() {}

func (x *KafkaURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaURL.ProtoReflect.Descriptor instead.
func (*KafkaURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaURL) GetKafkaBrokers() string {
	if x != nil {
		return x.KafkaBrokers
	}
	return ""
}

func (x *KafkaURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// S3Url used as request parameters for RPC and HTTP(based on Body)
type S3URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S3URL) Reset() {
	*x = S3URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3URL) ProtoMessage() {}

func (x *S3URL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3URL.ProtoReflect.Descriptor instead.
func (*S3URL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{5}
}

// HBaseURL used as request parameters for RPC and HTTP(based on Body)
type HBaseURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hbase Zookeeper
	Zookeeper string `protobuf:"bytes,1,opt,name=zookeeper,proto3" json:"zookeeper" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The hbase Zookeeper Node
	ZNode string `protobuf:"bytes,2,opt,name=z_node,json=zNode,proto3" json:"z_node" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,3,opt,name=network,proto3" json:"network"`
}

func (x *HBaseURL) Reset() {
	*x = HBaseURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseURL) ProtoMessage() {}

func (x *HBaseURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseURL.ProtoReflect.Descriptor instead.
func (*HBaseURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{6}
}

func (x *HBaseURL) GetZookeeper() string {
	if x != nil {
		return x.Zookeeper
	}
	return ""
}

func (x *HBaseURL) GetZNode() string {
	if x != nil {
		return x.ZNode
	}
	return ""
}

func (x *HBaseURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// FtpURL used as request parameters for RPC and HTTP(based on Body)
type FtpURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
	// The username
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,5,opt,name=network,proto3" json:"network"`
}

func (x *FtpURL) Reset() {
	*x = FtpURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpURL) ProtoMessage() {}

func (x *FtpURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpURL.ProtoReflect.Descriptor instead.
func (*FtpURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{7}
}

func (x *FtpURL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FtpURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FtpURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FtpURL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *FtpURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// HDFSURL used as request parameters for RPC and HTTP(based on Body)
type HDFSURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes *HDFSURL_HDFSNodeURL `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// the Network
	Network *DatasourceNetwork `protobuf:"bytes,2,opt,name=network,proto3" json:"network"`
}

func (x *HDFSURL) Reset() {
	*x = HDFSURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSURL) ProtoMessage() {}

func (x *HDFSURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSURL.ProtoReflect.Descriptor instead.
func (*HDFSURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{8}
}

func (x *HDFSURL) GetNodes() *HDFSURL_HDFSNodeURL {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *HDFSURL) GetNetwork() *DatasourceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

// SourceUrl used as request parameters for RPC and HTTP(based on Body)
type DataSourceURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Source Connection Info.
	Mysql *MySQLURL `protobuf:"bytes,1,opt,name=mysql,proto3" json:"mysql"`
	// PostgreSQL Source Connection Info.
	Postgresql *PostgreSQLURL `protobuf:"bytes,2,opt,name=postgresql,proto3" json:"postgresql"`
	// ClickHouse Source Connection Info.
	Clickhouse *ClickHouseURL `protobuf:"bytes,3,opt,name=clickhouse,proto3" json:"clickhouse"`
	// Kafka Source Connection Info.
	Kafka *KafkaURL `protobuf:"bytes,4,opt,name=kafka,proto3" json:"kafka"`
	// S3 Source Connection Info.
	S3 *S3URL `protobuf:"bytes,5,opt,name=s3,proto3" json:"s3"`
	// Hbase Source Connection Info.
	Hbase *HBaseURL `protobuf:"bytes,6,opt,name=hbase,proto3" json:"hbase"`
	// Ftp Source Connection Info.
	Ftp *FtpURL `protobuf:"bytes,7,opt,name=ftp,proto3" json:"ftp"`
	// HDFS Source Connection Info.
	Hdfs *HDFSURL `protobuf:"bytes,8,opt,name=hdfs,proto3" json:"hdfs"`
}

func (x *DataSourceURL) Reset() {
	*x = DataSourceURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceURL) ProtoMessage() {}

func (x *DataSourceURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceURL.ProtoReflect.Descriptor instead.
func (*DataSourceURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{9}
}

func (x *DataSourceURL) GetMysql() *MySQLURL {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *DataSourceURL) GetPostgresql() *PostgreSQLURL {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *DataSourceURL) GetClickhouse() *ClickHouseURL {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *DataSourceURL) GetKafka() *KafkaURL {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *DataSourceURL) GetS3() *S3URL {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *DataSourceURL) GetHbase() *HBaseURL {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *DataSourceURL) GetFtp() *FtpURL {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *DataSourceURL) GetHdfs() *HDFSURL {
	if x != nil {
		return x.Hdfs
	}
	return nil
}

type DatasourceNetwork_VpcNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network id
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
}

func (x *DatasourceNetwork_VpcNetwork) Reset() {
	*x = DatasourceNetwork_VpcNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasourceNetwork_VpcNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasourceNetwork_VpcNetwork) ProtoMessage() {}

func (x *DatasourceNetwork_VpcNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasourceNetwork_VpcNetwork.ProtoReflect.Descriptor instead.
func (*DatasourceNetwork_VpcNetwork) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DatasourceNetwork_VpcNetwork) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type HDFSURL_HDFSNodeURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host
	NameNode string `protobuf:"bytes,1,opt,name=name_node,json=nameNode,proto3" json:"name_node" binding:"gte=1,lte=64" required:"true"`
	// The port
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port" binding:"gte=1" required:"true" mininum:"1" maximum:"65536"`
}

func (x *HDFSURL_HDFSNodeURL) Reset() {
	*x = HDFSURL_HDFSNodeURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_datasource_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSURL_HDFSNodeURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSURL_HDFSNodeURL) ProtoMessage() {}

func (x *HDFSURL_HDFSNodeURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_datasource_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSURL_HDFSNodeURL.ProtoReflect.Descriptor instead.
func (*HDFSURL_HDFSNodeURL) Descriptor() ([]byte, []int) {
	return file_proto_datasource_proto_rawDescGZIP(), []int{8, 0}
}

func (x *HDFSURL_HDFSNodeURL) GetNameNode() string {
	if x != nil {
		return x.NameNode
	}
	return ""
}

func (x *HDFSURL_HDFSNodeURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_proto_datasource_proto protoreflect.FileDescriptor

var file_proto_datasource_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97,
	0x02, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01,
	0x04, 0x40, 0x01, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x76,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x56, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x0a, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x39, 0x0a, 0x0a,
	0x56, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x69, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x70, 0x63, 0x10, 0x02,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9a, 0x02, 0x0a, 0x08, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02,
	0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf,
	0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02,
	0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x53, 0x51, 0x4c, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf,
	0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a,
	0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02,
	0x40, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12,
	0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x55, 0x52, 0x4c, 0x12, 0x35, 0x0a, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2,
	0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x01, 0x98, 0x02, 0x80, 0x08, 0x52,
	0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x06, 0xca, 0xb2,
	0x04, 0x02, 0x0a, 0x00, 0x22, 0x0f, 0x0a, 0x05, 0x53, 0x33, 0x55, 0x52, 0x4c, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x48, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x09, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x80, 0x08, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x7a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x01,
	0x98, 0x02, 0x80, 0x08, 0x52, 0x05, 0x7a, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x46, 0x74, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2, 0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00,
	0x22, 0xe3, 0x01, 0x0a, 0x07, 0x48, 0x44, 0x46, 0x53, 0x55, 0x52, 0x4c, 0x12, 0x35, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x44, 0x46, 0x53, 0x55, 0x52, 0x4c,
	0x2e, 0x48, 0x44, 0x46, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x60, 0x0a, 0x0b,
	0x48, 0x44, 0x46, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x01, 0x98, 0x02, 0x40, 0x52,
	0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xb2,
	0x01, 0x06, 0x38, 0x80, 0x80, 0x04, 0x40, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x06,
	0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x52, 0x4c, 0x52, 0x05, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c,
	0x55, 0x52, 0x4c, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x52, 0x4c, 0x52,
	0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x21, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x33, 0x55, 0x52, 0x4c, 0x52, 0x02, 0x73, 0x33, 0x12, 0x2a, 0x0a, 0x05, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x05,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x66, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x46, 0x74, 0x70, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x66, 0x74, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x68,
	0x64, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x44, 0x46, 0x53, 0x55, 0x52, 0x4c, 0x52, 0x04,
	0x68, 0x64, 0x66, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x42, 0x63, 0x0a, 0x21,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x64,
	0x62, 0x42, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x01, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_datasource_proto_rawDescOnce sync.Once
	file_proto_datasource_proto_rawDescData = file_proto_datasource_proto_rawDesc
)

func file_proto_datasource_proto_rawDescGZIP() []byte {
	file_proto_datasource_proto_rawDescOnce.Do(func() {
		file_proto_datasource_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_datasource_proto_rawDescData)
	})
	return file_proto_datasource_proto_rawDescData
}

var file_proto_datasource_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_datasource_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_datasource_proto_goTypes = []interface{}{
	(DatasourceNetwork_Type)(0),          // 0: datasource.DatasourceNetwork.Type
	(*DatasourceNetwork)(nil),            // 1: datasource.DatasourceNetwork
	(*MySQLURL)(nil),                     // 2: datasource.MySQLURL
	(*PostgreSQLURL)(nil),                // 3: datasource.PostgreSQLURL
	(*ClickHouseURL)(nil),                // 4: datasource.ClickHouseURL
	(*KafkaURL)(nil),                     // 5: datasource.KafkaURL
	(*S3URL)(nil),                        // 6: datasource.S3URL
	(*HBaseURL)(nil),                     // 7: datasource.HBaseURL
	(*FtpURL)(nil),                       // 8: datasource.FtpURL
	(*HDFSURL)(nil),                      // 9: datasource.HDFSURL
	(*DataSourceURL)(nil),                // 10: datasource.DataSourceURL
	(*DatasourceNetwork_VpcNetwork)(nil), // 11: datasource.DatasourceNetwork.VpcNetwork
	(*HDFSURL_HDFSNodeURL)(nil),          // 12: datasource.HDFSURL.HDFSNodeURL
}
var file_proto_datasource_proto_depIdxs = []int32{
	0,  // 0: datasource.DatasourceNetwork.type:type_name -> datasource.DatasourceNetwork.Type
	11, // 1: datasource.DatasourceNetwork.vpc_network:type_name -> datasource.DatasourceNetwork.VpcNetwork
	1,  // 2: datasource.MySQLURL.network:type_name -> datasource.DatasourceNetwork
	1,  // 3: datasource.PostgreSQLURL.network:type_name -> datasource.DatasourceNetwork
	1,  // 4: datasource.ClickHouseURL.network:type_name -> datasource.DatasourceNetwork
	1,  // 5: datasource.KafkaURL.network:type_name -> datasource.DatasourceNetwork
	1,  // 6: datasource.HBaseURL.network:type_name -> datasource.DatasourceNetwork
	1,  // 7: datasource.FtpURL.network:type_name -> datasource.DatasourceNetwork
	12, // 8: datasource.HDFSURL.nodes:type_name -> datasource.HDFSURL.HDFSNodeURL
	1,  // 9: datasource.HDFSURL.network:type_name -> datasource.DatasourceNetwork
	2,  // 10: datasource.DataSourceURL.mysql:type_name -> datasource.MySQLURL
	3,  // 11: datasource.DataSourceURL.postgresql:type_name -> datasource.PostgreSQLURL
	4,  // 12: datasource.DataSourceURL.clickhouse:type_name -> datasource.ClickHouseURL
	5,  // 13: datasource.DataSourceURL.kafka:type_name -> datasource.KafkaURL
	6,  // 14: datasource.DataSourceURL.s3:type_name -> datasource.S3URL
	7,  // 15: datasource.DataSourceURL.hbase:type_name -> datasource.HBaseURL
	8,  // 16: datasource.DataSourceURL.ftp:type_name -> datasource.FtpURL
	9,  // 17: datasource.DataSourceURL.hdfs:type_name -> datasource.HDFSURL
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_datasource_proto_init() }
func file_proto_datasource_proto_init() {
	if File_proto_datasource_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_datasource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasourceNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasourceNetwork_VpcNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_datasource_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSURL_HDFSNodeURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_datasource_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_datasource_proto_goTypes,
		DependencyIndexes: file_proto_datasource_proto_depIdxs,
		EnumInfos:         file_proto_datasource_proto_enumTypes,
		MessageInfos:      file_proto_datasource_proto_msgTypes,
	}.Build()
	File_proto_datasource_proto = out.File
	file_proto_datasource_proto_rawDesc = nil
	file_proto_datasource_proto_goTypes = nil
	file_proto_datasource_proto_depIdxs = nil
}
