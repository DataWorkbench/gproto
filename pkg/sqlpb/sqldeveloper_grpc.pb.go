// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SqldeveloperClient is the client API for Sqldeveloper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqldeveloperClient interface {
	DAGToSQL(ctx context.Context, in *DAG, opts ...grpc.CallOption) (*SQL, error)
	SQLToDAG(ctx context.Context, in *SQL, opts ...grpc.CallOption) (*DAG, error)
}

type sqldeveloperClient struct {
	cc grpc.ClientConnInterface
}

func NewSqldeveloperClient(cc grpc.ClientConnInterface) SqldeveloperClient {
	return &sqldeveloperClient{cc}
}

func (c *sqldeveloperClient) DAGToSQL(ctx context.Context, in *DAG, opts ...grpc.CallOption) (*SQL, error) {
	out := new(SQL)
	err := c.cc.Invoke(ctx, "/sqlpb.Sqldeveloper/DAGToSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqldeveloperClient) SQLToDAG(ctx context.Context, in *SQL, opts ...grpc.CallOption) (*DAG, error) {
	out := new(DAG)
	err := c.cc.Invoke(ctx, "/sqlpb.Sqldeveloper/SQLToDAG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqldeveloperServer is the server API for Sqldeveloper service.
// All implementations must embed UnimplementedSqldeveloperServer
// for forward compatibility
type SqldeveloperServer interface {
	DAGToSQL(context.Context, *DAG) (*SQL, error)
	SQLToDAG(context.Context, *SQL) (*DAG, error)
	mustEmbedUnimplementedSqldeveloperServer()
}

// UnimplementedSqldeveloperServer must be embedded to have forward compatible implementations.
type UnimplementedSqldeveloperServer struct {
}

func (UnimplementedSqldeveloperServer) DAGToSQL(context.Context, *DAG) (*SQL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DAGToSQL not implemented")
}
func (UnimplementedSqldeveloperServer) SQLToDAG(context.Context, *SQL) (*DAG, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLToDAG not implemented")
}
func (UnimplementedSqldeveloperServer) mustEmbedUnimplementedSqldeveloperServer() {}

// UnsafeSqldeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqldeveloperServer will
// result in compilation errors.
type UnsafeSqldeveloperServer interface {
	mustEmbedUnimplementedSqldeveloperServer()
}

func RegisterSqldeveloperServer(s grpc.ServiceRegistrar, srv SqldeveloperServer) {
	s.RegisterService(&_Sqldeveloper_serviceDesc, srv)
}

func _Sqldeveloper_DAGToSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DAG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqldeveloperServer).DAGToSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqlpb.Sqldeveloper/DAGToSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqldeveloperServer).DAGToSQL(ctx, req.(*DAG))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sqldeveloper_SQLToDAG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqldeveloperServer).SQLToDAG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqlpb.Sqldeveloper/SQLToDAG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqldeveloperServer).SQLToDAG(ctx, req.(*SQL))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sqldeveloper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sqlpb.Sqldeveloper",
	HandlerType: (*SqldeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DAGToSQL",
			Handler:    _Sqldeveloper_DAGToSQL_Handler,
		},
		{
			MethodName: "SQLToDAG",
			Handler:    _Sqldeveloper_SQLToDAG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sqldeveloper.proto",
}
