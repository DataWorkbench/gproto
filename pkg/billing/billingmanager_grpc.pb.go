// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package billing

import (
	context "context"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BillingManagerClient is the client API for BillingManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingManagerClient interface {
	// API of newbilling manager.
	GetPriceComponents(ctx context.Context, in *request.GetPriceComponents, opts ...grpc.CallOption) (*response.GetPriceComponents, error)
	CreateInstance(ctx context.Context, in *request.CreateInstance, opts ...grpc.CallOption) (*response.CreateInstance, error)
	StopInstance(ctx context.Context, in *request.StopInstance, opts ...grpc.CallOption) (*response.StopInstance, error)
}

type billingManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingManagerClient(cc grpc.ClientConnInterface) BillingManagerClient {
	return &billingManagerClient{cc}
}

func (c *billingManagerClient) GetPriceComponents(ctx context.Context, in *request.GetPriceComponents, opts ...grpc.CallOption) (*response.GetPriceComponents, error) {
	out := new(response.GetPriceComponents)
	err := c.cc.Invoke(ctx, "/billing.BillingManager/GetPriceComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingManagerClient) CreateInstance(ctx context.Context, in *request.CreateInstance, opts ...grpc.CallOption) (*response.CreateInstance, error) {
	out := new(response.CreateInstance)
	err := c.cc.Invoke(ctx, "/billing.BillingManager/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingManagerClient) StopInstance(ctx context.Context, in *request.StopInstance, opts ...grpc.CallOption) (*response.StopInstance, error) {
	out := new(response.StopInstance)
	err := c.cc.Invoke(ctx, "/billing.BillingManager/StopInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingManagerServer is the server API for BillingManager service.
// All implementations must embed UnimplementedBillingManagerServer
// for forward compatibility
type BillingManagerServer interface {
	// API of newbilling manager.
	GetPriceComponents(context.Context, *request.GetPriceComponents) (*response.GetPriceComponents, error)
	CreateInstance(context.Context, *request.CreateInstance) (*response.CreateInstance, error)
	StopInstance(context.Context, *request.StopInstance) (*response.StopInstance, error)
	mustEmbedUnimplementedBillingManagerServer()
}

// UnimplementedBillingManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBillingManagerServer struct {
}

func (UnimplementedBillingManagerServer) GetPriceComponents(context.Context, *request.GetPriceComponents) (*response.GetPriceComponents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceComponents not implemented")
}
func (UnimplementedBillingManagerServer) CreateInstance(context.Context, *request.CreateInstance) (*response.CreateInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedBillingManagerServer) StopInstance(context.Context, *request.StopInstance) (*response.StopInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInstance not implemented")
}
func (UnimplementedBillingManagerServer) mustEmbedUnimplementedBillingManagerServer() {}

// UnsafeBillingManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingManagerServer will
// result in compilation errors.
type UnsafeBillingManagerServer interface {
	mustEmbedUnimplementedBillingManagerServer()
}

func RegisterBillingManagerServer(s grpc.ServiceRegistrar, srv BillingManagerServer) {
	s.RegisterService(&_BillingManager_serviceDesc, srv)
}

func _BillingManager_GetPriceComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPriceComponents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingManagerServer).GetPriceComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingManager/GetPriceComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingManagerServer).GetPriceComponents(ctx, req.(*request.GetPriceComponents))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingManager_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingManagerServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingManager/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingManagerServer).CreateInstance(ctx, req.(*request.CreateInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingManager_StopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.StopInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingManagerServer).StopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingManager/StopInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingManagerServer).StopInstance(ctx, req.(*request.StopInstance))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingManager",
	HandlerType: (*BillingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPriceComponents",
			Handler:    _BillingManager_GetPriceComponents_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _BillingManager_CreateInstance_Handler,
		},
		{
			MethodName: "StopInstance",
			Handler:    _BillingManager_StopInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/billingmanager.proto",
}
