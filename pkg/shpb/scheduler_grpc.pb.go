// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	// Interface for stream job task.
	//
	// DeleteJobsBySpaceIds delete the specified workspaces and its resources;
	// This Interface called by flowmanager(DeleteJobsBySpaceIds).
	// Resources Includes:
	//   - Offline stream job and force stop all running instances.
	//   - All instances records.
	DeleteJobsBySpaceIds(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// DeleteStreamJobs delete stream job ant its related resources where in ids.
	// Resources includes:
	//  - Offline job and force stop all running instances.
	//  - All instances records.
	DeleteStreamJobs(ctx context.Context, in *request.DeleteStreamJobs, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// SubmitStreamJob Submit submit a job task to scheduler system, It will
	// be cover if old job exists.
	// FIXME: Review it.
	SubmitStreamJob(ctx context.Context, in *request.SubmitStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// RemoveStreamJob remove specific job from scheduler system.
	// FIXME: Review it.
	RemoveStreamJob(ctx context.Context, in *request.RemoveStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for stream job cycle instance.
	//
	ListStreamInstances(ctx context.Context, in *request.ListStreamInstances, opts ...grpc.CallOption) (*response.ListStreamInstances, error)
	TerminateStreamInstances(ctx context.Context, in *request.TerminateStreamInstances, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	SuspendStreamInstances(ctx context.Context, in *request.SuspendStreamInstances, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ResumeStreamInstances(ctx context.Context, in *request.ResumeStreamInstances, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for monitor.
	ListMonitorRules(ctx context.Context, in *request.ListMonitorRules, opts ...grpc.CallOption) (*response.ListMonitorRules, error)
	DeleteMonitorRules(ctx context.Context, in *request.DeleteMonitorRules, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	EnableMonitorRules(ctx context.Context, in *request.EnableMonitorRules, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DisableMonitorRules(ctx context.Context, in *request.DisableMonitorRules, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	CreateMonitorRule(ctx context.Context, in *request.CreateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UpdateMonitorRule(ctx context.Context, in *request.UpdateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeMonitorRule(ctx context.Context, in *request.DescribeMonitorRule, opts ...grpc.CallOption) (*response.DescribeMonitorRule, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) DeleteJobsBySpaceIds(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DeleteJobsBySpaceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteStreamJobs(ctx context.Context, in *request.DeleteStreamJobs, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DeleteStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SubmitStreamJob(ctx context.Context, in *request.SubmitStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/SubmitStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveStreamJob(ctx context.Context, in *request.RemoveStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/RemoveStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListStreamInstances(ctx context.Context, in *request.ListStreamInstances, opts ...grpc.CallOption) (*response.ListStreamInstances, error) {
	out := new(response.ListStreamInstances)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ListStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) TerminateStreamInstances(ctx context.Context, in *request.TerminateStreamInstances, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/TerminateStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SuspendStreamInstances(ctx context.Context, in *request.SuspendStreamInstances, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/SuspendStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ResumeStreamInstances(ctx context.Context, in *request.ResumeStreamInstances, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ResumeStreamInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListMonitorRules(ctx context.Context, in *request.ListMonitorRules, opts ...grpc.CallOption) (*response.ListMonitorRules, error) {
	out := new(response.ListMonitorRules)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ListMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteMonitorRules(ctx context.Context, in *request.DeleteMonitorRules, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DeleteMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) EnableMonitorRules(ctx context.Context, in *request.EnableMonitorRules, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/EnableMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DisableMonitorRules(ctx context.Context, in *request.DisableMonitorRules, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DisableMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) CreateMonitorRule(ctx context.Context, in *request.CreateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/CreateMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateMonitorRule(ctx context.Context, in *request.UpdateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/UpdateMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DescribeMonitorRule(ctx context.Context, in *request.DescribeMonitorRule, opts ...grpc.CallOption) (*response.DescribeMonitorRule, error) {
	out := new(response.DescribeMonitorRule)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DescribeMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	// Interface for stream job task.
	//
	// DeleteJobsBySpaceIds delete the specified workspaces and its resources;
	// This Interface called by flowmanager(DeleteJobsBySpaceIds).
	// Resources Includes:
	//   - Offline stream job and force stop all running instances.
	//   - All instances records.
	DeleteJobsBySpaceIds(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error)
	// DeleteStreamJobs delete stream job ant its related resources where in ids.
	// Resources includes:
	//  - Offline job and force stop all running instances.
	//  - All instances records.
	DeleteStreamJobs(context.Context, *request.DeleteStreamJobs) (*model.EmptyStruct, error)
	// SubmitStreamJob Submit submit a job task to scheduler system, It will
	// be cover if old job exists.
	// FIXME: Review it.
	SubmitStreamJob(context.Context, *request.SubmitStreamJob) (*model.EmptyStruct, error)
	// RemoveStreamJob remove specific job from scheduler system.
	// FIXME: Review it.
	RemoveStreamJob(context.Context, *request.RemoveStreamJob) (*model.EmptyStruct, error)
	// Interface for stream job cycle instance.
	//
	ListStreamInstances(context.Context, *request.ListStreamInstances) (*response.ListStreamInstances, error)
	TerminateStreamInstances(context.Context, *request.TerminateStreamInstances) (*model.EmptyStruct, error)
	SuspendStreamInstances(context.Context, *request.SuspendStreamInstances) (*model.EmptyStruct, error)
	ResumeStreamInstances(context.Context, *request.ResumeStreamInstances) (*model.EmptyStruct, error)
	// Interface for monitor.
	ListMonitorRules(context.Context, *request.ListMonitorRules) (*response.ListMonitorRules, error)
	DeleteMonitorRules(context.Context, *request.DeleteMonitorRules) (*model.EmptyStruct, error)
	EnableMonitorRules(context.Context, *request.EnableMonitorRules) (*model.EmptyStruct, error)
	DisableMonitorRules(context.Context, *request.DisableMonitorRules) (*model.EmptyStruct, error)
	CreateMonitorRule(context.Context, *request.CreateMonitorRule) (*model.EmptyStruct, error)
	UpdateMonitorRule(context.Context, *request.UpdateMonitorRule) (*model.EmptyStruct, error)
	DescribeMonitorRule(context.Context, *request.DescribeMonitorRule) (*response.DescribeMonitorRule, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) DeleteJobsBySpaceIds(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobsBySpaceIds not implemented")
}
func (UnimplementedSchedulerServer) DeleteStreamJobs(context.Context, *request.DeleteStreamJobs) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamJobs not implemented")
}
func (UnimplementedSchedulerServer) SubmitStreamJob(context.Context, *request.SubmitStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitStreamJob not implemented")
}
func (UnimplementedSchedulerServer) RemoveStreamJob(context.Context, *request.RemoveStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamJob not implemented")
}
func (UnimplementedSchedulerServer) ListStreamInstances(context.Context, *request.ListStreamInstances) (*response.ListStreamInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamInstances not implemented")
}
func (UnimplementedSchedulerServer) TerminateStreamInstances(context.Context, *request.TerminateStreamInstances) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateStreamInstances not implemented")
}
func (UnimplementedSchedulerServer) SuspendStreamInstances(context.Context, *request.SuspendStreamInstances) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendStreamInstances not implemented")
}
func (UnimplementedSchedulerServer) ResumeStreamInstances(context.Context, *request.ResumeStreamInstances) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeStreamInstances not implemented")
}
func (UnimplementedSchedulerServer) ListMonitorRules(context.Context, *request.ListMonitorRules) (*response.ListMonitorRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitorRules not implemented")
}
func (UnimplementedSchedulerServer) DeleteMonitorRules(context.Context, *request.DeleteMonitorRules) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorRules not implemented")
}
func (UnimplementedSchedulerServer) EnableMonitorRules(context.Context, *request.EnableMonitorRules) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMonitorRules not implemented")
}
func (UnimplementedSchedulerServer) DisableMonitorRules(context.Context, *request.DisableMonitorRules) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMonitorRules not implemented")
}
func (UnimplementedSchedulerServer) CreateMonitorRule(context.Context, *request.CreateMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) UpdateMonitorRule(context.Context, *request.UpdateMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) DescribeMonitorRule(context.Context, *request.DescribeMonitorRule) (*response.DescribeMonitorRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_DeleteJobsBySpaceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteJobsBySpaceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DeleteJobsBySpaceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteJobsBySpaceIds(ctx, req.(*request.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DeleteStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteStreamJobs(ctx, req.(*request.DeleteStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SubmitStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SubmitStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SubmitStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/SubmitStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SubmitStreamJob(ctx, req.(*request.SubmitStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RemoveStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/RemoveStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveStreamJob(ctx, req.(*request.RemoveStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ListStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListStreamInstances(ctx, req.(*request.ListStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_TerminateStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.TerminateStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).TerminateStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/TerminateStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).TerminateStreamInstances(ctx, req.(*request.TerminateStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SuspendStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SuspendStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SuspendStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/SuspendStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SuspendStreamInstances(ctx, req.(*request.SuspendStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ResumeStreamInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResumeStreamInstances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ResumeStreamInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ResumeStreamInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ResumeStreamInstances(ctx, req.(*request.ResumeStreamInstances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ListMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListMonitorRules(ctx, req.(*request.ListMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DeleteMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteMonitorRules(ctx, req.(*request.DeleteMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_EnableMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EnableMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).EnableMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/EnableMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).EnableMonitorRules(ctx, req.(*request.EnableMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DisableMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DisableMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DisableMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DisableMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DisableMonitorRules(ctx, req.(*request.DisableMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_CreateMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/CreateMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateMonitorRule(ctx, req.(*request.CreateMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/UpdateMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateMonitorRule(ctx, req.(*request.UpdateMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DescribeMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DescribeMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DescribeMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DescribeMonitorRule(ctx, req.(*request.DescribeMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shpb.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteJobsBySpaceIds",
			Handler:    _Scheduler_DeleteJobsBySpaceIds_Handler,
		},
		{
			MethodName: "DeleteStreamJobs",
			Handler:    _Scheduler_DeleteStreamJobs_Handler,
		},
		{
			MethodName: "SubmitStreamJob",
			Handler:    _Scheduler_SubmitStreamJob_Handler,
		},
		{
			MethodName: "RemoveStreamJob",
			Handler:    _Scheduler_RemoveStreamJob_Handler,
		},
		{
			MethodName: "ListStreamInstances",
			Handler:    _Scheduler_ListStreamInstances_Handler,
		},
		{
			MethodName: "TerminateStreamInstances",
			Handler:    _Scheduler_TerminateStreamInstances_Handler,
		},
		{
			MethodName: "SuspendStreamInstances",
			Handler:    _Scheduler_SuspendStreamInstances_Handler,
		},
		{
			MethodName: "ResumeStreamInstances",
			Handler:    _Scheduler_ResumeStreamInstances_Handler,
		},
		{
			MethodName: "ListMonitorRules",
			Handler:    _Scheduler_ListMonitorRules_Handler,
		},
		{
			MethodName: "DeleteMonitorRules",
			Handler:    _Scheduler_DeleteMonitorRules_Handler,
		},
		{
			MethodName: "EnableMonitorRules",
			Handler:    _Scheduler_EnableMonitorRules_Handler,
		},
		{
			MethodName: "DisableMonitorRules",
			Handler:    _Scheduler_DisableMonitorRules_Handler,
		},
		{
			MethodName: "CreateMonitorRule",
			Handler:    _Scheduler_CreateMonitorRule_Handler,
		},
		{
			MethodName: "UpdateMonitorRule",
			Handler:    _Scheduler_UpdateMonitorRule_Handler,
		},
		{
			MethodName: "DescribeMonitorRule",
			Handler:    _Scheduler_DescribeMonitorRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}
