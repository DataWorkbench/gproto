// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	// Interface for stream workflow task.
	//
	// DeleteAllFlows delete all workflow instance that specified workspace id.
	// And offline all workflow tasks.
	DeleteAllFlows(ctx context.Context, in *request.DeleteAllFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Execute execute immediately a workflow task. It trigger by user on console.
	ExecuteStreamFlow(ctx context.Context, in *request.ExecuteStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// DeleteStreamFlow delete all stream workflow instance by specified workflow id.
	// And offline workflow task from schedule system.
	DeleteStreamFlow(ctx context.Context, in *request.DeleteStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Submit submit a workflow task to scheduler system, It will
	// be cover if old job exists.
	SubmitStreamFlow(ctx context.Context, in *request.SubmitStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Remove remove specific workflow task from scheduler system.
	OfflineStreamFlow(ctx context.Context, in *request.OfflineStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for stream workflow cycle instance.
	//
	ListStreamCycleInst(ctx context.Context, in *request.ListStreamInst, opts ...grpc.CallOption) (*response.ListStreamInst, error)
	SuspendStreamCycleInst(ctx context.Context, in *request.SuspendStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ResumeStreamCycleInst(ctx context.Context, in *request.ResumeStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	TerminateStreamCycleInst(ctx context.Context, in *request.TerminateStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for stream workflow test instance.
	//
	ListStreamTestInst(ctx context.Context, in *request.ListStreamInst, opts ...grpc.CallOption) (*response.ListStreamInst, error)
	SuspendStreamTestInst(ctx context.Context, in *request.SuspendStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ResumeStreamTestInst(ctx context.Context, in *request.ResumeStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	TerminateStreamTestInst(ctx context.Context, in *request.TerminateStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	//
	ListMonitorRules(ctx context.Context, in *request.ListMonitorRules, opts ...grpc.CallOption) (*response.ListMonitorRules, error)
	CreateMonitorRule(ctx context.Context, in *request.CreateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteMonitorRule(ctx context.Context, in *request.DeleteMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UpdateMonitorRule(ctx context.Context, in *request.UpdateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeMonitorRule(ctx context.Context, in *request.DescribeMonitorRule, opts ...grpc.CallOption) (*response.DescribeMonitorRule, error)
	EnableMonitorRule(ctx context.Context, in *request.EnableMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DisableMonitorRule(ctx context.Context, in *request.DisableMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) DeleteAllFlows(ctx context.Context, in *request.DeleteAllFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DeleteAllFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ExecuteStreamFlow(ctx context.Context, in *request.ExecuteStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ExecuteStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteStreamFlow(ctx context.Context, in *request.DeleteStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DeleteStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SubmitStreamFlow(ctx context.Context, in *request.SubmitStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/SubmitStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) OfflineStreamFlow(ctx context.Context, in *request.OfflineStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/OfflineStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListStreamCycleInst(ctx context.Context, in *request.ListStreamInst, opts ...grpc.CallOption) (*response.ListStreamInst, error) {
	out := new(response.ListStreamInst)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ListStreamCycleInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SuspendStreamCycleInst(ctx context.Context, in *request.SuspendStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/SuspendStreamCycleInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ResumeStreamCycleInst(ctx context.Context, in *request.ResumeStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ResumeStreamCycleInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) TerminateStreamCycleInst(ctx context.Context, in *request.TerminateStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/TerminateStreamCycleInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListStreamTestInst(ctx context.Context, in *request.ListStreamInst, opts ...grpc.CallOption) (*response.ListStreamInst, error) {
	out := new(response.ListStreamInst)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ListStreamTestInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SuspendStreamTestInst(ctx context.Context, in *request.SuspendStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/SuspendStreamTestInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ResumeStreamTestInst(ctx context.Context, in *request.ResumeStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ResumeStreamTestInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) TerminateStreamTestInst(ctx context.Context, in *request.TerminateStreamInst, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/TerminateStreamTestInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListMonitorRules(ctx context.Context, in *request.ListMonitorRules, opts ...grpc.CallOption) (*response.ListMonitorRules, error) {
	out := new(response.ListMonitorRules)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ListMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) CreateMonitorRule(ctx context.Context, in *request.CreateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/CreateMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteMonitorRule(ctx context.Context, in *request.DeleteMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DeleteMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateMonitorRule(ctx context.Context, in *request.UpdateMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/UpdateMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DescribeMonitorRule(ctx context.Context, in *request.DescribeMonitorRule, opts ...grpc.CallOption) (*response.DescribeMonitorRule, error) {
	out := new(response.DescribeMonitorRule)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DescribeMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) EnableMonitorRule(ctx context.Context, in *request.EnableMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/EnableMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DisableMonitorRule(ctx context.Context, in *request.DisableMonitorRule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/DisableMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	// Interface for stream workflow task.
	//
	// DeleteAllFlows delete all workflow instance that specified workspace id.
	// And offline all workflow tasks.
	DeleteAllFlows(context.Context, *request.DeleteAllFlows) (*model.EmptyStruct, error)
	// Execute execute immediately a workflow task. It trigger by user on console.
	ExecuteStreamFlow(context.Context, *request.ExecuteStreamFlow) (*model.EmptyStruct, error)
	// DeleteStreamFlow delete all stream workflow instance by specified workflow id.
	// And offline workflow task from schedule system.
	DeleteStreamFlow(context.Context, *request.DeleteStreamFlow) (*model.EmptyStruct, error)
	// Submit submit a workflow task to scheduler system, It will
	// be cover if old job exists.
	SubmitStreamFlow(context.Context, *request.SubmitStreamFlow) (*model.EmptyStruct, error)
	// Remove remove specific workflow task from scheduler system.
	OfflineStreamFlow(context.Context, *request.OfflineStreamFlow) (*model.EmptyStruct, error)
	// Interface for stream workflow cycle instance.
	//
	ListStreamCycleInst(context.Context, *request.ListStreamInst) (*response.ListStreamInst, error)
	SuspendStreamCycleInst(context.Context, *request.SuspendStreamInst) (*model.EmptyStruct, error)
	ResumeStreamCycleInst(context.Context, *request.ResumeStreamInst) (*model.EmptyStruct, error)
	TerminateStreamCycleInst(context.Context, *request.TerminateStreamInst) (*model.EmptyStruct, error)
	// Interface for stream workflow test instance.
	//
	ListStreamTestInst(context.Context, *request.ListStreamInst) (*response.ListStreamInst, error)
	SuspendStreamTestInst(context.Context, *request.SuspendStreamInst) (*model.EmptyStruct, error)
	ResumeStreamTestInst(context.Context, *request.ResumeStreamInst) (*model.EmptyStruct, error)
	TerminateStreamTestInst(context.Context, *request.TerminateStreamInst) (*model.EmptyStruct, error)
	//
	ListMonitorRules(context.Context, *request.ListMonitorRules) (*response.ListMonitorRules, error)
	CreateMonitorRule(context.Context, *request.CreateMonitorRule) (*model.EmptyStruct, error)
	DeleteMonitorRule(context.Context, *request.DeleteMonitorRule) (*model.EmptyStruct, error)
	UpdateMonitorRule(context.Context, *request.UpdateMonitorRule) (*model.EmptyStruct, error)
	DescribeMonitorRule(context.Context, *request.DescribeMonitorRule) (*response.DescribeMonitorRule, error)
	EnableMonitorRule(context.Context, *request.EnableMonitorRule) (*model.EmptyStruct, error)
	DisableMonitorRule(context.Context, *request.DisableMonitorRule) (*model.EmptyStruct, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) DeleteAllFlows(context.Context, *request.DeleteAllFlows) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllFlows not implemented")
}
func (UnimplementedSchedulerServer) ExecuteStreamFlow(context.Context, *request.ExecuteStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) DeleteStreamFlow(context.Context, *request.DeleteStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) SubmitStreamFlow(context.Context, *request.SubmitStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) OfflineStreamFlow(context.Context, *request.OfflineStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) ListStreamCycleInst(context.Context, *request.ListStreamInst) (*response.ListStreamInst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamCycleInst not implemented")
}
func (UnimplementedSchedulerServer) SuspendStreamCycleInst(context.Context, *request.SuspendStreamInst) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendStreamCycleInst not implemented")
}
func (UnimplementedSchedulerServer) ResumeStreamCycleInst(context.Context, *request.ResumeStreamInst) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeStreamCycleInst not implemented")
}
func (UnimplementedSchedulerServer) TerminateStreamCycleInst(context.Context, *request.TerminateStreamInst) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateStreamCycleInst not implemented")
}
func (UnimplementedSchedulerServer) ListStreamTestInst(context.Context, *request.ListStreamInst) (*response.ListStreamInst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamTestInst not implemented")
}
func (UnimplementedSchedulerServer) SuspendStreamTestInst(context.Context, *request.SuspendStreamInst) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendStreamTestInst not implemented")
}
func (UnimplementedSchedulerServer) ResumeStreamTestInst(context.Context, *request.ResumeStreamInst) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeStreamTestInst not implemented")
}
func (UnimplementedSchedulerServer) TerminateStreamTestInst(context.Context, *request.TerminateStreamInst) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateStreamTestInst not implemented")
}
func (UnimplementedSchedulerServer) ListMonitorRules(context.Context, *request.ListMonitorRules) (*response.ListMonitorRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitorRules not implemented")
}
func (UnimplementedSchedulerServer) CreateMonitorRule(context.Context, *request.CreateMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) DeleteMonitorRule(context.Context, *request.DeleteMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) UpdateMonitorRule(context.Context, *request.UpdateMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) DescribeMonitorRule(context.Context, *request.DescribeMonitorRule) (*response.DescribeMonitorRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) EnableMonitorRule(context.Context, *request.EnableMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) DisableMonitorRule(context.Context, *request.DisableMonitorRule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMonitorRule not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_DeleteAllFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteAllFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteAllFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DeleteAllFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteAllFlows(ctx, req.(*request.DeleteAllFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ExecuteStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ExecuteStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ExecuteStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ExecuteStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ExecuteStreamFlow(ctx, req.(*request.ExecuteStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DeleteStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteStreamFlow(ctx, req.(*request.DeleteStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SubmitStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SubmitStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SubmitStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/SubmitStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SubmitStreamFlow(ctx, req.(*request.SubmitStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_OfflineStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.OfflineStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).OfflineStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/OfflineStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).OfflineStreamFlow(ctx, req.(*request.OfflineStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListStreamCycleInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListStreamCycleInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ListStreamCycleInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListStreamCycleInst(ctx, req.(*request.ListStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SuspendStreamCycleInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SuspendStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SuspendStreamCycleInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/SuspendStreamCycleInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SuspendStreamCycleInst(ctx, req.(*request.SuspendStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ResumeStreamCycleInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResumeStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ResumeStreamCycleInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ResumeStreamCycleInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ResumeStreamCycleInst(ctx, req.(*request.ResumeStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_TerminateStreamCycleInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.TerminateStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).TerminateStreamCycleInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/TerminateStreamCycleInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).TerminateStreamCycleInst(ctx, req.(*request.TerminateStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListStreamTestInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListStreamTestInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ListStreamTestInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListStreamTestInst(ctx, req.(*request.ListStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SuspendStreamTestInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SuspendStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SuspendStreamTestInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/SuspendStreamTestInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SuspendStreamTestInst(ctx, req.(*request.SuspendStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ResumeStreamTestInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResumeStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ResumeStreamTestInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ResumeStreamTestInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ResumeStreamTestInst(ctx, req.(*request.ResumeStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_TerminateStreamTestInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.TerminateStreamInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).TerminateStreamTestInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/TerminateStreamTestInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).TerminateStreamTestInst(ctx, req.(*request.TerminateStreamInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ListMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListMonitorRules(ctx, req.(*request.ListMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_CreateMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/CreateMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateMonitorRule(ctx, req.(*request.CreateMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DeleteMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteMonitorRule(ctx, req.(*request.DeleteMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/UpdateMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateMonitorRule(ctx, req.(*request.UpdateMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DescribeMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DescribeMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DescribeMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DescribeMonitorRule(ctx, req.(*request.DescribeMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_EnableMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EnableMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).EnableMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/EnableMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).EnableMonitorRule(ctx, req.(*request.EnableMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DisableMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DisableMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DisableMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/DisableMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DisableMonitorRule(ctx, req.(*request.DisableMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shpb.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteAllFlows",
			Handler:    _Scheduler_DeleteAllFlows_Handler,
		},
		{
			MethodName: "ExecuteStreamFlow",
			Handler:    _Scheduler_ExecuteStreamFlow_Handler,
		},
		{
			MethodName: "DeleteStreamFlow",
			Handler:    _Scheduler_DeleteStreamFlow_Handler,
		},
		{
			MethodName: "SubmitStreamFlow",
			Handler:    _Scheduler_SubmitStreamFlow_Handler,
		},
		{
			MethodName: "OfflineStreamFlow",
			Handler:    _Scheduler_OfflineStreamFlow_Handler,
		},
		{
			MethodName: "ListStreamCycleInst",
			Handler:    _Scheduler_ListStreamCycleInst_Handler,
		},
		{
			MethodName: "SuspendStreamCycleInst",
			Handler:    _Scheduler_SuspendStreamCycleInst_Handler,
		},
		{
			MethodName: "ResumeStreamCycleInst",
			Handler:    _Scheduler_ResumeStreamCycleInst_Handler,
		},
		{
			MethodName: "TerminateStreamCycleInst",
			Handler:    _Scheduler_TerminateStreamCycleInst_Handler,
		},
		{
			MethodName: "ListStreamTestInst",
			Handler:    _Scheduler_ListStreamTestInst_Handler,
		},
		{
			MethodName: "SuspendStreamTestInst",
			Handler:    _Scheduler_SuspendStreamTestInst_Handler,
		},
		{
			MethodName: "ResumeStreamTestInst",
			Handler:    _Scheduler_ResumeStreamTestInst_Handler,
		},
		{
			MethodName: "TerminateStreamTestInst",
			Handler:    _Scheduler_TerminateStreamTestInst_Handler,
		},
		{
			MethodName: "ListMonitorRules",
			Handler:    _Scheduler_ListMonitorRules_Handler,
		},
		{
			MethodName: "CreateMonitorRule",
			Handler:    _Scheduler_CreateMonitorRule_Handler,
		},
		{
			MethodName: "DeleteMonitorRule",
			Handler:    _Scheduler_DeleteMonitorRule_Handler,
		},
		{
			MethodName: "UpdateMonitorRule",
			Handler:    _Scheduler_UpdateMonitorRule_Handler,
		},
		{
			MethodName: "DescribeMonitorRule",
			Handler:    _Scheduler_DescribeMonitorRule_Handler,
		},
		{
			MethodName: "EnableMonitorRule",
			Handler:    _Scheduler_EnableMonitorRule_Handler,
		},
		{
			MethodName: "DisableMonitorRule",
			Handler:    _Scheduler_DisableMonitorRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}
