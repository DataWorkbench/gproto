// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	// Execute execute immediately a workflow task. It trigger by user on console.
	ExecuteStreamFlow(ctx context.Context, in *ExecuteStreamFlowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Submit submit a workflow task to scheduler system, It will
	// be cover if old job exists.
	SubmitStreamFlow(ctx context.Context, in *SubmitStreamFlowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Remove remove specific workflow task from scheduler system.
	RemoveStreamFlow(ctx context.Context, in *RemoveStreamFlowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) ExecuteStreamFlow(ctx context.Context, in *ExecuteStreamFlowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/ExecuteStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SubmitStreamFlow(ctx context.Context, in *SubmitStreamFlowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/SubmitStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveStreamFlow(ctx context.Context, in *RemoveStreamFlowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/shpb.Scheduler/RemoveStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	// Execute execute immediately a workflow task. It trigger by user on console.
	ExecuteStreamFlow(context.Context, *ExecuteStreamFlowRequest) (*model.EmptyStruct, error)
	// Submit submit a workflow task to scheduler system, It will
	// be cover if old job exists.
	SubmitStreamFlow(context.Context, *SubmitStreamFlowRequest) (*model.EmptyStruct, error)
	// Remove remove specific workflow task from scheduler system.
	RemoveStreamFlow(context.Context, *RemoveStreamFlowRequest) (*model.EmptyStruct, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) ExecuteStreamFlow(context.Context, *ExecuteStreamFlowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) SubmitStreamFlow(context.Context, *SubmitStreamFlowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) RemoveStreamFlow(context.Context, *RemoveStreamFlowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamFlow not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_ExecuteStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteStreamFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ExecuteStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/ExecuteStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ExecuteStreamFlow(ctx, req.(*ExecuteStreamFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SubmitStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitStreamFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SubmitStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/SubmitStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SubmitStreamFlow(ctx, req.(*SubmitStreamFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shpb.Scheduler/RemoveStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveStreamFlow(ctx, req.(*RemoveStreamFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shpb.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteStreamFlow",
			Handler:    _Scheduler_ExecuteStreamFlow_Handler,
		},
		{
			MethodName: "SubmitStreamFlow",
			Handler:    _Scheduler_SubmitStreamFlow_Handler,
		},
		{
			MethodName: "RemoveStreamFlow",
			Handler:    _Scheduler_RemoveStreamFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}
