// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/model.proto

package model

import (
	datasourcepb "github.com/DataWorkbench/gproto/pkg/datasourcepb"
	flinkpb "github.com/DataWorkbench/gproto/pkg/flinkpb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/yu31/proto-go-plugin/pb/gosqlpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Workspace_Status int32

const (
	Workspace__        Workspace_Status = 0
	Workspace_Enabled  Workspace_Status = 1
	Workspace_Disabled Workspace_Status = 2
)

// Enum value maps for Workspace_Status.
var (
	Workspace_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	Workspace_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x Workspace_Status) Enum() *Workspace_Status {
	p := new(Workspace_Status)
	*p = x
	return p
}

func (x Workspace_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workspace_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[0].Descriptor()
}

func (Workspace_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[0]
}

func (x Workspace_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workspace_Status.Descriptor instead.
func (Workspace_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2, 0}
}

type StreamJob_Type int32

const (
	StreamJob__        StreamJob_Type = 0 // is useless.
	StreamJob_Operator StreamJob_Type = 1
	StreamJob_SQL      StreamJob_Type = 2
	StreamJob_Jar      StreamJob_Type = 3
	StreamJob_Python   StreamJob_Type = 4
	StreamJob_Scala    StreamJob_Type = 5
)

// Enum value maps for StreamJob_Type.
var (
	StreamJob_Type_name = map[int32]string{
		0: "_",
		1: "Operator",
		2: "SQL",
		3: "Jar",
		4: "Python",
		5: "Scala",
	}
	StreamJob_Type_value = map[string]int32{
		"_":        0,
		"Operator": 1,
		"SQL":      2,
		"Jar":      3,
		"Python":   4,
		"Scala":    5,
	}
)

func (x StreamJob_Type) Enum() *StreamJob_Type {
	p := new(StreamJob_Type)
	*p = x
	return p
}

func (x StreamJob_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJob_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[1].Descriptor()
}

func (StreamJob_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[1]
}

func (x StreamJob_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJob_Type.Descriptor instead.
func (StreamJob_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3, 0}
}

type StreamJobSchedule_ConcurrencyPolicy int32

const (
	StreamJobSchedule__       StreamJobSchedule_ConcurrencyPolicy = 0 // Is useless.
	StreamJobSchedule_Allow   StreamJobSchedule_ConcurrencyPolicy = 1
	StreamJobSchedule_Forbid  StreamJobSchedule_ConcurrencyPolicy = 2
	StreamJobSchedule_Replace StreamJobSchedule_ConcurrencyPolicy = 3
)

// Enum value maps for StreamJobSchedule_ConcurrencyPolicy.
var (
	StreamJobSchedule_ConcurrencyPolicy_name = map[int32]string{
		0: "_",
		1: "Allow",
		2: "Forbid",
		3: "Replace",
	}
	StreamJobSchedule_ConcurrencyPolicy_value = map[string]int32{
		"_":       0,
		"Allow":   1,
		"Forbid":  2,
		"Replace": 3,
	}
)

func (x StreamJobSchedule_ConcurrencyPolicy) Enum() *StreamJobSchedule_ConcurrencyPolicy {
	p := new(StreamJobSchedule_ConcurrencyPolicy)
	*p = x
	return p
}

func (x StreamJobSchedule_ConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobSchedule_ConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[2].Descriptor()
}

func (StreamJobSchedule_ConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[2]
}

func (x StreamJobSchedule_ConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobSchedule_ConcurrencyPolicy.Descriptor instead.
func (StreamJobSchedule_ConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{7, 0}
}

type StreamJobSchedule_RetryPolicy int32

const (
	StreamJobSchedule___   StreamJobSchedule_RetryPolicy = 0 // Is useless.
	StreamJobSchedule_None StreamJobSchedule_RetryPolicy = 1
	StreamJobSchedule_Auto StreamJobSchedule_RetryPolicy = 2
)

// Enum value maps for StreamJobSchedule_RetryPolicy.
var (
	StreamJobSchedule_RetryPolicy_name = map[int32]string{
		0: "__",
		1: "None",
		2: "Auto",
	}
	StreamJobSchedule_RetryPolicy_value = map[string]int32{
		"__":   0,
		"None": 1,
		"Auto": 2,
	}
)

func (x StreamJobSchedule_RetryPolicy) Enum() *StreamJobSchedule_RetryPolicy {
	p := new(StreamJobSchedule_RetryPolicy)
	*p = x
	return p
}

func (x StreamJobSchedule_RetryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobSchedule_RetryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[3].Descriptor()
}

func (StreamJobSchedule_RetryPolicy) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[3]
}

func (x StreamJobSchedule_RetryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobSchedule_RetryPolicy.Descriptor instead.
func (StreamJobSchedule_RetryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{7, 1}
}

type StreamJobRelease_Status int32

const (
	StreamJobRelease__         StreamJobRelease_Status = 0
	StreamJobRelease_Active    StreamJobRelease_Status = 1
	StreamJobRelease_Suspended StreamJobRelease_Status = 2
)

// Enum value maps for StreamJobRelease_Status.
var (
	StreamJobRelease_Status_name = map[int32]string{
		0: "_",
		1: "Active",
		2: "Suspended",
	}
	StreamJobRelease_Status_value = map[string]int32{
		"_":         0,
		"Active":    1,
		"Suspended": 2,
	}
)

func (x StreamJobRelease_Status) Enum() *StreamJobRelease_Status {
	p := new(StreamJobRelease_Status)
	*p = x
	return p
}

func (x StreamJobRelease_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobRelease_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[4].Descriptor()
}

func (StreamJobRelease_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[4]
}

func (x StreamJobRelease_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobRelease_Status.Descriptor instead.
func (StreamJobRelease_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{8, 0}
}

type StreamJobInst_State int32

const (
	StreamJobInst__          StreamJobInst_State = 0
	StreamJobInst_Pending    StreamJobInst_State = 1
	StreamJobInst_Running    StreamJobInst_State = 2
	StreamJobInst_Retrying   StreamJobInst_State = 3
	StreamJobInst_Suspended  StreamJobInst_State = 4
	StreamJobInst_Terminated StreamJobInst_State = 5
	StreamJobInst_Timeout    StreamJobInst_State = 6
	StreamJobInst_Succeed    StreamJobInst_State = 7
	StreamJobInst_Failed     StreamJobInst_State = 8
)

// Enum value maps for StreamJobInst_State.
var (
	StreamJobInst_State_name = map[int32]string{
		0: "_",
		1: "Pending",
		2: "Running",
		3: "Retrying",
		4: "Suspended",
		5: "Terminated",
		6: "Timeout",
		7: "Succeed",
		8: "Failed",
	}
	StreamJobInst_State_value = map[string]int32{
		"_":          0,
		"Pending":    1,
		"Running":    2,
		"Retrying":   3,
		"Suspended":  4,
		"Terminated": 5,
		"Timeout":    6,
		"Succeed":    7,
		"Failed":     8,
	}
)

func (x StreamJobInst_State) Enum() *StreamJobInst_State {
	p := new(StreamJobInst_State)
	*p = x
	return p
}

func (x StreamJobInst_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamJobInst_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[5].Descriptor()
}

func (StreamJobInst_State) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[5]
}

func (x StreamJobInst_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamJobInst_State.Descriptor instead.
func (StreamJobInst_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{9, 0}
}

// Type declares the API operation type.
type Operation_Type int32

const (
	Operation__     Operation_Type = 0 // Is useless.
	Operation_Write Operation_Type = 1 // Include Operation: create/update/delete.
	Operation_Read  Operation_Type = 2 // Include Operation: read.
)

// Enum value maps for Operation_Type.
var (
	Operation_Type_name = map[int32]string{
		0: "_",
		1: "Write",
		2: "Read",
	}
	Operation_Type_value = map[string]int32{
		"_":     0,
		"Write": 1,
		"Read":  2,
	}
)

func (x Operation_Type) Enum() *Operation_Type {
	p := new(Operation_Type)
	*p = x
	return p
}

func (x Operation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[6].Descriptor()
}

func (Operation_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[6]
}

func (x Operation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Type.Descriptor instead.
func (Operation_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{10, 0}
}

// State declares the API operation result.
type Operation_State int32

const (
	Operation___      Operation_State = 0
	Operation_Success Operation_State = 1
	Operation_Failed  Operation_State = 2
)

// Enum value maps for Operation_State.
var (
	Operation_State_name = map[int32]string{
		0: "__",
		1: "Success",
		2: "Failed",
	}
	Operation_State_value = map[string]int32{
		"__":      0,
		"Success": 1,
		"Failed":  2,
	}
)

func (x Operation_State) Enum() *Operation_State {
	p := new(Operation_State)
	*p = x
	return p
}

func (x Operation_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[7].Descriptor()
}

func (Operation_State) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[7]
}

func (x Operation_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_State.Descriptor instead.
func (Operation_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{10, 1}
}

type Role_Type int32

const (
	Role__      Role_Type = 0
	Role_System Role_Type = 1
	Role_Custom Role_Type = 2
)

// Enum value maps for Role_Type.
var (
	Role_Type_name = map[int32]string{
		0: "_",
		1: "System",
		2: "Custom",
	}
	Role_Type_value = map[string]int32{
		"_":      0,
		"System": 1,
		"Custom": 2,
	}
)

func (x Role_Type) Enum() *Role_Type {
	p := new(Role_Type)
	*p = x
	return p
}

func (x Role_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[8].Descriptor()
}

func (Role_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[8]
}

func (x Role_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role_Type.Descriptor instead.
func (Role_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{11, 0}
}

type MonitorRule_Status int32

const (
	MonitorRule__        MonitorRule_Status = 0
	MonitorRule_Enabled  MonitorRule_Status = 1
	MonitorRule_Disabled MonitorRule_Status = 2
)

// Enum value maps for MonitorRule_Status.
var (
	MonitorRule_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	MonitorRule_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x MonitorRule_Status) Enum() *MonitorRule_Status {
	p := new(MonitorRule_Status)
	*p = x
	return p
}

func (x MonitorRule_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorRule_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[9].Descriptor()
}

func (MonitorRule_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[9]
}

func (x MonitorRule_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorRule_Status.Descriptor instead.
func (MonitorRule_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{13, 0}
}

type DataSource_Status int32

const (
	DataSource__        DataSource_Status = 0
	DataSource_Enabled  DataSource_Status = 1
	DataSource_Disabled DataSource_Status = 2
)

// Enum value maps for DataSource_Status.
var (
	DataSource_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	DataSource_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x DataSource_Status) Enum() *DataSource_Status {
	p := new(DataSource_Status)
	*p = x
	return p
}

func (x DataSource_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[10].Descriptor()
}

func (DataSource_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[10]
}

func (x DataSource_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_Status.Descriptor instead.
func (DataSource_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{20, 0}
}

type DataSource_ConnectionStatus int32

const (
	DataSource___             DataSource_ConnectionStatus = 0
	DataSource_Success        DataSource_ConnectionStatus = 1
	DataSource_PartialSuccess DataSource_ConnectionStatus = 2
	DataSource_Failed         DataSource_ConnectionStatus = 3
)

// Enum value maps for DataSource_ConnectionStatus.
var (
	DataSource_ConnectionStatus_name = map[int32]string{
		0: "__",
		1: "Success",
		2: "PartialSuccess",
		3: "Failed",
	}
	DataSource_ConnectionStatus_value = map[string]int32{
		"__":             0,
		"Success":        1,
		"PartialSuccess": 2,
		"Failed":         3,
	}
)

func (x DataSource_ConnectionStatus) Enum() *DataSource_ConnectionStatus {
	p := new(DataSource_ConnectionStatus)
	*p = x
	return p
}

func (x DataSource_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[11].Descriptor()
}

func (DataSource_ConnectionStatus) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[11]
}

func (x DataSource_ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_ConnectionStatus.Descriptor instead.
func (DataSource_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{20, 1}
}

type DataSource_Type int32

const (
	DataSource____        DataSource_Type = 0
	DataSource_MySQL      DataSource_Type = 1
	DataSource_PostgreSQL DataSource_Type = 2
	DataSource_Kafka      DataSource_Type = 3
	DataSource_S3         DataSource_Type = 4
	DataSource_ClickHouse DataSource_Type = 5
	DataSource_HBase      DataSource_Type = 6
	DataSource_Ftp        DataSource_Type = 7
	DataSource_HDFS       DataSource_Type = 8
)

// Enum value maps for DataSource_Type.
var (
	DataSource_Type_name = map[int32]string{
		0: "___",
		1: "MySQL",
		2: "PostgreSQL",
		3: "Kafka",
		4: "S3",
		5: "ClickHouse",
		6: "HBase",
		7: "Ftp",
		8: "HDFS",
	}
	DataSource_Type_value = map[string]int32{
		"___":        0,
		"MySQL":      1,
		"PostgreSQL": 2,
		"Kafka":      3,
		"S3":         4,
		"ClickHouse": 5,
		"HBase":      6,
		"Ftp":        7,
		"HDFS":       8,
	}
)

func (x DataSource_Type) Enum() *DataSource_Type {
	p := new(DataSource_Type)
	*p = x
	return p
}

func (x DataSource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[12].Descriptor()
}

func (DataSource_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[12]
}

func (x DataSource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_Type.Descriptor instead.
func (DataSource_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{20, 2}
}

type TableInfo_Kind int32

const (
	TableInfo__           TableInfo_Kind = 0
	TableInfo_Source      TableInfo_Kind = 1
	TableInfo_Destination TableInfo_Kind = 2
	TableInfo_Dimension   TableInfo_Kind = 3
)

// Enum value maps for TableInfo_Kind.
var (
	TableInfo_Kind_name = map[int32]string{
		0: "_",
		1: "Source",
		2: "Destination",
		3: "Dimension",
	}
	TableInfo_Kind_value = map[string]int32{
		"_":           0,
		"Source":      1,
		"Destination": 2,
		"Dimension":   3,
	}
)

func (x TableInfo_Kind) Enum() *TableInfo_Kind {
	p := new(TableInfo_Kind)
	*p = x
	return p
}

func (x TableInfo_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableInfo_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[13].Descriptor()
}

func (TableInfo_Kind) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[13]
}

func (x TableInfo_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableInfo_Kind.Descriptor instead.
func (TableInfo_Kind) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{21, 0}
}

type Resource_Type int32

const (
	Resource__         Resource_Type = 0
	Resource_Jar       Resource_Type = 1
	Resource_Udf       Resource_Type = 2
	Resource_CONNECTOR Resource_Type = 3
)

// Enum value maps for Resource_Type.
var (
	Resource_Type_name = map[int32]string{
		0: "_",
		1: "Jar",
		2: "Udf",
		3: "CONNECTOR",
	}
	Resource_Type_value = map[string]int32{
		"_":         0,
		"Jar":       1,
		"Udf":       2,
		"CONNECTOR": 3,
	}
)

func (x Resource_Type) Enum() *Resource_Type {
	p := new(Resource_Type)
	*p = x
	return p
}

func (x Resource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[14].Descriptor()
}

func (Resource_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[14]
}

func (x Resource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_Type.Descriptor instead.
func (Resource_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{22, 0}
}

type UDFInfo_Type int32

const (
	UDFInfo__     UDFInfo_Type = 0
	UDFInfo_UDF   UDFInfo_Type = 1
	UDFInfo_UDTF  UDFInfo_Type = 2
	UDFInfo_UDTTF UDFInfo_Type = 3
)

// Enum value maps for UDFInfo_Type.
var (
	UDFInfo_Type_name = map[int32]string{
		0: "_",
		1: "UDF",
		2: "UDTF",
		3: "UDTTF",
	}
	UDFInfo_Type_value = map[string]int32{
		"_":     0,
		"UDF":   1,
		"UDTF":  2,
		"UDTTF": 3,
	}
)

func (x UDFInfo_Type) Enum() *UDFInfo_Type {
	p := new(UDFInfo_Type)
	*p = x
	return p
}

func (x UDFInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UDFInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[15].Descriptor()
}

func (UDFInfo_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[15]
}

func (x UDFInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UDFInfo_Type.Descriptor instead.
func (UDFInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{23, 0}
}

type UDFInfo_Language int32

const (
	UDFInfo___     UDFInfo_Language = 0
	UDFInfo_Scala  UDFInfo_Language = 1
	UDFInfo_Java   UDFInfo_Language = 2
	UDFInfo_Python UDFInfo_Language = 3
)

// Enum value maps for UDFInfo_Language.
var (
	UDFInfo_Language_name = map[int32]string{
		0: "__",
		1: "Scala",
		2: "Java",
		3: "Python",
	}
	UDFInfo_Language_value = map[string]int32{
		"__":     0,
		"Scala":  1,
		"Java":   2,
		"Python": 3,
	}
)

func (x UDFInfo_Language) Enum() *UDFInfo_Language {
	p := new(UDFInfo_Language)
	*p = x
	return p
}

func (x UDFInfo_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UDFInfo_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[16].Descriptor()
}

func (UDFInfo_Language) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[16]
}

func (x UDFInfo_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UDFInfo_Language.Descriptor instead.
func (UDFInfo_Language) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{23, 1}
}

type FlinkCluster_Status int32

const (
	FlinkCluster__         FlinkCluster_Status = 0
	FlinkCluster_Running   FlinkCluster_Status = 1
	FlinkCluster_Stopped   FlinkCluster_Status = 2
	FlinkCluster_Starting  FlinkCluster_Status = 3
	FlinkCluster_Exception FlinkCluster_Status = 4
)

// Enum value maps for FlinkCluster_Status.
var (
	FlinkCluster_Status_name = map[int32]string{
		0: "_",
		1: "Running",
		2: "Stopped",
		3: "Starting",
		4: "Exception",
	}
	FlinkCluster_Status_value = map[string]int32{
		"_":         0,
		"Running":   1,
		"Stopped":   2,
		"Starting":  3,
		"Exception": 4,
	}
)

func (x FlinkCluster_Status) Enum() *FlinkCluster_Status {
	p := new(FlinkCluster_Status)
	*p = x
	return p
}

func (x FlinkCluster_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlinkCluster_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[17].Descriptor()
}

func (FlinkCluster_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[17]
}

func (x FlinkCluster_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlinkCluster_Status.Descriptor instead.
func (FlinkCluster_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{27, 0}
}

// EmptyStruct represents no value with a message.
type EmptyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyStruct) Reset() {
	*x = EmptyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyStruct) ProtoMessage() {}

func (x *EmptyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyStruct.ProtoReflect.Descriptor instead.
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{0}
}

// Error transmits customized-error between grpc client and server by status details
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code is summary information of error.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Status is http status code.
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// EnUS is detail information of error with en_us format.
	EnUs string `protobuf:"bytes,3,opt,name=en_us,json=enUs,proto3" json:"en_us,omitempty"`
	// ZhCN is detail information of error with zh_cn format.
	ZhCn string `protobuf:"bytes,4,opt,name=zh_cn,json=zhCn,proto3" json:"zh_cn,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Error) GetEnUs() string {
	if x != nil {
		return x.EnUs
	}
	return ""
}

func (x *Error) GetZhCn() string {
	if x != nil {
		return x.ZhCn
	}
	return ""
}

// The workspace info.
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID, unique within a region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" gorm:"column:id;primaryKey;"`
	// User id of workspace owner.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" gorm:"column:owner;"`
	// Workspace Name, unique within a region.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workspace Description.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Workspace status, 1 => "enabled", 2 => "disabled".
	Status Workspace_Status `protobuf:"varint,5,opt,name=status,proto3,enum=model.Workspace_Status" json:"status" gorm:"column:status;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2}
}

func (x *Workspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workspace) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Workspace) GetStatus() Workspace_Status {
	if x != nil {
		return x.Status
	}
	return Workspace__
}

func (x *Workspace) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Workspace) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The stream job info
type StreamJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The job version id, only used for Published job.
	// Only used in published job.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job Description.
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type StreamJob_Type `protobuf:"varint,6,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type" gorm:"column:type;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamJob) Reset() {
	*x = StreamJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJob) ProtoMessage() {}

func (x *StreamJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJob.ProtoReflect.Descriptor instead.
func (*StreamJob) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3}
}

func (x *StreamJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJob) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamJob) GetType() StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return StreamJob__
}

func (x *StreamJob) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamJob) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// StreamJobProperty represents property of job.
type StreamJobProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job Id, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version  int64              `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey"`
	Code     *StreamJobCode     `protobuf:"bytes,4,opt,name=code,proto3" json:"code" gorm:"column:code;type:json"`
	Args     *StreamJobArgs     `protobuf:"bytes,5,opt,name=args,proto3" json:"args" gorm:"column:args;type:json"`
	Schedule *StreamJobSchedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule" gorm:"column:schedule;type:json"`
}

func (x *StreamJobProperty) Reset() {
	*x = StreamJobProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobProperty) ProtoMessage() {}

func (x *StreamJobProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobProperty.ProtoReflect.Descriptor instead.
func (*StreamJobProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{4}
}

func (x *StreamJobProperty) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJobProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJobProperty) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamJobProperty) GetCode() *StreamJobCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StreamJobProperty) GetArgs() *StreamJobArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *StreamJobProperty) GetSchedule() *StreamJobSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// StreamJobCode represents a job code info.
type StreamJobCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	Type StreamJob_Type `protobuf:"varint,1,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type"`
	// The flink operator nodes. Is useless on present.
	Operators []*flinkpb.FlinkOperator `protobuf:"bytes,2,rep,name=operators,proto3" json:"operators"`
	Sql       *flinkpb.FlinkSQL        `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql" binding:"-"`
	// Jar
	Jar *flinkpb.FlinkJar `protobuf:"bytes,4,opt,name=jar,proto3" json:"jar" binding:"-"`
	// Scala
	Scala *flinkpb.FlinkScala `protobuf:"bytes,5,opt,name=scala,proto3" json:"scala" binding:"-"`
	// Python
	Python *flinkpb.FlinkPython `protobuf:"bytes,6,opt,name=python,proto3" json:"python" binding:"-"`
}

func (x *StreamJobCode) Reset() {
	*x = StreamJobCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobCode) ProtoMessage() {}

func (x *StreamJobCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobCode.ProtoReflect.Descriptor instead.
func (*StreamJobCode) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{5}
}

func (x *StreamJobCode) GetType() StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return StreamJob__
}

func (x *StreamJobCode) GetOperators() []*flinkpb.FlinkOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *StreamJobCode) GetSql() *flinkpb.FlinkSQL {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (x *StreamJobCode) GetJar() *flinkpb.FlinkJar {
	if x != nil {
		return x.Jar
	}
	return nil
}

func (x *StreamJobCode) GetScala() *flinkpb.FlinkScala {
	if x != nil {
		return x.Scala
	}
	return nil
}

func (x *StreamJobCode) GetPython() *flinkpb.FlinkPython {
	if x != nil {
		return x.Python
	}
	return nil
}

// StreamJobArgs represents a job running parameters.
// Not use with gorm.
type StreamJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flink cluster id. Is required.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" binding:"required_if=engine_type 2"`
	// Flink parallelism. Is required, Min 0, Max 100. default is 0.
	Parallelism int32 `protobuf:"varint,2,opt,name=parallelism,proto3" json:"parallelism" binding:"gte=0,lte=100" mininum:"0" maximum:"10000"`
	// The config for function. Not required
	Function *StreamJobArgs_Function `protobuf:"bytes,3,opt,name=function,proto3" json:"function" binding:"-"`
}

func (x *StreamJobArgs) Reset() {
	*x = StreamJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobArgs) ProtoMessage() {}

func (x *StreamJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobArgs.ProtoReflect.Descriptor instead.
func (*StreamJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{6}
}

func (x *StreamJobArgs) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamJobArgs) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *StreamJobArgs) GetFunction() *StreamJobArgs_Function {
	if x != nil {
		return x.Function
	}
	return nil
}

// StreamJobSchedule represents a job schedule info.
// Not use with gorm.
type StreamJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 31507200(1971-01-01 00:00:00), means no limit.
	Started int64 `protobuf:"varint,1,opt,name=started,proto3" json:"started" default:"0" binding:"gte=0"`
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
	Ended int64 `protobuf:"varint,2,opt,name=ended,proto3" json:"ended" default:"0" binding:"gte=0"`
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace"
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	// Is required.
	ConcurrencyPolicy StreamJobSchedule_ConcurrencyPolicy `protobuf:"varint,3,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=model.StreamJobSchedule_ConcurrencyPolicy" json:"concurrency_policy" binding:"gte=1,lte=3"`
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	RetryPolicy StreamJobSchedule_RetryPolicy `protobuf:"varint,4,opt,name=retry_policy,json=retryPolicy,proto3,enum=model.StreamJobSchedule_RetryPolicy" json:"retry_policy" binding:"gte=1,lte=2"`
	// FIXME: test binding.
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	RetryLimit int32 `protobuf:"varint,5,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit" binding:"required_with=retry_policy=2,gte=1,lte=99"`
	// Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
	RetryInterval int32 `protobuf:"varint,6,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval" binding:"required_with=retry_policy=2,gte=1,lte=30"`
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 4320min.
	Timeout int32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout" default:"0" binding:"gte=0"`
	// Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
	PeriodType string `protobuf:"bytes,8,opt,name=period_type,json=periodType,proto3" json:"period_type" binding:"oneof=minute hour day week month year"`
	// Crontab Express. Is required.
	// FIXME: check binding.
	Express string `protobuf:"bytes,9,opt,name=express,proto3" json:"express" binding:"gte=5,lte=128"`
}

func (x *StreamJobSchedule) Reset() {
	*x = StreamJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobSchedule) ProtoMessage() {}

func (x *StreamJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobSchedule.ProtoReflect.Descriptor instead.
func (*StreamJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{7}
}

func (x *StreamJobSchedule) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *StreamJobSchedule) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *StreamJobSchedule) GetConcurrencyPolicy() StreamJobSchedule_ConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return StreamJobSchedule__
}

func (x *StreamJobSchedule) GetRetryPolicy() StreamJobSchedule_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return StreamJobSchedule___
}

func (x *StreamJobSchedule) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *StreamJobSchedule) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *StreamJobSchedule) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StreamJobSchedule) GetPeriodType() string {
	if x != nil {
		return x.PeriodType
	}
	return ""
}

func (x *StreamJobSchedule) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

// The release stream job info.
type StreamJobRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Job Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Job type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	Type StreamJob_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type" gorm:"column:type;"`
	// Release status, 1 => "active", 2 => "suspended"
	Status StreamJobRelease_Status `protobuf:"varint,6,opt,name=status,proto3,enum=model.StreamJobRelease_Status" json:"status" gorm:"column:status;"`
	// Job release description.
	Desc string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamJobRelease) Reset() {
	*x = StreamJobRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobRelease) ProtoMessage() {}

func (x *StreamJobRelease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobRelease.ProtoReflect.Descriptor instead.
func (*StreamJobRelease) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{8}
}

func (x *StreamJobRelease) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJobRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJobRelease) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamJobRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamJobRelease) GetType() StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return StreamJob__
}

func (x *StreamJobRelease) GetStatus() StreamJobRelease_Status {
	if x != nil {
		return x.Status
	}
	return StreamJobRelease__
}

func (x *StreamJobRelease) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamJobRelease) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamJobRelease) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The instance info of stream job.
type StreamJobInst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Job ID it belongs to.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" gorm:"column:job_id;"`
	// The release version.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version"`
	// Job instance ID, unique.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The instance state.
	State   StreamJobInst_State `protobuf:"varint,5,opt,name=state,proto3,enum=model.StreamJobInst_State" json:"state" gorm:"column:state;"`
	Created int64               `protobuf:"varint,6,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time
	Updated int64 `protobuf:"varint,7,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamJobInst) Reset() {
	*x = StreamJobInst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobInst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobInst) ProtoMessage() {}

func (x *StreamJobInst) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobInst.ProtoReflect.Descriptor instead.
func (*StreamJobInst) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{9}
}

func (x *StreamJobInst) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamJobInst) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StreamJobInst) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamJobInst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamJobInst) GetState() StreamJobInst_State {
	if x != nil {
		return x.State
	}
	return StreamJobInst__
}

func (x *StreamJobInst) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamJobInst) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workspace operation audit log record.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of who execute this operation.
	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"column:user_id;primaryKey;"`
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;primaryKey;"`
	//	-- The operation of user behavior.
	OpName string `protobuf:"bytes,3,opt,name=op_name,json=opName,proto3" json:"op_name" gorm:"column:op_name;"`
	// -- The type of operation, 2 => "Write",  3 => "Read".
	OpType Operation_Type `protobuf:"varint,4,opt,name=op_type,json=opType,proto3,enum=model.Operation_Type" json:"op_type" gorm:"column:op_type;"`
	// -- The result of operation, 1 => "Success", 2 => "Failed".
	State Operation_State `protobuf:"varint,5,opt,name=state,proto3,enum=model.Operation_State" json:"state" gorm:"column:state;"`
	// Timestamp of time of when accessed.
	Created int64 `protobuf:"varint,6,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{10}
}

func (x *Operation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Operation) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Operation) GetOpName() string {
	if x != nil {
		return x.OpName
	}
	return ""
}

func (x *Operation) GetOpType() Operation_Type {
	if x != nil {
		return x.OpType
	}
	return Operation__
}

func (x *Operation) GetState() Operation_State {
	if x != nil {
		return x.State
	}
	return Operation___
}

func (x *Operation) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// The Role info.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The name of role. unique in a workspace.
	Name string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	Type Role_Type `protobuf:"varint,4,opt,name=type,proto3,enum=model.Role_Type" json:"type" gorm:"column:type;"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{11}
}

func (x *Role) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetType() Role_Type {
	if x != nil {
		return x.Type
	}
	return Role__
}

// The workspace member info.
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;primaryKey;"`
	// The user id in account-server.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"column:user_id;primaryKey;"`
	// The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	RoleIds string `protobuf:"bytes,4,opt,name=role_ids,json=roleIds,proto3" json:"role_ids" gorm:"column:role_ids;"`
	Created int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time
	Updated int64 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{12}
}

func (x *Member) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Member) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Member) GetRoleIds() string {
	if x != nil {
		return x.RoleIds
	}
	return ""
}

func (x *Member) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Member) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The monitor rule info
type MonitorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Rule ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// Rule Name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Rule status, 1 => "enabled", 2 => "disabled".
	Status MonitorRule_Status `protobuf:"varint,4,opt,name=status,proto3,enum=model.MonitorRule_Status" json:"status" gorm:"column:status;"`
	// The object unit, 1 => "workspace" 2 => "job'
	Unit int32 `protobuf:"varint,5,opt,name=unit,proto3" json:"unit" gorm:"column:unit;"`
	// The object text.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text" gorm:"column:text;"`
	// The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
	Trigger int32 `protobuf:"varint,7,opt,name=trigger,proto3" json:"trigger" gorm:"column:trigger;"`
	// The alarm times. 1 ~ 99
	AlarmTimes int32 `protobuf:"varint,8,opt,name=alarm_times,json=alarmTimes,proto3" json:"alarm_times" gorm:"column:alarm_times;"`
	// The alarm interval. 1 ~ 30
	AlarmInterval int32 `protobuf:"varint,9,opt,name=alarm_interval,json=alarmInterval,proto3" json:"alarm_interval" gorm:"column:alarm_interval;"`
	// The alarm type. "sms, email"
	AlarmType string `protobuf:"bytes,10,opt,name=alarm_type,json=alarmType,proto3" json:"alarm_type" gorm:"column:alarm_type;"`
	// The free time. "00:01,03:00".
	FreeTime string `protobuf:"bytes,11,opt,name=free_time,json=freeTime,proto3" json:"free_time" gorm:"column:free_time;"`
	// The alarm receiver. "usr-111111,usr-22222".
	Receiver string `protobuf:"bytes,12,opt,name=receiver,proto3" json:"receiver" gorm:"column:receiver;"`
}

func (x *MonitorRule) Reset() {
	*x = MonitorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRule) ProtoMessage() {}

func (x *MonitorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRule.ProtoReflect.Descriptor instead.
func (*MonitorRule) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{13}
}

func (x *MonitorRule) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *MonitorRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MonitorRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitorRule) GetStatus() MonitorRule_Status {
	if x != nil {
		return x.Status
	}
	return MonitorRule__
}

func (x *MonitorRule) GetUnit() int32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *MonitorRule) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MonitorRule) GetTrigger() int32 {
	if x != nil {
		return x.Trigger
	}
	return 0
}

func (x *MonitorRule) GetAlarmTimes() int32 {
	if x != nil {
		return x.AlarmTimes
	}
	return 0
}

func (x *MonitorRule) GetAlarmInterval() int32 {
	if x != nil {
		return x.AlarmInterval
	}
	return 0
}

func (x *MonitorRule) GetAlarmType() string {
	if x != nil {
		return x.AlarmType
	}
	return ""
}

func (x *MonitorRule) GetFreeTime() string {
	if x != nil {
		return x.FreeTime
	}
	return ""
}

func (x *MonitorRule) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

// The message in inst queue..
type QueueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request id of beginning.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// The property of stream job.
	Property *StreamJobProperty `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	// The operation that you will execute.
	// 1 => "run"  2 => "retry" 3 => "terminate" 4 => "delete"
	Operation int32 `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// The number of times the instance task was executed.
	Times int32 `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	// The start execution time of the task instance.
	Started int64 `protobuf:"varint,5,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *QueueMessage) Reset() {
	*x = QueueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMessage) ProtoMessage() {}

func (x *QueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMessage.ProtoReflect.Descriptor instead.
func (*QueueMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{14}
}

func (x *QueueMessage) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *QueueMessage) GetProperty() *StreamJobProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *QueueMessage) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *QueueMessage) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *QueueMessage) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

type InstanceStatusStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance status
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
	// instance count with the status
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *InstanceStatusStat) Reset() {
	*x = InstanceStatusStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatusStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatusStat) ProtoMessage() {}

func (x *InstanceStatusStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatusStat.ProtoReflect.Descriptor instead.
func (*InstanceStatusStat) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{15}
}

func (x *InstanceStatusStat) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *InstanceStatusStat) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InstanceRuntimeRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// job_id
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id"`
	// running time
	RunningTime int64 `protobuf:"varint,3,opt,name=running_time,json=runningTime,proto3" json:"running_time"`
	// version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version"`
}

func (x *InstanceRuntimeRankInfo) Reset() {
	*x = InstanceRuntimeRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceRuntimeRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceRuntimeRankInfo) ProtoMessage() {}

func (x *InstanceRuntimeRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceRuntimeRankInfo.ProtoReflect.Descriptor instead.
func (*InstanceRuntimeRankInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{16}
}

func (x *InstanceRuntimeRankInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstanceRuntimeRankInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *InstanceRuntimeRankInfo) GetRunningTime() int64 {
	if x != nil {
		return x.RunningTime
	}
	return 0
}

func (x *InstanceRuntimeRankInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type InstanceErrorRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job_id
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id"`
	// version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	// running time
	ErrorCount int64 `protobuf:"varint,3,opt,name=error_count,json=errorCount,proto3" json:"error_count"`
}

func (x *InstanceErrorRankInfo) Reset() {
	*x = InstanceErrorRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceErrorRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceErrorRankInfo) ProtoMessage() {}

func (x *InstanceErrorRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceErrorRankInfo.ProtoReflect.Descriptor instead.
func (*InstanceErrorRankInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceErrorRankInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *InstanceErrorRankInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceErrorRankInfo) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type DispatchTaskCountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow_count
	FlowCount int32 `protobuf:"varint,1,opt,name=flow_count,json=flowCount,proto3" json:"flow_count"`
	// instance count
	InstanceCount int32 `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_id"`
	// updated time
	Updated int64 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated"`
}

func (x *DispatchTaskCountInfo) Reset() {
	*x = DispatchTaskCountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTaskCountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTaskCountInfo) ProtoMessage() {}

func (x *DispatchTaskCountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTaskCountInfo.ProtoReflect.Descriptor instead.
func (*DispatchTaskCountInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{18}
}

func (x *DispatchTaskCountInfo) GetFlowCount() int32 {
	if x != nil {
		return x.FlowCount
	}
	return 0
}

func (x *DispatchTaskCountInfo) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *DispatchTaskCountInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type InstanceTaskExecStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hour
	Hour int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour"`
	// instance success count
	InstanceCount int64 `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count"`
}

func (x *InstanceTaskExecStat) Reset() {
	*x = InstanceTaskExecStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTaskExecStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTaskExecStat) ProtoMessage() {}

func (x *InstanceTaskExecStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTaskExecStat.ProtoReflect.Descriptor instead.
func (*InstanceTaskExecStat) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceTaskExecStat) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *InstanceTaskExecStat) GetInstanceCount() int64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

// Source Info
type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source ID, unique within a region.
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id" gorm:"column:source_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source Type, one of 1/2/3/4/5/6/7/8 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	SourceType DataSource_Type `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=model.DataSource_Type" json:"source_type" gorm:"column:source_type;" binding:"gte=1,lte=8" required:"true" mininum:"1" maximum:"8"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// Url, this source connection info.
	Url *datasourcepb.DataSourceURL `protobuf:"bytes,6,opt,name=url,proto3" json:"url" gorm:"column:url;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// State, one of 1/2 1->enable/2->disable.
	Status DataSource_Status `protobuf:"varint,7,opt,name=status,proto3,enum=model.DataSource_Status" json:"status" gorm:"column:status;" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"`
	// Create Time, this Source create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;"`
	// Update Time, this Source last update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;"`
	// connection status oneof 1/2/3 1->success/2->partialsuccess/3->failed
	Connection DataSource_ConnectionStatus `protobuf:"varint,10,opt,name=connection,proto3,enum=model.DataSource_ConnectionStatus" json:"connection" gorm:"column:connection;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{20}
}

func (x *DataSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *DataSource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DataSource) GetSourceType() DataSource_Type {
	if x != nil {
		return x.SourceType
	}
	return DataSource____
}

func (x *DataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSource) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DataSource) GetUrl() *datasourcepb.DataSourceURL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *DataSource) GetStatus() DataSource_Status {
	if x != nil {
		return x.Status
	}
	return DataSource__
}

func (x *DataSource) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *DataSource) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *DataSource) GetConnection() DataSource_ConnectionStatus {
	if x != nil {
		return x.Connection
	}
	return DataSource___
}

// Table Info
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID, unique within a region.
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" gorm:"column:table_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source ID
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id" gorm:"column:source_id;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// Define this table info.
	TableSchema *flinkpb.TableSchema `protobuf:"bytes,6,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema" gorm:"column:table_schema;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind TableInfo_Kind `protobuf:"varint,9,opt,name=table_kind,json=tableKind,proto3,enum=model.TableInfo_Kind" json:"table_kind" gorm:"column:table_kind;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
	// SourceName
	SourceName string `protobuf:"bytes,10,opt,name=source_name,json=sourceName,proto3" json:"source_name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// connection status oneof 1/2/3 1->success/2->partialsuccess/3->failed
	Connection DataSource_ConnectionStatus `protobuf:"varint,11,opt,name=connection,proto3,enum=model.DataSource_ConnectionStatus" json:"connection" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{21}
}

func (x *TableInfo) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TableInfo) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *TableInfo) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *TableInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TableInfo) GetTableSchema() *flinkpb.TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *TableInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *TableInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *TableInfo) GetTableKind() TableInfo_Kind {
	if x != nil {
		return x.TableKind
	}
	return TableInfo__
}

func (x *TableInfo) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *TableInfo) GetConnection() DataSource_ConnectionStatus {
	if x != nil {
		return x.Connection
	}
	return DataSource___
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, unique within a region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" gorm:"column:id;primaryKey;"`
	// Resource Parent ID, default "".
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid" gorm:"column:pid;"`
	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Resource Name, unique within a region of same space_id and pid.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Resource type, default 0,  0 => "directory", 1 => "jar", 2 => "udf".
	Type Resource_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.Resource_Type" json:"type" gorm:"column:type;"`
	// Resource size, Byte.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size" gorm:"size;"`
	// Resource description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description" gorm:"description;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{22}
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Resource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetType() Resource_Type {
	if x != nil {
		return x.Type
	}
	return Resource__
}

func (x *Resource) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Resource) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Resource) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// UDF Info
type UDFInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID, unique within a region.
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id" gorm:"column:udf_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"`
	// UDF Type one of UDF/UDTF/UDTTF
	UdfType UDFInfo_Type `protobuf:"varint,3,opt,name=udf_type,json=udfType,proto3,enum=model.UDFInfo_Type" json:"udf_type" gorm:"column:udf_type;" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// UDF language one of Scala/Java/Python
	UdfLanguage UDFInfo_Language `protobuf:"varint,4,opt,name=udf_language,json=udfLanguage,proto3,enum=model.UDFInfo_Language" json:"udf_language" gorm:"column:udf_language;" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"`
	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	Define string `protobuf:"bytes,7,opt,name=define,proto3" json:"define" gorm:"column:define;" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"`
	// usage for this udf
	UsageSample string `protobuf:"bytes,8,opt,name=usage_sample,json=usageSample,proto3" json:"usage_sample" gorm:"column:usage_sample;" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,9,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,10,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *UDFInfo) Reset() {
	*x = UDFInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDFInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDFInfo) ProtoMessage() {}

func (x *UDFInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDFInfo.ProtoReflect.Descriptor instead.
func (*UDFInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{23}
}

func (x *UDFInfo) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *UDFInfo) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UDFInfo) GetUdfType() UDFInfo_Type {
	if x != nil {
		return x.UdfType
	}
	return UDFInfo__
}

func (x *UDFInfo) GetUdfLanguage() UDFInfo_Language {
	if x != nil {
		return x.UdfLanguage
	}
	return UDFInfo___
}

func (x *UDFInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UDFInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UDFInfo) GetDefine() string {
	if x != nil {
		return x.Define
	}
	return ""
}

func (x *UDFInfo) GetUsageSample() string {
	if x != nil {
		return x.UsageSample
	}
	return ""
}

func (x *UDFInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UDFInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// JobResources
type JobResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jobid
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// Jar
	Jar string `protobuf:"bytes,2,opt,name=jar,proto3" json:"jar" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"`
}

func (x *JobResources) Reset() {
	*x = JobResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResources) ProtoMessage() {}

func (x *JobResources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResources.ProtoReflect.Descriptor instead.
func (*JobResources) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{24}
}

func (x *JobResources) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobResources) GetJar() string {
	if x != nil {
		return x.Jar
	}
	return ""
}

// Network config.
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Network Id, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// Network Name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// VPC's route id
	RouterId string `protobuf:"bytes,4,opt,name=router_id,json=routerId,proto3" json:"router_id" gorm:"column:router_id;"`
	// vxnet id.
	VxnetId string `protobuf:"bytes,5,opt,name=vxnet_id,json=vxnetId,proto3" json:"vxnet_id" gorm:"column:vxnet_id;"`
	// The user-id of created this network.
	CreateBy string `protobuf:"bytes,6,opt,name=create_by,json=createBy,proto3" json:"create_by" gorm:"column:create_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{25}
}

func (x *Network) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Network) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *Network) GetVxnetId() string {
	if x != nil {
		return x.VxnetId
	}
	return ""
}

func (x *Network) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Network) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Network) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// HostAliases
type HostAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hostname aliases.
	Items []*HostAliases_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items" binding:"-"`
}

func (x *HostAliases) Reset() {
	*x = HostAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAliases) ProtoMessage() {}

func (x *HostAliases) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAliases.ProtoReflect.Descriptor instead.
func (*HostAliases) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{26}
}

func (x *HostAliases) GetItems() []*HostAliases_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// FlinkCluster is schema for flink (session) cluster.
type FlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Review it.
	// Cluster ID, unique within a region. generated by server.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// Cluster Name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Flink Version. Optional value: "flink-v1.12.4_scala-1.11"
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Cluster Status. 1 => "running" 2 => "stopped" 3 => "starting" 4 => "exception"
	Status FlinkCluster_Status `protobuf:"varint,5,opt,name=status,proto3,enum=model.FlinkCluster_Status" json:"status" gorm:"column:status;"`
	// resource config.
	//
	// Flink task number for TaskManager. Is required, Min 1, Max ?
	TaskNum int32 `protobuf:"varint,6,opt,name=task_num,json=taskNum,proto3" json:"task_num" gorm:"column:task_num;"`
	// Flink JobManager's cpu and memory. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	JobCu float32 `protobuf:"fixed32,7,opt,name=job_cu,json=jobCu,proto3" json:"job_cu" gorm:"column:job_cu;"`
	// Flink TaskManager's cpu and memory. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	TaskCu float32 `protobuf:"fixed32,8,opt,name=task_cu,json=taskCu,proto3" json:"task_cu" gorm:"column:task_cu;"`
	// Network config.
	NetworkId string `protobuf:"bytes,9,opt,name=network_id,json=networkId,proto3" json:"network_id" gorm:"column:network_id;"`
	// Config of host aliases. Not required.
	HostAliases *HostAliases `protobuf:"bytes,10,opt,name=host_aliases,json=hostAliases,proto3" json:"host_aliases" gorm:"column:host_aliases;"`
	// Flink config.
	Config *flinkpb.FlinkConfig `protobuf:"bytes,11,opt,name=config,proto3" json:"config" gorm:"column:config;"`
	// URL of Flink UI, generated by server.
	WebUi string `protobuf:"bytes,12,opt,name=web_ui,json=webUi,proto3" json:"web_ui" gorm:"-;"`
	// The user-id of created this cluster.
	CreateBy string `protobuf:"bytes,13,opt,name=create_by,json=createBy,proto3" json:"create_by" gorm:"column:create_by;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,14,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,15,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *FlinkCluster) Reset() {
	*x = FlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkCluster) ProtoMessage() {}

func (x *FlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkCluster.ProtoReflect.Descriptor instead.
func (*FlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{27}
}

func (x *FlinkCluster) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *FlinkCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlinkCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlinkCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FlinkCluster) GetStatus() FlinkCluster_Status {
	if x != nil {
		return x.Status
	}
	return FlinkCluster__
}

func (x *FlinkCluster) GetTaskNum() int32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *FlinkCluster) GetJobCu() float32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *FlinkCluster) GetTaskCu() float32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *FlinkCluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *FlinkCluster) GetHostAliases() *HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *FlinkCluster) GetConfig() *flinkpb.FlinkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FlinkCluster) GetWebUi() string {
	if x != nil {
		return x.WebUi
	}
	return ""
}

func (x *FlinkCluster) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *FlinkCluster) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *FlinkCluster) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// Function represents the function node config for stream job.
type StreamJobArgs_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UdfIds   []string `protobuf:"bytes,1,rep,name=udf_ids,json=udfIds,proto3" json:"udf_ids" binding:"-"`
	UdtfIds  []string `protobuf:"bytes,2,rep,name=udtf_ids,json=udtfIds,proto3" json:"udtf_ids" binding:"-"`
	UdttfIds []string `protobuf:"bytes,3,rep,name=udttf_ids,json=udttfIds,proto3" json:"udttf_ids" binding:"-"`
}

func (x *StreamJobArgs_Function) Reset() {
	*x = StreamJobArgs_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobArgs_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobArgs_Function) ProtoMessage() {}

func (x *StreamJobArgs_Function) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobArgs_Function.ProtoReflect.Descriptor instead.
func (*StreamJobArgs_Function) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StreamJobArgs_Function) GetUdfIds() []string {
	if x != nil {
		return x.UdfIds
	}
	return nil
}

func (x *StreamJobArgs_Function) GetUdtfIds() []string {
	if x != nil {
		return x.UdtfIds
	}
	return nil
}

func (x *StreamJobArgs_Function) GetUdttfIds() []string {
	if x != nil {
		return x.UdttfIds
	}
	return nil
}

type HostAliases_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip" binding:"ipv4"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname" binding:"hostname"`
}

func (x *HostAliases_Item) Reset() {
	*x = HostAliases_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAliases_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAliases_Item) ProtoMessage() {}

func (x *HostAliases_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAliases_Item.ProtoReflect.Descriptor instead.
func (*HostAliases_Item) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{26, 0}
}

func (x *HostAliases_Item) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostAliases_Item) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

var File_proto_model_proto protoreflect.FileDescriptor

var file_proto_model_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x5d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x55, 0x73, 0x12, 0x13, 0x0a,
	0x05, 0x7a, 0x68, 0x5f, 0x63, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x68,
	0x43, 0x6e, 0x22, 0xa9, 0x02, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01,
	0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xe3,
	0x02, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78,
	0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x10, 0x00, 0x18, 0x06, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x44,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x51, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x10, 0x05, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a,
	0x6f, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10,
	0x00, 0x18, 0x06, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x51,
	0x4c, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x27, 0x0a, 0x03,
	0x6a, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4a, 0x61, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x03, 0x6a, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69,
	0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69,
	0x6e, 0x6b, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa1,
	0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x65, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72,
	0x67, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6d, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x64, 0x66, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x75, 0x64, 0x66, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x64, 0x74, 0x66, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07,
	0x75, 0x64, 0x74, 0x66, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x75, 0x64, 0x74, 0x74, 0x66,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x08, 0x75, 0x64, 0x74, 0x74, 0x66, 0x49, 0x64, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x22, 0xf4, 0x04, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x51, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11,
	0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18,
	0x1f, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x18, 0x64, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x05, 0x0a, 0x01, 0x5f,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x22, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x06, 0x0a, 0x02, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10,
	0x02, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x91, 0x03, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x22, 0x89, 0x03,
	0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x49,
	0x6e, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x79, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x22, 0xcc, 0x02, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x70, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x22, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x10, 0x02, 0x22, 0x28,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x5f, 0x5f, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xb5, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x78, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02,
	0x22, 0xb5, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x80, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x64, 0x52,
	0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x1f, 0x52, 0x0d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0a,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x21, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01,
	0x78, 0x11, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x02, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22,
	0xcb, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a,
	0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01,
	0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x75, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x19, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x05, 0x0a, 0x0a, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x78, 0x15, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x70, 0x00, 0x78, 0xc1, 0x3e, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x78, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x5f, 0x5f,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22,
	0x6b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x5f, 0x5f, 0x5f, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x42, 0x61, 0x73, 0x65, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x74, 0x70,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x44, 0x46, 0x53, 0x10, 0x08, 0x22, 0xb3, 0x04, 0x0a,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x78, 0x15, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xc1, 0x3e, 0x52, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10,
	0x00, 0x18, 0x04, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01,
	0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x64, 0x66, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x03, 0x22, 0x81, 0x04, 0x0a, 0x07, 0x55, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x05, 0x75, 0x64, 0x66, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x64, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x44,
	0x46, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x70, 0x00, 0x78, 0x15, 0x52, 0x07, 0x75, 0x64, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a,
	0x0c, 0x75, 0x64, 0x66, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x44, 0x46, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x70, 0x00, 0x78, 0x15, 0x52, 0x0b, 0x75, 0x64, 0x66, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x78, 0xa1, 0x9c, 0x01, 0x52, 0x06,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x78, 0xd1, 0x0f, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05,
	0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x46, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x44, 0x54, 0x46, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x44, 0x54, 0x54,
	0x46, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x61, 0x76, 0x61, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x10, 0x03, 0x22, 0x54, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x03, 0x6a, 0x61, 0x72, 0x22, 0x96,
	0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70,
	0x01, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x76,
	0x78, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x70, 0x01, 0x52, 0x07, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xca, 0xb2,
	0x04, 0x02, 0x0a, 0x00, 0x22, 0xa5, 0x05, 0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x2d, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x51,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x43, 0x75, 0x12,
	0x2f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x51,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x75,
	0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x69, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x62, 0x55, 0x69, 0x12, 0x23, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05,
	0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x42, 0x2b, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_model_proto_rawDescOnce sync.Once
	file_proto_model_proto_rawDescData = file_proto_model_proto_rawDesc
)

func file_proto_model_proto_rawDescGZIP() []byte {
	file_proto_model_proto_rawDescOnce.Do(func() {
		file_proto_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_model_proto_rawDescData)
	})
	return file_proto_model_proto_rawDescData
}

var file_proto_model_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_proto_model_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_model_proto_goTypes = []interface{}{
	(Workspace_Status)(0),                    // 0: model.Workspace.Status
	(StreamJob_Type)(0),                      // 1: model.StreamJob.Type
	(StreamJobSchedule_ConcurrencyPolicy)(0), // 2: model.StreamJobSchedule.ConcurrencyPolicy
	(StreamJobSchedule_RetryPolicy)(0),       // 3: model.StreamJobSchedule.RetryPolicy
	(StreamJobRelease_Status)(0),             // 4: model.StreamJobRelease.Status
	(StreamJobInst_State)(0),                 // 5: model.StreamJobInst.State
	(Operation_Type)(0),                      // 6: model.Operation.Type
	(Operation_State)(0),                     // 7: model.Operation.State
	(Role_Type)(0),                           // 8: model.Role.Type
	(MonitorRule_Status)(0),                  // 9: model.MonitorRule.Status
	(DataSource_Status)(0),                   // 10: model.DataSource.Status
	(DataSource_ConnectionStatus)(0),         // 11: model.DataSource.ConnectionStatus
	(DataSource_Type)(0),                     // 12: model.DataSource.Type
	(TableInfo_Kind)(0),                      // 13: model.TableInfo.Kind
	(Resource_Type)(0),                       // 14: model.Resource.Type
	(UDFInfo_Type)(0),                        // 15: model.UDFInfo.Type
	(UDFInfo_Language)(0),                    // 16: model.UDFInfo.Language
	(FlinkCluster_Status)(0),                 // 17: model.FlinkCluster.Status
	(*EmptyStruct)(nil),                      // 18: model.EmptyStruct
	(*Error)(nil),                            // 19: model.Error
	(*Workspace)(nil),                        // 20: model.Workspace
	(*StreamJob)(nil),                        // 21: model.StreamJob
	(*StreamJobProperty)(nil),                // 22: model.StreamJobProperty
	(*StreamJobCode)(nil),                    // 23: model.StreamJobCode
	(*StreamJobArgs)(nil),                    // 24: model.StreamJobArgs
	(*StreamJobSchedule)(nil),                // 25: model.StreamJobSchedule
	(*StreamJobRelease)(nil),                 // 26: model.StreamJobRelease
	(*StreamJobInst)(nil),                    // 27: model.StreamJobInst
	(*Operation)(nil),                        // 28: model.Operation
	(*Role)(nil),                             // 29: model.Role
	(*Member)(nil),                           // 30: model.Member
	(*MonitorRule)(nil),                      // 31: model.MonitorRule
	(*QueueMessage)(nil),                     // 32: model.QueueMessage
	(*InstanceStatusStat)(nil),               // 33: model.InstanceStatusStat
	(*InstanceRuntimeRankInfo)(nil),          // 34: model.InstanceRuntimeRankInfo
	(*InstanceErrorRankInfo)(nil),            // 35: model.InstanceErrorRankInfo
	(*DispatchTaskCountInfo)(nil),            // 36: model.DispatchTaskCountInfo
	(*InstanceTaskExecStat)(nil),             // 37: model.InstanceTaskExecStat
	(*DataSource)(nil),                       // 38: model.DataSource
	(*TableInfo)(nil),                        // 39: model.TableInfo
	(*Resource)(nil),                         // 40: model.Resource
	(*UDFInfo)(nil),                          // 41: model.UDFInfo
	(*JobResources)(nil),                     // 42: model.JobResources
	(*Network)(nil),                          // 43: model.Network
	(*HostAliases)(nil),                      // 44: model.HostAliases
	(*FlinkCluster)(nil),                     // 45: model.FlinkCluster
	(*StreamJobArgs_Function)(nil),           // 46: model.StreamJobArgs.Function
	(*HostAliases_Item)(nil),                 // 47: model.HostAliases.Item
	(*flinkpb.FlinkOperator)(nil),            // 48: flink.FlinkOperator
	(*flinkpb.FlinkSQL)(nil),                 // 49: flink.FlinkSQL
	(*flinkpb.FlinkJar)(nil),                 // 50: flink.FlinkJar
	(*flinkpb.FlinkScala)(nil),               // 51: flink.FlinkScala
	(*flinkpb.FlinkPython)(nil),              // 52: flink.FlinkPython
	(*datasourcepb.DataSourceURL)(nil),       // 53: datasource.DataSourceURL
	(*flinkpb.TableSchema)(nil),              // 54: flink.TableSchema
	(*flinkpb.FlinkConfig)(nil),              // 55: flink.FlinkConfig
}
var file_proto_model_proto_depIdxs = []int32{
	0,  // 0: model.Workspace.status:type_name -> model.Workspace.Status
	1,  // 1: model.StreamJob.type:type_name -> model.StreamJob.Type
	23, // 2: model.StreamJobProperty.code:type_name -> model.StreamJobCode
	24, // 3: model.StreamJobProperty.args:type_name -> model.StreamJobArgs
	25, // 4: model.StreamJobProperty.schedule:type_name -> model.StreamJobSchedule
	1,  // 5: model.StreamJobCode.type:type_name -> model.StreamJob.Type
	48, // 6: model.StreamJobCode.operators:type_name -> flink.FlinkOperator
	49, // 7: model.StreamJobCode.sql:type_name -> flink.FlinkSQL
	50, // 8: model.StreamJobCode.jar:type_name -> flink.FlinkJar
	51, // 9: model.StreamJobCode.scala:type_name -> flink.FlinkScala
	52, // 10: model.StreamJobCode.python:type_name -> flink.FlinkPython
	46, // 11: model.StreamJobArgs.function:type_name -> model.StreamJobArgs.Function
	2,  // 12: model.StreamJobSchedule.concurrency_policy:type_name -> model.StreamJobSchedule.ConcurrencyPolicy
	3,  // 13: model.StreamJobSchedule.retry_policy:type_name -> model.StreamJobSchedule.RetryPolicy
	1,  // 14: model.StreamJobRelease.type:type_name -> model.StreamJob.Type
	4,  // 15: model.StreamJobRelease.status:type_name -> model.StreamJobRelease.Status
	5,  // 16: model.StreamJobInst.state:type_name -> model.StreamJobInst.State
	6,  // 17: model.Operation.op_type:type_name -> model.Operation.Type
	7,  // 18: model.Operation.state:type_name -> model.Operation.State
	8,  // 19: model.Role.type:type_name -> model.Role.Type
	9,  // 20: model.MonitorRule.status:type_name -> model.MonitorRule.Status
	22, // 21: model.QueueMessage.property:type_name -> model.StreamJobProperty
	12, // 22: model.DataSource.source_type:type_name -> model.DataSource.Type
	53, // 23: model.DataSource.url:type_name -> datasource.DataSourceURL
	10, // 24: model.DataSource.status:type_name -> model.DataSource.Status
	11, // 25: model.DataSource.connection:type_name -> model.DataSource.ConnectionStatus
	54, // 26: model.TableInfo.table_schema:type_name -> flink.TableSchema
	13, // 27: model.TableInfo.table_kind:type_name -> model.TableInfo.Kind
	11, // 28: model.TableInfo.connection:type_name -> model.DataSource.ConnectionStatus
	14, // 29: model.Resource.type:type_name -> model.Resource.Type
	15, // 30: model.UDFInfo.udf_type:type_name -> model.UDFInfo.Type
	16, // 31: model.UDFInfo.udf_language:type_name -> model.UDFInfo.Language
	47, // 32: model.HostAliases.items:type_name -> model.HostAliases.Item
	17, // 33: model.FlinkCluster.status:type_name -> model.FlinkCluster.Status
	44, // 34: model.FlinkCluster.host_aliases:type_name -> model.HostAliases
	55, // 35: model.FlinkCluster.config:type_name -> flink.FlinkConfig
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_proto_model_proto_init() }
func file_proto_model_proto_init() {
	if File_proto_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobInst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatusStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceRuntimeRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceErrorRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTaskCountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTaskExecStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDFInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobArgs_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAliases_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_model_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_model_proto_goTypes,
		DependencyIndexes: file_proto_model_proto_depIdxs,
		EnumInfos:         file_proto_model_proto_enumTypes,
		MessageInfos:      file_proto_model_proto_msgTypes,
	}.Build()
	File_proto_model_proto = out.File
	file_proto_model_proto_rawDesc = nil
	file_proto_model_proto_goTypes = nil
	file_proto_model_proto_depIdxs = nil
}
