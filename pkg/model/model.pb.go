// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/model.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/yu31/proto-go-plugin/pb/gosqlpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EngineType int32

const (
	EngineType__EngineType EngineType = 0 // Is useless.
	EngineType_BuildIn     EngineType = 1
	EngineType_External    EngineType = 2
)

// Enum value maps for EngineType.
var (
	EngineType_name = map[int32]string{
		0: "_EngineType",
		1: "BuildIn",
		2: "External",
	}
	EngineType_value = map[string]int32{
		"_EngineType": 0,
		"BuildIn":     1,
		"External":    2,
	}
)

func (x EngineType) Enum() *EngineType {
	p := new(EngineType)
	*p = x
	return p
}

func (x EngineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[0].Descriptor()
}

func (EngineType) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[0]
}

func (x EngineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineType.Descriptor instead.
func (EngineType) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{0}
}

type ScheduleConcurrencyPolicy int32

const (
	ScheduleConcurrencyPolicy__ScheduleConcurrencyPolicy ScheduleConcurrencyPolicy = 0 // Is useless.
	ScheduleConcurrencyPolicy_Allow                      ScheduleConcurrencyPolicy = 1
	ScheduleConcurrencyPolicy_Forbid                     ScheduleConcurrencyPolicy = 2
	ScheduleConcurrencyPolicy_Replace                    ScheduleConcurrencyPolicy = 3
)

// Enum value maps for ScheduleConcurrencyPolicy.
var (
	ScheduleConcurrencyPolicy_name = map[int32]string{
		0: "_ScheduleConcurrencyPolicy",
		1: "Allow",
		2: "Forbid",
		3: "Replace",
	}
	ScheduleConcurrencyPolicy_value = map[string]int32{
		"_ScheduleConcurrencyPolicy": 0,
		"Allow":                      1,
		"Forbid":                     2,
		"Replace":                    3,
	}
)

func (x ScheduleConcurrencyPolicy) Enum() *ScheduleConcurrencyPolicy {
	p := new(ScheduleConcurrencyPolicy)
	*p = x
	return p
}

func (x ScheduleConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[1].Descriptor()
}

func (ScheduleConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[1]
}

func (x ScheduleConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleConcurrencyPolicy.Descriptor instead.
func (ScheduleConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{1}
}

type ScheduleRetryPolicy int32

const (
	ScheduleRetryPolicy__ScheduleRetryPolicy ScheduleRetryPolicy = 0 // Is useless.
	ScheduleRetryPolicy_None                 ScheduleRetryPolicy = 1
	ScheduleRetryPolicy_Auto                 ScheduleRetryPolicy = 2
)

// Enum value maps for ScheduleRetryPolicy.
var (
	ScheduleRetryPolicy_name = map[int32]string{
		0: "_ScheduleRetryPolicy",
		1: "None",
		2: "Auto",
	}
	ScheduleRetryPolicy_value = map[string]int32{
		"_ScheduleRetryPolicy": 0,
		"None":                 1,
		"Auto":                 2,
	}
)

func (x ScheduleRetryPolicy) Enum() *ScheduleRetryPolicy {
	p := new(ScheduleRetryPolicy)
	*p = x
	return p
}

func (x ScheduleRetryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleRetryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[2].Descriptor()
}

func (ScheduleRetryPolicy) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[2]
}

func (x ScheduleRetryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleRetryPolicy.Descriptor instead.
func (ScheduleRetryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2}
}

// OpType declares the API operation type.
type OpType int32

const (
	OpType__OpType OpType = 0 // Is useless.
	OpType_Unknown OpType = 1
	OpType_Write   OpType = 2 // Include Operation: create/update/delete.
	OpType_Read    OpType = 3 // Include Operation: read.
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "_OpType",
		1: "Unknown",
		2: "Write",
		3: "Read",
	}
	OpType_value = map[string]int32{
		"_OpType": 0,
		"Unknown": 1,
		"Write":   2,
		"Read":    3,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[3].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[3]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3}
}

type Workspace_Status int32

const (
	Workspace__        Workspace_Status = 0
	Workspace_Enabled  Workspace_Status = 1
	Workspace_Disabled Workspace_Status = 2
)

// Enum value maps for Workspace_Status.
var (
	Workspace_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	Workspace_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x Workspace_Status) Enum() *Workspace_Status {
	p := new(Workspace_Status)
	*p = x
	return p
}

func (x Workspace_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workspace_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[4].Descriptor()
}

func (Workspace_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[4]
}

func (x Workspace_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workspace_Status.Descriptor instead.
func (Workspace_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2, 0}
}

type StreamFlow_Type int32

const (
	StreamFlow__          StreamFlow_Type = 0
	StreamFlow_SQL        StreamFlow_Type = 1
	StreamFlow_Operator   StreamFlow_Type = 2
	StreamFlow_CodeJava   StreamFlow_Type = 3
	StreamFlow_CodePython StreamFlow_Type = 4
	StreamFlow_CodeScala  StreamFlow_Type = 5
)

// Enum value maps for StreamFlow_Type.
var (
	StreamFlow_Type_name = map[int32]string{
		0: "_",
		1: "SQL",
		2: "Operator",
		3: "CodeJava",
		4: "CodePython",
		5: "CodeScala",
	}
	StreamFlow_Type_value = map[string]int32{
		"_":          0,
		"SQL":        1,
		"Operator":   2,
		"CodeJava":   3,
		"CodePython": 4,
		"CodeScala":  5,
	}
)

func (x StreamFlow_Type) Enum() *StreamFlow_Type {
	p := new(StreamFlow_Type)
	*p = x
	return p
}

func (x StreamFlow_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamFlow_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[5].Descriptor()
}

func (StreamFlow_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[5]
}

func (x StreamFlow_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamFlow_Type.Descriptor instead.
func (StreamFlow_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3, 0}
}

type StreamFlowRelease_Status int32

const (
	StreamFlowRelease__         StreamFlowRelease_Status = 0
	StreamFlowRelease_Active    StreamFlowRelease_Status = 1
	StreamFlowRelease_Suspended StreamFlowRelease_Status = 2
)

// Enum value maps for StreamFlowRelease_Status.
var (
	StreamFlowRelease_Status_name = map[int32]string{
		0: "_",
		1: "Active",
		2: "Suspended",
	}
	StreamFlowRelease_Status_value = map[string]int32{
		"_":         0,
		"Active":    1,
		"Suspended": 2,
	}
)

func (x StreamFlowRelease_Status) Enum() *StreamFlowRelease_Status {
	p := new(StreamFlowRelease_Status)
	*p = x
	return p
}

func (x StreamFlowRelease_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamFlowRelease_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[6].Descriptor()
}

func (StreamFlowRelease_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[6]
}

func (x StreamFlowRelease_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamFlowRelease_Status.Descriptor instead.
func (StreamFlowRelease_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{11, 0}
}

type StreamFlowInst_State int32

const (
	StreamFlowInst__          StreamFlowInst_State = 0
	StreamFlowInst_Pending    StreamFlowInst_State = 1
	StreamFlowInst_Running    StreamFlowInst_State = 2
	StreamFlowInst_Retrying   StreamFlowInst_State = 3
	StreamFlowInst_Suspended  StreamFlowInst_State = 4
	StreamFlowInst_Terminated StreamFlowInst_State = 5
	StreamFlowInst_Timeout    StreamFlowInst_State = 6
	StreamFlowInst_Succeed    StreamFlowInst_State = 7
	StreamFlowInst_Failed     StreamFlowInst_State = 8
)

// Enum value maps for StreamFlowInst_State.
var (
	StreamFlowInst_State_name = map[int32]string{
		0: "_",
		1: "Pending",
		2: "Running",
		3: "Retrying",
		4: "Suspended",
		5: "Terminated",
		6: "Timeout",
		7: "Succeed",
		8: "Failed",
	}
	StreamFlowInst_State_value = map[string]int32{
		"_":          0,
		"Pending":    1,
		"Running":    2,
		"Retrying":   3,
		"Suspended":  4,
		"Terminated": 5,
		"Timeout":    6,
		"Succeed":    7,
		"Failed":     8,
	}
)

func (x StreamFlowInst_State) Enum() *StreamFlowInst_State {
	p := new(StreamFlowInst_State)
	*p = x
	return p
}

func (x StreamFlowInst_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamFlowInst_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[7].Descriptor()
}

func (StreamFlowInst_State) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[7]
}

func (x StreamFlowInst_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamFlowInst_State.Descriptor instead.
func (StreamFlowInst_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{12, 0}
}

type OpAudit_State int32

const (
	OpAudit___      OpAudit_State = 0
	OpAudit_Success OpAudit_State = 1
	OpAudit_Failed  OpAudit_State = 2
)

// Enum value maps for OpAudit_State.
var (
	OpAudit_State_name = map[int32]string{
		0: "__",
		1: "Success",
		2: "Failed",
	}
	OpAudit_State_value = map[string]int32{
		"__":      0,
		"Success": 1,
		"Failed":  2,
	}
)

func (x OpAudit_State) Enum() *OpAudit_State {
	p := new(OpAudit_State)
	*p = x
	return p
}

func (x OpAudit_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpAudit_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[8].Descriptor()
}

func (OpAudit_State) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[8]
}

func (x OpAudit_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpAudit_State.Descriptor instead.
func (OpAudit_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{13, 0}
}

type Role_Type int32

const (
	Role__      Role_Type = 0
	Role_System Role_Type = 1
	Role_Custom Role_Type = 2
)

// Enum value maps for Role_Type.
var (
	Role_Type_name = map[int32]string{
		0: "_",
		1: "System",
		2: "Custom",
	}
	Role_Type_value = map[string]int32{
		"_":      0,
		"System": 1,
		"Custom": 2,
	}
)

func (x Role_Type) Enum() *Role_Type {
	p := new(Role_Type)
	*p = x
	return p
}

func (x Role_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[9].Descriptor()
}

func (Role_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[9]
}

func (x Role_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role_Type.Descriptor instead.
func (Role_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{14, 0}
}

type MonitorRule_Status int32

const (
	MonitorRule__        MonitorRule_Status = 0
	MonitorRule_Enabled  MonitorRule_Status = 1
	MonitorRule_Disabled MonitorRule_Status = 2
)

// Enum value maps for MonitorRule_Status.
var (
	MonitorRule_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	MonitorRule_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x MonitorRule_Status) Enum() *MonitorRule_Status {
	p := new(MonitorRule_Status)
	*p = x
	return p
}

func (x MonitorRule_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorRule_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[10].Descriptor()
}

func (MonitorRule_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[10]
}

func (x MonitorRule_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorRule_Status.Descriptor instead.
func (MonitorRule_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{16, 0}
}

type Resource_Type int32

const (
	Resource__         Resource_Type = 0
	Resource_Jar       Resource_Type = 1
	Resource_Udf       Resource_Type = 2
	Resource_CONNECTOR Resource_Type = 3
)

// Enum value maps for Resource_Type.
var (
	Resource_Type_name = map[int32]string{
		0: "_",
		1: "Jar",
		2: "Udf",
		3: "CONNECTOR",
	}
	Resource_Type_value = map[string]int32{
		"_":         0,
		"Jar":       1,
		"Udf":       2,
		"CONNECTOR": 3,
	}
)

func (x Resource_Type) Enum() *Resource_Type {
	p := new(Resource_Type)
	*p = x
	return p
}

func (x Resource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[11].Descriptor()
}

func (Resource_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[11]
}

func (x Resource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_Type.Descriptor instead.
func (Resource_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{46, 0}
}

// EmptyStruct represents no value with a message.
type EmptyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyStruct) Reset() {
	*x = EmptyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyStruct) ProtoMessage() {}

func (x *EmptyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyStruct.ProtoReflect.Descriptor instead.
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{0}
}

// Error transmits customized-error between grpc client and server by status details
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code is summary information of error.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Status is http status code.
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// EnUS is detail information of error with en_us format.
	EnUs string `protobuf:"bytes,3,opt,name=en_us,json=enUs,proto3" json:"en_us,omitempty"`
	// ZhCN is detail information of error with zh_cn format.
	ZhCn string `protobuf:"bytes,4,opt,name=zh_cn,json=zhCn,proto3" json:"zh_cn,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Error) GetEnUs() string {
	if x != nil {
		return x.EnUs
	}
	return ""
}

func (x *Error) GetZhCn() string {
	if x != nil {
		return x.ZhCn
	}
	return ""
}

// The workspace info.
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID, unique within a region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" gorm:"column:id;primaryKey;"`
	// User id of workspace owner.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" gorm:"column:owner;"`
	// Workspace Name, unique within a region.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workspace Description.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Workspace status, 1 => "enabled", 2 => "disabled".
	Status Workspace_Status `protobuf:"varint,5,opt,name=status,proto3,enum=model.Workspace_Status" json:"status" gorm:"column:status;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2}
}

func (x *Workspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workspace) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Workspace) GetStatus() Workspace_Status {
	if x != nil {
		return x.Status
	}
	return Workspace__
}

func (x *Workspace) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Workspace) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The stream workflow info
type StreamFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey;"`
	// Workflow Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workflow Description.
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	Type StreamFlow_Type `protobuf:"varint,6,opt,name=type,proto3,enum=model.StreamFlow_Type" json:"type" gorm:"column:type;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamFlow) Reset() {
	*x = StreamFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlow) ProtoMessage() {}

func (x *StreamFlow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlow.ProtoReflect.Descriptor instead.
func (*StreamFlow) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3}
}

func (x *StreamFlow) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlow) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamFlow) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamFlow) GetType() StreamFlow_Type {
	if x != nil {
		return x.Type
	}
	return StreamFlow__
}

func (x *StreamFlow) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamFlow) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// HBaseConfig
type HBaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host lists of HBase.
	Hosts []*HBaseConfig_Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts" binding:"-"`
}

func (x *HBaseConfig) Reset() {
	*x = HBaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseConfig) ProtoMessage() {}

func (x *HBaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseConfig.ProtoReflect.Descriptor instead.
func (*HBaseConfig) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{4}
}

func (x *HBaseConfig) GetHosts() []*HBaseConfig_Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// S3Config
type S3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// S3 endpoints, eg: "http://s3.gd2.qingstor.com".
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint" binding:"url" minLength:"1" maxLength:"1024"`
	// User's access key.
	AccessKey string `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key" binding:"gte=1,lte=1024" minLength:"1" maxLength:"1024"`
	// User's secret key.
	SecretKey string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key" binding:"gte=1,lte=1024" minLength:"1" maxLength:"1024"`
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{5}
}

func (x *S3Config) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3Config) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3Config) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

// FlinkConfig
type FlinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flink parallelism. Is required, Min 0, 0 is default setting.
	Parallelism int32 `protobuf:"varint,1,opt,name=parallelism,proto3" json:"parallelism" binding:"gte=0,lte=10000" mininum:"0" maximum:"10000"`
	// Config of s3. Not required.
	S3 *S3Config `protobuf:"bytes,2,opt,name=s3,proto3" json:"s3" binding:"-"`
	// Config of flink
	Items []*FlinkConfig_Item `protobuf:"bytes,3,rep,name=items,proto3" json:"conf" binding:"-"`
}

func (x *FlinkConfig) Reset() {
	*x = FlinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig) ProtoMessage() {}

func (x *FlinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig.ProtoReflect.Descriptor instead.
func (*FlinkConfig) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{6}
}

func (x *FlinkConfig) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *FlinkConfig) GetS3() *S3Config {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *FlinkConfig) GetItems() []*FlinkConfig_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// FuncConfig represents the function node config for stream workflow.
type FuncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Udf   []string `protobuf:"bytes,1,rep,name=udf,proto3" json:"udf,omitempty"`
	Udtf  []string `protobuf:"bytes,2,rep,name=udtf,proto3" json:"udtf,omitempty"`
	Udttf []string `protobuf:"bytes,3,rep,name=udttf,proto3" json:"udttf,omitempty"`
}

func (x *FuncConfig) Reset() {
	*x = FuncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncConfig) ProtoMessage() {}

func (x *FuncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncConfig.ProtoReflect.Descriptor instead.
func (*FuncConfig) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{7}
}

func (x *FuncConfig) GetUdf() []string {
	if x != nil {
		return x.Udf
	}
	return nil
}

func (x *FuncConfig) GetUdtf() []string {
	if x != nil {
		return x.Udtf
	}
	return nil
}

func (x *FuncConfig) GetUdttf() []string {
	if x != nil {
		return x.Udttf
	}
	return nil
}

// StreamFlowEnv represents a workflow environmental parameters info.
// Not use with gorm.
type StreamFlowEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The engine type. 1 => "BuildIn" 2 => "External". Is Required.
	// Notice: Only support 1 on present.
	EngineType EngineType `protobuf:"varint,1,opt,name=engine_type,json=engineType,proto3,enum=model.EngineType" json:"engine_type" binding:"gte=1,lte=1"`
	// The engine id. Is required if engine_type == 2.
	EngineId string `protobuf:"bytes,2,opt,name=engine_id,json=engineId,proto3" json:"engine_id" binding:"required_if=engine_type 2"`
	// Flink JobManager. 1CU = 1C + 4GB. Is required, Min 1, Max 8
	JobCu uint32 `protobuf:"varint,3,opt,name=job_cu,json=jobCu,proto3" json:"job_cu" binding:"gte=1"`
	// Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 1, Max 8
	TaskCu uint32 `protobuf:"varint,4,opt,name=task_cu,json=taskCu,proto3" json:"task_cu" binding:"gte=1"`
	// Flink task number for TaskManager. Is required, Min 1, Max ?
	TaskNum uint32 `protobuf:"varint,5,opt,name=task_num,json=taskNum,proto3" json:"task_num" binding:"gte=1"`
	// The config for flink. Is required
	Flink *FlinkConfig `protobuf:"bytes,6,opt,name=flink,proto3" json:"flink" binding:"required"`
	// Config of HBase. Not required.
	Hbase *HBaseConfig `protobuf:"bytes,7,opt,name=hbase,proto3" json:"hbase" binding:"-"`
	// The config for function. Not required
	Function *FuncConfig `protobuf:"bytes,8,opt,name=function,proto3" json:"function" binding:"-"`
}

func (x *StreamFlowEnv) Reset() {
	*x = StreamFlowEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowEnv) ProtoMessage() {}

func (x *StreamFlowEnv) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowEnv.ProtoReflect.Descriptor instead.
func (*StreamFlowEnv) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{8}
}

func (x *StreamFlowEnv) GetEngineType() EngineType {
	if x != nil {
		return x.EngineType
	}
	return EngineType__EngineType
}

func (x *StreamFlowEnv) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *StreamFlowEnv) GetJobCu() uint32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *StreamFlowEnv) GetTaskCu() uint32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *StreamFlowEnv) GetTaskNum() uint32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *StreamFlowEnv) GetFlink() *FlinkConfig {
	if x != nil {
		return x.Flink
	}
	return nil
}

func (x *StreamFlowEnv) GetHbase() *HBaseConfig {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *StreamFlowEnv) GetFunction() *FuncConfig {
	if x != nil {
		return x.Function
	}
	return nil
}

// StreamFlowSchedule represents a workflow schedule info.
type StreamFlowSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	Started int64 `protobuf:"varint,1,opt,name=started,proto3" json:"started" default:"0" binding:"gte=0"`
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	Ended int64 `protobuf:"varint,2,opt,name=ended,proto3" json:"ended" default:"0" binding:"gte=0"`
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace"
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	// Is required.
	ConcurrencyPolicy ScheduleConcurrencyPolicy `protobuf:"varint,3,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=model.ScheduleConcurrencyPolicy" json:"concurrency_policy" binding:"gte=1,lte=3"`
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	RetryPolicy ScheduleRetryPolicy `protobuf:"varint,4,opt,name=retry_policy,json=retryPolicy,proto3,enum=model.ScheduleRetryPolicy" json:"retry_policy" binding:"gte=1,lte=2"`
	// FIXME: test binding.
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	RetryLimit int32 `protobuf:"varint,5,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit" binding:"required_with=retry_policy=2,gte=1,lte=99"`
	// Retry interval,  Is required with retry_policy = 2, Min 1, Max 30.
	RetryInterval int32 `protobuf:"varint,6,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval" binding:"required_with=retry_policy=2,gte=1,lte=30"`
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 4320min.
	Timeout int32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout" default:"0" binding:"gte=0"`
	// Crontab Express. Is required.
	// FIXME: check binding.
	Express string `protobuf:"bytes,8,opt,name=express,proto3" json:"express" binding:"gte=5,lte=128"`
}

func (x *StreamFlowSchedule) Reset() {
	*x = StreamFlowSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowSchedule) ProtoMessage() {}

func (x *StreamFlowSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowSchedule.ProtoReflect.Descriptor instead.
func (*StreamFlowSchedule) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{9}
}

func (x *StreamFlowSchedule) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *StreamFlowSchedule) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *StreamFlowSchedule) GetConcurrencyPolicy() ScheduleConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return ScheduleConcurrencyPolicy__ScheduleConcurrencyPolicy
}

func (x *StreamFlowSchedule) GetRetryPolicy() ScheduleRetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return ScheduleRetryPolicy__ScheduleRetryPolicy
}

func (x *StreamFlowSchedule) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *StreamFlowSchedule) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *StreamFlowSchedule) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StreamFlowSchedule) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

// StreamFlowProperty represents property of workflow.
type StreamFlowProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version  int64               `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey"`
	Nodes    *FlinkJobNodes      `protobuf:"bytes,4,opt,name=nodes,proto3" json:"nodes" gorm:"column:nodes;type:json"`
	Env      *StreamFlowEnv      `protobuf:"bytes,5,opt,name=env,proto3" json:"env" gorm:"column:env;type:json"`
	Schedule *StreamFlowSchedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule" gorm:"column:schedule;type:json"`
}

func (x *StreamFlowProperty) Reset() {
	*x = StreamFlowProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowProperty) ProtoMessage() {}

func (x *StreamFlowProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowProperty.ProtoReflect.Descriptor instead.
func (*StreamFlowProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{10}
}

func (x *StreamFlowProperty) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlowProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlowProperty) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlowProperty) GetNodes() *FlinkJobNodes {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *StreamFlowProperty) GetEnv() *StreamFlowEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *StreamFlowProperty) GetSchedule() *StreamFlowSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// The release stream workflow info.
type StreamFlowRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Workflow Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	Type StreamFlow_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.StreamFlow_Type" json:"type" gorm:"column:type;"`
	// Release status, 1 => "active", 2 => "suspended"
	Status StreamFlowRelease_Status `protobuf:"varint,6,opt,name=status,proto3,enum=model.StreamFlowRelease_Status" json:"status" gorm:"column:status;"`
	// Workflow release description.
	Desc string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamFlowRelease) Reset() {
	*x = StreamFlowRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowRelease) ProtoMessage() {}

func (x *StreamFlowRelease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowRelease.ProtoReflect.Descriptor instead.
func (*StreamFlowRelease) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{11}
}

func (x *StreamFlowRelease) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlowRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlowRelease) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlowRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamFlowRelease) GetType() StreamFlow_Type {
	if x != nil {
		return x.Type
	}
	return StreamFlow__
}

func (x *StreamFlowRelease) GetStatus() StreamFlowRelease_Status {
	if x != nil {
		return x.Status
	}
	return StreamFlowRelease__
}

func (x *StreamFlowRelease) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamFlowRelease) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamFlowRelease) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The instance info of stream workflow.
type StreamFlowInst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID it belongs to.
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id" gorm:"column:flow_id;"`
	// The release version.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version"`
	// Workflow instance ID, unique.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The instance state.
	State   StreamFlowInst_State `protobuf:"varint,5,opt,name=state,proto3,enum=model.StreamFlowInst_State" json:"state" gorm:"column:state;"`
	Created int64                `protobuf:"varint,6,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time
	Updated int64 `protobuf:"varint,7,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamFlowInst) Reset() {
	*x = StreamFlowInst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowInst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowInst) ProtoMessage() {}

func (x *StreamFlowInst) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowInst.ProtoReflect.Descriptor instead.
func (*StreamFlowInst) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{12}
}

func (x *StreamFlowInst) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlowInst) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *StreamFlowInst) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlowInst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlowInst) GetState() StreamFlowInst_State {
	if x != nil {
		return x.State
	}
	return StreamFlowInst__
}

func (x *StreamFlowInst) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamFlowInst) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workspace operation audit log record.
type OpAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of who execute this operation.
	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"column:user_id;primaryKey;"`
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;primaryKey;"`
	// -- The type of operation, 2 => "Write",  3 => "Read".
	OpType OpType `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=model.OpType" json:"op_type" gorm:"column:op_type;"`
	//	-- The operation of user behavior.
	OpName string `protobuf:"bytes,4,opt,name=op_name,json=opName,proto3" json:"op_name" gorm:"column:op_name;"`
	// -- The result of operation, 1 => "Success", 2 => "Failed".
	State OpAudit_State `protobuf:"varint,5,opt,name=state,proto3,enum=model.OpAudit_State" json:"state" gorm:"column:state;"`
	// Timestamp of time of when accessed.
	Created int64 `protobuf:"varint,6,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
}

func (x *OpAudit) Reset() {
	*x = OpAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpAudit) ProtoMessage() {}

func (x *OpAudit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpAudit.ProtoReflect.Descriptor instead.
func (*OpAudit) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{13}
}

func (x *OpAudit) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OpAudit) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *OpAudit) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType__OpType
}

func (x *OpAudit) GetOpName() string {
	if x != nil {
		return x.OpName
	}
	return ""
}

func (x *OpAudit) GetState() OpAudit_State {
	if x != nil {
		return x.State
	}
	return OpAudit___
}

func (x *OpAudit) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// The Role info.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The name of role. unique in a workspace.
	Name string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	Type Role_Type `protobuf:"varint,4,opt,name=type,proto3,enum=model.Role_Type" json:"type" gorm:"column:type;"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{14}
}

func (x *Role) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetType() Role_Type {
	if x != nil {
		return x.Type
	}
	return Role__
}

// The workspace member info.
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;primaryKey;"`
	// The user id in account-server.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"column:user_id;primaryKey;"`
	// The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	RoleIds string `protobuf:"bytes,4,opt,name=role_ids,json=roleIds,proto3" json:"role_ids" gorm:"column:role_ids;"`
	Created int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time
	Updated int64 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{15}
}

func (x *Member) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Member) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Member) GetRoleIds() string {
	if x != nil {
		return x.RoleIds
	}
	return ""
}

func (x *Member) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Member) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The monitor rule info
type MonitorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Rule ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// Rule Name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Rule status, 1 => "enabled", 2 => "disabled".
	Status MonitorRule_Status `protobuf:"varint,4,opt,name=status,proto3,enum=model.MonitorRule_Status" json:"status" gorm:"column:status;"`
	// The object unit, 1 => "workspace" 2 => "workflow'
	Unit int32 `protobuf:"varint,5,opt,name=unit,proto3" json:"unit" gorm:"column:unit;"`
	// The object text.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text" gorm:"column:text;"`
	// The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
	Trigger int32 `protobuf:"varint,7,opt,name=trigger,proto3" json:"trigger" gorm:"column:trigger;"`
	// The alarm times. 1 ~ 99
	AlarmTimes int32 `protobuf:"varint,8,opt,name=alarm_times,json=alarmTimes,proto3" json:"alarm_times" gorm:"column:alarm_times;"`
	// The alarm interval. 1 ~ 30
	AlarmInterval int32 `protobuf:"varint,9,opt,name=alarm_interval,json=alarmInterval,proto3" json:"alarm_interval" gorm:"column:alarm_interval;"`
	// The alarm type. "sms, email"
	AlarmType string `protobuf:"bytes,10,opt,name=alarm_type,json=alarmType,proto3" json:"alarm_type" gorm:"column:alarm_type;"`
	// The free time. "00:01,03:00".
	FreeTime string `protobuf:"bytes,11,opt,name=free_time,json=freeTime,proto3" json:"free_time" gorm:"column:free_time;"`
	// The alarm receiver. "usr-111111,usr-22222".
	Receiver string `protobuf:"bytes,12,opt,name=receiver,proto3" json:"receiver" gorm:"column:receiver;"`
}

func (x *MonitorRule) Reset() {
	*x = MonitorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRule) ProtoMessage() {}

func (x *MonitorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRule.ProtoReflect.Descriptor instead.
func (*MonitorRule) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{16}
}

func (x *MonitorRule) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *MonitorRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MonitorRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitorRule) GetStatus() MonitorRule_Status {
	if x != nil {
		return x.Status
	}
	return MonitorRule__
}

func (x *MonitorRule) GetUnit() int32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *MonitorRule) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MonitorRule) GetTrigger() int32 {
	if x != nil {
		return x.Trigger
	}
	return 0
}

func (x *MonitorRule) GetAlarmTimes() int32 {
	if x != nil {
		return x.AlarmTimes
	}
	return 0
}

func (x *MonitorRule) GetAlarmInterval() int32 {
	if x != nil {
		return x.AlarmInterval
	}
	return 0
}

func (x *MonitorRule) GetAlarmType() string {
	if x != nil {
		return x.AlarmType
	}
	return ""
}

func (x *MonitorRule) GetFreeTime() string {
	if x != nil {
		return x.FreeTime
	}
	return ""
}

func (x *MonitorRule) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

// The message in inst queue..
type QueueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request id of beginning.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// The property of stream workflow.
	Property *StreamFlowProperty `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	// The operation that you will execute.
	// 1 => "run"  2 => "retry" 3 => "terminate" 4 => "delete"
	Operation int32 `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// The number of times the instance task was executed.
	Times int32 `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	// The start execution time of the task instance.
	Started int64 `protobuf:"varint,5,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *QueueMessage) Reset() {
	*x = QueueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMessage) ProtoMessage() {}

func (x *QueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMessage.ProtoReflect.Descriptor instead.
func (*QueueMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{17}
}

func (x *QueueMessage) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *QueueMessage) GetProperty() *StreamFlowProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *QueueMessage) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *QueueMessage) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *QueueMessage) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

type InstanceStatusStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance status
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
	// instance count with the status
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *InstanceStatusStat) Reset() {
	*x = InstanceStatusStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatusStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatusStat) ProtoMessage() {}

func (x *InstanceStatusStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatusStat.ProtoReflect.Descriptor instead.
func (*InstanceStatusStat) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceStatusStat) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *InstanceStatusStat) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InstanceRuntimeRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// flow_id
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id"`
	// running time
	RunningTime int64 `protobuf:"varint,3,opt,name=running_time,json=runningTime,proto3" json:"running_time"`
	// version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version"`
}

func (x *InstanceRuntimeRankInfo) Reset() {
	*x = InstanceRuntimeRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceRuntimeRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceRuntimeRankInfo) ProtoMessage() {}

func (x *InstanceRuntimeRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceRuntimeRankInfo.ProtoReflect.Descriptor instead.
func (*InstanceRuntimeRankInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceRuntimeRankInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstanceRuntimeRankInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *InstanceRuntimeRankInfo) GetRunningTime() int64 {
	if x != nil {
		return x.RunningTime
	}
	return 0
}

func (x *InstanceRuntimeRankInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type InstanceErrorRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow_id
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id"`
	// version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	// running time
	ErrorCount int64 `protobuf:"varint,3,opt,name=error_count,json=errorCount,proto3" json:"error_count"`
}

func (x *InstanceErrorRankInfo) Reset() {
	*x = InstanceErrorRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceErrorRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceErrorRankInfo) ProtoMessage() {}

func (x *InstanceErrorRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceErrorRankInfo.ProtoReflect.Descriptor instead.
func (*InstanceErrorRankInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{20}
}

func (x *InstanceErrorRankInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *InstanceErrorRankInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceErrorRankInfo) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type DispatchTaskCountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow_count
	FlowCount int32 `protobuf:"varint,1,opt,name=flow_count,json=flowCount,proto3" json:"flow_count"`
	// instance count
	InstanceCount int32 `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_id"`
	// updated time
	Updated int64 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated"`
}

func (x *DispatchTaskCountInfo) Reset() {
	*x = DispatchTaskCountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTaskCountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTaskCountInfo) ProtoMessage() {}

func (x *DispatchTaskCountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTaskCountInfo.ProtoReflect.Descriptor instead.
func (*DispatchTaskCountInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{21}
}

func (x *DispatchTaskCountInfo) GetFlowCount() int32 {
	if x != nil {
		return x.FlowCount
	}
	return 0
}

func (x *DispatchTaskCountInfo) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *DispatchTaskCountInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type InstanceTaskExecStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hour
	Hour int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour"`
	// instance success count
	InstanceCount int64 `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count"`
}

func (x *InstanceTaskExecStat) Reset() {
	*x = InstanceTaskExecStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTaskExecStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTaskExecStat) ProtoMessage() {}

func (x *InstanceTaskExecStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTaskExecStat.ProtoReflect.Descriptor instead.
func (*InstanceTaskExecStat) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{22}
}

func (x *InstanceTaskExecStat) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *InstanceTaskExecStat) GetInstanceCount() int64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

// Source Info
type SourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source ID, unique within a region.
	SourceID string `protobuf:"bytes,1,opt,name=SourceID,proto3" json:"sourceid" gorm:"column:sourceid;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceID string `protobuf:"bytes,2,opt,name=SpaceID,proto3" json:"spaceid" gorm:"column:spaceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source Type, one of MySQL/PostgreSQL/Kafka/S3/ClickHouse/Hbase/Ftp/HDFS binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
	SourceType string `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"sourcetype" gorm:"column:sourcetype;"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=Comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// Url, this source connection info.
	Url *SourceUrl `protobuf:"bytes,6,opt,name=Url,proto3" json:"url" gorm:"column:url;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// State, one of enable/disable.
	State string `protobuf:"bytes,7,opt,name=State,proto3" json:"state" gorm:"column:state;" binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"`
	// Create Time, this Source create time.
	CreateTime int64 `protobuf:"varint,8,opt,name=CreateTime,proto3" json:"createtime" gorm:"column:createtime;"`
	// Update Time, this Source last update time.
	UpdateTime int64 `protobuf:"varint,9,opt,name=UpdateTime,proto3" json:"updatetime" gorm:"column:updatetime;"`
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{23}
}

func (x *SourceInfo) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *SourceInfo) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

func (x *SourceInfo) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *SourceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SourceInfo) GetUrl() *SourceUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *SourceInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SourceInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SourceInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// Table Info
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID, unique within a region.
	TableID string `protobuf:"bytes,1,opt,name=TableID,proto3" json:"tableid" gorm:"column:tableid;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source ID
	SourceID string `protobuf:"bytes,2,opt,name=SourceID,proto3" json:"sourceid" gorm:"column:sourceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceID string `protobuf:"bytes,3,opt,name=SpaceID,proto3" json:"spaceid" gorm:"column:spaceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=Comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// Define this table info.
	Define *TableDefine `protobuf:"bytes,6,opt,name=Define,proto3" json:"define" gorm:"column:define;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// Create Time, this create time.
	CreateTime int64 `protobuf:"varint,7,opt,name=CreateTime,proto3" json:"createtime" gorm:"column:createtime;"`
	// Update Time, this Source last update time.
	UpdateTime int64 `protobuf:"varint,8,opt,name=UpdateTime,proto3" json:"updatetime" gorm:"column:updatetime;"`
	// Tablekind, one of source/destination/dimension
	TableKind string `protobuf:"bytes,9,opt,name=TableKind,proto3" json:"tablekind" gorm:"column:tablekind;" binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"`
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{24}
}

func (x *TableInfo) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *TableInfo) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *TableInfo) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

func (x *TableInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TableInfo) GetDefine() *TableDefine {
	if x != nil {
		return x.Define
	}
	return nil
}

func (x *TableInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TableInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TableInfo) GetTableKind() string {
	if x != nil {
		return x.TableKind
	}
	return ""
}

// SqlColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=Column,proto3" json:"column" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column type
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"type" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column comment
	Comment string `protobuf:"bytes,3,opt,name=Comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// if it is primary key column, one of true/false
	PrimaryKey string `protobuf:"bytes,4,opt,name=PrimaryKey,proto3" json:"primarykey" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"`
	// the column type length
	Length string `protobuf:"bytes,5,opt,name=Length,proto3" json:"length" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"`
}

func (x *SqlColumnType) Reset() {
	*x = SqlColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlColumnType) ProtoMessage() {}

func (x *SqlColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlColumnType.ProtoReflect.Descriptor instead.
func (*SqlColumnType) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{25}
}

func (x *SqlColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlColumnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlColumnType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SqlColumnType) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SqlColumnType) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

// SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlTimeColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=Column,proto3" json:"column" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column type. oneof proctime/watermark
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"type" binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"`
	// The column expression
	Expression string `protobuf:"bytes,3,opt,name=Expression,proto3" json:"expression" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"`
}

func (x *SqlTimeColumnType) Reset() {
	*x = SqlTimeColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimeColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimeColumnType) ProtoMessage() {}

func (x *SqlTimeColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimeColumnType.ProtoReflect.Descriptor instead.
func (*SqlTimeColumnType) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{26}
}

func (x *SqlTimeColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlTimeColumnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlTimeColumnType) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// ConnectorOption used as request parameters for RPC and HTTP(based on Body)
type ConnectorOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The config name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"`
	// The config value.
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"value" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"`
}

func (x *ConnectorOption) Reset() {
	*x = ConnectorOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorOption) ProtoMessage() {}

func (x *ConnectorOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorOption.ProtoReflect.Descriptor instead.
func (*ConnectorOption) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{27}
}

func (x *ConnectorOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectorOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MySQLUrl used as request parameters for RPC and HTTP(based on Body)
type MySQLUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The database
	Database string `protobuf:"bytes,4,opt,name=Database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *MySQLUrl) Reset() {
	*x = MySQLUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLUrl) ProtoMessage() {}

func (x *MySQLUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLUrl.ProtoReflect.Descriptor instead.
func (*MySQLUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{28}
}

func (x *MySQLUrl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySQLUrl) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLUrl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MySQLUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// PostgreSQLUrl used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The database
	Database string `protobuf:"bytes,4,opt,name=Database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *PostgreSQLUrl) Reset() {
	*x = PostgreSQLUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLUrl) ProtoMessage() {}

func (x *PostgreSQLUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLUrl.ProtoReflect.Descriptor instead.
func (*PostgreSQLUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{29}
}

func (x *PostgreSQLUrl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgreSQLUrl) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgreSQLUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgreSQLUrl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgreSQLUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// ClickHouseUrl used as request parameters for RPC and HTTP(based on Body)
type ClickHouseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The database
	Database string `protobuf:"bytes,4,opt,name=Database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *ClickHouseUrl) Reset() {
	*x = ClickHouseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseUrl) ProtoMessage() {}

func (x *ClickHouseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseUrl.ProtoReflect.Descriptor instead.
func (*ClickHouseUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{30}
}

func (x *ClickHouseUrl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickHouseUrl) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickHouseUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickHouseUrl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickHouseUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// KafkaUrl used as request parameters for RPC and HTTP(based on Body)
type KafkaUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kafak brokers.
	KafkaBrokers string `protobuf:"bytes,1,opt,name=KafkaBrokers,proto3" json:"kafkabrokers" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *KafkaUrl) Reset() {
	*x = KafkaUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaUrl) ProtoMessage() {}

func (x *KafkaUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaUrl.ProtoReflect.Descriptor instead.
func (*KafkaUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{31}
}

func (x *KafkaUrl) GetKafkaBrokers() string {
	if x != nil {
		return x.KafkaBrokers
	}
	return ""
}

// S3Url used as request parameters for RPC and HTTP(based on Body)
type S3Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S3Url) Reset() {
	*x = S3Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Url) ProtoMessage() {}

func (x *S3Url) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Url.ProtoReflect.Descriptor instead.
func (*S3Url) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{32}
}

// HbaseUrl used as request parameters for RPC and HTTP(based on Body)
type HbaseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hbase Zookeeper
	Zookeeper string `protobuf:"bytes,1,opt,name=Zookeeper,proto3" json:"zookeeper" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The hbase Zookeeper Node
	Znode string `protobuf:"bytes,2,opt,name=Znode,proto3" json:"znode" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *HbaseUrl) Reset() {
	*x = HbaseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseUrl) ProtoMessage() {}

func (x *HbaseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseUrl.ProtoReflect.Descriptor instead.
func (*HbaseUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{33}
}

func (x *HbaseUrl) GetZookeeper() string {
	if x != nil {
		return x.Zookeeper
	}
	return ""
}

func (x *HbaseUrl) GetZnode() string {
	if x != nil {
		return x.Znode
	}
	return ""
}

// FtpUrl used as request parameters for RPC and HTTP(based on Body)
type FtpUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,2,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *FtpUrl) Reset() {
	*x = FtpUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpUrl) ProtoMessage() {}

func (x *FtpUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpUrl.ProtoReflect.Descriptor instead.
func (*FtpUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{34}
}

func (x *FtpUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FtpUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// FtpUrl used as request parameters for RPC and HTTP(based on Body)
type HDFSUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*HDFSUrl_HDFSNodeUrl `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"nodes" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *HDFSUrl) Reset() {
	*x = HDFSUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSUrl) ProtoMessage() {}

func (x *HDFSUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSUrl.ProtoReflect.Descriptor instead.
func (*HDFSUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{35}
}

func (x *HDFSUrl) GetNodes() []*HDFSUrl_HDFSNodeUrl {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// SourceUrl used as request parameters for RPC and HTTP(based on Body)
type SourceUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Source Connection Info.
	MySQL *MySQLUrl `protobuf:"bytes,1,opt,name=MySQL,proto3" json:"mysql"`
	// PostgreSQL Source Connection Info.
	PostgreSQL *PostgreSQLUrl `protobuf:"bytes,2,opt,name=PostgreSQL,proto3" json:"postgresql"`
	// ClickHouse Source Connection Info.
	ClickHouse *ClickHouseUrl `protobuf:"bytes,3,opt,name=ClickHouse,proto3" json:"clickhouse"`
	// Kafka Source Connection Info.
	Kafka *KafkaUrl `protobuf:"bytes,4,opt,name=Kafka,proto3" json:"kafka"`
	// S3 Source Connection Info.
	S3 *S3Url `protobuf:"bytes,5,opt,name=S3,proto3" json:"s3"`
	// Hbase Source Connection Info.
	Hbase *HbaseUrl `protobuf:"bytes,6,opt,name=Hbase,proto3" json:"hbase"`
	// Ftp Source Connection Info.
	Ftp *FtpUrl `protobuf:"bytes,7,opt,name=Ftp,proto3" json:"ftp"`
	// HDFS Source Connection Info.
	HDFS *HDFSUrl `protobuf:"bytes,8,opt,name=HDFS,proto3" json:"hdfs"`
}

func (x *SourceUrl) Reset() {
	*x = SourceUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceUrl) ProtoMessage() {}

func (x *SourceUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceUrl.ProtoReflect.Descriptor instead.
func (*SourceUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{36}
}

func (x *SourceUrl) GetMySQL() *MySQLUrl {
	if x != nil {
		return x.MySQL
	}
	return nil
}

func (x *SourceUrl) GetPostgreSQL() *PostgreSQLUrl {
	if x != nil {
		return x.PostgreSQL
	}
	return nil
}

func (x *SourceUrl) GetClickHouse() *ClickHouseUrl {
	if x != nil {
		return x.ClickHouse
	}
	return nil
}

func (x *SourceUrl) GetKafka() *KafkaUrl {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *SourceUrl) GetS3() *S3Url {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *SourceUrl) GetHbase() *HbaseUrl {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *SourceUrl) GetFtp() *FtpUrl {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *SourceUrl) GetHDFS() *HDFSUrl {
	if x != nil {
		return x.HDFS
	}
	return nil
}

// MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
type MySQLTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *MySQLTableDefine) Reset() {
	*x = MySQLTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLTableDefine) ProtoMessage() {}

func (x *MySQLTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLTableDefine.ProtoReflect.Descriptor instead.
func (*MySQLTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{37}
}

func (x *MySQLTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *MySQLTableDefine) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *MySQLTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *MySQLTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *PostgreSQLTableDefine) Reset() {
	*x = PostgreSQLTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTableDefine) ProtoMessage() {}

func (x *PostgreSQLTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTableDefine.ProtoReflect.Descriptor instead.
func (*PostgreSQLTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{38}
}

func (x *PostgreSQLTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *PostgreSQLTableDefine) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *PostgreSQLTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *PostgreSQLTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
type ClickHouseTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *ClickHouseTableDefine) Reset() {
	*x = ClickHouseTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseTableDefine) ProtoMessage() {}

func (x *ClickHouseTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseTableDefine.ProtoReflect.Descriptor instead.
func (*ClickHouseTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{39}
}

func (x *ClickHouseTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *ClickHouseTableDefine) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *ClickHouseTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *ClickHouseTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
type HbaseTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *HbaseTableDefine) Reset() {
	*x = HbaseTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseTableDefine) ProtoMessage() {}

func (x *HbaseTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseTableDefine.ProtoReflect.Descriptor instead.
func (*HbaseTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{40}
}

func (x *HbaseTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HbaseTableDefine) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *HbaseTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *HbaseTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
type HDFSTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *HDFSTableDefine) Reset() {
	*x = HDFSTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSTableDefine) ProtoMessage() {}

func (x *HDFSTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSTableDefine.ProtoReflect.Descriptor instead.
func (*HDFSTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{41}
}

func (x *HDFSTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HDFSTableDefine) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *HDFSTableDefine) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HDFSTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *HDFSTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// S3TableDefine used as request parameters for RPC and HTTP(based on Body)
type S3TableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *S3TableDefine) Reset() {
	*x = S3TableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3TableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3TableDefine) ProtoMessage() {}

func (x *S3TableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3TableDefine.ProtoReflect.Descriptor instead.
func (*S3TableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{42}
}

func (x *S3TableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *S3TableDefine) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *S3TableDefine) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *S3TableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *S3TableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
type FtpTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *FtpTableDefine) Reset() {
	*x = FtpTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpTableDefine) ProtoMessage() {}

func (x *FtpTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpTableDefine.ProtoReflect.Descriptor instead.
func (*FtpTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{43}
}

func (x *FtpTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *FtpTableDefine) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FtpTableDefine) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FtpTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *FtpTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
type KafkaTableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Topic string `protobuf:"bytes,3,opt,name=Topic,proto3" json:"topic" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=TimeColumn,proto3" json:"timecolumn"`
}

func (x *KafkaTableDefine) Reset() {
	*x = KafkaTableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTableDefine) ProtoMessage() {}

func (x *KafkaTableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTableDefine.ProtoReflect.Descriptor instead.
func (*KafkaTableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{44}
}

func (x *KafkaTableDefine) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *KafkaTableDefine) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *KafkaTableDefine) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaTableDefine) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *KafkaTableDefine) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

type TableDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Table Info.
	MySQL *MySQLTableDefine `protobuf:"bytes,1,opt,name=MySQL,proto3" json:"mysql"`
	// PostgreSQL Table Info.
	PostgreSQL *PostgreSQLTableDefine `protobuf:"bytes,2,opt,name=PostgreSQL,proto3" json:"postgresql"`
	// ClickHouse Table Info.
	ClickHouse *ClickHouseTableDefine `protobuf:"bytes,3,opt,name=ClickHouse,proto3" json:"clickhouse"`
	// Hbase Table Info.
	Hbase *HbaseTableDefine `protobuf:"bytes,4,opt,name=Hbase,proto3" json:"hbase"`
	// Kafka Table Info.
	Kafka *KafkaTableDefine `protobuf:"bytes,5,opt,name=Kafka,proto3" json:"kafka"`
	// S3 Table Info.
	S3 *S3TableDefine `protobuf:"bytes,6,opt,name=S3,proto3" json:"s3"`
	// Ftp Table Info.
	Ftp *FtpTableDefine `protobuf:"bytes,7,opt,name=Ftp,proto3" json:"ftp"`
	// HDFS Table Info.
	HDFS *HDFSTableDefine `protobuf:"bytes,8,opt,name=HDFS,proto3" json:"hdfs"`
}

func (x *TableDefine) Reset() {
	*x = TableDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDefine) ProtoMessage() {}

func (x *TableDefine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDefine.ProtoReflect.Descriptor instead.
func (*TableDefine) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{45}
}

func (x *TableDefine) GetMySQL() *MySQLTableDefine {
	if x != nil {
		return x.MySQL
	}
	return nil
}

func (x *TableDefine) GetPostgreSQL() *PostgreSQLTableDefine {
	if x != nil {
		return x.PostgreSQL
	}
	return nil
}

func (x *TableDefine) GetClickHouse() *ClickHouseTableDefine {
	if x != nil {
		return x.ClickHouse
	}
	return nil
}

func (x *TableDefine) GetHbase() *HbaseTableDefine {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *TableDefine) GetKafka() *KafkaTableDefine {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *TableDefine) GetS3() *S3TableDefine {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *TableDefine) GetFtp() *FtpTableDefine {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *TableDefine) GetHDFS() *HDFSTableDefine {
	if x != nil {
		return x.HDFS
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, unique within a region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" gorm:"column:id;primaryKey;"`
	// Resource Parent ID, default "".
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid" gorm:"column:pid;"`
	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Resource Name, unique within a region of same space_id and pid.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Resource type, default 0,  0 => "directory", 1 => "jar", 2 => "udf".
	Type Resource_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.Resource_Type" json:"type" gorm:"column:type;"`
	// Resource size, Byte.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size" gorm:"size;"`
	// Resource description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description" gorm:"description;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{46}
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Resource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetType() Resource_Type {
	if x != nil {
		return x.Type
	}
	return Resource__
}

func (x *Resource) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Resource) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Resource) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// UDF Info
type UDFInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID, unique within a region.
	UDFID string `protobuf:"bytes,1,opt,name=UDFID,proto3" json:"udfid" gorm:"column:udfid;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceID string `protobuf:"bytes,2,opt,name=SpaceID,proto3" json:"spaceid" gorm:"column:spaceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// UDF Type one of UDF/UDTF/UDTTF
	UDFType string `protobuf:"bytes,3,opt,name=UDFType,proto3" json:"udftype" gorm:"column:udftype;" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// UDF language one of Scala/Java/Python
	UDFLanguage string `protobuf:"bytes,4,opt,name=UDFLanguage,proto3" json:"udflanguage" gorm:"column:udflanguage;" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,5,opt,name=Name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,6,opt,name=Comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"`
	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	Define string `protobuf:"bytes,7,opt,name=Define,proto3" json:"define" gorm:"column:define;" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"`
	// usage for this udf
	UsageSample string `protobuf:"bytes,8,opt,name=UsageSample,proto3" json:"usagesample" gorm:"column:usagesample;" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"`
	// Create Time, this Source create time.
	CreateTime int64 `protobuf:"varint,9,opt,name=CreateTime,proto3" json:"createtime" gorm:"column:createtime;"`
	// Update Time, this Source last update time.
	UpdateTime int64 `protobuf:"varint,10,opt,name=UpdateTime,proto3" json:"updatetime" gorm:"column:updatetime;"`
}

func (x *UDFInfo) Reset() {
	*x = UDFInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDFInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDFInfo) ProtoMessage() {}

func (x *UDFInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDFInfo.ProtoReflect.Descriptor instead.
func (*UDFInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{47}
}

func (x *UDFInfo) GetUDFID() string {
	if x != nil {
		return x.UDFID
	}
	return ""
}

func (x *UDFInfo) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

func (x *UDFInfo) GetUDFType() string {
	if x != nil {
		return x.UDFType
	}
	return ""
}

func (x *UDFInfo) GetUDFLanguage() string {
	if x != nil {
		return x.UDFLanguage
	}
	return ""
}

func (x *UDFInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UDFInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UDFInfo) GetDefine() string {
	if x != nil {
		return x.Define
	}
	return ""
}

func (x *UDFInfo) GetUsageSample() string {
	if x != nil {
		return x.UsageSample
	}
	return ""
}

func (x *UDFInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UDFInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// DestNodeProperty
type DestNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// insert into these columns
	Columns []string `protobuf:"bytes,1,rep,name=Columns,proto3" json:"columns" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"`
	// tableid
	TableID string `protobuf:"bytes,2,opt,name=TableID,proto3" json:"tableid" binding:"len=20" required:"false" minLength:"20" maxLength:"20"`
}

func (x *DestNodeProperty) Reset() {
	*x = DestNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestNodeProperty) ProtoMessage() {}

func (x *DestNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestNodeProperty.ProtoReflect.Descriptor instead.
func (*DestNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{48}
}

func (x *DestNodeProperty) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DestNodeProperty) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

// ValuesNodeProperty
type ValuesNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all rows.
	Rows []*ValuesNodeProperty_ValuesType `protobuf:"bytes,1,rep,name=Rows,proto3" json:"rows" binding:"gte=1" required:"true" minLength:"1"`
}

func (x *ValuesNodeProperty) Reset() {
	*x = ValuesNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesNodeProperty) ProtoMessage() {}

func (x *ValuesNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesNodeProperty.ProtoReflect.Descriptor instead.
func (*ValuesNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{49}
}

func (x *ValuesNodeProperty) GetRows() []*ValuesNodeProperty_ValuesType {
	if x != nil {
		return x.Rows
	}
	return nil
}

// OrderByNodeProperty
type OrderByNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OrderBy
	Column []*OrderByNodeProperty_OrderByColumn `protobuf:"bytes,1,rep,name=Column,proto3" json:"column" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"`
}

func (x *OrderByNodeProperty) Reset() {
	*x = OrderByNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByNodeProperty) ProtoMessage() {}

func (x *OrderByNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByNodeProperty.ProtoReflect.Descriptor instead.
func (*OrderByNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{50}
}

func (x *OrderByNodeProperty) GetColumn() []*OrderByNodeProperty_OrderByColumn {
	if x != nil {
		return x.Column
	}
	return nil
}

// LimitNodeProperty
type LimitNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Limit int32 `protobuf:"varint,1,opt,name=Limit,proto3" json:"limit" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"`
}

func (x *LimitNodeProperty) Reset() {
	*x = LimitNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitNodeProperty) ProtoMessage() {}

func (x *LimitNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitNodeProperty.ProtoReflect.Descriptor instead.
func (*LimitNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{51}
}

func (x *LimitNodeProperty) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// OffsetNodeProperty
type OffsetNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Offset int32 `protobuf:"varint,1,opt,name=Offset,proto3" json:"offset" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"`
}

func (x *OffsetNodeProperty) Reset() {
	*x = OffsetNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetNodeProperty) ProtoMessage() {}

func (x *OffsetNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetNodeProperty.ProtoReflect.Descriptor instead.
func (*OffsetNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{52}
}

func (x *OffsetNodeProperty) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// FetchNodeProperty
type FetchNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Fetch int32 `protobuf:"varint,1,opt,name=Fetch,proto3" json:"fetch" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"`
}

func (x *FetchNodeProperty) Reset() {
	*x = FetchNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeProperty) ProtoMessage() {}

func (x *FetchNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeProperty.ProtoReflect.Descriptor instead.
func (*FetchNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{53}
}

func (x *FetchNodeProperty) GetFetch() int32 {
	if x != nil {
		return x.Fetch
	}
	return 0
}

// SqlNodeProperty
type SqlNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sql code.
	Sql string `protobuf:"bytes,1,opt,name=Sql,proto3" json:"sql" binding:"gte=1,lte=40000" required:"false" minLength:"1" maxLength:"40000"`
}

func (x *SqlNodeProperty) Reset() {
	*x = SqlNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNodeProperty) ProtoMessage() {}

func (x *SqlNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNodeProperty.ProtoReflect.Descriptor instead.
func (*SqlNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{54}
}

func (x *SqlNodeProperty) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

// ScalaNodeProperty
type ScalaNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code.
	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"code" binding:"gte=1,lte=40000" required:"false" minLength:"1" maxLength:"40000"`
}

func (x *ScalaNodeProperty) Reset() {
	*x = ScalaNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalaNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalaNodeProperty) ProtoMessage() {}

func (x *ScalaNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalaNodeProperty.ProtoReflect.Descriptor instead.
func (*ScalaNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{55}
}

func (x *ScalaNodeProperty) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// PythonNodeProperty
type PythonNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code.
	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"code" binding:"gte=1,lte=40000" required:"false" minLength:"1" maxLength:"40000"`
}

func (x *PythonNodeProperty) Reset() {
	*x = PythonNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonNodeProperty) ProtoMessage() {}

func (x *PythonNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonNodeProperty.ProtoReflect.Descriptor instead.
func (*PythonNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{56}
}

func (x *PythonNodeProperty) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// UnionNodeProperty
type UnionNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bool true or false
	All bool `protobuf:"varint,1,opt,name=All,proto3" json:"all"`
}

func (x *UnionNodeProperty) Reset() {
	*x = UnionNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionNodeProperty) ProtoMessage() {}

func (x *UnionNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionNodeProperty.ProtoReflect.Descriptor instead.
func (*UnionNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{57}
}

func (x *UnionNodeProperty) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

// GroupByNodeProperty
type GroupByNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Groupby column or expression
	Groupby []string `protobuf:"bytes,1,rep,name=Groupby,proto3" json:"groupby" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *GroupByNodeProperty) Reset() {
	*x = GroupByNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByNodeProperty) ProtoMessage() {}

func (x *GroupByNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByNodeProperty.ProtoReflect.Descriptor instead.
func (*GroupByNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{58}
}

func (x *GroupByNodeProperty) GetGroupby() []string {
	if x != nil {
		return x.Groupby
	}
	return nil
}

// HavingNodeProperty
type HavingNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// having code
	Having string `protobuf:"bytes,1,opt,name=Having,proto3" json:"having" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *HavingNodeProperty) Reset() {
	*x = HavingNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HavingNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HavingNodeProperty) ProtoMessage() {}

func (x *HavingNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HavingNodeProperty.ProtoReflect.Descriptor instead.
func (*HavingNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{59}
}

func (x *HavingNodeProperty) GetHaving() string {
	if x != nil {
		return x.Having
	}
	return ""
}

// ColumnAs
type ColumnAs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Field string `protobuf:"bytes,1,opt,name=Field,proto3" json:"field" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// func
	Func string `protobuf:"bytes,2,opt,name=Func,proto3" json:"func" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// Type
	Type string `protobuf:"bytes,4,opt,name=Type,proto3" json:"type" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"`
	// Column AS
	As string `protobuf:"bytes,5,opt,name=As,proto3" json:"as" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
}

func (x *ColumnAs) Reset() {
	*x = ColumnAs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnAs) ProtoMessage() {}

func (x *ColumnAs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnAs.ProtoReflect.Descriptor instead.
func (*ColumnAs) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{60}
}

func (x *ColumnAs) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ColumnAs) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *ColumnAs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnAs) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

// ConstNodeProperty
type ConstNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table name
	Table string `protobuf:"bytes,1,opt,name=Table,proto3" json:"table" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,2,rep,name=Column,proto3" json:"column" binding:"-"`
}

func (x *ConstNodeProperty) Reset() {
	*x = ConstNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstNodeProperty) ProtoMessage() {}

func (x *ConstNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstNodeProperty.ProtoReflect.Descriptor instead.
func (*ConstNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{61}
}

func (x *ConstNodeProperty) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ConstNodeProperty) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

// SourceNodeProperty
type SourceNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableid
	TableID string `protobuf:"bytes,1,opt,name=TableID,proto3" json:"tableid" binding:"len=20" required:"false" minLength:"20" maxLength:"20"`
	// table name
	TableAS string `protobuf:"bytes,2,opt,name=TableAS,proto3" json:"tableas" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// distinct or all, oneof ''(empty string) 'distinct'
	Distinct string `protobuf:"bytes,3,opt,name=Distinct,proto3" json:"distinct" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=Column,proto3" json:"column" binding:"-"`
	// column define.
	CustomColumn []*ColumnAs `protobuf:"bytes,5,rep,name=CustomColumn,proto3" json:"customcolumn" binding:"-"`
}

func (x *SourceNodeProperty) Reset() {
	*x = SourceNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceNodeProperty) ProtoMessage() {}

func (x *SourceNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceNodeProperty.ProtoReflect.Descriptor instead.
func (*SourceNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{62}
}

func (x *SourceNodeProperty) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *SourceNodeProperty) GetTableAS() string {
	if x != nil {
		return x.TableAS
	}
	return ""
}

func (x *SourceNodeProperty) GetDistinct() string {
	if x != nil {
		return x.Distinct
	}
	return ""
}

func (x *SourceNodeProperty) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *SourceNodeProperty) GetCustomColumn() []*ColumnAs {
	if x != nil {
		return x.CustomColumn
	}
	return nil
}

// DimensionNodeProperty
type DimensionNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableid
	TableID string `protobuf:"bytes,1,opt,name=TableID,proto3" json:"tableid" binding:"len=20" required:"false" minLength:"20" maxLength:"20"`
	// table name
	TableAS string `protobuf:"bytes,2,opt,name=TableAS,proto3" json:"tableas" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// distinct or all, oneof 'all' 'distinct'
	Distinct string `protobuf:"bytes,3,opt,name=Distinct,proto3" json:"distinct" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=Column,proto3" json:"column" binding:"-"`
	// column define.
	CustomColumn []*ColumnAs `protobuf:"bytes,5,rep,name=CustomColumn,proto3" json:"customcolumn" binding:"-"`
	// column define.
	TimeColumn string `protobuf:"bytes,6,opt,name=TimeColumn,proto3" json:"timecolumn" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
}

func (x *DimensionNodeProperty) Reset() {
	*x = DimensionNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionNodeProperty) ProtoMessage() {}

func (x *DimensionNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionNodeProperty.ProtoReflect.Descriptor instead.
func (*DimensionNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{63}
}

func (x *DimensionNodeProperty) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *DimensionNodeProperty) GetTableAS() string {
	if x != nil {
		return x.TableAS
	}
	return ""
}

func (x *DimensionNodeProperty) GetDistinct() string {
	if x != nil {
		return x.Distinct
	}
	return ""
}

func (x *DimensionNodeProperty) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *DimensionNodeProperty) GetCustomColumn() []*ColumnAs {
	if x != nil {
		return x.CustomColumn
	}
	return nil
}

func (x *DimensionNodeProperty) GetTimeColumn() string {
	if x != nil {
		return x.TimeColumn
	}
	return ""
}

// ExceptNodeProperty
type ExceptNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExceptNodeProperty) Reset() {
	*x = ExceptNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExceptNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptNodeProperty) ProtoMessage() {}

func (x *ExceptNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptNodeProperty.ProtoReflect.Descriptor instead.
func (*ExceptNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{64}
}

// IntersectNodeProperty
type IntersectNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntersectNodeProperty) Reset() {
	*x = IntersectNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectNodeProperty) ProtoMessage() {}

func (x *IntersectNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectNodeProperty.ProtoReflect.Descriptor instead.
func (*IntersectNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{65}
}

// FilterNodeProperty
type FilterNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where eg: a.id = 10
	Where string `protobuf:"bytes,1,opt,name=Where,proto3" json:"where" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// in: columnname
	In string `protobuf:"bytes,2,opt,name=In,proto3" json:"in" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// Exists: columnname
	Exists string `protobuf:"bytes,3,opt,name=Exists,proto3" json:"exists" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The column expression
	Expression string `protobuf:"bytes,4,opt,name=Expression,proto3" json:"expression" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"`
}

func (x *FilterNodeProperty) Reset() {
	*x = FilterNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNodeProperty) ProtoMessage() {}

func (x *FilterNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNodeProperty.ProtoReflect.Descriptor instead.
func (*FilterNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{66}
}

func (x *FilterNodeProperty) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *FilterNodeProperty) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

func (x *FilterNodeProperty) GetExists() string {
	if x != nil {
		return x.Exists
	}
	return ""
}

func (x *FilterNodeProperty) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// JarNodeProperty
type JarNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jarid in resource manager.
	JarID string `protobuf:"bytes,1,opt,name=JarID,proto3" json:"jarid" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// JarArgs
	JarArgs string `protobuf:"bytes,2,opt,name=JarArgs,proto3" json:"jarargs" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// JarEntry
	JarEntry string `protobuf:"bytes,3,opt,name=JarEntry,proto3" json:"jarentry" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *JarNodeProperty) Reset() {
	*x = JarNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JarNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JarNodeProperty) ProtoMessage() {}

func (x *JarNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JarNodeProperty.ProtoReflect.Descriptor instead.
func (*JarNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{67}
}

func (x *JarNodeProperty) GetJarID() string {
	if x != nil {
		return x.JarID
	}
	return ""
}

func (x *JarNodeProperty) GetJarArgs() string {
	if x != nil {
		return x.JarArgs
	}
	return ""
}

func (x *JarNodeProperty) GetJarEntry() string {
	if x != nil {
		return x.JarEntry
	}
	return ""
}

// JoinNodeProperty
type JoinNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
	Join string `protobuf:"bytes,1,opt,name=Join,proto3" json:"join" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Expression
	Expression string `protobuf:"bytes,2,opt,name=Expression,proto3" json:"expression" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// table name
	TableAS string `protobuf:"bytes,3,opt,name=TableAS,proto3" json:"tableas" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// table name
	TableAsRight string `protobuf:"bytes,4,opt,name=TableAsRight,proto3" json:"tableasright" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// Args
	Args string `protobuf:"bytes,5,opt,name=Args,proto3" json:"args" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,6,rep,name=Column,proto3" json:"column" binding:"-"`
	// column define.
	GenerateColumn []*ColumnAs `protobuf:"bytes,7,rep,name=GenerateColumn,proto3" json:"generatecolumn" binding:"-"`
}

func (x *JoinNodeProperty) Reset() {
	*x = JoinNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNodeProperty) ProtoMessage() {}

func (x *JoinNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNodeProperty.ProtoReflect.Descriptor instead.
func (*JoinNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{68}
}

func (x *JoinNodeProperty) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *JoinNodeProperty) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *JoinNodeProperty) GetTableAS() string {
	if x != nil {
		return x.TableAS
	}
	return ""
}

func (x *JoinNodeProperty) GetTableAsRight() string {
	if x != nil {
		return x.TableAsRight
	}
	return ""
}

func (x *JoinNodeProperty) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *JoinNodeProperty) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *JoinNodeProperty) GetGenerateColumn() []*ColumnAs {
	if x != nil {
		return x.GenerateColumn
	}
	return nil
}

// UDTFNodeProperty
type UDTFNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// udfid in udfmanager
	UDFID string `protobuf:"bytes,1,opt,name=UDFID,proto3" json:"udfid" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// Args
	Args string `protobuf:"bytes,2,opt,name=Args,proto3" json:"args" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// table name
	TableAS string `protobuf:"bytes,3,opt,name=TableAS,proto3" json:"tableas" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=Column,proto3" json:"column" binding:"-"`
	// selectcolumn define.
	SelectColumn []*ColumnAs `protobuf:"bytes,5,rep,name=SelectColumn,proto3" json:"selectcolumn" binding:"-"`
}

func (x *UDTFNodeProperty) Reset() {
	*x = UDTFNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTFNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTFNodeProperty) ProtoMessage() {}

func (x *UDTFNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTFNodeProperty.ProtoReflect.Descriptor instead.
func (*UDTFNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{69}
}

func (x *UDTFNodeProperty) GetUDFID() string {
	if x != nil {
		return x.UDFID
	}
	return ""
}

func (x *UDTFNodeProperty) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *UDTFNodeProperty) GetTableAS() string {
	if x != nil {
		return x.TableAS
	}
	return ""
}

func (x *UDTFNodeProperty) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *UDTFNodeProperty) GetSelectColumn() []*ColumnAs {
	if x != nil {
		return x.SelectColumn
	}
	return nil
}

// UDTTFNodeProperty
type UDTTFNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// udfid in udfmanager
	UDFID string `protobuf:"bytes,1,opt,name=UDFID,proto3" json:"udfid" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// Args
	Args string `protobuf:"bytes,2,opt,name=Args,proto3" json:"args" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// func name
	FuncName string `protobuf:"bytes,3,opt,name=FuncName,proto3" json:"funcname" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=Column,proto3" json:"column" binding:"-"`
}

func (x *UDTTFNodeProperty) Reset() {
	*x = UDTTFNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTTFNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTTFNodeProperty) ProtoMessage() {}

func (x *UDTTFNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTTFNodeProperty.ProtoReflect.Descriptor instead.
func (*UDTTFNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{70}
}

func (x *UDTTFNodeProperty) GetUDFID() string {
	if x != nil {
		return x.UDFID
	}
	return ""
}

func (x *UDTTFNodeProperty) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *UDTTFNodeProperty) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *UDTTFNodeProperty) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

// WindowNodeProperty
type WindowNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Window
	Window []*WindowNodeProperty_WindowNodeItem `protobuf:"bytes,1,rep,name=Window,proto3" json:"window" binding:"-"`
}

func (x *WindowNodeProperty) Reset() {
	*x = WindowNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowNodeProperty) ProtoMessage() {}

func (x *WindowNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowNodeProperty.ProtoReflect.Descriptor instead.
func (*WindowNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{71}
}

func (x *WindowNodeProperty) GetWindow() []*WindowNodeProperty_WindowNodeItem {
	if x != nil {
		return x.Window
	}
	return nil
}

// FlinkNodeProperty
type FlinkNodeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dest node
	Dest *DestNodeProperty `protobuf:"bytes,1,opt,name=Dest,proto3" json:"Dest" binding:"-"`
	// values node
	Values *ValuesNodeProperty `protobuf:"bytes,2,opt,name=Values,proto3" json:"Values" binding:"-"`
	// OrderBy
	OrderBy *OrderByNodeProperty `protobuf:"bytes,3,opt,name=OrderBy,proto3" json:"OrderBy" binding:"-"`
	// Limit
	Limit *LimitNodeProperty `protobuf:"bytes,4,opt,name=Limit,proto3" json:"Limit" binding:"-"`
	// Offset
	Offset *OffsetNodeProperty `protobuf:"bytes,5,opt,name=Offset,proto3" json:"Offset" binding:"-"`
	// Fetch
	Fetch *FetchNodeProperty `protobuf:"bytes,6,opt,name=Fetch,proto3" json:"Fetch" binding:"-"`
	// Sql
	Sql *SqlNodeProperty `protobuf:"bytes,7,opt,name=Sql,proto3" json:"Sql" binding:"-"`
	// Scala
	Scala *ScalaNodeProperty `protobuf:"bytes,8,opt,name=Scala,proto3" json:"Scala" binding:"-"`
	// Python
	Python *PythonNodeProperty `protobuf:"bytes,9,opt,name=Python,proto3" json:"Python" binding:"-"`
	// Union
	Union *UnionNodeProperty `protobuf:"bytes,10,opt,name=Union,proto3" json:"Union" binding:"-"`
	// GroupBy
	GroupBy *GroupByNodeProperty `protobuf:"bytes,11,opt,name=GroupBy,proto3" json:"GroupBy" binding:"-"`
	// Having
	Having *HavingNodeProperty `protobuf:"bytes,12,opt,name=Having,proto3" json:"Having" binding:"-"`
	// Const
	Const *ConstNodeProperty `protobuf:"bytes,13,opt,name=Const,proto3" json:"Const" binding:"-"`
	// Source
	Source *SourceNodeProperty `protobuf:"bytes,14,opt,name=Source,proto3" json:"Source" binding:"-"`
	// Dimension
	Dimension *DimensionNodeProperty `protobuf:"bytes,15,opt,name=Dimension,proto3" json:"Dimension" binding:"-"`
	// Except
	Except *ExceptNodeProperty `protobuf:"bytes,16,opt,name=Except,proto3" json:"Except" binding:"-"`
	// Intersect
	Intersect *IntersectNodeProperty `protobuf:"bytes,17,opt,name=Intersect,proto3" json:"Intersect" binding:"-"`
	// Filter
	Filter *FilterNodeProperty `protobuf:"bytes,18,opt,name=Filter,proto3" json:"Filter" binding:"-"`
	// Jar
	Jar *JarNodeProperty `protobuf:"bytes,19,opt,name=Jar,proto3" json:"Jar" binding:"-"`
	// UDTF
	UDTF *UDTFNodeProperty `protobuf:"bytes,20,opt,name=UDTF,proto3" json:"UDTF" binding:"-"`
	// UDTTF
	UDTTF *UDTTFNodeProperty `protobuf:"bytes,21,opt,name=UDTTF,proto3" json:"UDTTF" binding:"-"`
	// Join
	Join *JoinNodeProperty `protobuf:"bytes,23,opt,name=Join,proto3" json:"Join" binding:"-"`
}

func (x *FlinkNodeProperty) Reset() {
	*x = FlinkNodeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkNodeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkNodeProperty) ProtoMessage() {}

func (x *FlinkNodeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkNodeProperty.ProtoReflect.Descriptor instead.
func (*FlinkNodeProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{72}
}

func (x *FlinkNodeProperty) GetDest() *DestNodeProperty {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *FlinkNodeProperty) GetValues() *ValuesNodeProperty {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *FlinkNodeProperty) GetOrderBy() *OrderByNodeProperty {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *FlinkNodeProperty) GetLimit() *LimitNodeProperty {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *FlinkNodeProperty) GetOffset() *OffsetNodeProperty {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *FlinkNodeProperty) GetFetch() *FetchNodeProperty {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *FlinkNodeProperty) GetSql() *SqlNodeProperty {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (x *FlinkNodeProperty) GetScala() *ScalaNodeProperty {
	if x != nil {
		return x.Scala
	}
	return nil
}

func (x *FlinkNodeProperty) GetPython() *PythonNodeProperty {
	if x != nil {
		return x.Python
	}
	return nil
}

func (x *FlinkNodeProperty) GetUnion() *UnionNodeProperty {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *FlinkNodeProperty) GetGroupBy() *GroupByNodeProperty {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *FlinkNodeProperty) GetHaving() *HavingNodeProperty {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *FlinkNodeProperty) GetConst() *ConstNodeProperty {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *FlinkNodeProperty) GetSource() *SourceNodeProperty {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FlinkNodeProperty) GetDimension() *DimensionNodeProperty {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *FlinkNodeProperty) GetExcept() *ExceptNodeProperty {
	if x != nil {
		return x.Except
	}
	return nil
}

func (x *FlinkNodeProperty) GetIntersect() *IntersectNodeProperty {
	if x != nil {
		return x.Intersect
	}
	return nil
}

func (x *FlinkNodeProperty) GetFilter() *FilterNodeProperty {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FlinkNodeProperty) GetJar() *JarNodeProperty {
	if x != nil {
		return x.Jar
	}
	return nil
}

func (x *FlinkNodeProperty) GetUDTF() *UDTFNodeProperty {
	if x != nil {
		return x.UDTF
	}
	return nil
}

func (x *FlinkNodeProperty) GetUDTTF() *UDTTFNodeProperty {
	if x != nil {
		return x.UDTTF
	}
	return nil
}

func (x *FlinkNodeProperty) GetJoin() *JoinNodeProperty {
	if x != nil {
		return x.Join
	}
	return nil
}

// FlinkDagNode
type FlinkDagNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeType one of "Values" "Const" "Source" "Dimension" "Dest" "OrderBy" "Limit" "Offset" "Fetch" "Filter" "Union" "Except" "Intersect" "GroupBy" "Having" "Window" "Join" "Sql" "UDTF" "UDTTF" "Jar" "Scala" "Python"
	NodeType string `protobuf:"bytes,1,opt,name=NodeType,proto3" json:"nodetype" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// nodeid is unique in this flow.
	NodeID string `protobuf:"bytes,2,opt,name=NodeID,proto3" json:"nodeid" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// this node name
	NodeName string `protobuf:"bytes,3,opt,name=NodeName,proto3" json:"nodename" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// the upstream node id
	UpStream string `protobuf:"bytes,4,opt,name=UpStream,proto3" json:"upstream" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
	// the right upstream node id
	UpStreamRight string `protobuf:"bytes,5,opt,name=UpStreamRight,proto3" json:"upstreamright" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
	// the downstream node id
	DownStream string `protobuf:"bytes,6,opt,name=DownStream,proto3" json:"downstream" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
	// the PointX
	PointX string `protobuf:"bytes,7,opt,name=PointX,proto3" json:"pointx" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"`
	// the PointY
	PointY string `protobuf:"bytes,8,opt,name=PointY,proto3" json:"pointy" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"`
	// this nodetype property
	Property *FlinkNodeProperty `protobuf:"bytes,9,opt,name=Property,proto3" json:"property"`
}

func (x *FlinkDagNode) Reset() {
	*x = FlinkDagNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkDagNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkDagNode) ProtoMessage() {}

func (x *FlinkDagNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkDagNode.ProtoReflect.Descriptor instead.
func (*FlinkDagNode) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{73}
}

func (x *FlinkDagNode) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *FlinkDagNode) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *FlinkDagNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *FlinkDagNode) GetUpStream() string {
	if x != nil {
		return x.UpStream
	}
	return ""
}

func (x *FlinkDagNode) GetUpStreamRight() string {
	if x != nil {
		return x.UpStreamRight
	}
	return ""
}

func (x *FlinkDagNode) GetDownStream() string {
	if x != nil {
		return x.DownStream
	}
	return ""
}

func (x *FlinkDagNode) GetPointX() string {
	if x != nil {
		return x.PointX
	}
	return ""
}

func (x *FlinkDagNode) GetPointY() string {
	if x != nil {
		return x.PointY
	}
	return ""
}

func (x *FlinkDagNode) GetProperty() *FlinkNodeProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

// FlinkJobNodes
type FlinkJobNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this flink job nodes
	JobNodes []*FlinkDagNode `protobuf:"bytes,1,rep,name=JobNodes,proto3" json:"jobnodes"`
}

func (x *FlinkJobNodes) Reset() {
	*x = FlinkJobNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkJobNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkJobNodes) ProtoMessage() {}

func (x *FlinkJobNodes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkJobNodes.ProtoReflect.Descriptor instead.
func (*FlinkJobNodes) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{74}
}

func (x *FlinkJobNodes) GetJobNodes() []*FlinkDagNode {
	if x != nil {
		return x.JobNodes
	}
	return nil
}

// JobResources
type JobResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jobid
	JobID string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"jobid" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// Jar
	Jar string `protobuf:"bytes,2,opt,name=Jar,proto3" json:"jar" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"`
}

func (x *JobResources) Reset() {
	*x = JobResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResources) ProtoMessage() {}

func (x *JobResources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResources.ProtoReflect.Descriptor instead.
func (*JobResources) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{75}
}

func (x *JobResources) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobResources) GetJar() string {
	if x != nil {
		return x.Jar
	}
	return ""
}

type HBaseConfig_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain" binding:"email"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip" binding:"ipv4"`
}

func (x *HBaseConfig_Host) Reset() {
	*x = HBaseConfig_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseConfig_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseConfig_Host) ProtoMessage() {}

func (x *HBaseConfig_Host) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseConfig_Host.ProtoReflect.Descriptor instead.
func (*HBaseConfig_Host) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{4, 0}
}

func (x *HBaseConfig_Host) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HBaseConfig_Host) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type FlinkConfig_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key in key/value item, Is required, Min: 1, Max: 1024.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key" binding:"gte=1,lte=1024" minLength:"1" maxLength:"1024"`
	// The value in key/value item, Is required, Min: 1, Max: 1024.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" binding:"gte=1,lte=1024" minLength:"1" maxLength:"1024"`
}

func (x *FlinkConfig_Item) Reset() {
	*x = FlinkConfig_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_Item) ProtoMessage() {}

func (x *FlinkConfig_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_Item.ProtoReflect.Descriptor instead.
func (*FlinkConfig_Item) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FlinkConfig_Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FlinkConfig_Item) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HDFSUrl_HDFSNodeUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host
	NameNode string `protobuf:"bytes,1,opt,name=NameNode,proto3" json:"namenode" binding:"gte=1,lte=64" required:"true"`
	// The port
	Port int32 `protobuf:"varint,2,opt,name=Port,proto3" json:"port" binding:"gte=1" required:"true" mininum:"1" maximum:"65536"`
}

func (x *HDFSUrl_HDFSNodeUrl) Reset() {
	*x = HDFSUrl_HDFSNodeUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSUrl_HDFSNodeUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSUrl_HDFSNodeUrl) ProtoMessage() {}

func (x *HDFSUrl_HDFSNodeUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSUrl_HDFSNodeUrl.ProtoReflect.Descriptor instead.
func (*HDFSUrl_HDFSNodeUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{35, 0}
}

func (x *HDFSUrl_HDFSNodeUrl) GetNameNode() string {
	if x != nil {
		return x.NameNode
	}
	return ""
}

func (x *HDFSUrl_HDFSNodeUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ValuesNodeProperty_ValuesType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is one row.
	Values []string `protobuf:"bytes,1,rep,name=Values,proto3" json:"values" binding:"gte=1" required:"false" minLength:"1"`
}

func (x *ValuesNodeProperty_ValuesType) Reset() {
	*x = ValuesNodeProperty_ValuesType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesNodeProperty_ValuesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesNodeProperty_ValuesType) ProtoMessage() {}

func (x *ValuesNodeProperty_ValuesType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesNodeProperty_ValuesType.ProtoReflect.Descriptor instead.
func (*ValuesNodeProperty_ValuesType) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{49, 0}
}

func (x *ValuesNodeProperty_ValuesType) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type OrderByNodeProperty_OrderByColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Field string `protobuf:"bytes,1,opt,name=Field,proto3" json:"field" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// order oneof 'asc' 'desc'
	Order string `protobuf:"bytes,2,opt,name=Order,proto3" json:"order" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
}

func (x *OrderByNodeProperty_OrderByColumn) Reset() {
	*x = OrderByNodeProperty_OrderByColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByNodeProperty_OrderByColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByNodeProperty_OrderByColumn) ProtoMessage() {}

func (x *OrderByNodeProperty_OrderByColumn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByNodeProperty_OrderByColumn.ProtoReflect.Descriptor instead.
func (*OrderByNodeProperty_OrderByColumn) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{50, 0}
}

func (x *OrderByNodeProperty_OrderByColumn) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OrderByNodeProperty_OrderByColumn) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type WindowNodeProperty_WindowNodeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Spec
	Spec string `protobuf:"bytes,2,opt,name=Spec,proto3" json:"spec" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *WindowNodeProperty_WindowNodeItem) Reset() {
	*x = WindowNodeProperty_WindowNodeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowNodeProperty_WindowNodeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowNodeProperty_WindowNodeItem) ProtoMessage() {}

func (x *WindowNodeProperty_WindowNodeItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowNodeProperty_WindowNodeItem.ProtoReflect.Descriptor instead.
func (*WindowNodeProperty_WindowNodeItem) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{71, 0}
}

func (x *WindowNodeProperty_WindowNodeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowNodeProperty_WindowNodeItem) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

var File_proto_model_proto protoreflect.FileDescriptor

var file_proto_model_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x5d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x55, 0x73, 0x12, 0x13,
	0x0a, 0x05, 0x7a, 0x68, 0x5f, 0x63, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x68, 0x43, 0x6e, 0x22, 0xa9, 0x02, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x41, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22,
	0xf0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70,
	0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81,
	0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x51, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4a, 0x61, 0x76,
	0x61, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x10, 0x05, 0x22, 0x7e, 0x0a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x02,
	0x69, 0x70, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x25, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xf0, 0x01, 0x0a, 0x0b, 0x46,
	0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x18, 0x91, 0x4e, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d,
	0x12, 0x30, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x02,
	0x73, 0x33, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a,
	0x0a, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x03, 0x75,
	0x64, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x03,
	0x75, 0x64, 0x66, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x64, 0x74, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x75, 0x64, 0x74, 0x66, 0x12, 0x1a, 0x0a,
	0x05, 0x75, 0x64, 0x74, 0x74, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x05, 0x75, 0x64, 0x74, 0x74, 0x66, 0x22, 0xf6, 0x02, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x12, 0x3c, 0x0a, 0x0b, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x02, 0x52, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x10, 0x00, 0x18, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x43, 0x75, 0x12, 0x21, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x75,
	0x12, 0x21, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x05, 0x68, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x22, 0xcf, 0x03, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10,
	0x00, 0x18, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00,
	0x18, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x32, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f,
	0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x1f, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11,
	0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18,
	0x64, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x06, 0xca, 0xb2,
	0x04, 0x02, 0x0a, 0x00, 0x22, 0x8d, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x6c, 0x69, 0x6e, 0x6b, 0x4a, 0x6f, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78,
	0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x22, 0x8d, 0x03, 0x0a, 0x0e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x22, 0x9c, 0x02, 0x0a, 0x07,
	0x4f, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x70, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4f, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x5f, 0x5f, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xb5, 0x01, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x10, 0x02, 0x22, 0xb5, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x80, 0x02, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x0b, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x20, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18,
	0x64, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a,
	0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x1f, 0x52,
	0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27,
	0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x21, 0x52, 0x09, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x70, 0x01, 0x78, 0x11, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x02, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x22, 0x62, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf,
	0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0b, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11,
	0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18,
	0x19, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xdb, 0x02, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70,
	0x00, 0x78, 0x15, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xc1, 0x3e, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x11, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x00, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe3, 0x02,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x07, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x78, 0x15, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x70, 0x00, 0x78, 0xc1, 0x3e, 0x52, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x11, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x02, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2,
	0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x0b,
	0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x11, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x02, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x20, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41,
	0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00,
	0x78, 0x41, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00,
	0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41,
	0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00,
	0x78, 0x41, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00,
	0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x41, 0x0a, 0x08, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x0f, 0x0a, 0x05,
	0x53, 0x33, 0x55, 0x72, 0x6c, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x5c, 0x0a,
	0x08, 0x48, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x09, 0x5a, 0x6f, 0x6f,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x09, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x5a, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05, 0x5a, 0x6e,
	0x6f, 0x64, 0x65, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x4c, 0x0a, 0x06, 0x46,
	0x74, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x48, 0x44,
	0x46, 0x53, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x44, 0x46,
	0x53, 0x55, 0x72, 0x6c, 0x2e, 0x48, 0x44, 0x46, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x48, 0x44, 0x46, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x4e,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd7, 0x02,
	0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x72, 0x6c, 0x52, 0x05, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x12, 0x34, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x72, 0x6c, 0x52, 0x05,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x1c, 0x0a, 0x02, 0x53, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x33, 0x55, 0x72, 0x6c, 0x52,
	0x02, 0x53, 0x33, 0x12, 0x25, 0x0a, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x52, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x46, 0x74,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x74, 0x70, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x46, 0x74, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x48,
	0x44, 0x46, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x48, 0x44, 0x46, 0x53, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x48, 0x44, 0x46, 0x53, 0x3a,
	0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f,
	0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x98, 0x02,
	0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x98, 0x02, 0x0a, 0x15, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x0b,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04,
	0x02, 0x0a, 0x00, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x48, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9e, 0x02, 0x0a, 0x0f, 0x48, 0x44,
	0x46, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78,
	0x81, 0x08, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x53,
	0x33, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41,
	0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81,
	0x08, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x46, 0x74,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41,
	0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81,
	0x08, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa1, 0x02, 0x0a, 0x10, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53,
	0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00,
	0x78, 0x41, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70,
	0x00, 0x78, 0x81, 0x08, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x99, 0x03,
	0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x3c, 0x0a, 0x0a,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x48, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x48, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x52, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52,
	0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x24, 0x0a, 0x02, 0x53, 0x33, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x33, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x02, 0x53, 0x33, 0x12, 0x27, 0x0a, 0x03,
	0x46, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x46, 0x74, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x52, 0x03, 0x46, 0x74, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x48, 0x44, 0x46, 0x53, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x44, 0x46, 0x53,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x48, 0x44, 0x46,
	0x53, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x61,
	0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x64, 0x66, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xf8, 0x02, 0x0a, 0x07,
	0x55, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x05, 0x55, 0x44, 0x46, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x05,
	0x55, 0x44, 0x46, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52,
	0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x07, 0x55, 0x44, 0x46, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70,
	0x00, 0x78, 0x15, 0x52, 0x07, 0x55, 0x44, 0x46, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0b,
	0x55, 0x44, 0x46, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x15, 0x52, 0x0b, 0x55, 0x44, 0x46,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x78,
	0xa1, 0x9c, 0x01, 0x52, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xd1, 0x0f, 0x52, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x78, 0x00, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f,
	0x06, 0x70, 0x00, 0x78, 0xa1, 0x9c, 0x01, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x52, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0x2c, 0x0a, 0x0a,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x70, 0x00, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a,
	0x61, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x27, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x78, 0x41, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x33, 0x0a, 0x11, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3f, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x29, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2,
	0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x65,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x22, 0x2f, 0x0a,
	0x0f, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x03, 0x53, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2,
	0xdf, 0x1f, 0x06, 0x70, 0x00, 0x78, 0xc1, 0xb8, 0x02, 0x52, 0x03, 0x53, 0x71, 0x6c, 0x22, 0x33,
	0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x70, 0x00, 0x78, 0xc1, 0xb8, 0x02, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x12, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x70, 0x00, 0x78,
	0xc1, 0xb8, 0x02, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x3a, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x62, 0x79, 0x22, 0x37, 0x0a, 0x12, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x48, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00,
	0x78, 0x81, 0x08, 0x52, 0x06, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x08,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x78, 0x41, 0x52, 0x04, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x02, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x02, 0x41, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52,
	0x02, 0x41, 0x73, 0x22, 0x6b, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0xfd, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x07, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f,
	0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x07,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x12, 0x2d, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x08, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0xaa, 0x02, 0x0a, 0x15, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x07, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78,
	0x41, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x12, 0x2d, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52,
	0x08, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x28, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x14, 0x0a,
	0x12, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xa7, 0x01, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x02, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x02, 0x49, 0x6e, 0x12,
	0x21, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x06, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x0f, 0x4a, 0x61, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x4a, 0x61, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x05, 0x4a, 0x61, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x07, 0x4a, 0x61, 0x72, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70,
	0x00, 0x78, 0x81, 0x08, 0x52, 0x07, 0x4a, 0x61, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x25, 0x0a,
	0x08, 0x4a, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x08, 0x4a, 0x61, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0xcc, 0x02, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x4a, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x12,
	0x35, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52,
	0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x10, 0x55, 0x44, 0x54, 0x46, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x55, 0x44, 0x46, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x05, 0x55, 0x44, 0x46, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08,
	0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x53, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa6, 0x01,
	0x0a, 0x11, 0x55, 0x44, 0x54, 0x54, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x55, 0x44, 0x46, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x55, 0x44, 0x46,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x24, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x4d, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x22, 0xdb, 0x09, 0x0a, 0x11, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x44, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x44, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x34, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x03, 0x53, 0x71, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x03, 0x53, 0x71, 0x6c, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x12, 0x37, 0x0a,
	0x06, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x48, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4a, 0x61, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x03, 0x4a, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x55, 0x44, 0x54, 0x46, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x44, 0x54,
	0x46, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x04, 0x55, 0x44, 0x54, 0x46, 0x12, 0x34, 0x0a, 0x05, 0x55, 0x44, 0x54,
	0x54, 0x46, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x55, 0x44, 0x54, 0x54, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x55, 0x44, 0x54, 0x54, 0x46, 0x12,
	0x31, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x4a, 0x6f,
	0x69, 0x6e, 0x22, 0xa2, 0x03, 0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x15, 0x52,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70,
	0x00, 0x78, 0x15, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2,
	0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41,
	0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x55, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x15, 0x52,
	0x08, 0x55, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x0d, 0x55, 0x70, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x78, 0x15, 0x52, 0x0d, 0x55, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x15, 0x52, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xc9, 0x01,
	0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x21, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00,
	0x78, 0xc9, 0x01, 0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x59, 0x12, 0x3a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x4e, 0x0a, 0x0d, 0x46, 0x6c, 0x69, 0x6e, 0x6b,
	0x4a, 0x6f, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x4a, 0x6f, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a,
	0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x53, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52,
	0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x03, 0x4a, 0x61, 0x72, 0x2a, 0x38, 0x0a, 0x0a,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x5f, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x19, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x14, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x06,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x5f, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x65, 0x61, 0x64, 0x10, 0x03, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_model_proto_rawDescOnce sync.Once
	file_proto_model_proto_rawDescData = file_proto_model_proto_rawDesc
)

func file_proto_model_proto_rawDescGZIP() []byte {
	file_proto_model_proto_rawDescOnce.Do(func() {
		file_proto_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_model_proto_rawDescData)
	})
	return file_proto_model_proto_rawDescData
}

var file_proto_model_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_proto_model_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_proto_model_proto_goTypes = []interface{}{
	(EngineType)(0),                           // 0: model.EngineType
	(ScheduleConcurrencyPolicy)(0),            // 1: model.ScheduleConcurrencyPolicy
	(ScheduleRetryPolicy)(0),                  // 2: model.ScheduleRetryPolicy
	(OpType)(0),                               // 3: model.OpType
	(Workspace_Status)(0),                     // 4: model.Workspace.Status
	(StreamFlow_Type)(0),                      // 5: model.StreamFlow.Type
	(StreamFlowRelease_Status)(0),             // 6: model.StreamFlowRelease.Status
	(StreamFlowInst_State)(0),                 // 7: model.StreamFlowInst.State
	(OpAudit_State)(0),                        // 8: model.OpAudit.State
	(Role_Type)(0),                            // 9: model.Role.Type
	(MonitorRule_Status)(0),                   // 10: model.MonitorRule.Status
	(Resource_Type)(0),                        // 11: model.Resource.Type
	(*EmptyStruct)(nil),                       // 12: model.EmptyStruct
	(*Error)(nil),                             // 13: model.Error
	(*Workspace)(nil),                         // 14: model.Workspace
	(*StreamFlow)(nil),                        // 15: model.StreamFlow
	(*HBaseConfig)(nil),                       // 16: model.HBaseConfig
	(*S3Config)(nil),                          // 17: model.S3Config
	(*FlinkConfig)(nil),                       // 18: model.FlinkConfig
	(*FuncConfig)(nil),                        // 19: model.FuncConfig
	(*StreamFlowEnv)(nil),                     // 20: model.StreamFlowEnv
	(*StreamFlowSchedule)(nil),                // 21: model.StreamFlowSchedule
	(*StreamFlowProperty)(nil),                // 22: model.StreamFlowProperty
	(*StreamFlowRelease)(nil),                 // 23: model.StreamFlowRelease
	(*StreamFlowInst)(nil),                    // 24: model.StreamFlowInst
	(*OpAudit)(nil),                           // 25: model.OpAudit
	(*Role)(nil),                              // 26: model.Role
	(*Member)(nil),                            // 27: model.Member
	(*MonitorRule)(nil),                       // 28: model.MonitorRule
	(*QueueMessage)(nil),                      // 29: model.QueueMessage
	(*InstanceStatusStat)(nil),                // 30: model.InstanceStatusStat
	(*InstanceRuntimeRankInfo)(nil),           // 31: model.InstanceRuntimeRankInfo
	(*InstanceErrorRankInfo)(nil),             // 32: model.InstanceErrorRankInfo
	(*DispatchTaskCountInfo)(nil),             // 33: model.DispatchTaskCountInfo
	(*InstanceTaskExecStat)(nil),              // 34: model.InstanceTaskExecStat
	(*SourceInfo)(nil),                        // 35: model.SourceInfo
	(*TableInfo)(nil),                         // 36: model.TableInfo
	(*SqlColumnType)(nil),                     // 37: model.SqlColumnType
	(*SqlTimeColumnType)(nil),                 // 38: model.SqlTimeColumnType
	(*ConnectorOption)(nil),                   // 39: model.ConnectorOption
	(*MySQLUrl)(nil),                          // 40: model.MySQLUrl
	(*PostgreSQLUrl)(nil),                     // 41: model.PostgreSQLUrl
	(*ClickHouseUrl)(nil),                     // 42: model.ClickHouseUrl
	(*KafkaUrl)(nil),                          // 43: model.KafkaUrl
	(*S3Url)(nil),                             // 44: model.S3Url
	(*HbaseUrl)(nil),                          // 45: model.HbaseUrl
	(*FtpUrl)(nil),                            // 46: model.FtpUrl
	(*HDFSUrl)(nil),                           // 47: model.HDFSUrl
	(*SourceUrl)(nil),                         // 48: model.SourceUrl
	(*MySQLTableDefine)(nil),                  // 49: model.MySQLTableDefine
	(*PostgreSQLTableDefine)(nil),             // 50: model.PostgreSQLTableDefine
	(*ClickHouseTableDefine)(nil),             // 51: model.ClickHouseTableDefine
	(*HbaseTableDefine)(nil),                  // 52: model.HbaseTableDefine
	(*HDFSTableDefine)(nil),                   // 53: model.HDFSTableDefine
	(*S3TableDefine)(nil),                     // 54: model.S3TableDefine
	(*FtpTableDefine)(nil),                    // 55: model.FtpTableDefine
	(*KafkaTableDefine)(nil),                  // 56: model.KafkaTableDefine
	(*TableDefine)(nil),                       // 57: model.TableDefine
	(*Resource)(nil),                          // 58: model.Resource
	(*UDFInfo)(nil),                           // 59: model.UDFInfo
	(*DestNodeProperty)(nil),                  // 60: model.DestNodeProperty
	(*ValuesNodeProperty)(nil),                // 61: model.ValuesNodeProperty
	(*OrderByNodeProperty)(nil),               // 62: model.OrderByNodeProperty
	(*LimitNodeProperty)(nil),                 // 63: model.LimitNodeProperty
	(*OffsetNodeProperty)(nil),                // 64: model.OffsetNodeProperty
	(*FetchNodeProperty)(nil),                 // 65: model.FetchNodeProperty
	(*SqlNodeProperty)(nil),                   // 66: model.SqlNodeProperty
	(*ScalaNodeProperty)(nil),                 // 67: model.ScalaNodeProperty
	(*PythonNodeProperty)(nil),                // 68: model.PythonNodeProperty
	(*UnionNodeProperty)(nil),                 // 69: model.UnionNodeProperty
	(*GroupByNodeProperty)(nil),               // 70: model.GroupByNodeProperty
	(*HavingNodeProperty)(nil),                // 71: model.HavingNodeProperty
	(*ColumnAs)(nil),                          // 72: model.ColumnAs
	(*ConstNodeProperty)(nil),                 // 73: model.ConstNodeProperty
	(*SourceNodeProperty)(nil),                // 74: model.SourceNodeProperty
	(*DimensionNodeProperty)(nil),             // 75: model.DimensionNodeProperty
	(*ExceptNodeProperty)(nil),                // 76: model.ExceptNodeProperty
	(*IntersectNodeProperty)(nil),             // 77: model.IntersectNodeProperty
	(*FilterNodeProperty)(nil),                // 78: model.FilterNodeProperty
	(*JarNodeProperty)(nil),                   // 79: model.JarNodeProperty
	(*JoinNodeProperty)(nil),                  // 80: model.JoinNodeProperty
	(*UDTFNodeProperty)(nil),                  // 81: model.UDTFNodeProperty
	(*UDTTFNodeProperty)(nil),                 // 82: model.UDTTFNodeProperty
	(*WindowNodeProperty)(nil),                // 83: model.WindowNodeProperty
	(*FlinkNodeProperty)(nil),                 // 84: model.FlinkNodeProperty
	(*FlinkDagNode)(nil),                      // 85: model.FlinkDagNode
	(*FlinkJobNodes)(nil),                     // 86: model.FlinkJobNodes
	(*JobResources)(nil),                      // 87: model.JobResources
	(*HBaseConfig_Host)(nil),                  // 88: model.HBaseConfig.Host
	(*FlinkConfig_Item)(nil),                  // 89: model.FlinkConfig.Item
	(*HDFSUrl_HDFSNodeUrl)(nil),               // 90: model.HDFSUrl.HDFSNodeUrl
	(*ValuesNodeProperty_ValuesType)(nil),     // 91: model.ValuesNodeProperty.ValuesType
	(*OrderByNodeProperty_OrderByColumn)(nil), // 92: model.OrderByNodeProperty.OrderByColumn
	(*WindowNodeProperty_WindowNodeItem)(nil), // 93: model.WindowNodeProperty.WindowNodeItem
}
var file_proto_model_proto_depIdxs = []int32{
	4,   // 0: model.Workspace.status:type_name -> model.Workspace.Status
	5,   // 1: model.StreamFlow.type:type_name -> model.StreamFlow.Type
	88,  // 2: model.HBaseConfig.hosts:type_name -> model.HBaseConfig.Host
	17,  // 3: model.FlinkConfig.s3:type_name -> model.S3Config
	89,  // 4: model.FlinkConfig.items:type_name -> model.FlinkConfig.Item
	0,   // 5: model.StreamFlowEnv.engine_type:type_name -> model.EngineType
	18,  // 6: model.StreamFlowEnv.flink:type_name -> model.FlinkConfig
	16,  // 7: model.StreamFlowEnv.hbase:type_name -> model.HBaseConfig
	19,  // 8: model.StreamFlowEnv.function:type_name -> model.FuncConfig
	1,   // 9: model.StreamFlowSchedule.concurrency_policy:type_name -> model.ScheduleConcurrencyPolicy
	2,   // 10: model.StreamFlowSchedule.retry_policy:type_name -> model.ScheduleRetryPolicy
	86,  // 11: model.StreamFlowProperty.nodes:type_name -> model.FlinkJobNodes
	20,  // 12: model.StreamFlowProperty.env:type_name -> model.StreamFlowEnv
	21,  // 13: model.StreamFlowProperty.schedule:type_name -> model.StreamFlowSchedule
	5,   // 14: model.StreamFlowRelease.type:type_name -> model.StreamFlow.Type
	6,   // 15: model.StreamFlowRelease.status:type_name -> model.StreamFlowRelease.Status
	7,   // 16: model.StreamFlowInst.state:type_name -> model.StreamFlowInst.State
	3,   // 17: model.OpAudit.op_type:type_name -> model.OpType
	8,   // 18: model.OpAudit.state:type_name -> model.OpAudit.State
	9,   // 19: model.Role.type:type_name -> model.Role.Type
	10,  // 20: model.MonitorRule.status:type_name -> model.MonitorRule.Status
	22,  // 21: model.QueueMessage.property:type_name -> model.StreamFlowProperty
	48,  // 22: model.SourceInfo.Url:type_name -> model.SourceUrl
	57,  // 23: model.TableInfo.Define:type_name -> model.TableDefine
	90,  // 24: model.HDFSUrl.Nodes:type_name -> model.HDFSUrl.HDFSNodeUrl
	40,  // 25: model.SourceUrl.MySQL:type_name -> model.MySQLUrl
	41,  // 26: model.SourceUrl.PostgreSQL:type_name -> model.PostgreSQLUrl
	42,  // 27: model.SourceUrl.ClickHouse:type_name -> model.ClickHouseUrl
	43,  // 28: model.SourceUrl.Kafka:type_name -> model.KafkaUrl
	44,  // 29: model.SourceUrl.S3:type_name -> model.S3Url
	45,  // 30: model.SourceUrl.Hbase:type_name -> model.HbaseUrl
	46,  // 31: model.SourceUrl.Ftp:type_name -> model.FtpUrl
	47,  // 32: model.SourceUrl.HDFS:type_name -> model.HDFSUrl
	37,  // 33: model.MySQLTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 34: model.MySQLTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 35: model.MySQLTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 36: model.PostgreSQLTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 37: model.PostgreSQLTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 38: model.PostgreSQLTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 39: model.ClickHouseTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 40: model.ClickHouseTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 41: model.ClickHouseTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 42: model.HbaseTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 43: model.HbaseTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 44: model.HbaseTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 45: model.HDFSTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 46: model.HDFSTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 47: model.HDFSTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 48: model.S3TableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 49: model.S3TableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 50: model.S3TableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 51: model.FtpTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 52: model.FtpTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 53: model.FtpTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	37,  // 54: model.KafkaTableDefine.SqlColumn:type_name -> model.SqlColumnType
	39,  // 55: model.KafkaTableDefine.ConnectorOptions:type_name -> model.ConnectorOption
	38,  // 56: model.KafkaTableDefine.TimeColumn:type_name -> model.SqlTimeColumnType
	49,  // 57: model.TableDefine.MySQL:type_name -> model.MySQLTableDefine
	50,  // 58: model.TableDefine.PostgreSQL:type_name -> model.PostgreSQLTableDefine
	51,  // 59: model.TableDefine.ClickHouse:type_name -> model.ClickHouseTableDefine
	52,  // 60: model.TableDefine.Hbase:type_name -> model.HbaseTableDefine
	56,  // 61: model.TableDefine.Kafka:type_name -> model.KafkaTableDefine
	54,  // 62: model.TableDefine.S3:type_name -> model.S3TableDefine
	55,  // 63: model.TableDefine.Ftp:type_name -> model.FtpTableDefine
	53,  // 64: model.TableDefine.HDFS:type_name -> model.HDFSTableDefine
	11,  // 65: model.Resource.type:type_name -> model.Resource.Type
	91,  // 66: model.ValuesNodeProperty.Rows:type_name -> model.ValuesNodeProperty.ValuesType
	92,  // 67: model.OrderByNodeProperty.Column:type_name -> model.OrderByNodeProperty.OrderByColumn
	72,  // 68: model.ConstNodeProperty.Column:type_name -> model.ColumnAs
	72,  // 69: model.SourceNodeProperty.Column:type_name -> model.ColumnAs
	72,  // 70: model.SourceNodeProperty.CustomColumn:type_name -> model.ColumnAs
	72,  // 71: model.DimensionNodeProperty.Column:type_name -> model.ColumnAs
	72,  // 72: model.DimensionNodeProperty.CustomColumn:type_name -> model.ColumnAs
	72,  // 73: model.JoinNodeProperty.Column:type_name -> model.ColumnAs
	72,  // 74: model.JoinNodeProperty.GenerateColumn:type_name -> model.ColumnAs
	72,  // 75: model.UDTFNodeProperty.Column:type_name -> model.ColumnAs
	72,  // 76: model.UDTFNodeProperty.SelectColumn:type_name -> model.ColumnAs
	72,  // 77: model.UDTTFNodeProperty.Column:type_name -> model.ColumnAs
	93,  // 78: model.WindowNodeProperty.Window:type_name -> model.WindowNodeProperty.WindowNodeItem
	60,  // 79: model.FlinkNodeProperty.Dest:type_name -> model.DestNodeProperty
	61,  // 80: model.FlinkNodeProperty.Values:type_name -> model.ValuesNodeProperty
	62,  // 81: model.FlinkNodeProperty.OrderBy:type_name -> model.OrderByNodeProperty
	63,  // 82: model.FlinkNodeProperty.Limit:type_name -> model.LimitNodeProperty
	64,  // 83: model.FlinkNodeProperty.Offset:type_name -> model.OffsetNodeProperty
	65,  // 84: model.FlinkNodeProperty.Fetch:type_name -> model.FetchNodeProperty
	66,  // 85: model.FlinkNodeProperty.Sql:type_name -> model.SqlNodeProperty
	67,  // 86: model.FlinkNodeProperty.Scala:type_name -> model.ScalaNodeProperty
	68,  // 87: model.FlinkNodeProperty.Python:type_name -> model.PythonNodeProperty
	69,  // 88: model.FlinkNodeProperty.Union:type_name -> model.UnionNodeProperty
	70,  // 89: model.FlinkNodeProperty.GroupBy:type_name -> model.GroupByNodeProperty
	71,  // 90: model.FlinkNodeProperty.Having:type_name -> model.HavingNodeProperty
	73,  // 91: model.FlinkNodeProperty.Const:type_name -> model.ConstNodeProperty
	74,  // 92: model.FlinkNodeProperty.Source:type_name -> model.SourceNodeProperty
	75,  // 93: model.FlinkNodeProperty.Dimension:type_name -> model.DimensionNodeProperty
	76,  // 94: model.FlinkNodeProperty.Except:type_name -> model.ExceptNodeProperty
	77,  // 95: model.FlinkNodeProperty.Intersect:type_name -> model.IntersectNodeProperty
	78,  // 96: model.FlinkNodeProperty.Filter:type_name -> model.FilterNodeProperty
	79,  // 97: model.FlinkNodeProperty.Jar:type_name -> model.JarNodeProperty
	81,  // 98: model.FlinkNodeProperty.UDTF:type_name -> model.UDTFNodeProperty
	82,  // 99: model.FlinkNodeProperty.UDTTF:type_name -> model.UDTTFNodeProperty
	80,  // 100: model.FlinkNodeProperty.Join:type_name -> model.JoinNodeProperty
	84,  // 101: model.FlinkDagNode.Property:type_name -> model.FlinkNodeProperty
	85,  // 102: model.FlinkJobNodes.JobNodes:type_name -> model.FlinkDagNode
	103, // [103:103] is the sub-list for method output_type
	103, // [103:103] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_proto_model_proto_init() }
func file_proto_model_proto_init() {
	if File_proto_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowInst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatusStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceRuntimeRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceErrorRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTaskCountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTaskExecStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimeColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3TableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDFInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalaNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HavingNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnAs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExceptNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JarNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTFNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTTFNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkNodeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkDagNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkJobNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseConfig_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSUrl_HDFSNodeUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesNodeProperty_ValuesType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByNodeProperty_OrderByColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowNodeProperty_WindowNodeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_model_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_model_proto_goTypes,
		DependencyIndexes: file_proto_model_proto_depIdxs,
		EnumInfos:         file_proto_model_proto_enumTypes,
		MessageInfos:      file_proto_model_proto_msgTypes,
	}.Build()
	File_proto_model_proto = out.File
	file_proto_model_proto_rawDesc = nil
	file_proto_model_proto_goTypes = nil
	file_proto_model_proto_depIdxs = nil
}
