// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/model.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/yu31/proto-go-plugin/pb/gosqlpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EngineType int32

const (
	EngineType__EngineType EngineType = 0 // Is useless.
	EngineType_BuildIn     EngineType = 1
	EngineType_External    EngineType = 2
)

// Enum value maps for EngineType.
var (
	EngineType_name = map[int32]string{
		0: "_EngineType",
		1: "BuildIn",
		2: "External",
	}
	EngineType_value = map[string]int32{
		"_EngineType": 0,
		"BuildIn":     1,
		"External":    2,
	}
)

func (x EngineType) Enum() *EngineType {
	p := new(EngineType)
	*p = x
	return p
}

func (x EngineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[0].Descriptor()
}

func (EngineType) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[0]
}

func (x EngineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineType.Descriptor instead.
func (EngineType) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{0}
}

type ScheduleConcurrencyPolicy int32

const (
	ScheduleConcurrencyPolicy__ScheduleConcurrencyPolicy ScheduleConcurrencyPolicy = 0 // Is useless.
	ScheduleConcurrencyPolicy_Allow                      ScheduleConcurrencyPolicy = 1
	ScheduleConcurrencyPolicy_Forbid                     ScheduleConcurrencyPolicy = 2
	ScheduleConcurrencyPolicy_Replace                    ScheduleConcurrencyPolicy = 3
)

// Enum value maps for ScheduleConcurrencyPolicy.
var (
	ScheduleConcurrencyPolicy_name = map[int32]string{
		0: "_ScheduleConcurrencyPolicy",
		1: "Allow",
		2: "Forbid",
		3: "Replace",
	}
	ScheduleConcurrencyPolicy_value = map[string]int32{
		"_ScheduleConcurrencyPolicy": 0,
		"Allow":                      1,
		"Forbid":                     2,
		"Replace":                    3,
	}
)

func (x ScheduleConcurrencyPolicy) Enum() *ScheduleConcurrencyPolicy {
	p := new(ScheduleConcurrencyPolicy)
	*p = x
	return p
}

func (x ScheduleConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[1].Descriptor()
}

func (ScheduleConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[1]
}

func (x ScheduleConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleConcurrencyPolicy.Descriptor instead.
func (ScheduleConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{1}
}

type ScheduleRetryPolicy int32

const (
	ScheduleRetryPolicy__ScheduleRetryPolicy ScheduleRetryPolicy = 0 // Is useless.
	ScheduleRetryPolicy_None                 ScheduleRetryPolicy = 1
	ScheduleRetryPolicy_Auto                 ScheduleRetryPolicy = 2
)

// Enum value maps for ScheduleRetryPolicy.
var (
	ScheduleRetryPolicy_name = map[int32]string{
		0: "_ScheduleRetryPolicy",
		1: "None",
		2: "Auto",
	}
	ScheduleRetryPolicy_value = map[string]int32{
		"_ScheduleRetryPolicy": 0,
		"None":                 1,
		"Auto":                 2,
	}
)

func (x ScheduleRetryPolicy) Enum() *ScheduleRetryPolicy {
	p := new(ScheduleRetryPolicy)
	*p = x
	return p
}

func (x ScheduleRetryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleRetryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[2].Descriptor()
}

func (ScheduleRetryPolicy) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[2]
}

func (x ScheduleRetryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleRetryPolicy.Descriptor instead.
func (ScheduleRetryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2}
}

// OpType declares the API operation type.
type OpType int32

const (
	OpType__OpType OpType = 0 // Is useless.
	OpType_Unknown OpType = 1
	OpType_Write   OpType = 2 // Include Operation: create/update/delete.
	OpType_Read    OpType = 3 // Include Operation: read.
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "_OpType",
		1: "Unknown",
		2: "Write",
		3: "Read",
	}
	OpType_value = map[string]int32{
		"_OpType": 0,
		"Unknown": 1,
		"Write":   2,
		"Read":    3,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[3].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[3]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3}
}

type Workspace_Status int32

const (
	Workspace__        Workspace_Status = 0
	Workspace_Enabled  Workspace_Status = 1
	Workspace_Disabled Workspace_Status = 2
)

// Enum value maps for Workspace_Status.
var (
	Workspace_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	Workspace_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x Workspace_Status) Enum() *Workspace_Status {
	p := new(Workspace_Status)
	*p = x
	return p
}

func (x Workspace_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workspace_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[4].Descriptor()
}

func (Workspace_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[4]
}

func (x Workspace_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workspace_Status.Descriptor instead.
func (Workspace_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2, 0}
}

type StreamFlow_Type int32

const (
	StreamFlow__        StreamFlow_Type = 0
	StreamFlow_SQL      StreamFlow_Type = 1
	StreamFlow_JAR      StreamFlow_Type = 2
	StreamFlow_Operator StreamFlow_Type = 3
)

// Enum value maps for StreamFlow_Type.
var (
	StreamFlow_Type_name = map[int32]string{
		0: "_",
		1: "SQL",
		2: "JAR",
		3: "Operator",
	}
	StreamFlow_Type_value = map[string]int32{
		"_":        0,
		"SQL":      1,
		"JAR":      2,
		"Operator": 3,
	}
)

func (x StreamFlow_Type) Enum() *StreamFlow_Type {
	p := new(StreamFlow_Type)
	*p = x
	return p
}

func (x StreamFlow_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamFlow_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[5].Descriptor()
}

func (StreamFlow_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[5]
}

func (x StreamFlow_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamFlow_Type.Descriptor instead.
func (StreamFlow_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3, 0}
}

type StreamFlowRelease_Status int32

const (
	StreamFlowRelease__         StreamFlowRelease_Status = 0
	StreamFlowRelease_Active    StreamFlowRelease_Status = 1
	StreamFlowRelease_Suspended StreamFlowRelease_Status = 2
)

// Enum value maps for StreamFlowRelease_Status.
var (
	StreamFlowRelease_Status_name = map[int32]string{
		0: "_",
		1: "Active",
		2: "Suspended",
	}
	StreamFlowRelease_Status_value = map[string]int32{
		"_":         0,
		"Active":    1,
		"Suspended": 2,
	}
)

func (x StreamFlowRelease_Status) Enum() *StreamFlowRelease_Status {
	p := new(StreamFlowRelease_Status)
	*p = x
	return p
}

func (x StreamFlowRelease_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamFlowRelease_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[6].Descriptor()
}

func (StreamFlowRelease_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[6]
}

func (x StreamFlowRelease_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamFlowRelease_Status.Descriptor instead.
func (StreamFlowRelease_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{10, 0}
}

type StreamFlowInst_State int32

const (
	StreamFlowInst__          StreamFlowInst_State = 0
	StreamFlowInst_Pending    StreamFlowInst_State = 1
	StreamFlowInst_Running    StreamFlowInst_State = 2
	StreamFlowInst_Retrying   StreamFlowInst_State = 3
	StreamFlowInst_Suspended  StreamFlowInst_State = 4
	StreamFlowInst_Terminated StreamFlowInst_State = 5
	StreamFlowInst_Timeout    StreamFlowInst_State = 6
	StreamFlowInst_Succeed    StreamFlowInst_State = 7
	StreamFlowInst_Failed     StreamFlowInst_State = 8
)

// Enum value maps for StreamFlowInst_State.
var (
	StreamFlowInst_State_name = map[int32]string{
		0: "_",
		1: "Pending",
		2: "Running",
		3: "Retrying",
		4: "Suspended",
		5: "Terminated",
		6: "Timeout",
		7: "Succeed",
		8: "Failed",
	}
	StreamFlowInst_State_value = map[string]int32{
		"_":          0,
		"Pending":    1,
		"Running":    2,
		"Retrying":   3,
		"Suspended":  4,
		"Terminated": 5,
		"Timeout":    6,
		"Succeed":    7,
		"Failed":     8,
	}
)

func (x StreamFlowInst_State) Enum() *StreamFlowInst_State {
	p := new(StreamFlowInst_State)
	*p = x
	return p
}

func (x StreamFlowInst_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamFlowInst_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[7].Descriptor()
}

func (StreamFlowInst_State) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[7]
}

func (x StreamFlowInst_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamFlowInst_State.Descriptor instead.
func (StreamFlowInst_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{11, 0}
}

type OpAudit_State int32

const (
	OpAudit___      OpAudit_State = 0
	OpAudit_Success OpAudit_State = 1
	OpAudit_Failed  OpAudit_State = 2
)

// Enum value maps for OpAudit_State.
var (
	OpAudit_State_name = map[int32]string{
		0: "__",
		1: "Success",
		2: "Failed",
	}
	OpAudit_State_value = map[string]int32{
		"__":      0,
		"Success": 1,
		"Failed":  2,
	}
)

func (x OpAudit_State) Enum() *OpAudit_State {
	p := new(OpAudit_State)
	*p = x
	return p
}

func (x OpAudit_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpAudit_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[8].Descriptor()
}

func (OpAudit_State) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[8]
}

func (x OpAudit_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpAudit_State.Descriptor instead.
func (OpAudit_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{12, 0}
}

type Role_Type int32

const (
	Role__      Role_Type = 0
	Role_System Role_Type = 1
	Role_Custom Role_Type = 2
)

// Enum value maps for Role_Type.
var (
	Role_Type_name = map[int32]string{
		0: "_",
		1: "System",
		2: "Custom",
	}
	Role_Type_value = map[string]int32{
		"_":      0,
		"System": 1,
		"Custom": 2,
	}
)

func (x Role_Type) Enum() *Role_Type {
	p := new(Role_Type)
	*p = x
	return p
}

func (x Role_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[9].Descriptor()
}

func (Role_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[9]
}

func (x Role_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role_Type.Descriptor instead.
func (Role_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{13, 0}
}

type MonitorRule_Status int32

const (
	MonitorRule__        MonitorRule_Status = 0
	MonitorRule_Enabled  MonitorRule_Status = 1
	MonitorRule_Disabled MonitorRule_Status = 2
)

// Enum value maps for MonitorRule_Status.
var (
	MonitorRule_Status_name = map[int32]string{
		0: "_",
		1: "Enabled",
		2: "Disabled",
	}
	MonitorRule_Status_value = map[string]int32{
		"_":        0,
		"Enabled":  1,
		"Disabled": 2,
	}
)

func (x MonitorRule_Status) Enum() *MonitorRule_Status {
	p := new(MonitorRule_Status)
	*p = x
	return p
}

func (x MonitorRule_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorRule_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[10].Descriptor()
}

func (MonitorRule_Status) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[10]
}

func (x MonitorRule_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorRule_Status.Descriptor instead.
func (MonitorRule_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{15, 0}
}

type Resource_Type int32

const (
	Resource__   Resource_Type = 0
	Resource_Jar Resource_Type = 1
	Resource_Udf Resource_Type = 2
)

// Enum value maps for Resource_Type.
var (
	Resource_Type_name = map[int32]string{
		0: "_",
		1: "Jar",
		2: "Udf",
	}
	Resource_Type_value = map[string]int32{
		"_":   0,
		"Jar": 1,
		"Udf": 2,
	}
)

func (x Resource_Type) Enum() *Resource_Type {
	p := new(Resource_Type)
	*p = x
	return p
}

func (x Resource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_model_proto_enumTypes[11].Descriptor()
}

func (Resource_Type) Type() protoreflect.EnumType {
	return &file_proto_model_proto_enumTypes[11]
}

func (x Resource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource_Type.Descriptor instead.
func (Resource_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{44, 0}
}

// EmptyStruct represents no value with a message.
type EmptyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyStruct) Reset() {
	*x = EmptyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyStruct) ProtoMessage() {}

func (x *EmptyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyStruct.ProtoReflect.Descriptor instead.
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{0}
}

// Error transmits customized-error between grpc client and server by status details
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code is summary information of error.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Status is http status code.
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// EnUS is detail information of error with en_us format.
	EnUs string `protobuf:"bytes,3,opt,name=en_us,json=enUs,proto3" json:"en_us,omitempty"`
	// ZhCN is detail information of error with zh_cn format.
	ZhCn string `protobuf:"bytes,4,opt,name=zh_cn,json=zhCn,proto3" json:"zh_cn,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Error) GetEnUs() string {
	if x != nil {
		return x.EnUs
	}
	return ""
}

func (x *Error) GetZhCn() string {
	if x != nil {
		return x.ZhCn
	}
	return ""
}

// The workspace info.
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID, unique within a region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" gorm:"column:id;primaryKey;"`
	// User id of workspace owner.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" gorm:"column:owner;"`
	// Workspace Name, unique within a region.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workspace Description.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Workspace status, 1 => "enabled", 2 => "disabled".
	Status Workspace_Status `protobuf:"varint,5,opt,name=status,proto3,enum=model.Workspace_Status" json:"status" gorm:"column:status;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2}
}

func (x *Workspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workspace) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Workspace) GetStatus() Workspace_Status {
	if x != nil {
		return x.Status
	}
	return Workspace__
}

func (x *Workspace) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Workspace) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The stream workflow info
type StreamFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey;"`
	// Workflow Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workflow Description.
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	Type StreamFlow_Type `protobuf:"varint,6,opt,name=type,proto3,enum=model.StreamFlow_Type" json:"type" gorm:"column:type;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamFlow) Reset() {
	*x = StreamFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlow) ProtoMessage() {}

func (x *StreamFlow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlow.ProtoReflect.Descriptor instead.
func (*StreamFlow) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3}
}

func (x *StreamFlow) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlow) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamFlow) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamFlow) GetType() StreamFlow_Type {
	if x != nil {
		return x.Type
	}
	return StreamFlow__
}

func (x *StreamFlow) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamFlow) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// HBaseConfig
type HBaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host lists of HBase.
	Hosts []*HBaseConfig_Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts" binding:"-"`
}

func (x *HBaseConfig) Reset() {
	*x = HBaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseConfig) ProtoMessage() {}

func (x *HBaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseConfig.ProtoReflect.Descriptor instead.
func (*HBaseConfig) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{4}
}

func (x *HBaseConfig) GetHosts() []*HBaseConfig_Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// S3Config
type S3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// S3 endpoints, eg: "http://s3.gd2.qingstor.com".
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint" binding:"url"`
	// User's access key.
	AccessKey string `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key" binding:"-"`
	// User's secret key.
	SecretKey string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key" binding:"-"`
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{5}
}

func (x *S3Config) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3Config) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3Config) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

// FlinkConfig
type FlinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flink parallelism. Is required, Min 1, Max ?
	Parallelism uint32 `protobuf:"varint,1,opt,name=parallelism,proto3" json:"parallelism" binding:"gte=1"`
	// Config of s3. Not required.
	S3 *S3Config `protobuf:"bytes,2,opt,name=s3,proto3" json:"s3" binding:"-"`
}

func (x *FlinkConfig) Reset() {
	*x = FlinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig) ProtoMessage() {}

func (x *FlinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig.ProtoReflect.Descriptor instead.
func (*FlinkConfig) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{6}
}

func (x *FlinkConfig) GetParallelism() uint32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *FlinkConfig) GetS3() *S3Config {
	if x != nil {
		return x.S3
	}
	return nil
}

// StreamFlowEnv represents a workflow environmental parameters info.
// Not use with gorm.
type StreamFlowEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The engine type. 1 => "BuildIn" 2 => "External". Is Required.
	// Notice: Only support 1 on present.
	EngineType EngineType `protobuf:"varint,1,opt,name=engine_type,json=engineType,proto3,enum=model.EngineType" json:"engine_type" binding:"gte=1,lte=1"`
	// The engine id. Is required if engine_type == 2.
	EngineId string `protobuf:"bytes,2,opt,name=engine_id,json=engineId,proto3" json:"engine_id" binding:"required_if=engine_type 2"`
	// Flink JobManager.  1CU = 1C + 2GB. Is required, Min 1, Max ?
	JobCu uint32 `protobuf:"varint,3,opt,name=job_cu,json=jobCu,proto3" json:"job_cu" binding:"gte=1"`
	// Flink TaskManager. 1CU = 1C + 2GB. Is required, Min 1, Max ?
	TaskCu uint32 `protobuf:"varint,4,opt,name=task_cu,json=taskCu,proto3" json:"task_cu" binding:"gte=1"`
	// Flink task number for TaskManager. Is required, Min 1, Max ?
	TaskNum uint32 `protobuf:"varint,5,opt,name=task_num,json=taskNum,proto3" json:"task_num" binding:"gte=1"`
	// Config of HBase. Not required.
	Hbase *HBaseConfig `protobuf:"bytes,6,opt,name=hbase,proto3" json:"hbase" binding:"-"`
	// The config for flink. Is required
	Flink *FlinkConfig `protobuf:"bytes,7,opt,name=flink,proto3" json:"flink" binding:"required"`
}

func (x *StreamFlowEnv) Reset() {
	*x = StreamFlowEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowEnv) ProtoMessage() {}

func (x *StreamFlowEnv) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowEnv.ProtoReflect.Descriptor instead.
func (*StreamFlowEnv) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{7}
}

func (x *StreamFlowEnv) GetEngineType() EngineType {
	if x != nil {
		return x.EngineType
	}
	return EngineType__EngineType
}

func (x *StreamFlowEnv) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *StreamFlowEnv) GetJobCu() uint32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *StreamFlowEnv) GetTaskCu() uint32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *StreamFlowEnv) GetTaskNum() uint32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *StreamFlowEnv) GetHbase() *HBaseConfig {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *StreamFlowEnv) GetFlink() *FlinkConfig {
	if x != nil {
		return x.Flink
	}
	return nil
}

// StreamFlowSchedule represents a workflow schedule info.
type StreamFlowSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	Started int64 `protobuf:"varint,1,opt,name=started,proto3" json:"started" default:"0" binding:"gte=0"`
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	Ended int64 `protobuf:"varint,2,opt,name=ended,proto3" json:"ended" default:"0" binding:"gte=0"`
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace"
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	// Is required.
	ConcurrencyPolicy ScheduleConcurrencyPolicy `protobuf:"varint,3,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=model.ScheduleConcurrencyPolicy" json:"concurrency_policy" binding:"gte=1,lte=3"`
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	RetryPolicy ScheduleRetryPolicy `protobuf:"varint,4,opt,name=retry_policy,json=retryPolicy,proto3,enum=model.ScheduleRetryPolicy" json:"retry_policy" binding:"gte=1,lte=2"`
	// FIXME: test binding.
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	RetryLimit int32 `protobuf:"varint,5,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit" binding:"required_with=retry_policy=2,gte=1,lte=99"`
	// Retry interval,  Is required with retry_policy = 2, Min 1, Max 30.
	RetryInterval int32 `protobuf:"varint,6,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval" binding:"required_with=retry_policy=2,gte=1,lte=30"`
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 4320min.
	Timeout int32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout" default:"0" binding:"gte=0"`
	// Crontab Express. Is required.
	// FIXME: check binding.
	Express string `protobuf:"bytes,8,opt,name=express,proto3" json:"express" binding:"gte=5,lte=128"`
}

func (x *StreamFlowSchedule) Reset() {
	*x = StreamFlowSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowSchedule) ProtoMessage() {}

func (x *StreamFlowSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowSchedule.ProtoReflect.Descriptor instead.
func (*StreamFlowSchedule) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{8}
}

func (x *StreamFlowSchedule) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *StreamFlowSchedule) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *StreamFlowSchedule) GetConcurrencyPolicy() ScheduleConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return ScheduleConcurrencyPolicy__ScheduleConcurrencyPolicy
}

func (x *StreamFlowSchedule) GetRetryPolicy() ScheduleRetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return ScheduleRetryPolicy__ScheduleRetryPolicy
}

func (x *StreamFlowSchedule) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *StreamFlowSchedule) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *StreamFlowSchedule) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StreamFlowSchedule) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

// StreamFlowProperty represents property of workflow.
type StreamFlowProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version  int64               `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;primarykey"`
	Nodes    string              `protobuf:"bytes,4,opt,name=nodes,proto3" json:"nodes" gorm:"column:nodes;type:json"`
	Env      *StreamFlowEnv      `protobuf:"bytes,5,opt,name=env,proto3" json:"env" gorm:"column:env;type:json"`
	Schedule *StreamFlowSchedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule" gorm:"column:schedule;type:json"`
}

func (x *StreamFlowProperty) Reset() {
	*x = StreamFlowProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowProperty) ProtoMessage() {}

func (x *StreamFlowProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowProperty.ProtoReflect.Descriptor instead.
func (*StreamFlowProperty) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{9}
}

func (x *StreamFlowProperty) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlowProperty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlowProperty) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlowProperty) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *StreamFlowProperty) GetEnv() *StreamFlowEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *StreamFlowProperty) GetSchedule() *StreamFlowSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// The release stream workflow info.
type StreamFlowRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The release version.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version" gorm:"column:version;"`
	// Workflow Name, Unique within a workspace.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	Type StreamFlow_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.StreamFlow_Type" json:"type" gorm:"column:type;"`
	// Release status, 1 => "active", 2 => "suspended"
	Status StreamFlowRelease_Status `protobuf:"varint,6,opt,name=status,proto3,enum=model.StreamFlowRelease_Status" json:"status" gorm:"column:status;"`
	// Workflow release description.
	Desc string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc" gorm:"column:desc;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamFlowRelease) Reset() {
	*x = StreamFlowRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowRelease) ProtoMessage() {}

func (x *StreamFlowRelease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowRelease.ProtoReflect.Descriptor instead.
func (*StreamFlowRelease) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{10}
}

func (x *StreamFlowRelease) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlowRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlowRelease) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlowRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamFlowRelease) GetType() StreamFlow_Type {
	if x != nil {
		return x.Type
	}
	return StreamFlow__
}

func (x *StreamFlowRelease) GetStatus() StreamFlowRelease_Status {
	if x != nil {
		return x.Status
	}
	return StreamFlowRelease__
}

func (x *StreamFlowRelease) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StreamFlowRelease) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamFlowRelease) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The instance info of stream workflow.
type StreamFlowInst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Workflow ID it belongs to.
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id" gorm:"column:flow_id;"`
	// The release version.
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version"`
	// Workflow instance ID, unique.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The instance state.
	State   StreamFlowInst_State `protobuf:"varint,5,opt,name=state,proto3,enum=model.StreamFlowInst_State" json:"state" gorm:"column:state;"`
	Created int64                `protobuf:"varint,6,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time
	Updated int64 `protobuf:"varint,7,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *StreamFlowInst) Reset() {
	*x = StreamFlowInst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowInst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowInst) ProtoMessage() {}

func (x *StreamFlowInst) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowInst.ProtoReflect.Descriptor instead.
func (*StreamFlowInst) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{11}
}

func (x *StreamFlowInst) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *StreamFlowInst) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *StreamFlowInst) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamFlowInst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamFlowInst) GetState() StreamFlowInst_State {
	if x != nil {
		return x.State
	}
	return StreamFlowInst__
}

func (x *StreamFlowInst) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StreamFlowInst) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workspace operation audit log record.
type OpAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of who execute this operation.
	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"column:user_id;primaryKey;"`
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;primaryKey;"`
	// -- The type of operation, 2 => "Write",  3 => "Read".
	OpType OpType `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=model.OpType" json:"op_type" gorm:"column:op_type;"`
	//	-- The operation of user behavior.
	OpName string `protobuf:"bytes,4,opt,name=op_name,json=opName,proto3" json:"op_name" gorm:"column:op_name;"`
	// -- The result of operation, 1 => "Success", 2 => "Failed".
	State OpAudit_State `protobuf:"varint,5,opt,name=state,proto3,enum=model.OpAudit_State" json:"state" gorm:"column:state;"`
	// Timestamp of time of when accessed.
	Created int64 `protobuf:"varint,6,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
}

func (x *OpAudit) Reset() {
	*x = OpAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpAudit) ProtoMessage() {}

func (x *OpAudit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpAudit.ProtoReflect.Descriptor instead.
func (*OpAudit) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{12}
}

func (x *OpAudit) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OpAudit) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *OpAudit) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType__OpType
}

func (x *OpAudit) GetOpName() string {
	if x != nil {
		return x.OpName
	}
	return ""
}

func (x *OpAudit) GetState() OpAudit_State {
	if x != nil {
		return x.State
	}
	return OpAudit___
}

func (x *OpAudit) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// The Role info.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// The name of role. unique in a workspace.
	Name string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	Type Role_Type `protobuf:"varint,4,opt,name=type,proto3,enum=model.Role_Type" json:"type" gorm:"column:type;"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{13}
}

func (x *Role) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetType() Role_Type {
	if x != nil {
		return x.Type
	}
	return Role__
}

// The workspace member info.
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;primaryKey;"`
	// The user id in account-server.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"column:user_id;primaryKey;"`
	// The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	RoleIds string `protobuf:"bytes,4,opt,name=role_ids,json=roleIds,proto3" json:"role_ids" gorm:"column:role_ids;"`
	Created int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time
	Updated int64 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{14}
}

func (x *Member) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Member) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Member) GetRoleIds() string {
	if x != nil {
		return x.RoleIds
	}
	return ""
}

func (x *Member) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Member) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The monitor rule info
type MonitorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Rule ID, unique within a region.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" gorm:"column:id;primarykey;"`
	// Rule Name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Rule status, 1 => "enabled", 2 => "disabled".
	Status MonitorRule_Status `protobuf:"varint,4,opt,name=status,proto3,enum=model.MonitorRule_Status" json:"status" gorm:"column:status;"`
	// The object unit, 1 => "workspace" 2 => "workflow'
	Unit int32 `protobuf:"varint,5,opt,name=unit,proto3" json:"unit" gorm:"column:unit;"`
	// The object text.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text" gorm:"column:text;"`
	// The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
	Trigger int32 `protobuf:"varint,7,opt,name=trigger,proto3" json:"trigger" gorm:"column:trigger;"`
	// The alarm times. 1 ~ 99
	AlarmTimes int32 `protobuf:"varint,8,opt,name=alarm_times,json=alarmTimes,proto3" json:"alarm_times" gorm:"column:alarm_times;"`
	// The alarm interval. 1 ~ 30
	AlarmInterval int32 `protobuf:"varint,9,opt,name=alarm_interval,json=alarmInterval,proto3" json:"alarm_interval" gorm:"column:alarm_interval;"`
	// The alarm type. "sms, email"
	AlarmType string `protobuf:"bytes,10,opt,name=alarm_type,json=alarmType,proto3" json:"alarm_type" gorm:"column:alarm_type;"`
	// The free time. "00:01,03:00".
	FreeTime string `protobuf:"bytes,11,opt,name=free_time,json=freeTime,proto3" json:"free_time" gorm:"column:free_time;"`
	// The alarm receiver. "usr-111111,usr-22222".
	Receiver string `protobuf:"bytes,12,opt,name=receiver,proto3" json:"receiver" gorm:"column:receiver;"`
}

func (x *MonitorRule) Reset() {
	*x = MonitorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRule) ProtoMessage() {}

func (x *MonitorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRule.ProtoReflect.Descriptor instead.
func (*MonitorRule) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{15}
}

func (x *MonitorRule) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *MonitorRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MonitorRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitorRule) GetStatus() MonitorRule_Status {
	if x != nil {
		return x.Status
	}
	return MonitorRule__
}

func (x *MonitorRule) GetUnit() int32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *MonitorRule) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MonitorRule) GetTrigger() int32 {
	if x != nil {
		return x.Trigger
	}
	return 0
}

func (x *MonitorRule) GetAlarmTimes() int32 {
	if x != nil {
		return x.AlarmTimes
	}
	return 0
}

func (x *MonitorRule) GetAlarmInterval() int32 {
	if x != nil {
		return x.AlarmInterval
	}
	return 0
}

func (x *MonitorRule) GetAlarmType() string {
	if x != nil {
		return x.AlarmType
	}
	return ""
}

func (x *MonitorRule) GetFreeTime() string {
	if x != nil {
		return x.FreeTime
	}
	return ""
}

func (x *MonitorRule) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

// The message in inst queue..
type QueueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request id of beginning.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// The property of stream workflow.
	Property *StreamFlowProperty `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	// The operation that you will execute.
	// 1 => "run"  2 => "retry" 3 => "terminate" 4 => "delete"
	Operation int32 `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// The number of times the instance task was executed.
	Times int32 `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	// The start execution time of the task instance.
	Started int64 `protobuf:"varint,5,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *QueueMessage) Reset() {
	*x = QueueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMessage) ProtoMessage() {}

func (x *QueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMessage.ProtoReflect.Descriptor instead.
func (*QueueMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{16}
}

func (x *QueueMessage) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *QueueMessage) GetProperty() *StreamFlowProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *QueueMessage) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *QueueMessage) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *QueueMessage) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

type InstanceStatusStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance status
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
	// instance count with the status
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *InstanceStatusStat) Reset() {
	*x = InstanceStatusStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatusStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatusStat) ProtoMessage() {}

func (x *InstanceStatusStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatusStat.ProtoReflect.Descriptor instead.
func (*InstanceStatusStat) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceStatusStat) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *InstanceStatusStat) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InstanceRuntimeRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// flow_id
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id"`
	// running time
	RunningTime int64 `protobuf:"varint,3,opt,name=running_time,json=runningTime,proto3" json:"running_time"`
	// version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version"`
}

func (x *InstanceRuntimeRankInfo) Reset() {
	*x = InstanceRuntimeRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceRuntimeRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceRuntimeRankInfo) ProtoMessage() {}

func (x *InstanceRuntimeRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceRuntimeRankInfo.ProtoReflect.Descriptor instead.
func (*InstanceRuntimeRankInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceRuntimeRankInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstanceRuntimeRankInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *InstanceRuntimeRankInfo) GetRunningTime() int64 {
	if x != nil {
		return x.RunningTime
	}
	return 0
}

func (x *InstanceRuntimeRankInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type InstanceErrorRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow_id
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id"`
	// version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	// running time
	ErrorCount int64 `protobuf:"varint,3,opt,name=error_count,json=errorCount,proto3" json:"error_count"`
}

func (x *InstanceErrorRankInfo) Reset() {
	*x = InstanceErrorRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceErrorRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceErrorRankInfo) ProtoMessage() {}

func (x *InstanceErrorRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceErrorRankInfo.ProtoReflect.Descriptor instead.
func (*InstanceErrorRankInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceErrorRankInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *InstanceErrorRankInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceErrorRankInfo) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type DispatchTaskCountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow_count
	FlowCount int32 `protobuf:"varint,1,opt,name=flow_count,json=flowCount,proto3" json:"flow_count"`
	// instance count
	InstanceCount int32 `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_id"`
	// updated time
	Updated int64 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated"`
}

func (x *DispatchTaskCountInfo) Reset() {
	*x = DispatchTaskCountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTaskCountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTaskCountInfo) ProtoMessage() {}

func (x *DispatchTaskCountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTaskCountInfo.ProtoReflect.Descriptor instead.
func (*DispatchTaskCountInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{20}
}

func (x *DispatchTaskCountInfo) GetFlowCount() int32 {
	if x != nil {
		return x.FlowCount
	}
	return 0
}

func (x *DispatchTaskCountInfo) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *DispatchTaskCountInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type InstanceTaskExecStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hour
	Hour int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour"`
	// instance success count
	InstanceCount int64 `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count"`
}

func (x *InstanceTaskExecStat) Reset() {
	*x = InstanceTaskExecStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTaskExecStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTaskExecStat) ProtoMessage() {}

func (x *InstanceTaskExecStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTaskExecStat.ProtoReflect.Descriptor instead.
func (*InstanceTaskExecStat) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{21}
}

func (x *InstanceTaskExecStat) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *InstanceTaskExecStat) GetInstanceCount() int64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

// Source Info
type SourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source ID, unique within a region.
	SourceID string `protobuf:"bytes,1,opt,name=SourceID,proto3" json:"sourceid" gorm:"column:sourceid;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceID string `protobuf:"bytes,2,opt,name=SpaceID,proto3" json:"spaceid" gorm:"column:spaceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source Type, one of MySQL/PostgreSQL/Kafka/S3/ClickHouse/Hbase/Ftp/HDFS binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
	SourceType string `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"sourcetype" gorm:"column:sourcetype;"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=Comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// Url, this source connection info.
	Url *SourceUrl `protobuf:"bytes,6,opt,name=Url,proto3" json:"url" gorm:"column:url;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// State, one of enable/disable.
	State string `protobuf:"bytes,7,opt,name=State,proto3" json:"state" gorm:"column:state;" binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"`
	// Create Time, this Source create time.
	CreateTime int64 `protobuf:"varint,8,opt,name=CreateTime,proto3" json:"createtime" gorm:"column:createtime;"`
	// Update Time, this Source last update time.
	UpdateTime int64 `protobuf:"varint,9,opt,name=UpdateTime,proto3" json:"updatetime" gorm:"column:updatetime;"`
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{22}
}

func (x *SourceInfo) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *SourceInfo) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

func (x *SourceInfo) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *SourceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SourceInfo) GetUrl() *SourceUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *SourceInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SourceInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SourceInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// Table Info
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID, unique within a region.
	TableID string `protobuf:"bytes,1,opt,name=TableID,proto3" json:"tableid" gorm:"column:tableid;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source ID
	SourceID string `protobuf:"bytes,2,opt,name=SourceID,proto3" json:"sourceid" gorm:"column:sourceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceID string `protobuf:"bytes,3,opt,name=SpaceID,proto3" json:"spaceid" gorm:"column:spaceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=Comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// Url, this source connection info.
	Url *TableUrl `protobuf:"bytes,6,opt,name=Url,proto3" json:"url" gorm:"column:url;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// Create Time, this Source create time.
	CreateTime int64 `protobuf:"varint,7,opt,name=CreateTime,proto3" json:"createtime" gorm:"column:createtime;"`
	// Update Time, this Source last update time.
	UpdateTime int64 `protobuf:"varint,8,opt,name=UpdateTime,proto3" json:"updatetime" gorm:"column:updatetime;"`
	// Direction, one of source/destination/dimension
	Direction string `protobuf:"bytes,9,opt,name=Direction,proto3" json:"direction" gorm:"column:direction;" binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"`
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{23}
}

func (x *TableInfo) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *TableInfo) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *TableInfo) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

func (x *TableInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TableInfo) GetUrl() *TableUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TableInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TableInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TableInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

// SqlColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=Column,proto3" json:"column" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column type
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"type" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column comment
	Comment string `protobuf:"bytes,3,opt,name=Comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"1" maxLength:"256"`
	// if it is primary key column, one of true/false
	PrimaryKey string `protobuf:"bytes,4,opt,name=PrimaryKey,proto3" json:"primarykey" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"`
	// the column type length
	Length string `protobuf:"bytes,5,opt,name=Length,proto3" json:"length" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"`
}

func (x *SqlColumnType) Reset() {
	*x = SqlColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlColumnType) ProtoMessage() {}

func (x *SqlColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlColumnType.ProtoReflect.Descriptor instead.
func (*SqlColumnType) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{24}
}

func (x *SqlColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlColumnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlColumnType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SqlColumnType) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SqlColumnType) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

// ConnectorOption used as request parameters for RPC and HTTP(based on Body)
type ConnectorOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The config name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"`
	// The config value.
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"value" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"`
}

func (x *ConnectorOption) Reset() {
	*x = ConnectorOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorOption) ProtoMessage() {}

func (x *ConnectorOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorOption.ProtoReflect.Descriptor instead.
func (*ConnectorOption) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{25}
}

func (x *ConnectorOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectorOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MySQLUrl used as request parameters for RPC and HTTP(based on Body)
type MySQLUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The database
	Database string `protobuf:"bytes,4,opt,name=Database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *MySQLUrl) Reset() {
	*x = MySQLUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLUrl) ProtoMessage() {}

func (x *MySQLUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLUrl.ProtoReflect.Descriptor instead.
func (*MySQLUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{26}
}

func (x *MySQLUrl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySQLUrl) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLUrl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MySQLUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// PostgreSQLUrl used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The database
	Database string `protobuf:"bytes,4,opt,name=Database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *PostgreSQLUrl) Reset() {
	*x = PostgreSQLUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLUrl) ProtoMessage() {}

func (x *PostgreSQLUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLUrl.ProtoReflect.Descriptor instead.
func (*PostgreSQLUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{27}
}

func (x *PostgreSQLUrl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgreSQLUrl) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgreSQLUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgreSQLUrl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgreSQLUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// ClickHouseUrl used as request parameters for RPC and HTTP(based on Body)
type ClickHouseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The host
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The database
	Database string `protobuf:"bytes,4,opt,name=Database,proto3" json:"database" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *ClickHouseUrl) Reset() {
	*x = ClickHouseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseUrl) ProtoMessage() {}

func (x *ClickHouseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseUrl.ProtoReflect.Descriptor instead.
func (*ClickHouseUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{28}
}

func (x *ClickHouseUrl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickHouseUrl) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickHouseUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickHouseUrl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickHouseUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// KafkaUrl used as request parameters for RPC and HTTP(based on Body)
type KafkaUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kafak brokers.
	KafkaBrokers string `protobuf:"bytes,1,opt,name=KafkaBrokers,proto3" json:"kafkabrokers" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *KafkaUrl) Reset() {
	*x = KafkaUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaUrl) ProtoMessage() {}

func (x *KafkaUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaUrl.ProtoReflect.Descriptor instead.
func (*KafkaUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{29}
}

func (x *KafkaUrl) GetKafkaBrokers() string {
	if x != nil {
		return x.KafkaBrokers
	}
	return ""
}

// S3Url used as request parameters for RPC and HTTP(based on Body)
type S3Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The s3 AccessKey
	AccessKey string `protobuf:"bytes,1,opt,name=AccessKey,proto3" json:"accesskey" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The s3 SecretKey
	SecretKey string `protobuf:"bytes,2,opt,name=SecretKey,proto3" json:"secretkey" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The s3 EndPoint
	EndPoint string `protobuf:"bytes,3,opt,name=EndPoint,proto3" json:"endpoint" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *S3Url) Reset() {
	*x = S3Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Url) ProtoMessage() {}

func (x *S3Url) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Url.ProtoReflect.Descriptor instead.
func (*S3Url) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{30}
}

func (x *S3Url) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3Url) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *S3Url) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

// HbaseUrl used as request parameters for RPC and HTTP(based on Body)
type HbaseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hbase Zookeeper
	Zookeeper string `protobuf:"bytes,1,opt,name=Zookeeper,proto3" json:"zookeeper" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The hbase Zookeeper Node
	Znode string `protobuf:"bytes,2,opt,name=Znode,proto3" json:"znode" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// The hbase Hosts config
	Hosts *HBaseConfig `protobuf:"bytes,3,opt,name=Hosts,proto3" json:"hosts"`
}

func (x *HbaseUrl) Reset() {
	*x = HbaseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseUrl) ProtoMessage() {}

func (x *HbaseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseUrl.ProtoReflect.Descriptor instead.
func (*HbaseUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{31}
}

func (x *HbaseUrl) GetZookeeper() string {
	if x != nil {
		return x.Zookeeper
	}
	return ""
}

func (x *HbaseUrl) GetZnode() string {
	if x != nil {
		return x.Znode
	}
	return ""
}

func (x *HbaseUrl) GetHosts() *HBaseConfig {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// FtpUrl used as request parameters for RPC and HTTP(based on Body)
type FtpUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,2,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *FtpUrl) Reset() {
	*x = FtpUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpUrl) ProtoMessage() {}

func (x *FtpUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpUrl.ProtoReflect.Descriptor instead.
func (*FtpUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{32}
}

func (x *FtpUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FtpUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// FtpUrl used as request parameters for RPC and HTTP(based on Body)
type HDFSUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"host" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The port
	Port int32 `protobuf:"varint,2,opt,name=Port,proto3" json:"port" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"`
}

func (x *HDFSUrl) Reset() {
	*x = HDFSUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSUrl) ProtoMessage() {}

func (x *HDFSUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSUrl.ProtoReflect.Descriptor instead.
func (*HDFSUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{33}
}

func (x *HDFSUrl) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HDFSUrl) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// SourceUrl used as request parameters for RPC and HTTP(based on Body)
type SourceUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Source Connection Info.
	MySQL *MySQLUrl `protobuf:"bytes,1,opt,name=MySQL,proto3" json:"mysql"`
	// PostgreSQL Source Connection Info.
	PostgreSQL *PostgreSQLUrl `protobuf:"bytes,2,opt,name=PostgreSQL,proto3" json:"postgresql"`
	// ClickHouse Source Connection Info.
	ClickHouse *ClickHouseUrl `protobuf:"bytes,3,opt,name=ClickHouse,proto3" json:"clickhouse"`
	// Kafka Source Connection Info.
	Kafka *KafkaUrl `protobuf:"bytes,4,opt,name=Kafka,proto3" json:"kafka"`
	// S3 Source Connection Info.
	S3 *S3Url `protobuf:"bytes,5,opt,name=S3,proto3" json:"s3"`
	// Hbase Source Connection Info.
	Hbase *HbaseUrl `protobuf:"bytes,6,opt,name=Hbase,proto3" json:"hbase"`
	// Ftp Source Connection Info.
	Ftp *FtpUrl `protobuf:"bytes,7,opt,name=Ftp,proto3" json:"ftp"`
	// HDFS Source Connection Info.
	HDFS *HDFSUrl `protobuf:"bytes,8,opt,name=HDFS,proto3" json:"hdfs"`
}

func (x *SourceUrl) Reset() {
	*x = SourceUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceUrl) ProtoMessage() {}

func (x *SourceUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceUrl.ProtoReflect.Descriptor instead.
func (*SourceUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{34}
}

func (x *SourceUrl) GetMySQL() *MySQLUrl {
	if x != nil {
		return x.MySQL
	}
	return nil
}

func (x *SourceUrl) GetPostgreSQL() *PostgreSQLUrl {
	if x != nil {
		return x.PostgreSQL
	}
	return nil
}

func (x *SourceUrl) GetClickHouse() *ClickHouseUrl {
	if x != nil {
		return x.ClickHouse
	}
	return nil
}

func (x *SourceUrl) GetKafka() *KafkaUrl {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *SourceUrl) GetS3() *S3Url {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *SourceUrl) GetHbase() *HbaseUrl {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *SourceUrl) GetFtp() *FtpUrl {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *SourceUrl) GetHDFS() *HDFSUrl {
	if x != nil {
		return x.HDFS
	}
	return nil
}

// MySQLTableUrl used as request parameters for RPC and HTTP(based on Body)
type MySQLTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *MySQLTableUrl) Reset() {
	*x = MySQLTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLTableUrl) ProtoMessage() {}

func (x *MySQLTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLTableUrl.ProtoReflect.Descriptor instead.
func (*MySQLTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{35}
}

func (x *MySQLTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *MySQLTableUrl) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *MySQLTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// PostgreSQLTableUrl used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *PostgreSQLTableUrl) Reset() {
	*x = PostgreSQLTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTableUrl) ProtoMessage() {}

func (x *PostgreSQLTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTableUrl.ProtoReflect.Descriptor instead.
func (*PostgreSQLTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{36}
}

func (x *PostgreSQLTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *PostgreSQLTableUrl) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *PostgreSQLTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// ClickHouseTableUrl used as request parameters for RPC and HTTP(based on Body)
type ClickHouseTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *ClickHouseTableUrl) Reset() {
	*x = ClickHouseTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseTableUrl) ProtoMessage() {}

func (x *ClickHouseTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseTableUrl.ProtoReflect.Descriptor instead.
func (*ClickHouseTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{37}
}

func (x *ClickHouseTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *ClickHouseTableUrl) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *ClickHouseTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// HbaseTableUrl used as request parameters for RPC and HTTP(based on Body)
type HbaseTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mappingname" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *HbaseTableUrl) Reset() {
	*x = HbaseTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HbaseTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HbaseTableUrl) ProtoMessage() {}

func (x *HbaseTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HbaseTableUrl.ProtoReflect.Descriptor instead.
func (*HbaseTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{38}
}

func (x *HbaseTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HbaseTableUrl) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *HbaseTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// HDFSTableUrl used as request parameters for RPC and HTTP(based on Body)
type HDFSTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *HDFSTableUrl) Reset() {
	*x = HDFSTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSTableUrl) ProtoMessage() {}

func (x *HDFSTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSTableUrl.ProtoReflect.Descriptor instead.
func (*HDFSTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{39}
}

func (x *HDFSTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HDFSTableUrl) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *HDFSTableUrl) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HDFSTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// S3TableUrl used as request parameters for RPC and HTTP(based on Body)
type S3TableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *S3TableUrl) Reset() {
	*x = S3TableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3TableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3TableUrl) ProtoMessage() {}

func (x *S3TableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3TableUrl.ProtoReflect.Descriptor instead.
func (*S3TableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{40}
}

func (x *S3TableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *S3TableUrl) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *S3TableUrl) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *S3TableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// FtpTableUrl used as request parameters for RPC and HTTP(based on Body)
type FtpTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *FtpTableUrl) Reset() {
	*x = FtpTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpTableUrl) ProtoMessage() {}

func (x *FtpTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpTableUrl.ProtoReflect.Descriptor instead.
func (*FtpTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{41}
}

func (x *FtpTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *FtpTableUrl) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FtpTableUrl) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FtpTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

// KafkaTableUrl used as request parameters for RPC and HTTP(based on Body)
type KafkaTableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=SqlColumn,proto3" json:"sqlcolumn"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Topic string `protobuf:"bytes,3,opt,name=Topic,proto3" json:"topic" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=ConnectorOptions,proto3" json:"connectoroptions"`
}

func (x *KafkaTableUrl) Reset() {
	*x = KafkaTableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTableUrl) ProtoMessage() {}

func (x *KafkaTableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTableUrl.ProtoReflect.Descriptor instead.
func (*KafkaTableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{42}
}

func (x *KafkaTableUrl) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *KafkaTableUrl) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *KafkaTableUrl) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaTableUrl) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

type TableUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Table Info.
	MySQL *MySQLTableUrl `protobuf:"bytes,1,opt,name=MySQL,proto3" json:"mysql"`
	// PostgreSQL Table Info.
	PostgreSQL *PostgreSQLTableUrl `protobuf:"bytes,2,opt,name=PostgreSQL,proto3" json:"postgresql"`
	// ClickHouse Table Info.
	ClickHouse *ClickHouseTableUrl `protobuf:"bytes,3,opt,name=ClickHouse,proto3" json:"clickhouse"`
	// Hbase Table Info.
	Hbase *HbaseTableUrl `protobuf:"bytes,4,opt,name=Hbase,proto3" json:"hbase"`
	// Kafka Table Info.
	Kafka *KafkaTableUrl `protobuf:"bytes,5,opt,name=Kafka,proto3" json:"kafka"`
	// S3 Table Info.
	S3 *S3TableUrl `protobuf:"bytes,6,opt,name=S3,proto3" json:"s3"`
	// Ftp Table Info.
	Ftp *FtpTableUrl `protobuf:"bytes,7,opt,name=Ftp,proto3" json:"ftp"`
	// HDFS Table Info.
	HDFS *HDFSTableUrl `protobuf:"bytes,8,opt,name=HDFS,proto3" json:"hdfs"`
}

func (x *TableUrl) Reset() {
	*x = TableUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableUrl) ProtoMessage() {}

func (x *TableUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableUrl.ProtoReflect.Descriptor instead.
func (*TableUrl) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{43}
}

func (x *TableUrl) GetMySQL() *MySQLTableUrl {
	if x != nil {
		return x.MySQL
	}
	return nil
}

func (x *TableUrl) GetPostgreSQL() *PostgreSQLTableUrl {
	if x != nil {
		return x.PostgreSQL
	}
	return nil
}

func (x *TableUrl) GetClickHouse() *ClickHouseTableUrl {
	if x != nil {
		return x.ClickHouse
	}
	return nil
}

func (x *TableUrl) GetHbase() *HbaseTableUrl {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *TableUrl) GetKafka() *KafkaTableUrl {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *TableUrl) GetS3() *S3TableUrl {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *TableUrl) GetFtp() *FtpTableUrl {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *TableUrl) GetHDFS() *HDFSTableUrl {
	if x != nil {
		return x.HDFS
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, unique within a region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" gorm:"column:id;primaryKey;"`
	// Resource Parent ID, default "".
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid" gorm:"column:pid;"`
	// Workspace ID it belongs to.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" gorm:"column:space_id;"`
	// Resource Name, unique within a region of same space_id and pid.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"column:name;"`
	// Resource type, default 0,  0 => "directory", 1 => "jar", 2 => "udf".
	Type Resource_Type `protobuf:"varint,5,opt,name=type,proto3,enum=model.Resource_Type" json:"type" gorm:"column:type;"`
	// Resource size, Byte.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size" gorm:"size;"`
	// Resource kind.
	IsDirectory bool `protobuf:"varint,7,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory" gorm:"is_directory;"`
	// Timestamp of create time.
	Created int64 `protobuf:"varint,8,opt,name=created,proto3" json:"created" gorm:"column:created;autoCreateTime;"`
	// Timestamp of update time.
	Updated int64 `protobuf:"varint,9,opt,name=updated,proto3" json:"updated" gorm:"column:updated;autoUpdateTime;"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{44}
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Resource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetType() Resource_Type {
	if x != nil {
		return x.Type
	}
	return Resource__
}

func (x *Resource) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Resource) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *Resource) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Resource) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// UDF Info
type UDFInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID, unique within a region.
	UDFID string `protobuf:"bytes,1,opt,name=UDFID,proto3" json:"udfid" gorm:"column:udfid;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"`
	// Space ID, workspace ID.
	SpaceID string `protobuf:"bytes,2,opt,name=SpaceID,proto3" json:"spaceid" gorm:"column:spaceid;" binding:"len=20" minLength:"20" maxLength:"20"`
	// UDF Type one of "ScalaUDF", "ScalaUDTF", "ScalaUDTTF", "JarUDF", "JarUDTF", "JarUDTTF", "PythonUDF", "PythonUDTF" , "Dir"
	UDFType string `protobuf:"bytes,3,opt,name=UDFType,proto3" json:"udftype" gorm:"column:udftype;" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// Source Name, unique within a space.
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Comment, describe this source.
	Comment string `protobuf:"bytes,5,opt,name=Comment,proto3" json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"`
	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	Define string `protobuf:"bytes,6,opt,name=Define,proto3" json:"define" gorm:"column:define;" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"`
	// usage for this udf
	UsageSample string `protobuf:"bytes,7,opt,name=UsageSample,proto3" json:"usagesample" gorm:"column:usagesample;" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"`
	// Create Time, this Source create time.
	CreateTime int64 `protobuf:"varint,8,opt,name=CreateTime,proto3" json:"createtime" gorm:"column:createtime;"`
	// Update Time, this Source last update time.
	UpdateTime int64 `protobuf:"varint,9,opt,name=UpdateTime,proto3" json:"updatetime" gorm:"column:updatetime;"`
}

func (x *UDFInfo) Reset() {
	*x = UDFInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDFInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDFInfo) ProtoMessage() {}

func (x *UDFInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDFInfo.ProtoReflect.Descriptor instead.
func (*UDFInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{45}
}

func (x *UDFInfo) GetUDFID() string {
	if x != nil {
		return x.UDFID
	}
	return ""
}

func (x *UDFInfo) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

func (x *UDFInfo) GetUDFType() string {
	if x != nil {
		return x.UDFType
	}
	return ""
}

func (x *UDFInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UDFInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UDFInfo) GetDefine() string {
	if x != nil {
		return x.Define
	}
	return ""
}

func (x *UDFInfo) GetUsageSample() string {
	if x != nil {
		return x.UsageSample
	}
	return ""
}

func (x *UDFInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UDFInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type HBaseConfig_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain    string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain" binding:"email"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address" binding:"ipv4"`
}

func (x *HBaseConfig_Host) Reset() {
	*x = HBaseConfig_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseConfig_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseConfig_Host) ProtoMessage() {}

func (x *HBaseConfig_Host) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseConfig_Host.ProtoReflect.Descriptor instead.
func (*HBaseConfig_Host) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{4, 0}
}

func (x *HBaseConfig_Host) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HBaseConfig_Host) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

var File_proto_model_proto protoreflect.FileDescriptor

var file_proto_model_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x5d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x55, 0x73, 0x12, 0x13,
	0x0a, 0x05, 0x7a, 0x68, 0x5f, 0x63, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x68, 0x43, 0x6e, 0x22, 0xa9, 0x02, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x41, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22,
	0xcc, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70,
	0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81,
	0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x41, 0x52, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x22, 0x8d,
	0x01, 0x0a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33,
	0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x76,
	0x0a, 0x08, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12,
	0x27, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x73, 0x33, 0x22, 0xbf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x02, 0x52, 0x0a, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x63, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x43, 0x75, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x12, 0x21, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x30,
	0x0a, 0x05, 0x68, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xcf, 0x03, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x47,
	0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x18, 0x1f, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xf7, 0x01, 0x0a,
	0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70,
	0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x22, 0x8d, 0x03,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x7b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x22, 0x9c, 0x02,
	0x0a, 0x07, 0x4f, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x78, 0x41, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6f,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x70, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x5f,
	0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xb5, 0x01, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x10, 0x02, 0x22, 0xb5, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x80, 0x02, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x84, 0x04, 0x0a,
	0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78,
	0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x08, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10,
	0x00, 0x18, 0x64, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18,
	0x1f, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x27, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x21, 0x52, 0x09,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x70, 0x01, 0x78, 0x11, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x02, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x22, 0x62, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0b,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x15,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x14, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x18, 0x19, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xdb, 0x02, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x70, 0x00, 0x78, 0x15, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xc1, 0x3e, 0x52, 0x03, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x11, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x00, 0x52, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x78, 0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xda, 0x02, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xc1,
	0x3e, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x70, 0x00, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x11, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a,
	0x0d, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x78, 0x81, 0x02, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0a,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x0b, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x02, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x20, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22,
	0xbd, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22,
	0xbd, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22,
	0x41, 0x0a, 0x08, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x0c, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x0c, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x53, 0x33, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00,
	0x78, 0x81, 0x08, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x08, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x08, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x8c, 0x01,
	0x0a, 0x08, 0x48, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x09, 0x5a, 0x6f,
	0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x09, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x5a, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05, 0x5a,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x4c, 0x0a, 0x06,
	0x46, 0x74, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x4d, 0x0a, 0x07, 0x48, 0x44,
	0x46, 0x53, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd7, 0x02, 0x0a, 0x09, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x55, 0x72, 0x6c, 0x52, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x34,
	0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x53, 0x51, 0x4c, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x72, 0x6c, 0x52, 0x05, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x12, 0x1c, 0x0a, 0x02, 0x53, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x33, 0x55, 0x72, 0x6c, 0x52, 0x02, 0x53, 0x33, 0x12,
	0x25, 0x0a, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x52,
	0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x46, 0x74, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x74, 0x70, 0x55,
	0x72, 0x6c, 0x52, 0x03, 0x46, 0x74, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x48, 0x44, 0x46, 0x53, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x44,
	0x46, 0x53, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x48, 0x44, 0x46, 0x53, 0x3a, 0x06, 0xca, 0xb2, 0x04,
	0x02, 0x0a, 0x00, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06,
	0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52,
	0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd5,
	0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06,
	0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x48, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xdb, 0x01, 0x0a, 0x0c, 0x48, 0x44,
	0x46, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xd9, 0x01, 0x0a, 0x0a, 0x53, 0x33, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x20, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04,
	0x02, 0x0a, 0x00, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x46, 0x74, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1d, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00,
	0x22, 0xde, 0x01, 0x0a, 0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f,
	0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a,
	0x00, 0x22, 0xfe, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a,
	0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x52, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51,
	0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x52, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x21, 0x0a, 0x02, 0x53, 0x33, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x33, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x02, 0x53, 0x33, 0x12, 0x24, 0x0a, 0x03, 0x46,
	0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x74, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x46, 0x74,
	0x70, 0x12, 0x27, 0x0a, 0x04, 0x48, 0x44, 0x46, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x44, 0x46, 0x53, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x48, 0x44, 0x46, 0x53, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x22, 0x91, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x64, 0x66, 0x10, 0x02, 0x22, 0xcc, 0x02, 0x0a, 0x07, 0x55, 0x44, 0x46, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x05, 0x55, 0x44, 0x46, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x05, 0x55, 0x44, 0x46, 0x49, 0x44,
	0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x07, 0x55, 0x44, 0x46, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x15, 0x52, 0x07,
	0x55, 0x44, 0x46, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x78, 0xa1,
	0x9c, 0x01, 0x52, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xd1, 0x0f, 0x52, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x00, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x38, 0x0a, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x5f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x2a,
	0x5f, 0x0a, 0x19, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x1a,
	0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03,
	0x2a, 0x43, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x5f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x6f, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x5f, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x10, 0x03, 0x42, 0x2b,
	0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74,
	0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_model_proto_rawDescOnce sync.Once
	file_proto_model_proto_rawDescData = file_proto_model_proto_rawDesc
)

func file_proto_model_proto_rawDescGZIP() []byte {
	file_proto_model_proto_rawDescOnce.Do(func() {
		file_proto_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_model_proto_rawDescData)
	})
	return file_proto_model_proto_rawDescData
}

var file_proto_model_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_proto_model_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_proto_model_proto_goTypes = []interface{}{
	(EngineType)(0),                 // 0: model.EngineType
	(ScheduleConcurrencyPolicy)(0),  // 1: model.ScheduleConcurrencyPolicy
	(ScheduleRetryPolicy)(0),        // 2: model.ScheduleRetryPolicy
	(OpType)(0),                     // 3: model.OpType
	(Workspace_Status)(0),           // 4: model.Workspace.Status
	(StreamFlow_Type)(0),            // 5: model.StreamFlow.Type
	(StreamFlowRelease_Status)(0),   // 6: model.StreamFlowRelease.Status
	(StreamFlowInst_State)(0),       // 7: model.StreamFlowInst.State
	(OpAudit_State)(0),              // 8: model.OpAudit.State
	(Role_Type)(0),                  // 9: model.Role.Type
	(MonitorRule_Status)(0),         // 10: model.MonitorRule.Status
	(Resource_Type)(0),              // 11: model.Resource.Type
	(*EmptyStruct)(nil),             // 12: model.EmptyStruct
	(*Error)(nil),                   // 13: model.Error
	(*Workspace)(nil),               // 14: model.Workspace
	(*StreamFlow)(nil),              // 15: model.StreamFlow
	(*HBaseConfig)(nil),             // 16: model.HBaseConfig
	(*S3Config)(nil),                // 17: model.S3Config
	(*FlinkConfig)(nil),             // 18: model.FlinkConfig
	(*StreamFlowEnv)(nil),           // 19: model.StreamFlowEnv
	(*StreamFlowSchedule)(nil),      // 20: model.StreamFlowSchedule
	(*StreamFlowProperty)(nil),      // 21: model.StreamFlowProperty
	(*StreamFlowRelease)(nil),       // 22: model.StreamFlowRelease
	(*StreamFlowInst)(nil),          // 23: model.StreamFlowInst
	(*OpAudit)(nil),                 // 24: model.OpAudit
	(*Role)(nil),                    // 25: model.Role
	(*Member)(nil),                  // 26: model.Member
	(*MonitorRule)(nil),             // 27: model.MonitorRule
	(*QueueMessage)(nil),            // 28: model.QueueMessage
	(*InstanceStatusStat)(nil),      // 29: model.InstanceStatusStat
	(*InstanceRuntimeRankInfo)(nil), // 30: model.InstanceRuntimeRankInfo
	(*InstanceErrorRankInfo)(nil),   // 31: model.InstanceErrorRankInfo
	(*DispatchTaskCountInfo)(nil),   // 32: model.DispatchTaskCountInfo
	(*InstanceTaskExecStat)(nil),    // 33: model.InstanceTaskExecStat
	(*SourceInfo)(nil),              // 34: model.SourceInfo
	(*TableInfo)(nil),               // 35: model.TableInfo
	(*SqlColumnType)(nil),           // 36: model.SqlColumnType
	(*ConnectorOption)(nil),         // 37: model.ConnectorOption
	(*MySQLUrl)(nil),                // 38: model.MySQLUrl
	(*PostgreSQLUrl)(nil),           // 39: model.PostgreSQLUrl
	(*ClickHouseUrl)(nil),           // 40: model.ClickHouseUrl
	(*KafkaUrl)(nil),                // 41: model.KafkaUrl
	(*S3Url)(nil),                   // 42: model.S3Url
	(*HbaseUrl)(nil),                // 43: model.HbaseUrl
	(*FtpUrl)(nil),                  // 44: model.FtpUrl
	(*HDFSUrl)(nil),                 // 45: model.HDFSUrl
	(*SourceUrl)(nil),               // 46: model.SourceUrl
	(*MySQLTableUrl)(nil),           // 47: model.MySQLTableUrl
	(*PostgreSQLTableUrl)(nil),      // 48: model.PostgreSQLTableUrl
	(*ClickHouseTableUrl)(nil),      // 49: model.ClickHouseTableUrl
	(*HbaseTableUrl)(nil),           // 50: model.HbaseTableUrl
	(*HDFSTableUrl)(nil),            // 51: model.HDFSTableUrl
	(*S3TableUrl)(nil),              // 52: model.S3TableUrl
	(*FtpTableUrl)(nil),             // 53: model.FtpTableUrl
	(*KafkaTableUrl)(nil),           // 54: model.KafkaTableUrl
	(*TableUrl)(nil),                // 55: model.TableUrl
	(*Resource)(nil),                // 56: model.Resource
	(*UDFInfo)(nil),                 // 57: model.UDFInfo
	(*HBaseConfig_Host)(nil),        // 58: model.HBaseConfig.Host
}
var file_proto_model_proto_depIdxs = []int32{
	4,  // 0: model.Workspace.status:type_name -> model.Workspace.Status
	5,  // 1: model.StreamFlow.type:type_name -> model.StreamFlow.Type
	58, // 2: model.HBaseConfig.hosts:type_name -> model.HBaseConfig.Host
	17, // 3: model.FlinkConfig.s3:type_name -> model.S3Config
	0,  // 4: model.StreamFlowEnv.engine_type:type_name -> model.EngineType
	16, // 5: model.StreamFlowEnv.hbase:type_name -> model.HBaseConfig
	18, // 6: model.StreamFlowEnv.flink:type_name -> model.FlinkConfig
	1,  // 7: model.StreamFlowSchedule.concurrency_policy:type_name -> model.ScheduleConcurrencyPolicy
	2,  // 8: model.StreamFlowSchedule.retry_policy:type_name -> model.ScheduleRetryPolicy
	19, // 9: model.StreamFlowProperty.env:type_name -> model.StreamFlowEnv
	20, // 10: model.StreamFlowProperty.schedule:type_name -> model.StreamFlowSchedule
	5,  // 11: model.StreamFlowRelease.type:type_name -> model.StreamFlow.Type
	6,  // 12: model.StreamFlowRelease.status:type_name -> model.StreamFlowRelease.Status
	7,  // 13: model.StreamFlowInst.state:type_name -> model.StreamFlowInst.State
	3,  // 14: model.OpAudit.op_type:type_name -> model.OpType
	8,  // 15: model.OpAudit.state:type_name -> model.OpAudit.State
	9,  // 16: model.Role.type:type_name -> model.Role.Type
	10, // 17: model.MonitorRule.status:type_name -> model.MonitorRule.Status
	21, // 18: model.QueueMessage.property:type_name -> model.StreamFlowProperty
	46, // 19: model.SourceInfo.Url:type_name -> model.SourceUrl
	55, // 20: model.TableInfo.Url:type_name -> model.TableUrl
	16, // 21: model.HbaseUrl.Hosts:type_name -> model.HBaseConfig
	38, // 22: model.SourceUrl.MySQL:type_name -> model.MySQLUrl
	39, // 23: model.SourceUrl.PostgreSQL:type_name -> model.PostgreSQLUrl
	40, // 24: model.SourceUrl.ClickHouse:type_name -> model.ClickHouseUrl
	41, // 25: model.SourceUrl.Kafka:type_name -> model.KafkaUrl
	42, // 26: model.SourceUrl.S3:type_name -> model.S3Url
	43, // 27: model.SourceUrl.Hbase:type_name -> model.HbaseUrl
	44, // 28: model.SourceUrl.Ftp:type_name -> model.FtpUrl
	45, // 29: model.SourceUrl.HDFS:type_name -> model.HDFSUrl
	36, // 30: model.MySQLTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 31: model.MySQLTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 32: model.PostgreSQLTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 33: model.PostgreSQLTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 34: model.ClickHouseTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 35: model.ClickHouseTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 36: model.HbaseTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 37: model.HbaseTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 38: model.HDFSTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 39: model.HDFSTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 40: model.S3TableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 41: model.S3TableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 42: model.FtpTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 43: model.FtpTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	36, // 44: model.KafkaTableUrl.SqlColumn:type_name -> model.SqlColumnType
	37, // 45: model.KafkaTableUrl.ConnectorOptions:type_name -> model.ConnectorOption
	47, // 46: model.TableUrl.MySQL:type_name -> model.MySQLTableUrl
	48, // 47: model.TableUrl.PostgreSQL:type_name -> model.PostgreSQLTableUrl
	49, // 48: model.TableUrl.ClickHouse:type_name -> model.ClickHouseTableUrl
	50, // 49: model.TableUrl.Hbase:type_name -> model.HbaseTableUrl
	54, // 50: model.TableUrl.Kafka:type_name -> model.KafkaTableUrl
	52, // 51: model.TableUrl.S3:type_name -> model.S3TableUrl
	53, // 52: model.TableUrl.Ftp:type_name -> model.FtpTableUrl
	51, // 53: model.TableUrl.HDFS:type_name -> model.HDFSTableUrl
	11, // 54: model.Resource.type:type_name -> model.Resource.Type
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_proto_model_proto_init() }
func file_proto_model_proto_init() {
	if File_proto_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowInst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatusStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceRuntimeRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceErrorRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTaskCountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTaskExecStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HbaseTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3TableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDFInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseConfig_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_model_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_model_proto_goTypes,
		DependencyIndexes: file_proto_model_proto_depIdxs,
		EnumInfos:         file_proto_model_proto_enumTypes,
		MessageInfos:      file_proto_model_proto_msgTypes,
	}.Build()
	File_proto_model_proto = out.File
	file_proto_model_proto_rawDesc = nil
	file_proto_model_proto_goTypes = nil
	file_proto_model_proto_depIdxs = nil
}
