// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/model.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// EmptyStruct represents no value with a message.
type EmptyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyStruct) Reset() {
	*x = EmptyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyStruct) ProtoMessage() {}

func (x *EmptyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyStruct.ProtoReflect.Descriptor instead.
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{0}
}

// The workspace info.
type SpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID, unique within a region.
	// @inject_tag: gorm:"column:id;primaryKey;"
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" gorm:"column:id;primaryKey;"`
	// User id of workspace owner.
	// @inject_tag: gorm:"column:owner;"
	Owner string `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty" gorm:"column:owner;"`
	// Workspace Name, unique within a region.
	// @inject_tag: gorm:"column:name;"
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty" gorm:"column:name;"`
	// Workspace Description.
	// @inject_tag: gorm:"column:desc;"
	Desc string `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty" gorm:"column:desc;"`
	// Workspace status, 0 => "enabled", 1 => "disabled".
	// @inject_tag: gorm:"column:status;"
	Status int32 `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty" gorm:"column:status;"`
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime"
	Created int64 `protobuf:"varint,7,opt,name=Created,proto3" json:"Created,omitempty" gorm:"column:created;autoCreateTime"`
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	Updated int64 `protobuf:"varint,8,opt,name=Updated,proto3" json:"Updated,omitempty" gorm:"column:updated;autoUpdateTime"`
}

func (x *SpaceInfo) Reset() {
	*x = SpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceInfo) ProtoMessage() {}

func (x *SpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceInfo.ProtoReflect.Descriptor instead.
func (*SpaceInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{1}
}

func (x *SpaceInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SpaceInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SpaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpaceInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SpaceInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SpaceInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SpaceInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workflow info
type FlowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	SpaceId string `protobuf:"bytes,1,opt,name=SpaceId,proto3" json:"SpaceId,omitempty" gorm:"column:space_id;"`
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty" gorm:"column:id;primarykey;"`
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty" gorm:"column:name;"`
	// Workflow Description.
	// @inject_tag: gorm:"column:desc;"
	Desc string `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty" gorm:"column:desc;"`
	// Workflow status, 1 => "offline", 2 => "releasing"; 3 => "online"
	// @inject_tag: gorm:"column:status;"
	Status int32 `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty" gorm:"column:status;"`
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime"
	Created int64 `protobuf:"varint,6,opt,name=Created,proto3" json:"Created,omitempty" gorm:"column:created;autoCreateTime"`
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	Updated int64 `protobuf:"varint,7,opt,name=Updated,proto3" json:"Updated,omitempty" gorm:"column:updated;autoUpdateTime"`
}

func (x *FlowInfo) Reset() {
	*x = FlowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfo) ProtoMessage() {}

func (x *FlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfo.ProtoReflect.Descriptor instead.
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{2}
}

func (x *FlowInfo) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *FlowInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FlowInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FlowInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FlowInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *FlowInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workflow schedule info.
type SchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey"
	FlowId string `protobuf:"bytes,1,opt,name=FlowId,proto3" json:"FlowId,omitempty" gorm:"column:flow_id;primarykey"`
	// Timestamp of start time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:started;"
	Started int64 `protobuf:"varint,3,opt,name=Started,proto3" json:"Started,omitempty" gorm:"column:started;"`
	// Timestamp of end time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:ended;"
	Ended int64 `protobuf:"varint,4,opt,name=Ended,proto3" json:"Ended,omitempty" gorm:"column:ended;"`
	// Schedule priority, 1 => "highest", 2 => "high", 3 => "medium", 4 => "low", 5 => "lowest", default 3.
	// @inject_tag: gorm:"column:priority;"
	Priority int32 `protobuf:"varint,5,opt,name=Priority,proto3" json:"Priority,omitempty" gorm:"column:priority;"`
	// Strategy when node task execute fail.
	// @inject_tag: gorm:"column:failure_strategy;"
	FailureStrategy int32 `protobuf:"varint,6,opt,name=FailureStrategy,proto3" json:"FailureStrategy,omitempty" gorm:"column:failure_strategy;"`
	// Strategy of dependency.
	// @inject_tag: gorm:"column:depend_strategy;"
	DependStrategy int32 `protobuf:"varint,7,opt,name=DependStrategy,proto3" json:"DependStrategy,omitempty" gorm:"column:depend_strategy;"`
	// Strategy of schedule, 1 => "loop".
	// @inject_tag: gorm:"column:schedule_strategy;"
	ScheduleStrategy int32 `protobuf:"varint,8,opt,name=ScheduleStrategy,proto3" json:"ScheduleStrategy,omitempty" gorm:"column:schedule_strategy;"`
	// Limit count of schedule, 0 means no limited.
	// @inject_tag: gorm:"column:schedule_limit;"
	ScheduleLimit int64 `protobuf:"varint,9,opt,name=ScheduleLimit,proto3" json:"ScheduleLimit,omitempty" gorm:"column:schedule_limit;"`
	// Express is the standard unix crontab express, used with loop ScheduleStrategy.
	// @inject_tag: gorm:"column:express;"
	Express string `protobuf:"bytes,10,opt,name=Express,proto3" json:"Express,omitempty" gorm:"column:express;"`
	// Notify Strategies, e.g 1|2|3|4.
	// @inject_tag: gorm:"notify_strategies"
	NotifyStrategies int32 `protobuf:"varint,11,opt,name=NotifyStrategies,proto3" json:"NotifyStrategies,omitempty" gorm:"notify_strategies"`
	// FIXME: Confirm the length of notify group id
	// Notify group id.
	// @inject_tag: gorm:"notify_group"
	NotifyGroup string `protobuf:"bytes,12,opt,name=NotifyGroup,proto3" json:"NotifyGroup,omitempty" gorm:"notify_group"`
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime"
	Created int64 `protobuf:"varint,13,opt,name=Created,proto3" json:"Created,omitempty" gorm:"column:created;autoCreateTime"`
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	Updated int64 `protobuf:"varint,14,opt,name=Updated,proto3" json:"Updated,omitempty" gorm:"column:updated;autoUpdateTime"`
}

func (x *SchInfo) Reset() {
	*x = SchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchInfo) ProtoMessage() {}

func (x *SchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchInfo.ProtoReflect.Descriptor instead.
func (*SchInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{3}
}

func (x *SchInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *SchInfo) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *SchInfo) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *SchInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SchInfo) GetFailureStrategy() int32 {
	if x != nil {
		return x.FailureStrategy
	}
	return 0
}

func (x *SchInfo) GetDependStrategy() int32 {
	if x != nil {
		return x.DependStrategy
	}
	return 0
}

func (x *SchInfo) GetScheduleStrategy() int32 {
	if x != nil {
		return x.ScheduleStrategy
	}
	return 0
}

func (x *SchInfo) GetScheduleLimit() int64 {
	if x != nil {
		return x.ScheduleLimit
	}
	return 0
}

func (x *SchInfo) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

func (x *SchInfo) GetNotifyStrategies() int32 {
	if x != nil {
		return x.NotifyStrategies
	}
	return 0
}

func (x *SchInfo) GetNotifyGroup() string {
	if x != nil {
		return x.NotifyGroup
	}
	return ""
}

func (x *SchInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SchInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The node info.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	FlowId string `protobuf:"bytes,1,opt,name=FlowId,proto3" json:"FlowId,omitempty" gorm:"column:flow_id;"`
	// Node ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty" gorm:"column:id;primarykey;"`
	// Node Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty" gorm:"column:name;"`
	// Node description.
	// @inject_tag: gorm:"column:desc;"
	Desc string `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty" gorm:"column:desc;"`
	// Node status, 1 => "enabled", 2 => "disabled", default 1.
	// @inject_tag: gorm:"column:status;"
	Status int32 `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty" gorm:"column:status;"`
	// Limit count of retries.
	// @inject_tag: gorm:"column:retry_limit"
	RetryLimit int32 `protobuf:"varint,6,opt,name=RetryLimit,proto3" json:"RetryLimit,omitempty" gorm:"column:retry_limit"`
	// Interval of Retry, in seconds.
	// @inject_tag: gorm:"column:retry_interval"
	RetryInterval int32 `protobuf:"varint,7,opt,name=RetryInterval,proto3" json:"RetryInterval,omitempty" gorm:"column:retry_interval"`
	// Seconds of timeout. 0 means never timeout.
	// @inject_tag: gorm:"column:timeout"
	Timeout int32 `protobuf:"varint,8,opt,name=Timeout,proto3" json:"Timeout,omitempty" gorm:"column:timeout"`
	// Strategy when node task execute fail. 1 => "none", 2 => "ignore".
	// @inject_tag: gorm:"column:failure_strategy;"
	FailureStrategy int32 `protobuf:"varint,9,opt,name=FailureStrategy,proto3" json:"FailureStrategy,omitempty" gorm:"column:failure_strategy;"`
	// Current Node's upstream nodes.
	// @inject_tag: gorm:"column:upstreams;"
	Upstreams string `protobuf:"bytes,10,opt,name=Upstreams,proto3" json:"Upstreams,omitempty" gorm:"column:upstreams;"`
	// @inject_tag: gorm:"column:type"
	// Node type.
	Type int32 `protobuf:"varint,11,opt,name=Type,proto3" json:"Type,omitempty" gorm:"column:type"`
	// Task defines.
	// @inject_tag: gorm:"column:defines"
	Defines string `protobuf:"bytes,12,opt,name=Defines,proto3" json:"Defines,omitempty" gorm:"column:defines"`
	// Timestamp of create time
	// @inject_tag: gorm:"column:created;autoCreateTime"
	Created int64 `protobuf:"varint,13,opt,name=Created,proto3" json:"Created,omitempty" gorm:"column:created;autoCreateTime"`
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	Updated int64 `protobuf:"varint,14,opt,name=Updated,proto3" json:"Updated,omitempty" gorm:"column:updated;autoUpdateTime"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{4}
}

func (x *NodeInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *NodeInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *NodeInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NodeInfo) GetRetryLimit() int32 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

func (x *NodeInfo) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *NodeInfo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *NodeInfo) GetFailureStrategy() int32 {
	if x != nil {
		return x.FailureStrategy
	}
	return 0
}

func (x *NodeInfo) GetUpstreams() string {
	if x != nil {
		return x.Upstreams
	}
	return ""
}

func (x *NodeInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NodeInfo) GetDefines() string {
	if x != nil {
		return x.Defines
	}
	return ""
}

func (x *NodeInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *NodeInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workflow version info.
type FlowVerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release version.
	// @inject_tag: gorm:"column:version;primarykey;
	Version int64 `protobuf:"varint,1000,opt,name=Version,proto3" json:"Version,omitempty"`
	// @inject_tag: gorm:"embedded"
	Info *FlowInfo `protobuf:"bytes,1001,opt,name=Info,proto3" json:"Info,omitempty" gorm:"embedded"`
}

func (x *FlowVerInfo) Reset() {
	*x = FlowVerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowVerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowVerInfo) ProtoMessage() {}

func (x *FlowVerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowVerInfo.ProtoReflect.Descriptor instead.
func (*FlowVerInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{5}
}

func (x *FlowVerInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlowVerInfo) GetInfo() *FlowInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// The workflow schedule version info.
type SchVerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release version.
	// @inject_tag: gorm:"column:version;primarykey;
	Version int64 `protobuf:"varint,1000,opt,name=Version,proto3" json:"Version,omitempty"`
	// @inject_tag: gorm:"embedded"
	Info *SchInfo `protobuf:"bytes,1001,opt,name=Info,proto3" json:"Info,omitempty" gorm:"embedded"`
}

func (x *SchVerInfo) Reset() {
	*x = SchVerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchVerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchVerInfo) ProtoMessage() {}

func (x *SchVerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchVerInfo.ProtoReflect.Descriptor instead.
func (*SchVerInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{6}
}

func (x *SchVerInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SchVerInfo) GetInfo() *SchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// The node version info.
type NodeVerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release version.
	// @inject_tag: gorm:"column:version;primarykey;
	Version int64 `protobuf:"varint,1000,opt,name=Version,proto3" json:"Version,omitempty"`
	// @inject_tag: gorm:"embedded"
	Info *NodeInfo `protobuf:"bytes,1001,opt,name=Info,proto3" json:"Info,omitempty" gorm:"embedded"`
}

func (x *NodeVerInfo) Reset() {
	*x = NodeVerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeVerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVerInfo) ProtoMessage() {}

func (x *NodeVerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeVerInfo.ProtoReflect.Descriptor instead.
func (*NodeVerInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{7}
}

func (x *NodeVerInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeVerInfo) GetInfo() *NodeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// The workflow instance info.
type FlowInstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	FlowId string `protobuf:"bytes,1,opt,name=FlowId,proto3" json:"FlowId,omitempty" gorm:"column:flow_id;"`
	// The release version.
	// @inject_tag: gorm:"column:version;
	Version int64 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty" gorm:"column:id;primarykey;"`
	// @inject_tag: gorm:"column:trigger;"
	Trigger int32 `protobuf:"varint,4,opt,name=Trigger,proto3" json:"Trigger,omitempty" gorm:"column:trigger;"`
	// Limit count of retries.
	// @inject_tag: gorm:"column:state"
	State int32 `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty" gorm:"column:state"`
	// @inject_tag: gorm:"column:created;autoCreateTime"
	Created int64 `protobuf:"varint,6,opt,name=Created,proto3" json:"Created,omitempty" gorm:"column:created;autoCreateTime"`
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	Updated int64 `protobuf:"varint,7,opt,name=Updated,proto3" json:"Updated,omitempty" gorm:"column:updated;autoUpdateTime"`
}

func (x *FlowInstInfo) Reset() {
	*x = FlowInstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInstInfo) ProtoMessage() {}

func (x *FlowInstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInstInfo.ProtoReflect.Descriptor instead.
func (*FlowInstInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{8}
}

func (x *FlowInstInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *FlowInstInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FlowInstInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FlowInstInfo) GetTrigger() int32 {
	if x != nil {
		return x.Trigger
	}
	return 0
}

func (x *FlowInstInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *FlowInstInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *FlowInstInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// The workflow instance info.
type NodeInstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workflow instance ID it belongs to
	// @inject_tag: gorm:"column:flow_instance_id;"
	FlowInstId string `protobuf:"bytes,1,opt,name=FlowInstId,proto3" json:"FlowInstId,omitempty" gorm:"column:flow_instance_id;"`
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	FlowId string `protobuf:"bytes,2,opt,name=FlowId,proto3" json:"FlowId,omitempty" gorm:"column:flow_id;"`
	// Node ID it belongs to.
	// @inject_tag: gorm:"column:node_id;"
	NodeId string `protobuf:"bytes,3,opt,name=NodeId,proto3" json:"NodeId,omitempty" gorm:"column:node_id;"`
	// The release version.
	// @inject_tag: gorm:"column:version;
	Version int64 `protobuf:"varint,4,opt,name=Version,proto3" json:"Version,omitempty"`
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	ID string `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty" gorm:"column:id;primarykey;"`
	// @inject_tag: gorm:"column:trigger;"
	Trigger int32 `protobuf:"varint,6,opt,name=Trigger,proto3" json:"Trigger,omitempty" gorm:"column:trigger;"`
	// Limit count of retries.
	// @inject_tag: gorm:"column:state"
	State int32 `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty" gorm:"column:state"`
	// @inject_tag: gorm:"column:created;autoCreateTime"
	Created int64 `protobuf:"varint,8,opt,name=Created,proto3" json:"Created,omitempty" gorm:"column:created;autoCreateTime"`
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	Updated int64 `protobuf:"varint,9,opt,name=Updated,proto3" json:"Updated,omitempty" gorm:"column:updated;autoUpdateTime"`
}

func (x *NodeInstInfo) Reset() {
	*x = NodeInstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInstInfo) ProtoMessage() {}

func (x *NodeInstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInstInfo.ProtoReflect.Descriptor instead.
func (*NodeInstInfo) Descriptor() ([]byte, []int) {
	return file_proto_model_proto_rawDescGZIP(), []int{9}
}

func (x *NodeInstInfo) GetFlowInstId() string {
	if x != nil {
		return x.FlowInstId
	}
	return ""
}

func (x *NodeInstInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *NodeInstInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeInstInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeInstInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NodeInstInfo) GetTrigger() int32 {
	if x != nil {
		return x.Trigger
	}
	return 0
}

func (x *NodeInstInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *NodeInstInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *NodeInstInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

var File_proto_model_proto protoreflect.FileDescriptor

var file_proto_model_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52,
	0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52,
	0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xa1, 0x04, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x0e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x10,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03,
	0x52, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0d, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x07, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xfd, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1d,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x10, 0x00, 0x18, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x0d, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a,
	0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03,
	0x52, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x22, 0x0a, 0x09, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x01, 0x52, 0x07, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x56, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5c, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xec, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x07,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb6,
	0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x27, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x0a, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_model_proto_rawDescOnce sync.Once
	file_proto_model_proto_rawDescData = file_proto_model_proto_rawDesc
)

func file_proto_model_proto_rawDescGZIP() []byte {
	file_proto_model_proto_rawDescOnce.Do(func() {
		file_proto_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_model_proto_rawDescData)
	})
	return file_proto_model_proto_rawDescData
}

var file_proto_model_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_model_proto_goTypes = []interface{}{
	(*EmptyStruct)(nil),  // 0: model.EmptyStruct
	(*SpaceInfo)(nil),    // 1: model.SpaceInfo
	(*FlowInfo)(nil),     // 2: model.FlowInfo
	(*SchInfo)(nil),      // 3: model.SchInfo
	(*NodeInfo)(nil),     // 4: model.NodeInfo
	(*FlowVerInfo)(nil),  // 5: model.FlowVerInfo
	(*SchVerInfo)(nil),   // 6: model.SchVerInfo
	(*NodeVerInfo)(nil),  // 7: model.NodeVerInfo
	(*FlowInstInfo)(nil), // 8: model.FlowInstInfo
	(*NodeInstInfo)(nil), // 9: model.NodeInstInfo
}
var file_proto_model_proto_depIdxs = []int32{
	2, // 0: model.FlowVerInfo.Info:type_name -> model.FlowInfo
	3, // 1: model.SchVerInfo.Info:type_name -> model.SchInfo
	4, // 2: model.NodeVerInfo.Info:type_name -> model.NodeInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_model_proto_init() }
func file_proto_model_proto_init() {
	if File_proto_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowVerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchVerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeVerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_model_proto_goTypes,
		DependencyIndexes: file_proto_model_proto_depIdxs,
		MessageInfos:      file_proto_model_proto_msgTypes,
	}.Build()
	File_proto_model_proto = out.File
	file_proto_model_proto_rawDesc = nil
	file_proto_model_proto_goTypes = nil
	file_proto_model_proto_depIdxs = nil
}
