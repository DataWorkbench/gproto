// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fmpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagerClient interface {
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (ResourceManager_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (ResourceManager_DownloadFileClient, error)
	DescribeFile(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	ListFiles(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/fmpb.ResourceManager/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ResourceManager_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ResourceManager_serviceDesc.Streams[0], "/fmpb.ResourceManager/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManagerUploadFileClient{stream}
	return x, nil
}

type ResourceManager_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*model.EmptyStruct, error)
	grpc.ClientStream
}

type resourceManagerUploadFileClient struct {
	grpc.ClientStream
}

func (x *resourceManagerUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceManagerUploadFileClient) CloseAndRecv() (*model.EmptyStruct, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(model.EmptyStruct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManagerClient) DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (ResourceManager_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ResourceManager_serviceDesc.Streams[1], "/fmpb.ResourceManager/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManagerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceManager_DownloadFileClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type resourceManagerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *resourceManagerDownloadFileClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManagerClient) DescribeFile(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/fmpb.ResourceManager/DescribeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListFiles(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/fmpb.ResourceManager/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/fmpb.ResourceManager/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/fmpb.ResourceManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/fmpb.ResourceManager/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
// All implementations must embed UnimplementedResourceManagerServer
// for forward compatibility
type ResourceManagerServer interface {
	CreateDir(context.Context, *CreateDirRequest) (*model.EmptyStruct, error)
	UploadFile(ResourceManager_UploadFileServer) error
	DownloadFile(*DownloadRequest, ResourceManager_DownloadFileServer) error
	DescribeFile(context.Context, *DescribeRequest) (*ResourceResponse, error)
	ListFiles(context.Context, *ListRequest) (*ListResponse, error)
	UpdateFile(context.Context, *UpdateFileRequest) (*model.EmptyStruct, error)
	Delete(context.Context, *DeleteRequest) (*model.EmptyStruct, error)
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*model.EmptyStruct, error)
	mustEmbedUnimplementedResourceManagerServer()
}

// UnimplementedResourceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (UnimplementedResourceManagerServer) CreateDir(context.Context, *CreateDirRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedResourceManagerServer) UploadFile(ResourceManager_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedResourceManagerServer) DownloadFile(*DownloadRequest, ResourceManager_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedResourceManagerServer) DescribeFile(context.Context, *DescribeRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFile not implemented")
}
func (UnimplementedResourceManagerServer) ListFiles(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedResourceManagerServer) UpdateFile(context.Context, *UpdateFileRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedResourceManagerServer) Delete(context.Context, *DeleteRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceManagerServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedResourceManagerServer) mustEmbedUnimplementedResourceManagerServer() {}

// UnsafeResourceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagerServer will
// result in compilation errors.
type UnsafeResourceManagerServer interface {
	mustEmbedUnimplementedResourceManagerServer()
}

func RegisterResourceManagerServer(s grpc.ServiceRegistrar, srv ResourceManagerServer) {
	s.RegisterService(&_ResourceManager_serviceDesc, srv)
}

func _ResourceManager_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmpb.ResourceManager/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceManagerServer).UploadFile(&resourceManagerUploadFileServer{stream})
}

type ResourceManager_UploadFileServer interface {
	SendAndClose(*model.EmptyStruct) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type resourceManagerUploadFileServer struct {
	grpc.ServerStream
}

func (x *resourceManagerUploadFileServer) SendAndClose(m *model.EmptyStruct) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceManagerUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceManager_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceManagerServer).DownloadFile(m, &resourceManagerDownloadFileServer{stream})
}

type ResourceManager_DownloadFileServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type resourceManagerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *resourceManagerDownloadFileServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceManager_DescribeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DescribeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmpb.ResourceManager/DescribeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DescribeFile(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmpb.ResourceManager/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListFiles(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmpb.ResourceManager/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmpb.ResourceManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmpb.ResourceManager/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fmpb.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDir",
			Handler:    _ResourceManager_CreateDir_Handler,
		},
		{
			MethodName: "DescribeFile",
			Handler:    _ResourceManager_DescribeFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _ResourceManager_ListFiles_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _ResourceManager_UpdateFile_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceManager_Delete_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _ResourceManager_DeleteSpace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ResourceManager_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _ResourceManager_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/filemanager.proto",
}
