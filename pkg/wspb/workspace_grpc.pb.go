// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wspb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceClient is the client API for Workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceClient interface {
	// API of workspace manager.
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesReply, error)
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeWorkspace(ctx context.Context, in *DescribeWorkspaceRequest, opts ...grpc.CallOption) (*DescribeWorkspaceReply, error)
	DisableWorkspace(ctx context.Context, in *DisableWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	EnableWorkspace(ctx context.Context, in *EnableWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// API of workspace operation audit log.
	AddAudit(ctx context.Context, in *AddAuditRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ListAudits(ctx context.Context, in *ListAuditsRequest, opts ...grpc.CallOption) (*ListAuditsReply, error)
	// API of workspace role.
	ListSystemRoles(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*ListSystemRolesReply, error)
	// API of workspace member
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersReply, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
}

type workspaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceClient(cc grpc.ClientConnInterface) WorkspaceClient {
	return &workspaceClient{cc}
}

func (c *workspaceClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesReply, error) {
	out := new(ListWorkspacesReply)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/CreateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/DeleteWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/UpdateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) DescribeWorkspace(ctx context.Context, in *DescribeWorkspaceRequest, opts ...grpc.CallOption) (*DescribeWorkspaceReply, error) {
	out := new(DescribeWorkspaceReply)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/DescribeWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) DisableWorkspace(ctx context.Context, in *DisableWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/DisableWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) EnableWorkspace(ctx context.Context, in *EnableWorkspaceRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/EnableWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) AddAudit(ctx context.Context, in *AddAuditRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/AddAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) ListAudits(ctx context.Context, in *ListAuditsRequest, opts ...grpc.CallOption) (*ListAuditsReply, error) {
	out := new(ListAuditsReply)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/ListAudits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) ListSystemRoles(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*ListSystemRolesReply, error) {
	out := new(ListSystemRolesReply)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/ListSystemRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersReply, error) {
	out := new(ListMembersReply)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wspb.Workspace/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServer is the server API for Workspace service.
// All implementations must embed UnimplementedWorkspaceServer
// for forward compatibility
type WorkspaceServer interface {
	// API of workspace manager.
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesReply, error)
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*model.EmptyStruct, error)
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*model.EmptyStruct, error)
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*model.EmptyStruct, error)
	DescribeWorkspace(context.Context, *DescribeWorkspaceRequest) (*DescribeWorkspaceReply, error)
	DisableWorkspace(context.Context, *DisableWorkspaceRequest) (*model.EmptyStruct, error)
	EnableWorkspace(context.Context, *EnableWorkspaceRequest) (*model.EmptyStruct, error)
	// API of workspace operation audit log.
	AddAudit(context.Context, *AddAuditRequest) (*model.EmptyStruct, error)
	ListAudits(context.Context, *ListAuditsRequest) (*ListAuditsReply, error)
	// API of workspace role.
	ListSystemRoles(context.Context, *model.EmptyStruct) (*ListSystemRolesReply, error)
	// API of workspace member
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersReply, error)
	AddMember(context.Context, *AddMemberRequest) (*model.EmptyStruct, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*model.EmptyStruct, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*model.EmptyStruct, error)
	mustEmbedUnimplementedWorkspaceServer()
}

// UnimplementedWorkspaceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServer struct {
}

func (UnimplementedWorkspaceServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedWorkspaceServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedWorkspaceServer) DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (UnimplementedWorkspaceServer) UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedWorkspaceServer) DescribeWorkspace(context.Context, *DescribeWorkspaceRequest) (*DescribeWorkspaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWorkspace not implemented")
}
func (UnimplementedWorkspaceServer) DisableWorkspace(context.Context, *DisableWorkspaceRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWorkspace not implemented")
}
func (UnimplementedWorkspaceServer) EnableWorkspace(context.Context, *EnableWorkspaceRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableWorkspace not implemented")
}
func (UnimplementedWorkspaceServer) AddAudit(context.Context, *AddAuditRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAudit not implemented")
}
func (UnimplementedWorkspaceServer) ListAudits(context.Context, *ListAuditsRequest) (*ListAuditsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudits not implemented")
}
func (UnimplementedWorkspaceServer) ListSystemRoles(context.Context, *model.EmptyStruct) (*ListSystemRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemRoles not implemented")
}
func (UnimplementedWorkspaceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedWorkspaceServer) AddMember(context.Context, *AddMemberRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedWorkspaceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedWorkspaceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedWorkspaceServer) mustEmbedUnimplementedWorkspaceServer() {}

// UnsafeWorkspaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServer will
// result in compilation errors.
type UnsafeWorkspaceServer interface {
	mustEmbedUnimplementedWorkspaceServer()
}

func RegisterWorkspaceServer(s grpc.ServiceRegistrar, srv WorkspaceServer) {
	s.RegisterService(&_Workspace_serviceDesc, srv)
}

func _Workspace_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/CreateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/DeleteWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).DeleteWorkspace(ctx, req.(*DeleteWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/UpdateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).UpdateWorkspace(ctx, req.(*UpdateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_DescribeWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).DescribeWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/DescribeWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).DescribeWorkspace(ctx, req.(*DescribeWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_DisableWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).DisableWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/DisableWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).DisableWorkspace(ctx, req.(*DisableWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_EnableWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).EnableWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/EnableWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).EnableWorkspace(ctx, req.(*EnableWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_AddAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).AddAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/AddAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).AddAudit(ctx, req.(*AddAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_ListAudits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).ListAudits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/ListAudits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).ListAudits(ctx, req.(*ListAuditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_ListSystemRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).ListSystemRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/ListSystemRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).ListSystemRoles(ctx, req.(*model.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wspb.Workspace/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workspace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wspb.Workspace",
	HandlerType: (*WorkspaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkspaces",
			Handler:    _Workspace_ListWorkspaces_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _Workspace_CreateWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _Workspace_DeleteWorkspace_Handler,
		},
		{
			MethodName: "UpdateWorkspace",
			Handler:    _Workspace_UpdateWorkspace_Handler,
		},
		{
			MethodName: "DescribeWorkspace",
			Handler:    _Workspace_DescribeWorkspace_Handler,
		},
		{
			MethodName: "DisableWorkspace",
			Handler:    _Workspace_DisableWorkspace_Handler,
		},
		{
			MethodName: "EnableWorkspace",
			Handler:    _Workspace_EnableWorkspace_Handler,
		},
		{
			MethodName: "AddAudit",
			Handler:    _Workspace_AddAudit_Handler,
		},
		{
			MethodName: "ListAudits",
			Handler:    _Workspace_ListAudits_Handler,
		},
		{
			MethodName: "ListSystemRoles",
			Handler:    _Workspace_ListSystemRoles_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _Workspace_ListMembers_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Workspace_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Workspace_RemoveMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Workspace_UpdateMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workspace.proto",
}
