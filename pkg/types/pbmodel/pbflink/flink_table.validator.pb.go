// Code generated by protoc-gen-govalidator. DO NOT EDIT.
// versions:
// 		protoc-gen-govalidator v0.1
// source: proto/types/model/flink/flink_table.proto

package pbflink

import (
	_ "github.com/yu31/proto-go-plugin/pkg/pb/gosqlpb"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/validatorpb"
	protovalidator "github.com/yu31/proto-go-plugin/pkg/protovalidator"
)

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_column() error {
	if !(len(this.Column) <= 64) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'column' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Column))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_type() error {
	if !(len(this.Type) <= 64) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'type' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Type))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_comment() error {
	if !(len(this.Comment) <= 256) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'comment' must be less than or equal to '256'", protovalidator.StringByteLenToString(this.Comment))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_primary_key() error {
	if !(len(this.PrimaryKey) <= 8) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'primary_key' must be less than or equal to '8'", protovalidator.StringByteLenToString(this.PrimaryKey))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_Length() error {
	if !(len(this.Length) <= 10) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'Length' must be less than or equal to '10'", protovalidator.StringByteLenToString(this.Length))
	}
	return nil
}

// Set default value for message flink.SqlColumnType
func (this *SqlColumnType) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_comment(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_primary_key(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_Length(); err != nil {
		return err
	}
	return nil
}

func (this *SqlTimeColumnType) _xxx_xxx_Validator_Validate_column() error {
	if !(len(this.Column) <= 64) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the byte length of field 'column' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Column))
	}
	return nil
}

var _xxx_xxx_Validator_SqlTimeColumnType_InEnums_Type = map[SqlTimeColumnType_Type]bool{0: true, 1: true, 2: true}

func (this *SqlTimeColumnType) _xxx_xxx_Validator_Validate_type() error {
	if !(this.Type >= 1) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the value of field 'type' must be greater than or equal to '1'", protovalidator.Int32ToString(int32(this.Type)))
	}
	if !(_xxx_xxx_Validator_SqlTimeColumnType_InEnums_Type[this.Type]) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the value of field 'type' must in enums of '[0 1 2]'", protovalidator.Int32ToString(int32(this.Type)))
	}
	return nil
}

func (this *SqlTimeColumnType) _xxx_xxx_Validator_Validate_expression() error {
	if !(len(this.Expression) <= 1024) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the byte length of field 'expression' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Expression))
	}
	return nil
}

// Set default value for message flink.SqlTimeColumnType
func (this *SqlTimeColumnType) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_expression(); err != nil {
		return err
	}
	return nil
}

func (this *ConnectorOption) _xxx_xxx_Validator_Validate_name() error {
	if !(len(this.Name) <= 256) {
		return protovalidator.FieldError1("ConnectorOption", "the byte length of field 'name' must be less than or equal to '256'", protovalidator.StringByteLenToString(this.Name))
	}
	return nil
}

func (this *ConnectorOption) _xxx_xxx_Validator_Validate_value() error {
	if !(len(this.Value) <= 4096) {
		return protovalidator.FieldError1("ConnectorOption", "the byte length of field 'value' must be less than or equal to '4096'", protovalidator.StringByteLenToString(this.Value))
	}
	return nil
}

// Set default value for message flink.ConnectorOption
func (this *ConnectorOption) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_value(); err != nil {
		return err
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_mapping_name() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("MySQLTable", "the byte length of field 'mapping_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.MySQLTable
func (this *MySQLTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_mapping_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_mapping_name() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("PostgreSQLTable", "the byte length of field 'mapping_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.PostgreSQLTable
func (this *PostgreSQLTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_mapping_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_MappingName() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("ClickHouseTable", "the byte length of field 'MappingName' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.ClickHouseTable
func (this *ClickHouseTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_MappingName(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_mapping_name() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("HBaseTable", "the byte length of field 'mapping_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.HBaseTable
func (this *HBaseTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_mapping_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("HDFSTable", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_path() error {
	if !(len(this.Path) <= 1024) {
		return protovalidator.FieldError1("HDFSTable", "the byte length of field 'path' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Path))
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.HDFSTable
func (this *HDFSTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_path(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("S3Table", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_path() error {
	if !(len(this.Path) <= 1024) {
		return protovalidator.FieldError1("S3Table", "the byte length of field 'path' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Path))
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.S3Table
func (this *S3Table) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_path(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("FtpTable", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_path() error {
	if !(len(this.Path) <= 1024) {
		return protovalidator.FieldError1("FtpTable", "the byte length of field 'path' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Path))
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.FtpTable
func (this *FtpTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_path(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("KafkaTable", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_topic() error {
	if !(len(this.Topic) <= 1024) {
		return protovalidator.FieldError1("KafkaTable", "the byte length of field 'topic' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Topic))
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.KafkaTable
func (this *KafkaTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_topic(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_mysql() error {
	if dt, ok := interface{}(this.Mysql).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_postgresql() error {
	if dt, ok := interface{}(this.Postgresql).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_clickhouse() error {
	if dt, ok := interface{}(this.Clickhouse).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_Hbase() error {
	if dt, ok := interface{}(this.Hbase).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_kafka() error {
	if dt, ok := interface{}(this.Kafka).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_s3() error {
	if dt, ok := interface{}(this.S3).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_ftp() error {
	if dt, ok := interface{}(this.Ftp).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_hdfs() error {
	if dt, ok := interface{}(this.Hdfs).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.TableSchema
func (this *TableSchema) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_mysql(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_postgresql(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_clickhouse(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_Hbase(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_kafka(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_s3(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_ftp(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_hdfs(); err != nil {
		return err
	}
	return nil
}
