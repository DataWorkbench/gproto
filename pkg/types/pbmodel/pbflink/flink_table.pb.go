// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/flink/flink_table.proto

package pbflink

import (
	_ "github.com/yu31/proto-go-plugin/pkg/pb/gosqlpb"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/validatorpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SqlTimeColumnType_Type int32

const (
	SqlTimeColumnType_TypeUnset SqlTimeColumnType_Type = 0
	SqlTimeColumnType_Proctime  SqlTimeColumnType_Type = 1
	SqlTimeColumnType_Watermark SqlTimeColumnType_Type = 2
)

// Enum value maps for SqlTimeColumnType_Type.
var (
	SqlTimeColumnType_Type_name = map[int32]string{
		0: "TypeUnset",
		1: "Proctime",
		2: "Watermark",
	}
	SqlTimeColumnType_Type_value = map[string]int32{
		"TypeUnset": 0,
		"Proctime":  1,
		"Watermark": 2,
	}
)

func (x SqlTimeColumnType_Type) Enum() *SqlTimeColumnType_Type {
	p := new(SqlTimeColumnType_Type)
	*p = x
	return p
}

func (x SqlTimeColumnType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlTimeColumnType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_model_flink_flink_table_proto_enumTypes[0].Descriptor()
}

func (SqlTimeColumnType_Type) Type() protoreflect.EnumType {
	return &file_proto_types_model_flink_flink_table_proto_enumTypes[0]
}

func (x SqlTimeColumnType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlTimeColumnType_Type.Descriptor instead.
func (SqlTimeColumnType_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{1, 0}
}

// SqlColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column"`
	// The column type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	// The column comment
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment"`
	// if it is primary key column, one of true/false
	PrimaryKey string `protobuf:"bytes,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key"`
	// the column type length
	Length string `protobuf:"bytes,5,opt,name=Length,proto3" json:"length"`
}

func (x *SqlColumnType) Reset() {
	*x = SqlColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlColumnType) ProtoMessage() {}

func (x *SqlColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlColumnType.ProtoReflect.Descriptor instead.
func (*SqlColumnType) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{0}
}

func (x *SqlColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlColumnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlColumnType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SqlColumnType) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SqlColumnType) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

// SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlTimeColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column"`
	// The column type. oneof proctime/watermark
	Type SqlTimeColumnType_Type `protobuf:"varint,2,opt,name=type,proto3,enum=flink.SqlTimeColumnType_Type" json:"type"`
	// The column expression
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression"`
}

func (x *SqlTimeColumnType) Reset() {
	*x = SqlTimeColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimeColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimeColumnType) ProtoMessage() {}

func (x *SqlTimeColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimeColumnType.ProtoReflect.Descriptor instead.
func (*SqlTimeColumnType) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{1}
}

func (x *SqlTimeColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlTimeColumnType) GetType() SqlTimeColumnType_Type {
	if x != nil {
		return x.Type
	}
	return SqlTimeColumnType_TypeUnset
}

func (x *SqlTimeColumnType) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// ConnectorOption used as request parameters for RPC and HTTP(based on Body)
type ConnectorOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The config name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// The config value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *ConnectorOption) Reset() {
	*x = ConnectorOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorOption) ProtoMessage() {}

func (x *ConnectorOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorOption.ProtoReflect.Descriptor instead.
func (*ConnectorOption) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectorOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectorOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
type MySQLTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName,proto3" json:"mapping_name"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *MySQLTable) Reset() {
	*x = MySQLTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLTable) ProtoMessage() {}

func (x *MySQLTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLTable.ProtoReflect.Descriptor instead.
func (*MySQLTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{3}
}

func (x *MySQLTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *MySQLTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *MySQLTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *MySQLTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName,proto3" json:"mapping_name"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *PostgreSQLTable) Reset() {
	*x = PostgreSQLTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTable) ProtoMessage() {}

func (x *PostgreSQLTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTable.ProtoReflect.Descriptor instead.
func (*PostgreSQLTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{4}
}

func (x *PostgreSQLTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *PostgreSQLTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *PostgreSQLTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *PostgreSQLTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
type ClickHouseTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mapping_name"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *ClickHouseTable) Reset() {
	*x = ClickHouseTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseTable) ProtoMessage() {}

func (x *ClickHouseTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseTable.ProtoReflect.Descriptor instead.
func (*ClickHouseTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{5}
}

func (x *ClickHouseTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *ClickHouseTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *ClickHouseTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *ClickHouseTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
type HBaseTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName,proto3" json:"mapping_name"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *HBaseTable) Reset() {
	*x = HBaseTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseTable) ProtoMessage() {}

func (x *HBaseTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseTable.ProtoReflect.Descriptor instead.
func (*HBaseTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{6}
}

func (x *HBaseTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HBaseTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *HBaseTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *HBaseTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
type HDFSTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *HDFSTable) Reset() {
	*x = HDFSTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSTable) ProtoMessage() {}

func (x *HDFSTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSTable.ProtoReflect.Descriptor instead.
func (*HDFSTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{7}
}

func (x *HDFSTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HDFSTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *HDFSTable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HDFSTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *HDFSTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// S3TableDefine used as request parameters for RPC and HTTP(based on Body)
type S3Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *S3Table) Reset() {
	*x = S3Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Table) ProtoMessage() {}

func (x *S3Table) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Table.ProtoReflect.Descriptor instead.
func (*S3Table) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{8}
}

func (x *S3Table) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *S3Table) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *S3Table) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *S3Table) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *S3Table) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
type FtpTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *FtpTable) Reset() {
	*x = FtpTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpTable) ProtoMessage() {}

func (x *FtpTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpTable.ProtoReflect.Descriptor instead.
func (*FtpTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{9}
}

func (x *FtpTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *FtpTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FtpTable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FtpTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *FtpTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
type KafkaTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format"`
	// the data path
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *KafkaTable) Reset() {
	*x = KafkaTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTable) ProtoMessage() {}

func (x *KafkaTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTable.ProtoReflect.Descriptor instead.
func (*KafkaTable) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{10}
}

func (x *KafkaTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *KafkaTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *KafkaTable) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *KafkaTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Table Info.
	Mysql *MySQLTable `protobuf:"bytes,1,opt,name=mysql,proto3" json:"mysql"`
	// PostgreSQL Table Info.
	Postgresql *PostgreSQLTable `protobuf:"bytes,2,opt,name=postgresql,proto3" json:"postgresql"`
	// ClickHouse Table Info.
	Clickhouse *ClickHouseTable `protobuf:"bytes,3,opt,name=clickhouse,proto3" json:"clickhouse"`
	// Hbase Table Info.
	Hbase *HBaseTable `protobuf:"bytes,4,opt,name=Hbase,proto3" json:"hbase"`
	// Kafka Table Info.
	Kafka *KafkaTable `protobuf:"bytes,5,opt,name=kafka,proto3" json:"kafka"`
	// S3 Table Info.
	S3 *S3Table `protobuf:"bytes,6,opt,name=s3,proto3" json:"s3"`
	// Ftp Table Info.
	Ftp *FtpTable `protobuf:"bytes,7,opt,name=ftp,proto3" json:"ftp"`
	// HDFS Table Info.
	Hdfs *HDFSTable `protobuf:"bytes,8,opt,name=hdfs,proto3" json:"hdfs"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_table_proto_rawDescGZIP(), []int{11}
}

func (x *TableSchema) GetMysql() *MySQLTable {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *TableSchema) GetPostgresql() *PostgreSQLTable {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *TableSchema) GetClickhouse() *ClickHouseTable {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *TableSchema) GetHbase() *HBaseTable {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *TableSchema) GetKafka() *KafkaTable {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *TableSchema) GetS3() *S3Table {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *TableSchema) GetFtp() *FtpTable {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *TableSchema) GetHdfs() *HDFSTable {
	if x != nil {
		return x.Hdfs
	}
	return nil
}

var File_proto_types_model_flink_flink_table_proto protoreflect.FileDescriptor

var file_proto_types_model_flink_flink_table_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a,
	0x0d, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2,
	0x01, 0x04, 0x98, 0x02, 0x80, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98,
	0x02, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x0a, 0x52, 0x06, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe2,
	0xdf, 0x1f, 0x09, 0x12, 0x07, 0xda, 0x01, 0x04, 0x40, 0x01, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01,
	0x04, 0x98, 0x02, 0x80, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01,
	0x04, 0x98, 0x02, 0x80, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09,
	0x12, 0x07, 0xc2, 0x01, 0x04, 0x98, 0x02, 0x80, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x0b,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22,
	0x91, 0x02, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2f,
	0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98,
	0x02, 0x40, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04,
	0x02, 0x0a, 0x00, 0x22, 0x90, 0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06,
	0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x48, 0x42, 0x61, 0x73, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x2f, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x98, 0x02, 0x40, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa3, 0x02, 0x0a, 0x09, 0x48, 0x44, 0x46, 0x53, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x24,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0x98, 0x02, 0x80,
	0x08, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xa1, 0x02, 0x0a, 0x07,
	0x53, 0x33, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01,
	0x04, 0x98, 0x02, 0x80, 0x08, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22,
	0xa2, 0x02, 0x0a, 0x08, 0x46, 0x74, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f,
	0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0x98, 0x02, 0x80, 0x08, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2,
	0x04, 0x02, 0x0a, 0x00, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x24,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x40, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xc2, 0x01, 0x04, 0x98, 0x02,
	0x80, 0x08, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xe9, 0x02,
	0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x0a,
	0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12, 0x36,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x48, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x1e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x33, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x02, 0x73, 0x33, 0x12, 0x21, 0x0a, 0x03, 0x66, 0x74, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x74,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x66, 0x74, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x68,
	0x64, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x48, 0x44, 0x46, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x68, 0x64, 0x66,
	0x73, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x42, 0x77, 0x0a, 0x2a, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x62, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0c, 0x50, 0x42, 0x46, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x00, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_flink_flink_table_proto_rawDescOnce sync.Once
	file_proto_types_model_flink_flink_table_proto_rawDescData = file_proto_types_model_flink_flink_table_proto_rawDesc
)

func file_proto_types_model_flink_flink_table_proto_rawDescGZIP() []byte {
	file_proto_types_model_flink_flink_table_proto_rawDescOnce.Do(func() {
		file_proto_types_model_flink_flink_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_flink_flink_table_proto_rawDescData)
	})
	return file_proto_types_model_flink_flink_table_proto_rawDescData
}

var file_proto_types_model_flink_flink_table_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_types_model_flink_flink_table_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_types_model_flink_flink_table_proto_goTypes = []interface{}{
	(SqlTimeColumnType_Type)(0), // 0: flink.SqlTimeColumnType.Type
	(*SqlColumnType)(nil),       // 1: flink.SqlColumnType
	(*SqlTimeColumnType)(nil),   // 2: flink.SqlTimeColumnType
	(*ConnectorOption)(nil),     // 3: flink.ConnectorOption
	(*MySQLTable)(nil),          // 4: flink.MySQLTable
	(*PostgreSQLTable)(nil),     // 5: flink.PostgreSQLTable
	(*ClickHouseTable)(nil),     // 6: flink.ClickHouseTable
	(*HBaseTable)(nil),          // 7: flink.HBaseTable
	(*HDFSTable)(nil),           // 8: flink.HDFSTable
	(*S3Table)(nil),             // 9: flink.S3Table
	(*FtpTable)(nil),            // 10: flink.FtpTable
	(*KafkaTable)(nil),          // 11: flink.KafkaTable
	(*TableSchema)(nil),         // 12: flink.TableSchema
}
var file_proto_types_model_flink_flink_table_proto_depIdxs = []int32{
	0,  // 0: flink.SqlTimeColumnType.type:type_name -> flink.SqlTimeColumnType.Type
	1,  // 1: flink.MySQLTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 2: flink.MySQLTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 3: flink.MySQLTable.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 4: flink.PostgreSQLTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 5: flink.PostgreSQLTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 6: flink.PostgreSQLTable.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 7: flink.ClickHouseTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 8: flink.ClickHouseTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 9: flink.ClickHouseTable.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 10: flink.HBaseTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 11: flink.HBaseTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 12: flink.HBaseTable.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 13: flink.HDFSTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 14: flink.HDFSTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 15: flink.HDFSTable.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 16: flink.S3Table.sql_column:type_name -> flink.SqlColumnType
	3,  // 17: flink.S3Table.connector_options:type_name -> flink.ConnectorOption
	2,  // 18: flink.S3Table.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 19: flink.FtpTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 20: flink.FtpTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 21: flink.FtpTable.time_column:type_name -> flink.SqlTimeColumnType
	1,  // 22: flink.KafkaTable.sql_column:type_name -> flink.SqlColumnType
	3,  // 23: flink.KafkaTable.connector_options:type_name -> flink.ConnectorOption
	2,  // 24: flink.KafkaTable.time_column:type_name -> flink.SqlTimeColumnType
	4,  // 25: flink.TableSchema.mysql:type_name -> flink.MySQLTable
	5,  // 26: flink.TableSchema.postgresql:type_name -> flink.PostgreSQLTable
	6,  // 27: flink.TableSchema.clickhouse:type_name -> flink.ClickHouseTable
	7,  // 28: flink.TableSchema.Hbase:type_name -> flink.HBaseTable
	11, // 29: flink.TableSchema.kafka:type_name -> flink.KafkaTable
	9,  // 30: flink.TableSchema.s3:type_name -> flink.S3Table
	10, // 31: flink.TableSchema.ftp:type_name -> flink.FtpTable
	8,  // 32: flink.TableSchema.hdfs:type_name -> flink.HDFSTable
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_proto_types_model_flink_flink_table_proto_init() }
func file_proto_types_model_flink_flink_table_proto_init() {
	if File_proto_types_model_flink_flink_table_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_flink_flink_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimeColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_flink_flink_table_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_flink_flink_table_proto_goTypes,
		DependencyIndexes: file_proto_types_model_flink_flink_table_proto_depIdxs,
		EnumInfos:         file_proto_types_model_flink_flink_table_proto_enumTypes,
		MessageInfos:      file_proto_types_model_flink_flink_table_proto_msgTypes,
	}.Build()
	File_proto_types_model_flink_flink_table_proto = out.File
	file_proto_types_model_flink_flink_table_proto_rawDesc = nil
	file_proto_types_model_flink_flink_table_proto_goTypes = nil
	file_proto_types_model_flink_flink_table_proto_depIdxs = nil
}
