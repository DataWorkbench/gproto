// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/model/flink/flink_operator.proto

package pbflink

import (
	_ "github.com/yu31/proto-go-plugin/pkg/pb/validatorpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ColumnAs
type ColumnAs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	// func
	Func string `protobuf:"bytes,2,opt,name=func,proto3" json:"func"`
	// Type
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	// Column AS
	As string `protobuf:"bytes,5,opt,name=as,proto3" json:"as"`
}

func (x *ColumnAs) Reset() {
	*x = ColumnAs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnAs) ProtoMessage() {}

func (x *ColumnAs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnAs.ProtoReflect.Descriptor instead.
func (*ColumnAs) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnAs) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ColumnAs) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *ColumnAs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnAs) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

// DestOperatorProperty
type DestOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// insert into these columns
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns"`
	// tableid
	TableId string `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id"`
}

func (x *DestOperator) Reset() {
	*x = DestOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestOperator) ProtoMessage() {}

func (x *DestOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestOperator.ProtoReflect.Descriptor instead.
func (*DestOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{1}
}

func (x *DestOperator) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DestOperator) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

// ValuesOperatorProperty
type ValuesOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all rows.
	Rows []*ValuesOperator_ValuesType `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows"`
}

func (x *ValuesOperator) Reset() {
	*x = ValuesOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesOperator) ProtoMessage() {}

func (x *ValuesOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesOperator.ProtoReflect.Descriptor instead.
func (*ValuesOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{2}
}

func (x *ValuesOperator) GetRows() []*ValuesOperator_ValuesType {
	if x != nil {
		return x.Rows
	}
	return nil
}

// OrderByOperatorProperty
type OrderByOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OrderBy
	Column []*OrderByOperator_OrderByColumn `protobuf:"bytes,1,rep,name=column,proto3" json:"column"`
}

func (x *OrderByOperator) Reset() {
	*x = OrderByOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByOperator) ProtoMessage() {}

func (x *OrderByOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByOperator.ProtoReflect.Descriptor instead.
func (*OrderByOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{3}
}

func (x *OrderByOperator) GetColumn() []*OrderByOperator_OrderByColumn {
	if x != nil {
		return x.Column
	}
	return nil
}

// LimitOperatorProperty
type LimitOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit"`
}

func (x *LimitOperator) Reset() {
	*x = LimitOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOperator) ProtoMessage() {}

func (x *LimitOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOperator.ProtoReflect.Descriptor instead.
func (*LimitOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{4}
}

func (x *LimitOperator) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// OffsetOperatorProperty
type OffsetOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
}

func (x *OffsetOperator) Reset() {
	*x = OffsetOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetOperator) ProtoMessage() {}

func (x *OffsetOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetOperator.ProtoReflect.Descriptor instead.
func (*OffsetOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{5}
}

func (x *OffsetOperator) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// FetchOperatorProperty
type FetchOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Fetch int32 `protobuf:"varint,1,opt,name=fetch,proto3" json:"fetch"`
}

func (x *FetchOperator) Reset() {
	*x = FetchOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOperator) ProtoMessage() {}

func (x *FetchOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOperator.ProtoReflect.Descriptor instead.
func (*FetchOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{6}
}

func (x *FetchOperator) GetFetch() int32 {
	if x != nil {
		return x.Fetch
	}
	return 0
}

// UnionOperatorProperty
type UnionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bool true or false
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all"`
}

func (x *UnionOperator) Reset() {
	*x = UnionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionOperator) ProtoMessage() {}

func (x *UnionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionOperator.ProtoReflect.Descriptor instead.
func (*UnionOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{7}
}

func (x *UnionOperator) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

// GroupByOperatorProperty
type GroupByOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Groupby column
	GroupBy []string `protobuf:"bytes,1,rep,name=group_by,json=groupBy,proto3" json:"group_by"`
}

func (x *GroupByOperator) Reset() {
	*x = GroupByOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByOperator) ProtoMessage() {}

func (x *GroupByOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByOperator.ProtoReflect.Descriptor instead.
func (*GroupByOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{8}
}

func (x *GroupByOperator) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

// HavingOperatorProperty
type HavingOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// having code
	Having string `protobuf:"bytes,1,opt,name=having,proto3" json:"having"`
}

func (x *HavingOperator) Reset() {
	*x = HavingOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HavingOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HavingOperator) ProtoMessage() {}

func (x *HavingOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HavingOperator.ProtoReflect.Descriptor instead.
func (*HavingOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{9}
}

func (x *HavingOperator) GetHaving() string {
	if x != nil {
		return x.Having
	}
	return ""
}

// ConstOperatorProperty
type ConstOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table name
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,2,rep,name=column,proto3" json:"column" binding:"-"`
}

func (x *ConstOperator) Reset() {
	*x = ConstOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstOperator) ProtoMessage() {}

func (x *ConstOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstOperator.ProtoReflect.Descriptor instead.
func (*ConstOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{10}
}

func (x *ConstOperator) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ConstOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

// SourceOperatorProperty
type SourceOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableid
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	// table name
	TableAs string `protobuf:"bytes,2,opt,name=table_as,json=tableAs,proto3" json:"table_as"`
	// distinct or all, oneof ''(empty string) 'distinct'
	Distinct string `protobuf:"bytes,3,opt,name=distinct,proto3" json:"distinct"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column"`
	// column define.
	CustomColumn []*ColumnAs `protobuf:"bytes,5,rep,name=custom_column,json=customColumn,proto3" json:"custom_column"`
	// column define.
	TimeColumn []*ColumnAs `protobuf:"bytes,6,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *SourceOperator) Reset() {
	*x = SourceOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceOperator) ProtoMessage() {}

func (x *SourceOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceOperator.ProtoReflect.Descriptor instead.
func (*SourceOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{11}
}

func (x *SourceOperator) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *SourceOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *SourceOperator) GetDistinct() string {
	if x != nil {
		return x.Distinct
	}
	return ""
}

func (x *SourceOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *SourceOperator) GetCustomColumn() []*ColumnAs {
	if x != nil {
		return x.CustomColumn
	}
	return nil
}

func (x *SourceOperator) GetTimeColumn() []*ColumnAs {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// DimensionOperatorProperty
type DimensionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableid
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	// table name
	TableAs string `protobuf:"bytes,2,opt,name=table_as,json=tableAs,proto3" json:"table_as"`
	// distinct or all, oneof 'all' 'distinct'
	Distinct string `protobuf:"bytes,3,opt,name=distinct,proto3" json:"distinct"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column"`
	// column define.
	CustomColumn []*ColumnAs `protobuf:"bytes,5,rep,name=custom_column,json=customColumn,proto3" json:"custom_column"`
	// column define.
	TimeColumn *ColumnAs `protobuf:"bytes,6,opt,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *DimensionOperator) Reset() {
	*x = DimensionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionOperator) ProtoMessage() {}

func (x *DimensionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionOperator.ProtoReflect.Descriptor instead.
func (*DimensionOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{12}
}

func (x *DimensionOperator) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *DimensionOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *DimensionOperator) GetDistinct() string {
	if x != nil {
		return x.Distinct
	}
	return ""
}

func (x *DimensionOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *DimensionOperator) GetCustomColumn() []*ColumnAs {
	if x != nil {
		return x.CustomColumn
	}
	return nil
}

func (x *DimensionOperator) GetTimeColumn() *ColumnAs {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// ExceptOperatorProperty
type ExceptOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExceptOperator) Reset() {
	*x = ExceptOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExceptOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptOperator) ProtoMessage() {}

func (x *ExceptOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptOperator.ProtoReflect.Descriptor instead.
func (*ExceptOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{13}
}

// IntersectOperatorProperty
type IntersectOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntersectOperator) Reset() {
	*x = IntersectOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectOperator) ProtoMessage() {}

func (x *IntersectOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectOperator.ProtoReflect.Descriptor instead.
func (*IntersectOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{14}
}

// FilterOperatorProperty
type FilterOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where eg: a.id = 10
	Where string `protobuf:"bytes,1,opt,name=where,proto3" json:"where"`
	// in: this is columnname
	In string `protobuf:"bytes,2,opt,name=in,proto3" json:"in"`
	// Exists: this is columnname
	Exists string `protobuf:"bytes,3,opt,name=exists,proto3" json:"exists"`
	// expression: if upstreamright is null.  eg: "1, 2, 3"
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression"`
}

func (x *FilterOperator) Reset() {
	*x = FilterOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperator) ProtoMessage() {}

func (x *FilterOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperator.ProtoReflect.Descriptor instead.
func (*FilterOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{15}
}

func (x *FilterOperator) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *FilterOperator) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

func (x *FilterOperator) GetExists() string {
	if x != nil {
		return x.Exists
	}
	return ""
}

func (x *FilterOperator) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// JoinOperatorProperty
type JoinOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
	Join string `protobuf:"bytes,1,opt,name=join,proto3" json:"join"`
	// Expression
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression"`
	// table name
	TableAs string `protobuf:"bytes,3,opt,name=table_as,json=tableAs,proto3" json:"table_as"`
	// table name
	TableAsRight string `protobuf:"bytes,4,opt,name=table_as_right,json=tableAsRight,proto3" json:"table_as_right"`
	// Args
	Args string `protobuf:"bytes,5,opt,name=args,proto3" json:"args"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,6,rep,name=column,proto3" json:"column"`
	// column define.
	GenerateColumn []*ColumnAs `protobuf:"bytes,7,rep,name=generate_column,json=generateColumn,proto3" json:"generate_column"`
}

func (x *JoinOperator) Reset() {
	*x = JoinOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinOperator) ProtoMessage() {}

func (x *JoinOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinOperator.ProtoReflect.Descriptor instead.
func (*JoinOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{16}
}

func (x *JoinOperator) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *JoinOperator) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *JoinOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *JoinOperator) GetTableAsRight() string {
	if x != nil {
		return x.TableAsRight
	}
	return ""
}

func (x *JoinOperator) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *JoinOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *JoinOperator) GetGenerateColumn() []*ColumnAs {
	if x != nil {
		return x.GenerateColumn
	}
	return nil
}

// UDTFOperatorProperty
type UDTFOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// udfid in udfmanager
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id"`
	// Args
	Args string `protobuf:"bytes,2,opt,name=args,proto3" json:"args"`
	// table name
	TableAs string `protobuf:"bytes,3,opt,name=table_as,json=tableAs,proto3" json:"table_as"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column"`
	// selectcolumn define.
	SelectColumn []*ColumnAs `protobuf:"bytes,5,rep,name=select_column,json=selectColumn,proto3" json:"select_column"`
}

func (x *UDTFOperator) Reset() {
	*x = UDTFOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTFOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTFOperator) ProtoMessage() {}

func (x *UDTFOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTFOperator.ProtoReflect.Descriptor instead.
func (*UDTFOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{17}
}

func (x *UDTFOperator) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *UDTFOperator) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *UDTFOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *UDTFOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *UDTFOperator) GetSelectColumn() []*ColumnAs {
	if x != nil {
		return x.SelectColumn
	}
	return nil
}

// UDTTFOperatorProperty
type UDTTFOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// udfid in udfmanager
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id"`
	// Args
	Args string `protobuf:"bytes,2,opt,name=args,proto3" json:"args"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,3,rep,name=column,proto3" json:"column"`
}

func (x *UDTTFOperator) Reset() {
	*x = UDTTFOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTTFOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTTFOperator) ProtoMessage() {}

func (x *UDTTFOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTTFOperator.ProtoReflect.Descriptor instead.
func (*UDTTFOperator) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{18}
}

func (x *UDTTFOperator) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *UDTTFOperator) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *UDTTFOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

// FlinkOperatorProperty
type OperatorProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source
	Source *SourceOperator `protobuf:"bytes,1,opt,name=source,proto3" json:"source"`
	// dest node
	Dest *DestOperator `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest"`
	// values node
	Values *ValuesOperator `protobuf:"bytes,3,opt,name=values,proto3" json:"values"`
	// OrderBy
	OrderBy *OrderByOperator `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	// Limit
	Limit *LimitOperator `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit"`
	// Offset
	Offset *OffsetOperator `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	// Fetch
	Fetch *FetchOperator `protobuf:"bytes,7,opt,name=fetch,proto3" json:"fetch"`
	// Union
	Union *UnionOperator `protobuf:"bytes,8,opt,name=union,proto3" json:"union"`
	// GroupBy
	GroupBy *GroupByOperator `protobuf:"bytes,9,opt,name=group_by,json=groupBy,proto3" json:"group_by"`
	// Having
	Having *HavingOperator `protobuf:"bytes,10,opt,name=having,proto3" json:"having"`
	// Const
	Const *ConstOperator `protobuf:"bytes,11,opt,name=const,proto3" json:"const"`
	// Dimension
	Dimension *DimensionOperator `protobuf:"bytes,12,opt,name=dimension,proto3" json:"dimension"`
	// Except
	Except *ExceptOperator `protobuf:"bytes,13,opt,name=except,proto3" json:"except"`
	// Intersect
	Intersect *IntersectOperator `protobuf:"bytes,14,opt,name=intersect,proto3" json:"intersect"`
	// Filter
	Filter *FilterOperator `protobuf:"bytes,15,opt,name=filter,proto3" json:"filter"`
	// UDTF
	Udtf *UDTFOperator `protobuf:"bytes,16,opt,name=udtf,proto3" json:"udtf"`
	// UDTTF
	Udttf *UDTTFOperator `protobuf:"bytes,17,opt,name=udttf,proto3" json:"udttf"`
	// Join
	Join *JoinOperator `protobuf:"bytes,18,opt,name=join,proto3" json:"join"`
}

func (x *OperatorProperty) Reset() {
	*x = OperatorProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorProperty) ProtoMessage() {}

func (x *OperatorProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorProperty.ProtoReflect.Descriptor instead.
func (*OperatorProperty) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{19}
}

func (x *OperatorProperty) GetSource() *SourceOperator {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OperatorProperty) GetDest() *DestOperator {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *OperatorProperty) GetValues() *ValuesOperator {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *OperatorProperty) GetOrderBy() *OrderByOperator {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *OperatorProperty) GetLimit() *LimitOperator {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *OperatorProperty) GetOffset() *OffsetOperator {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *OperatorProperty) GetFetch() *FetchOperator {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *OperatorProperty) GetUnion() *UnionOperator {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *OperatorProperty) GetGroupBy() *GroupByOperator {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *OperatorProperty) GetHaving() *HavingOperator {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *OperatorProperty) GetConst() *ConstOperator {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *OperatorProperty) GetDimension() *DimensionOperator {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *OperatorProperty) GetExcept() *ExceptOperator {
	if x != nil {
		return x.Except
	}
	return nil
}

func (x *OperatorProperty) GetIntersect() *IntersectOperator {
	if x != nil {
		return x.Intersect
	}
	return nil
}

func (x *OperatorProperty) GetFilter() *FilterOperator {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *OperatorProperty) GetUdtf() *UDTFOperator {
	if x != nil {
		return x.Udtf
	}
	return nil
}

func (x *OperatorProperty) GetUdttf() *UDTTFOperator {
	if x != nil {
		return x.Udttf
	}
	return nil
}

func (x *OperatorProperty) GetJoin() *JoinOperator {
	if x != nil {
		return x.Join
	}
	return nil
}

type ValuesOperator_ValuesType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is one row.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values"`
}

func (x *ValuesOperator_ValuesType) Reset() {
	*x = ValuesOperator_ValuesType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesOperator_ValuesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesOperator_ValuesType) ProtoMessage() {}

func (x *ValuesOperator_ValuesType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesOperator_ValuesType.ProtoReflect.Descriptor instead.
func (*ValuesOperator_ValuesType) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ValuesOperator_ValuesType) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type OrderByOperator_OrderByColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	// order oneof 'asc' 'desc'
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order"`
}

func (x *OrderByOperator_OrderByColumn) Reset() {
	*x = OrderByOperator_OrderByColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByOperator_OrderByColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByOperator_OrderByColumn) ProtoMessage() {}

func (x *OrderByOperator_OrderByColumn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_model_flink_flink_operator_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByOperator_OrderByColumn.ProtoReflect.Descriptor instead.
func (*OrderByOperator_OrderByColumn) Descriptor() ([]byte, []int) {
	return file_proto_types_model_flink_flink_operator_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OrderByOperator_OrderByColumn) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OrderByOperator_OrderByColumn) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

var File_proto_types_model_flink_flink_operator_proto protoreflect.FileDescriptor

var file_proto_types_model_flink_flink_operator_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a,
	0x08, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09,
	0xc2, 0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40, 0x52,
	0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02,
	0x00, 0x98, 0x02, 0x80, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x02, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40, 0x52, 0x02, 0x61, 0x73, 0x22, 0x62, 0x0a, 0x0c,
	0x44, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xea, 0x01, 0x06, 0x30, 0x00, 0x38, 0xa0, 0x9c, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x30, 0x00,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x1a, 0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x30,
	0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01, 0x05, 0x30, 0x00,
	0x38, 0x81, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x5d, 0x0a, 0x0d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x25, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00,
	0x98, 0x02, 0x40, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x0d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09,
	0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x37, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38,
	0x64, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12,
	0x07, 0xb2, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x22,
	0x27, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x3c, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01, 0x05, 0x30, 0x00, 0x38, 0x80, 0x08, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x3a, 0x0a, 0x0e, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a,
	0xc2, 0x01, 0x07, 0x80, 0x02, 0x00, 0x88, 0x02, 0x80, 0x08, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00,
	0x98, 0x02, 0x40, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x0e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02,
	0x00, 0x98, 0x02, 0x40, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00,
	0x98, 0x02, 0x40, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x2b, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x10, 0x0a, 0x0e,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x13,
	0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07,
	0x90, 0x02, 0x00, 0x98, 0x02, 0x80, 0x08, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c,
	0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02, 0x80, 0x08, 0x52, 0x02, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02,
	0x80, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02, 0x80, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x03, 0x0a,
	0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6c, 0x0a,
	0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xe2, 0xdf, 0x1f,
	0x54, 0x12, 0x52, 0xc2, 0x01, 0x4f, 0x4a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x4a, 0x09, 0x4c, 0x45,
	0x46, 0x54, 0x20, 0x4a, 0x4f, 0x49, 0x4e, 0x4a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x4a,
	0x4f, 0x49, 0x4e, 0x4a, 0x0f, 0x46, 0x55, 0x4c, 0x4c, 0x20, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x20,
	0x4a, 0x4f, 0x49, 0x4e, 0x4a, 0x0a, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x20, 0x4a, 0x4f, 0x49, 0x4e,
	0x4a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x20, 0x4a, 0x4f, 0x49, 0x4e, 0x90,
	0x02, 0x00, 0x98, 0x02, 0x40, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02, 0x80,
	0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00, 0x98, 0x02, 0x40,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02, 0x00, 0x98,
	0x02, 0x40, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x24, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02, 0x80, 0x08,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x55, 0x44, 0x54, 0x46, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xf0, 0x01, 0x14, 0x52, 0x05, 0x75, 0x64, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12,
	0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02, 0x80, 0x08, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x90, 0x02,
	0x00, 0x98, 0x02, 0x40, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x0d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x55, 0x44, 0x54,
	0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x75, 0x64,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x05, 0x75, 0x64, 0x66, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2,
	0xdf, 0x1f, 0x0c, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x90, 0x02, 0x00, 0x98, 0x02, 0x80, 0x08, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xc5, 0x07, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12,
	0x33, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04,
	0x75, 0x64, 0x74, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x55, 0x44, 0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x75, 0x64, 0x74, 0x66, 0x12, 0x30, 0x0a, 0x05, 0x75,
	0x64, 0x74, 0x74, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x55, 0x44, 0x54, 0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x75, 0x64, 0x74, 0x74, 0x66, 0x12, 0x2d, 0x0a,
	0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x42, 0x7a, 0x0a, 0x2a,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x62, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0f, 0x50, 0x42, 0x46, 0x6c,
	0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x00, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x62, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_model_flink_flink_operator_proto_rawDescOnce sync.Once
	file_proto_types_model_flink_flink_operator_proto_rawDescData = file_proto_types_model_flink_flink_operator_proto_rawDesc
)

func file_proto_types_model_flink_flink_operator_proto_rawDescGZIP() []byte {
	file_proto_types_model_flink_flink_operator_proto_rawDescOnce.Do(func() {
		file_proto_types_model_flink_flink_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_model_flink_flink_operator_proto_rawDescData)
	})
	return file_proto_types_model_flink_flink_operator_proto_rawDescData
}

var file_proto_types_model_flink_flink_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_types_model_flink_flink_operator_proto_goTypes = []interface{}{
	(*ColumnAs)(nil),                      // 0: flink.ColumnAs
	(*DestOperator)(nil),                  // 1: flink.DestOperator
	(*ValuesOperator)(nil),                // 2: flink.ValuesOperator
	(*OrderByOperator)(nil),               // 3: flink.OrderByOperator
	(*LimitOperator)(nil),                 // 4: flink.LimitOperator
	(*OffsetOperator)(nil),                // 5: flink.OffsetOperator
	(*FetchOperator)(nil),                 // 6: flink.FetchOperator
	(*UnionOperator)(nil),                 // 7: flink.UnionOperator
	(*GroupByOperator)(nil),               // 8: flink.GroupByOperator
	(*HavingOperator)(nil),                // 9: flink.HavingOperator
	(*ConstOperator)(nil),                 // 10: flink.ConstOperator
	(*SourceOperator)(nil),                // 11: flink.SourceOperator
	(*DimensionOperator)(nil),             // 12: flink.DimensionOperator
	(*ExceptOperator)(nil),                // 13: flink.ExceptOperator
	(*IntersectOperator)(nil),             // 14: flink.IntersectOperator
	(*FilterOperator)(nil),                // 15: flink.FilterOperator
	(*JoinOperator)(nil),                  // 16: flink.JoinOperator
	(*UDTFOperator)(nil),                  // 17: flink.UDTFOperator
	(*UDTTFOperator)(nil),                 // 18: flink.UDTTFOperator
	(*OperatorProperty)(nil),              // 19: flink.OperatorProperty
	(*ValuesOperator_ValuesType)(nil),     // 20: flink.ValuesOperator.ValuesType
	(*OrderByOperator_OrderByColumn)(nil), // 21: flink.OrderByOperator.OrderByColumn
}
var file_proto_types_model_flink_flink_operator_proto_depIdxs = []int32{
	20, // 0: flink.ValuesOperator.rows:type_name -> flink.ValuesOperator.ValuesType
	21, // 1: flink.OrderByOperator.column:type_name -> flink.OrderByOperator.OrderByColumn
	0,  // 2: flink.ConstOperator.column:type_name -> flink.ColumnAs
	0,  // 3: flink.SourceOperator.column:type_name -> flink.ColumnAs
	0,  // 4: flink.SourceOperator.custom_column:type_name -> flink.ColumnAs
	0,  // 5: flink.SourceOperator.time_column:type_name -> flink.ColumnAs
	0,  // 6: flink.DimensionOperator.column:type_name -> flink.ColumnAs
	0,  // 7: flink.DimensionOperator.custom_column:type_name -> flink.ColumnAs
	0,  // 8: flink.DimensionOperator.time_column:type_name -> flink.ColumnAs
	0,  // 9: flink.JoinOperator.column:type_name -> flink.ColumnAs
	0,  // 10: flink.JoinOperator.generate_column:type_name -> flink.ColumnAs
	0,  // 11: flink.UDTFOperator.column:type_name -> flink.ColumnAs
	0,  // 12: flink.UDTFOperator.select_column:type_name -> flink.ColumnAs
	0,  // 13: flink.UDTTFOperator.column:type_name -> flink.ColumnAs
	11, // 14: flink.OperatorProperty.source:type_name -> flink.SourceOperator
	1,  // 15: flink.OperatorProperty.dest:type_name -> flink.DestOperator
	2,  // 16: flink.OperatorProperty.values:type_name -> flink.ValuesOperator
	3,  // 17: flink.OperatorProperty.order_by:type_name -> flink.OrderByOperator
	4,  // 18: flink.OperatorProperty.limit:type_name -> flink.LimitOperator
	5,  // 19: flink.OperatorProperty.offset:type_name -> flink.OffsetOperator
	6,  // 20: flink.OperatorProperty.fetch:type_name -> flink.FetchOperator
	7,  // 21: flink.OperatorProperty.union:type_name -> flink.UnionOperator
	8,  // 22: flink.OperatorProperty.group_by:type_name -> flink.GroupByOperator
	9,  // 23: flink.OperatorProperty.having:type_name -> flink.HavingOperator
	10, // 24: flink.OperatorProperty.const:type_name -> flink.ConstOperator
	12, // 25: flink.OperatorProperty.dimension:type_name -> flink.DimensionOperator
	13, // 26: flink.OperatorProperty.except:type_name -> flink.ExceptOperator
	14, // 27: flink.OperatorProperty.intersect:type_name -> flink.IntersectOperator
	15, // 28: flink.OperatorProperty.filter:type_name -> flink.FilterOperator
	17, // 29: flink.OperatorProperty.udtf:type_name -> flink.UDTFOperator
	18, // 30: flink.OperatorProperty.udttf:type_name -> flink.UDTTFOperator
	16, // 31: flink.OperatorProperty.join:type_name -> flink.JoinOperator
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_proto_types_model_flink_flink_operator_proto_init() }
func file_proto_types_model_flink_flink_operator_proto_init() {
	if File_proto_types_model_flink_flink_operator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_model_flink_flink_operator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnAs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HavingOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExceptOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTFOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTTFOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesOperator_ValuesType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_model_flink_flink_operator_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByOperator_OrderByColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_model_flink_flink_operator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_model_flink_flink_operator_proto_goTypes,
		DependencyIndexes: file_proto_types_model_flink_flink_operator_proto_depIdxs,
		MessageInfos:      file_proto_types_model_flink_flink_operator_proto_msgTypes,
	}.Build()
	File_proto_types_model_flink_flink_operator_proto = out.File
	file_proto_types_model_flink_flink_operator_proto_rawDesc = nil
	file_proto_types_model_flink_flink_operator_proto_goTypes = nil
	file_proto_types_model_flink_flink_operator_proto_depIdxs = nil
}
