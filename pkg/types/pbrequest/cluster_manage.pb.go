// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/types/request/cluster_manage.proto

package pbrequest

import (
	pbmodel "github.com/DataWorkbench/gproto/pkg/types/pbmodel"
	pbflink "github.com/DataWorkbench/gproto/pkg/types/pbmodel/pbflink"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/defaultspb"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/validatorpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DescribeFlinkClusterAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DescribeFlinkClusterAPI) Reset() {
	*x = DescribeFlinkClusterAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlinkClusterAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlinkClusterAPI) ProtoMessage() {}

func (x *DescribeFlinkClusterAPI) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlinkClusterAPI.ProtoReflect.Descriptor instead.
func (*DescribeFlinkClusterAPI) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeFlinkClusterAPI) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DescribeFlinkClusterAPI) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit" form:"limit"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset" form:"offset"`
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="updated".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse" form:"reverse"`
	// Search with flink-cluster name; Not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search"`
	// Filter by Flink cluster status;  Not required.
	// Valid optional: 1 => "deleted" 2 => "running" 3 => "stopped" 4 => "starting" 5 => "exception" 6 => "Arrears"
	Status pbmodel.FlinkCluster_Status `protobuf:"varint,7,opt,name=status,proto3,enum=model.FlinkCluster_Status" json:"status" form:"status"`
	// Filter by Flink cluster name; valid if `search` is empty; Not required.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name" form:"name"`
	// Verbose indicates the verbosity level.
	// If the value greater than 1, The details of the associated information will be returned.
	Verbose int32 `protobuf:"varint,9,opt,name=verbose,proto3" json:"verbose" form:"verbose"`
}

func (x *ListFlinkClusters) Reset() {
	*x = ListFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlinkClusters) ProtoMessage() {}

func (x *ListFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlinkClusters.ProtoReflect.Descriptor instead.
func (*ListFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{1}
}

func (x *ListFlinkClusters) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListFlinkClusters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFlinkClusters) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListFlinkClusters) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListFlinkClusters) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListFlinkClusters) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListFlinkClusters) GetStatus() pbmodel.FlinkCluster_Status {
	if x != nil {
		return x.Status
	}
	return pbmodel.FlinkCluster_Status(0)
}

func (x *ListFlinkClusters) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListFlinkClusters) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

type DeleteFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of flink cluster id. Is required, Min 1, Max 100.
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids"`
}

func (x *DeleteFlinkClusters) Reset() {
	*x = DeleteFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlinkClusters) ProtoMessage() {}

func (x *DeleteFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlinkClusters.ProtoReflect.Descriptor instead.
func (*DeleteFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteFlinkClusters) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type StartFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of flink cluster id. Is required, Min 1, Max 100.
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids"`
}

func (x *StartFlinkClusters) Reset() {
	*x = StartFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFlinkClusters) ProtoMessage() {}

func (x *StartFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFlinkClusters.ProtoReflect.Descriptor instead.
func (*StartFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{3}
}

func (x *StartFlinkClusters) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type StopFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of flink cluster id. Is required, Min 1, Max 100.
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids"`
}

func (x *StopFlinkClusters) Reset() {
	*x = StopFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopFlinkClusters) ProtoMessage() {}

func (x *StopFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopFlinkClusters.ProtoReflect.Descriptor instead.
func (*StopFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{4}
}

func (x *StopFlinkClusters) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type CreateFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The user-id of created this cluster. It fixed to request user id.
	CreatedBy string `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by" swaggerignore:"true"`
	// Cluster Name. Is required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// Flink Version. Is required. Optional value: "flink-1.12.3-scala_2.11"
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version"`
	// resource config.
	//
	// Flink task number for TaskManager. Is required, Min 1, Max 24
	TaskNum int32 `protobuf:"varint,6,opt,name=task_num,json=taskNum,proto3" json:"task_num"`
	// Flink JobManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	JobCu float32 `protobuf:"fixed32,7,opt,name=job_cu,json=jobCu,proto3" json:"job_cu"`
	// Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	TaskCu float32 `protobuf:"fixed32,8,opt,name=task_cu,json=taskCu,proto3" json:"task_cu"`
	// Network config. Is required.
	NetworkId string `protobuf:"bytes,9,opt,name=network_id,json=networkId,proto3" json:"network_id"`
	// Config of host aliases. Not required.
	HostAliases *pbmodel.HostAliases `protobuf:"bytes,11,opt,name=host_aliases,json=hostAliases,proto3" json:"host_aliases"`
	// Flink config. Not required.
	Config *pbflink.FlinkConfig `protobuf:"bytes,10,opt,name=config,proto3" json:"config"`
}

func (x *CreateFlinkCluster) Reset() {
	*x = CreateFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlinkCluster) ProtoMessage() {}

func (x *CreateFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlinkCluster.ProtoReflect.Descriptor instead.
func (*CreateFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFlinkCluster) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateFlinkCluster) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateFlinkCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlinkCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateFlinkCluster) GetTaskNum() int32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *CreateFlinkCluster) GetJobCu() float32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *CreateFlinkCluster) GetTaskCu() float32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *CreateFlinkCluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateFlinkCluster) GetHostAliases() *pbmodel.HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *CreateFlinkCluster) GetConfig() *pbflink.FlinkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" swaggerignore:"true"`
	// The flink cluster id in HTTP Request-URI
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" uri:"cluster_id" swaggerignore:"true"`
	// Cluster Name. Is required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// resource config.
	//
	// Flink task number for TaskManager. Is required, Min 1, Max 24
	TaskNum int32 `protobuf:"varint,6,opt,name=task_num,json=taskNum,proto3" json:"task_num"`
	// Flink JobManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	JobCu float32 `protobuf:"fixed32,7,opt,name=job_cu,json=jobCu,proto3" json:"job_cu"`
	// Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	TaskCu float32 `protobuf:"fixed32,8,opt,name=task_cu,json=taskCu,proto3" json:"task_cu"`
	// Network config. Is required.
	NetworkId string `protobuf:"bytes,9,opt,name=network_id,json=networkId,proto3" json:"network_id"`
	// Config of host aliases. Not required.
	HostAliases *pbmodel.HostAliases `protobuf:"bytes,10,opt,name=host_aliases,json=hostAliases,proto3" json:"host_aliases"`
	// Flink config, Is required.
	Config *pbflink.FlinkConfig `protobuf:"bytes,11,opt,name=config,proto3" json:"config"`
}

func (x *UpdateFlinkCluster) Reset() {
	*x = UpdateFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlinkCluster) ProtoMessage() {}

func (x *UpdateFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlinkCluster.ProtoReflect.Descriptor instead.
func (*UpdateFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFlinkCluster) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateFlinkCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateFlinkCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFlinkCluster) GetTaskNum() int32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *UpdateFlinkCluster) GetJobCu() float32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *UpdateFlinkCluster) GetTaskCu() float32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *UpdateFlinkCluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UpdateFlinkCluster) GetHostAliases() *pbmodel.HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *UpdateFlinkCluster) GetConfig() *pbflink.FlinkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DescribeFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" uri:"cluster_id" swaggerignore:"true"`
}

func (x *DescribeFlinkCluster) Reset() {
	*x = DescribeFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_request_cluster_manage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlinkCluster) ProtoMessage() {}

func (x *DescribeFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_request_cluster_manage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlinkCluster.ProtoReflect.Descriptor instead.
func (*DescribeFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_types_request_cluster_manage_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeFlinkCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

var File_proto_types_request_cluster_manage_proto protoreflect.FileDescriptor

var file_proto_types_request_cluster_manage_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a,
	0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f,
	0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b, 0x73, 0x2d, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04, 0x77, 0x6b,
	0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xa2, 0xa1, 0x1f, 0x06,
	0xaa, 0x06, 0x03, 0x31, 0x30, 0x30, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x30,
	0x00, 0x38, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xe2, 0xdf, 0x1f, 0x23, 0x12, 0x21, 0xc2, 0x01, 0x1e, 0x4a, 0x00, 0x4a, 0x02, 0x69,
	0x64, 0x4a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x4a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xea, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xea, 0x01,
	0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x43, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xdf, 0x1f,
	0x09, 0x12, 0x07, 0xea, 0x01, 0x04, 0x30, 0x00, 0x38, 0x64, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x41, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a,
	0xc2, 0x01, 0x07, 0x80, 0x02, 0x01, 0x98, 0x02, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x12, 0x1c, 0xc2, 0x01, 0x19, 0x4a, 0x17, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2d, 0x31, 0x2e, 0x31, 0x32, 0x2e, 0x33, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x5f, 0x32, 0x2e, 0x31, 0x31, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x18, 0x40, 0x01, 0x52,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x63, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1b, 0xe2, 0xdf, 0x1f, 0x17, 0x12, 0x15,
	0xaa, 0x01, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x41, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xe0, 0x3f, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x43, 0x75, 0x12, 0x34, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1b, 0xe2,
	0xdf, 0x1f, 0x17, 0x12, 0x15, 0xaa, 0x01, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
	0x40, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x75, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbf, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x12, 0x0d, 0xc2, 0x01, 0x0a, 0xf0, 0x01, 0x14, 0xca, 0x02, 0x04,
	0x77, 0x6b, 0x73, 0x2d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x14, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x12, 0x0a,
	0xc2, 0x01, 0x07, 0x80, 0x02, 0x01, 0x98, 0x02, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x18, 0x40,
	0x01, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x63, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1b, 0xe2, 0xdf, 0x1f, 0x17,
	0x12, 0x15, 0xaa, 0x01, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x41, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x43, 0x75, 0x12, 0x34,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x1b, 0xe2, 0xdf, 0x1f, 0x17, 0x12, 0x15, 0xaa, 0x01, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x40, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x75, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46,
	0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0,
	0x01, 0x14, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x42, 0x75, 0x0a,
	0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x6d, 0x6e, 0x69, 0x73, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x16, 0x50, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x00, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_request_cluster_manage_proto_rawDescOnce sync.Once
	file_proto_types_request_cluster_manage_proto_rawDescData = file_proto_types_request_cluster_manage_proto_rawDesc
)

func file_proto_types_request_cluster_manage_proto_rawDescGZIP() []byte {
	file_proto_types_request_cluster_manage_proto_rawDescOnce.Do(func() {
		file_proto_types_request_cluster_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_request_cluster_manage_proto_rawDescData)
	})
	return file_proto_types_request_cluster_manage_proto_rawDescData
}

var file_proto_types_request_cluster_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_types_request_cluster_manage_proto_goTypes = []interface{}{
	(*DescribeFlinkClusterAPI)(nil),  // 0: request.DescribeFlinkClusterAPI
	(*ListFlinkClusters)(nil),        // 1: request.ListFlinkClusters
	(*DeleteFlinkClusters)(nil),      // 2: request.DeleteFlinkClusters
	(*StartFlinkClusters)(nil),       // 3: request.StartFlinkClusters
	(*StopFlinkClusters)(nil),        // 4: request.StopFlinkClusters
	(*CreateFlinkCluster)(nil),       // 5: request.CreateFlinkCluster
	(*UpdateFlinkCluster)(nil),       // 6: request.UpdateFlinkCluster
	(*DescribeFlinkCluster)(nil),     // 7: request.DescribeFlinkCluster
	(pbmodel.FlinkCluster_Status)(0), // 8: model.FlinkCluster.Status
	(*pbmodel.HostAliases)(nil),      // 9: model.HostAliases
	(*pbflink.FlinkConfig)(nil),      // 10: flink.FlinkConfig
}
var file_proto_types_request_cluster_manage_proto_depIdxs = []int32{
	8,  // 0: request.ListFlinkClusters.status:type_name -> model.FlinkCluster.Status
	9,  // 1: request.CreateFlinkCluster.host_aliases:type_name -> model.HostAliases
	10, // 2: request.CreateFlinkCluster.config:type_name -> flink.FlinkConfig
	9,  // 3: request.UpdateFlinkCluster.host_aliases:type_name -> model.HostAliases
	10, // 4: request.UpdateFlinkCluster.config:type_name -> flink.FlinkConfig
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_types_request_cluster_manage_proto_init() }
func file_proto_types_request_cluster_manage_proto_init() {
	if File_proto_types_request_cluster_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_request_cluster_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlinkClusterAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_request_cluster_manage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_request_cluster_manage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_request_cluster_manage_proto_goTypes,
		DependencyIndexes: file_proto_types_request_cluster_manage_proto_depIdxs,
		MessageInfos:      file_proto_types_request_cluster_manage_proto_msgTypes,
	}.Build()
	File_proto_types_request_cluster_manage_proto = out.File
	file_proto_types_request_cluster_manage_proto_rawDesc = nil
	file_proto_types_request_cluster_manage_proto_goTypes = nil
	file_proto_types_request_cluster_manage_proto_depIdxs = nil
}
