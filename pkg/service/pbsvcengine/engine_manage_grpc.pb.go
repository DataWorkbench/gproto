// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/enginemanager/engine_manage.proto

package pbsvcengine

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/pkg/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/pkg/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/pkg/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineClient interface {
	// DeleteWorkspaces for all resource of specified space ids.
	DeleteWorkspaces(ctx context.Context, in *pbrequest.DeleteWorkspaces, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// Flink Server
	// Interface for manage flink cluster
	ListAvailableFlinkVersions(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.ListAvailableFlinkVersions, error)
	// Describe flink cluster api that job-manager commit job to
	DescribeFlinkClusterAPI(ctx context.Context, in *pbrequest.DescribeFlinkClusterAPI, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkClusterAPI, error)
	CreateFlinkCluster(ctx context.Context, in *pbrequest.CreateFlinkCluster, opts ...grpc.CallOption) (*pbresponse.CreateFlinkCluster, error)
	ListFlinkClusters(ctx context.Context, in *pbrequest.ListFlinkClusters, opts ...grpc.CallOption) (*pbresponse.ListFlinkClusters, error)
	DescribeFlinkCluster(ctx context.Context, in *pbrequest.DescribeFlinkCluster, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkCluster, error)
	UpdateFlinkCluster(ctx context.Context, in *pbrequest.UpdateFlinkCluster, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteFlinkClusters(ctx context.Context, in *pbrequest.DeleteFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	StartFlinkClusters(ctx context.Context, in *pbrequest.StartFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	StopFlinkClusters(ctx context.Context, in *pbrequest.StopFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// Network Server
	// Interface for manage network configuration from iaas-pvc
	CreateNetwork(ctx context.Context, in *pbrequest.CreateNetwork, opts ...grpc.CallOption) (*pbresponse.CreateNetwork, error)
	ListNetworks(ctx context.Context, in *pbrequest.ListNetworks, opts ...grpc.CallOption) (*pbresponse.ListNetworks, error)
	DescribeNetwork(ctx context.Context, in *pbrequest.DescribeNetwork, opts ...grpc.CallOption) (*pbresponse.DescribeNetwork, error)
	UpdateNetwork(ctx context.Context, in *pbrequest.UpdateNetwork, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DeleteNetworks(ctx context.Context, in *pbrequest.DeleteNetworks, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) DeleteWorkspaces(ctx context.Context, in *pbrequest.DeleteWorkspaces, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/DeleteWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ListAvailableFlinkVersions(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.ListAvailableFlinkVersions, error) {
	out := new(pbresponse.ListAvailableFlinkVersions)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/ListAvailableFlinkVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) DescribeFlinkClusterAPI(ctx context.Context, in *pbrequest.DescribeFlinkClusterAPI, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkClusterAPI, error) {
	out := new(pbresponse.DescribeFlinkClusterAPI)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/DescribeFlinkClusterAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) CreateFlinkCluster(ctx context.Context, in *pbrequest.CreateFlinkCluster, opts ...grpc.CallOption) (*pbresponse.CreateFlinkCluster, error) {
	out := new(pbresponse.CreateFlinkCluster)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/CreateFlinkCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ListFlinkClusters(ctx context.Context, in *pbrequest.ListFlinkClusters, opts ...grpc.CallOption) (*pbresponse.ListFlinkClusters, error) {
	out := new(pbresponse.ListFlinkClusters)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/ListFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) DescribeFlinkCluster(ctx context.Context, in *pbrequest.DescribeFlinkCluster, opts ...grpc.CallOption) (*pbresponse.DescribeFlinkCluster, error) {
	out := new(pbresponse.DescribeFlinkCluster)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/DescribeFlinkCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) UpdateFlinkCluster(ctx context.Context, in *pbrequest.UpdateFlinkCluster, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/UpdateFlinkCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) DeleteFlinkClusters(ctx context.Context, in *pbrequest.DeleteFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/DeleteFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) StartFlinkClusters(ctx context.Context, in *pbrequest.StartFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/StartFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) StopFlinkClusters(ctx context.Context, in *pbrequest.StopFlinkClusters, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/StopFlinkClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) CreateNetwork(ctx context.Context, in *pbrequest.CreateNetwork, opts ...grpc.CallOption) (*pbresponse.CreateNetwork, error) {
	out := new(pbresponse.CreateNetwork)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ListNetworks(ctx context.Context, in *pbrequest.ListNetworks, opts ...grpc.CallOption) (*pbresponse.ListNetworks, error) {
	out := new(pbresponse.ListNetworks)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) DescribeNetwork(ctx context.Context, in *pbrequest.DescribeNetwork, opts ...grpc.CallOption) (*pbresponse.DescribeNetwork, error) {
	out := new(pbresponse.DescribeNetwork)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/DescribeNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) UpdateNetwork(ctx context.Context, in *pbrequest.UpdateNetwork, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) DeleteNetworks(ctx context.Context, in *pbrequest.DeleteNetworks, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/enginecenter.Engine/DeleteNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
// All implementations must embed UnimplementedEngineServer
// for forward compatibility
type EngineServer interface {
	// DeleteWorkspaces for all resource of specified space ids.
	DeleteWorkspaces(context.Context, *pbrequest.DeleteWorkspaces) (*pbmodel.EmptyStruct, error)
	// Flink Server
	// Interface for manage flink cluster
	ListAvailableFlinkVersions(context.Context, *pbmodel.EmptyStruct) (*pbresponse.ListAvailableFlinkVersions, error)
	// Describe flink cluster api that job-manager commit job to
	DescribeFlinkClusterAPI(context.Context, *pbrequest.DescribeFlinkClusterAPI) (*pbresponse.DescribeFlinkClusterAPI, error)
	CreateFlinkCluster(context.Context, *pbrequest.CreateFlinkCluster) (*pbresponse.CreateFlinkCluster, error)
	ListFlinkClusters(context.Context, *pbrequest.ListFlinkClusters) (*pbresponse.ListFlinkClusters, error)
	DescribeFlinkCluster(context.Context, *pbrequest.DescribeFlinkCluster) (*pbresponse.DescribeFlinkCluster, error)
	UpdateFlinkCluster(context.Context, *pbrequest.UpdateFlinkCluster) (*pbmodel.EmptyStruct, error)
	DeleteFlinkClusters(context.Context, *pbrequest.DeleteFlinkClusters) (*pbmodel.EmptyStruct, error)
	StartFlinkClusters(context.Context, *pbrequest.StartFlinkClusters) (*pbmodel.EmptyStruct, error)
	StopFlinkClusters(context.Context, *pbrequest.StopFlinkClusters) (*pbmodel.EmptyStruct, error)
	// Network Server
	// Interface for manage network configuration from iaas-pvc
	CreateNetwork(context.Context, *pbrequest.CreateNetwork) (*pbresponse.CreateNetwork, error)
	ListNetworks(context.Context, *pbrequest.ListNetworks) (*pbresponse.ListNetworks, error)
	DescribeNetwork(context.Context, *pbrequest.DescribeNetwork) (*pbresponse.DescribeNetwork, error)
	UpdateNetwork(context.Context, *pbrequest.UpdateNetwork) (*pbmodel.EmptyStruct, error)
	DeleteNetworks(context.Context, *pbrequest.DeleteNetworks) (*pbmodel.EmptyStruct, error)
	mustEmbedUnimplementedEngineServer()
}

// UnimplementedEngineServer must be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (UnimplementedEngineServer) DeleteWorkspaces(context.Context, *pbrequest.DeleteWorkspaces) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspaces not implemented")
}
func (UnimplementedEngineServer) ListAvailableFlinkVersions(context.Context, *pbmodel.EmptyStruct) (*pbresponse.ListAvailableFlinkVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableFlinkVersions not implemented")
}
func (UnimplementedEngineServer) DescribeFlinkClusterAPI(context.Context, *pbrequest.DescribeFlinkClusterAPI) (*pbresponse.DescribeFlinkClusterAPI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFlinkClusterAPI not implemented")
}
func (UnimplementedEngineServer) CreateFlinkCluster(context.Context, *pbrequest.CreateFlinkCluster) (*pbresponse.CreateFlinkCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlinkCluster not implemented")
}
func (UnimplementedEngineServer) ListFlinkClusters(context.Context, *pbrequest.ListFlinkClusters) (*pbresponse.ListFlinkClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlinkClusters not implemented")
}
func (UnimplementedEngineServer) DescribeFlinkCluster(context.Context, *pbrequest.DescribeFlinkCluster) (*pbresponse.DescribeFlinkCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFlinkCluster not implemented")
}
func (UnimplementedEngineServer) UpdateFlinkCluster(context.Context, *pbrequest.UpdateFlinkCluster) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlinkCluster not implemented")
}
func (UnimplementedEngineServer) DeleteFlinkClusters(context.Context, *pbrequest.DeleteFlinkClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlinkClusters not implemented")
}
func (UnimplementedEngineServer) StartFlinkClusters(context.Context, *pbrequest.StartFlinkClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFlinkClusters not implemented")
}
func (UnimplementedEngineServer) StopFlinkClusters(context.Context, *pbrequest.StopFlinkClusters) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFlinkClusters not implemented")
}
func (UnimplementedEngineServer) CreateNetwork(context.Context, *pbrequest.CreateNetwork) (*pbresponse.CreateNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedEngineServer) ListNetworks(context.Context, *pbrequest.ListNetworks) (*pbresponse.ListNetworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedEngineServer) DescribeNetwork(context.Context, *pbrequest.DescribeNetwork) (*pbresponse.DescribeNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeNetwork not implemented")
}
func (UnimplementedEngineServer) UpdateNetwork(context.Context, *pbrequest.UpdateNetwork) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedEngineServer) DeleteNetworks(context.Context, *pbrequest.DeleteNetworks) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworks not implemented")
}
func (UnimplementedEngineServer) mustEmbedUnimplementedEngineServer() {}

// UnsafeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServer will
// result in compilation errors.
type UnsafeEngineServer interface {
	mustEmbedUnimplementedEngineServer()
}

func RegisterEngineServer(s grpc.ServiceRegistrar, srv EngineServer) {
	s.RegisterService(&Engine_ServiceDesc, srv)
}

func _Engine_DeleteWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DeleteWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/DeleteWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DeleteWorkspaces(ctx, req.(*pbrequest.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ListAvailableFlinkVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmodel.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListAvailableFlinkVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/ListAvailableFlinkVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListAvailableFlinkVersions(ctx, req.(*pbmodel.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_DescribeFlinkClusterAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeFlinkClusterAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DescribeFlinkClusterAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/DescribeFlinkClusterAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DescribeFlinkClusterAPI(ctx, req.(*pbrequest.DescribeFlinkClusterAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_CreateFlinkCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateFlinkCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).CreateFlinkCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/CreateFlinkCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).CreateFlinkCluster(ctx, req.(*pbrequest.CreateFlinkCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ListFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/ListFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListFlinkClusters(ctx, req.(*pbrequest.ListFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_DescribeFlinkCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeFlinkCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DescribeFlinkCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/DescribeFlinkCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DescribeFlinkCluster(ctx, req.(*pbrequest.DescribeFlinkCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_UpdateFlinkCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateFlinkCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UpdateFlinkCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/UpdateFlinkCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UpdateFlinkCluster(ctx, req.(*pbrequest.UpdateFlinkCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_DeleteFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DeleteFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/DeleteFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DeleteFlinkClusters(ctx, req.(*pbrequest.DeleteFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_StartFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StartFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).StartFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/StartFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).StartFlinkClusters(ctx, req.(*pbrequest.StartFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_StopFlinkClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StopFlinkClusters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).StopFlinkClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/StopFlinkClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).StopFlinkClusters(ctx, req.(*pbrequest.StopFlinkClusters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).CreateNetwork(ctx, req.(*pbrequest.CreateNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListNetworks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListNetworks(ctx, req.(*pbrequest.ListNetworks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_DescribeNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DescribeNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/DescribeNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DescribeNetwork(ctx, req.(*pbrequest.DescribeNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UpdateNetwork(ctx, req.(*pbrequest.UpdateNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_DeleteNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteNetworks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DeleteNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginecenter.Engine/DeleteNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DeleteNetworks(ctx, req.(*pbrequest.DeleteNetworks))
	}
	return interceptor(ctx, in, info, handler)
}

// Engine_ServiceDesc is the grpc.ServiceDesc for Engine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enginecenter.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteWorkspaces",
			Handler:    _Engine_DeleteWorkspaces_Handler,
		},
		{
			MethodName: "ListAvailableFlinkVersions",
			Handler:    _Engine_ListAvailableFlinkVersions_Handler,
		},
		{
			MethodName: "DescribeFlinkClusterAPI",
			Handler:    _Engine_DescribeFlinkClusterAPI_Handler,
		},
		{
			MethodName: "CreateFlinkCluster",
			Handler:    _Engine_CreateFlinkCluster_Handler,
		},
		{
			MethodName: "ListFlinkClusters",
			Handler:    _Engine_ListFlinkClusters_Handler,
		},
		{
			MethodName: "DescribeFlinkCluster",
			Handler:    _Engine_DescribeFlinkCluster_Handler,
		},
		{
			MethodName: "UpdateFlinkCluster",
			Handler:    _Engine_UpdateFlinkCluster_Handler,
		},
		{
			MethodName: "DeleteFlinkClusters",
			Handler:    _Engine_DeleteFlinkClusters_Handler,
		},
		{
			MethodName: "StartFlinkClusters",
			Handler:    _Engine_StartFlinkClusters_Handler,
		},
		{
			MethodName: "StopFlinkClusters",
			Handler:    _Engine_StopFlinkClusters_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _Engine_CreateNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _Engine_ListNetworks_Handler,
		},
		{
			MethodName: "DescribeNetwork",
			Handler:    _Engine_DescribeNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _Engine_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetworks",
			Handler:    _Engine_DeleteNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/enginemanager/engine_manage.proto",
}
