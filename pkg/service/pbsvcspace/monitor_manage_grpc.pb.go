// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/monitor_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/pkg/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/pkg/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/pkg/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitorManageClient is the client API for MonitorManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorManageClient interface {
	// Interface for monitor.
	ListMonitorRules(ctx context.Context, in *pbrequest.ListMonitorRules, opts ...grpc.CallOption) (*pbresponse.ListMonitorRules, error)
	DeleteMonitorRules(ctx context.Context, in *pbrequest.DeleteMonitorRules, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	EnableMonitorRules(ctx context.Context, in *pbrequest.EnableMonitorRules, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DisableMonitorRules(ctx context.Context, in *pbrequest.DisableMonitorRules, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	CreateMonitorRule(ctx context.Context, in *pbrequest.CreateMonitorRule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	UpdateMonitorRule(ctx context.Context, in *pbrequest.UpdateMonitorRule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	DescribeMonitorRule(ctx context.Context, in *pbrequest.DescribeMonitorRule, opts ...grpc.CallOption) (*pbresponse.DescribeMonitorRule, error)
}

type monitorManageClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorManageClient(cc grpc.ClientConnInterface) MonitorManageClient {
	return &monitorManageClient{cc}
}

func (c *monitorManageClient) ListMonitorRules(ctx context.Context, in *pbrequest.ListMonitorRules, opts ...grpc.CallOption) (*pbresponse.ListMonitorRules, error) {
	out := new(pbresponse.ListMonitorRules)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/ListMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorManageClient) DeleteMonitorRules(ctx context.Context, in *pbrequest.DeleteMonitorRules, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/DeleteMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorManageClient) EnableMonitorRules(ctx context.Context, in *pbrequest.EnableMonitorRules, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/EnableMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorManageClient) DisableMonitorRules(ctx context.Context, in *pbrequest.DisableMonitorRules, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/DisableMonitorRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorManageClient) CreateMonitorRule(ctx context.Context, in *pbrequest.CreateMonitorRule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/CreateMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorManageClient) UpdateMonitorRule(ctx context.Context, in *pbrequest.UpdateMonitorRule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/UpdateMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorManageClient) DescribeMonitorRule(ctx context.Context, in *pbrequest.DescribeMonitorRule, opts ...grpc.CallOption) (*pbresponse.DescribeMonitorRule, error) {
	out := new(pbresponse.DescribeMonitorRule)
	err := c.cc.Invoke(ctx, "/spacemanager.MonitorManage/DescribeMonitorRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorManageServer is the server API for MonitorManage service.
// All implementations must embed UnimplementedMonitorManageServer
// for forward compatibility
type MonitorManageServer interface {
	// Interface for monitor.
	ListMonitorRules(context.Context, *pbrequest.ListMonitorRules) (*pbresponse.ListMonitorRules, error)
	DeleteMonitorRules(context.Context, *pbrequest.DeleteMonitorRules) (*pbmodel.EmptyStruct, error)
	EnableMonitorRules(context.Context, *pbrequest.EnableMonitorRules) (*pbmodel.EmptyStruct, error)
	DisableMonitorRules(context.Context, *pbrequest.DisableMonitorRules) (*pbmodel.EmptyStruct, error)
	CreateMonitorRule(context.Context, *pbrequest.CreateMonitorRule) (*pbmodel.EmptyStruct, error)
	UpdateMonitorRule(context.Context, *pbrequest.UpdateMonitorRule) (*pbmodel.EmptyStruct, error)
	DescribeMonitorRule(context.Context, *pbrequest.DescribeMonitorRule) (*pbresponse.DescribeMonitorRule, error)
	mustEmbedUnimplementedMonitorManageServer()
}

// UnimplementedMonitorManageServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorManageServer struct {
}

func (UnimplementedMonitorManageServer) ListMonitorRules(context.Context, *pbrequest.ListMonitorRules) (*pbresponse.ListMonitorRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitorRules not implemented")
}
func (UnimplementedMonitorManageServer) DeleteMonitorRules(context.Context, *pbrequest.DeleteMonitorRules) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorRules not implemented")
}
func (UnimplementedMonitorManageServer) EnableMonitorRules(context.Context, *pbrequest.EnableMonitorRules) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMonitorRules not implemented")
}
func (UnimplementedMonitorManageServer) DisableMonitorRules(context.Context, *pbrequest.DisableMonitorRules) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMonitorRules not implemented")
}
func (UnimplementedMonitorManageServer) CreateMonitorRule(context.Context, *pbrequest.CreateMonitorRule) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorRule not implemented")
}
func (UnimplementedMonitorManageServer) UpdateMonitorRule(context.Context, *pbrequest.UpdateMonitorRule) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorRule not implemented")
}
func (UnimplementedMonitorManageServer) DescribeMonitorRule(context.Context, *pbrequest.DescribeMonitorRule) (*pbresponse.DescribeMonitorRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMonitorRule not implemented")
}
func (UnimplementedMonitorManageServer) mustEmbedUnimplementedMonitorManageServer() {}

// UnsafeMonitorManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorManageServer will
// result in compilation errors.
type UnsafeMonitorManageServer interface {
	mustEmbedUnimplementedMonitorManageServer()
}

func RegisterMonitorManageServer(s grpc.ServiceRegistrar, srv MonitorManageServer) {
	s.RegisterService(&MonitorManage_ServiceDesc, srv)
}

func _MonitorManage_ListMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).ListMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/ListMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).ListMonitorRules(ctx, req.(*pbrequest.ListMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorManage_DeleteMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).DeleteMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/DeleteMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).DeleteMonitorRules(ctx, req.(*pbrequest.DeleteMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorManage_EnableMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.EnableMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).EnableMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/EnableMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).EnableMonitorRules(ctx, req.(*pbrequest.EnableMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorManage_DisableMonitorRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DisableMonitorRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).DisableMonitorRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/DisableMonitorRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).DisableMonitorRules(ctx, req.(*pbrequest.DisableMonitorRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorManage_CreateMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).CreateMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/CreateMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).CreateMonitorRule(ctx, req.(*pbrequest.CreateMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorManage_UpdateMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).UpdateMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/UpdateMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).UpdateMonitorRule(ctx, req.(*pbrequest.UpdateMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorManage_DescribeMonitorRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeMonitorRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorManageServer).DescribeMonitorRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.MonitorManage/DescribeMonitorRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorManageServer).DescribeMonitorRule(ctx, req.(*pbrequest.DescribeMonitorRule))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitorManage_ServiceDesc is the grpc.ServiceDesc for MonitorManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.MonitorManage",
	HandlerType: (*MonitorManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMonitorRules",
			Handler:    _MonitorManage_ListMonitorRules_Handler,
		},
		{
			MethodName: "DeleteMonitorRules",
			Handler:    _MonitorManage_DeleteMonitorRules_Handler,
		},
		{
			MethodName: "EnableMonitorRules",
			Handler:    _MonitorManage_EnableMonitorRules_Handler,
		},
		{
			MethodName: "DisableMonitorRules",
			Handler:    _MonitorManage_DisableMonitorRules_Handler,
		},
		{
			MethodName: "CreateMonitorRule",
			Handler:    _MonitorManage_CreateMonitorRule_Handler,
		},
		{
			MethodName: "UpdateMonitorRule",
			Handler:    _MonitorManage_UpdateMonitorRule_Handler,
		},
		{
			MethodName: "DescribeMonitorRule",
			Handler:    _MonitorManage_DescribeMonitorRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/monitor_manage.proto",
}
