// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/service/spacemanager/stream_job_manage.proto

package pbsvcspace

import (
	context "context"
	pbmodel "github.com/DataWorkbench/gproto/pkg/types/pbmodel"
	pbrequest "github.com/DataWorkbench/gproto/pkg/types/pbrequest"
	pbresponse "github.com/DataWorkbench/gproto/pkg/types/pbresponse"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamJobManageClient is the client API for StreamJobManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamJobManageClient interface {
	// Interface for stream job dev.
	//
	// ListStreamJobs to get a list of stream job of the workspace.
	ListStreamJobs(ctx context.Context, in *pbrequest.ListStreamJobs, opts ...grpc.CallOption) (*pbresponse.ListStreamJobs, error)
	// DeleteStreamJobs delete stream job ant its related resources where in ids.
	// Resources includes:
	//  - History version and Released's job.
	//  - Node, env schedule and its history version.
	//  - Offline job and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteStreamJobs(ctx context.Context, in *pbrequest.DeleteStreamJobs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// CreateStreamJob to create a new stream job.
	CreateStreamJob(ctx context.Context, in *pbrequest.CreateStreamJob, opts ...grpc.CallOption) (*pbresponse.CreateStreamJob, error)
	// UpdateStreamJob to update the info for the specified stream job.
	UpdateStreamJob(ctx context.Context, in *pbrequest.UpdateStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// DescribeStreamJob to get the info of the specified stream job.
	DescribeStreamJob(ctx context.Context, in *pbrequest.DescribeStreamJob, opts ...grpc.CallOption) (*pbresponse.DescribeStreamJob, error)
	// SetStreamJobCode to set the code properties of the specified stream job.
	SetStreamJobCode(ctx context.Context, in *pbrequest.SetStreamJobCode, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// GetStreamJobCode to get the code properties of the specified stream job.
	GetStreamJobCode(ctx context.Context, in *pbrequest.GetStreamJobCode, opts ...grpc.CallOption) (*pbresponse.GetStreamJobCode, error)
	StreamJobCodeSyntax(ctx context.Context, in *pbrequest.StreamJobCodeSyntax, opts ...grpc.CallOption) (*pbresponse.StreamJobCodeSyntax, error)
	// SetStreamJobArgs to set the run parameters of the specified stream job.
	SetStreamJobArgs(ctx context.Context, in *pbrequest.SetStreamJobArgs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// GetStreamJobArgs to get the run parameters of the specified stream job.
	GetStreamJobArgs(ctx context.Context, in *pbrequest.GetStreamJobArgs, opts ...grpc.CallOption) (*pbresponse.GetStreamJobArgs, error)
	ListBuiltInConnectors(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.ListBuiltInConnectors, error)
	// SetStreamJobSchedule to set the schedule properties of the specified stream job.
	SetStreamJobSchedule(ctx context.Context, in *pbrequest.SetStreamJobSchedule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// GetStreamJobSchedule to get the schedule properties of the specified stream job.
	GetStreamJobSchedule(ctx context.Context, in *pbrequest.GetStreamJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetStreamJobSchedule, error)
	// Interface for stream job release.
	//
	// ReleaseStreamJob to publish the specified job to schedule system with a new version.
	ReleaseStreamJob(ctx context.Context, in *pbrequest.ReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseStreamJobs to suspend the specified job list in schedule system.
	OfflineReleaseStreamJob(ctx context.Context, in *pbrequest.OfflineReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseStreamJob to suspend the specified job list in schedule system.
	SuspendReleaseStreamJob(ctx context.Context, in *pbrequest.SuspendReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// ResumeReleaseStreamJob to resume the suspended job list in schedule system.
	ResumeReleaseStreamJob(ctx context.Context, in *pbrequest.ResumeReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error)
	// ListReleaseStreamJobs for gets a list of all published job in the workspace.
	ListReleaseStreamJobs(ctx context.Context, in *pbrequest.ListReleaseStreamJobs, opts ...grpc.CallOption) (*pbresponse.ListReleaseStreamJobs, error)
	// Interface for stream job versions.
	//
	// ListStreamJobVersions for gets a list of all versions of the specified job.
	ListStreamJobVersions(ctx context.Context, in *pbrequest.ListStreamJobVersions, opts ...grpc.CallOption) (*pbresponse.ListStreamJobVersions, error)
	// DescribeStreamJobVersion for get the info of the job of the specified version.
	DescribeStreamJobVersion(ctx context.Context, in *pbrequest.DescribeStreamJob, opts ...grpc.CallOption) (*pbresponse.DescribeStreamJob, error)
	// GetStreamJobVersionCode for get the node properties of the job of the specified version.
	GetStreamJobVersionCode(ctx context.Context, in *pbrequest.GetStreamJobCode, opts ...grpc.CallOption) (*pbresponse.GetStreamJobCode, error)
	// GetStreamJobVersionArgs for get the run parameters of the job of the specified version.
	GetStreamJobVersionArgs(ctx context.Context, in *pbrequest.GetStreamJobArgs, opts ...grpc.CallOption) (*pbresponse.GetStreamJobArgs, error)
	// GetStreamJobVersionSchedule for get the schedule properties of the job of the specified version.
	GetStreamJobVersionSchedule(ctx context.Context, in *pbrequest.GetStreamJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetStreamJobSchedule, error)
}

type streamJobManageClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamJobManageClient(cc grpc.ClientConnInterface) StreamJobManageClient {
	return &streamJobManageClient{cc}
}

func (c *streamJobManageClient) ListStreamJobs(ctx context.Context, in *pbrequest.ListStreamJobs, opts ...grpc.CallOption) (*pbresponse.ListStreamJobs, error) {
	out := new(pbresponse.ListStreamJobs)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/ListStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) DeleteStreamJobs(ctx context.Context, in *pbrequest.DeleteStreamJobs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/DeleteStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) CreateStreamJob(ctx context.Context, in *pbrequest.CreateStreamJob, opts ...grpc.CallOption) (*pbresponse.CreateStreamJob, error) {
	out := new(pbresponse.CreateStreamJob)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/CreateStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) UpdateStreamJob(ctx context.Context, in *pbrequest.UpdateStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/UpdateStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) DescribeStreamJob(ctx context.Context, in *pbrequest.DescribeStreamJob, opts ...grpc.CallOption) (*pbresponse.DescribeStreamJob, error) {
	out := new(pbresponse.DescribeStreamJob)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/DescribeStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) SetStreamJobCode(ctx context.Context, in *pbrequest.SetStreamJobCode, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/SetStreamJobCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) GetStreamJobCode(ctx context.Context, in *pbrequest.GetStreamJobCode, opts ...grpc.CallOption) (*pbresponse.GetStreamJobCode, error) {
	out := new(pbresponse.GetStreamJobCode)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/GetStreamJobCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) StreamJobCodeSyntax(ctx context.Context, in *pbrequest.StreamJobCodeSyntax, opts ...grpc.CallOption) (*pbresponse.StreamJobCodeSyntax, error) {
	out := new(pbresponse.StreamJobCodeSyntax)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/StreamJobCodeSyntax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) SetStreamJobArgs(ctx context.Context, in *pbrequest.SetStreamJobArgs, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/SetStreamJobArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) GetStreamJobArgs(ctx context.Context, in *pbrequest.GetStreamJobArgs, opts ...grpc.CallOption) (*pbresponse.GetStreamJobArgs, error) {
	out := new(pbresponse.GetStreamJobArgs)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/GetStreamJobArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) ListBuiltInConnectors(ctx context.Context, in *pbmodel.EmptyStruct, opts ...grpc.CallOption) (*pbresponse.ListBuiltInConnectors, error) {
	out := new(pbresponse.ListBuiltInConnectors)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/ListBuiltInConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) SetStreamJobSchedule(ctx context.Context, in *pbrequest.SetStreamJobSchedule, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/SetStreamJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) GetStreamJobSchedule(ctx context.Context, in *pbrequest.GetStreamJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetStreamJobSchedule, error) {
	out := new(pbresponse.GetStreamJobSchedule)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/GetStreamJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) ReleaseStreamJob(ctx context.Context, in *pbrequest.ReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/ReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) OfflineReleaseStreamJob(ctx context.Context, in *pbrequest.OfflineReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/OfflineReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) SuspendReleaseStreamJob(ctx context.Context, in *pbrequest.SuspendReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/SuspendReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) ResumeReleaseStreamJob(ctx context.Context, in *pbrequest.ResumeReleaseStreamJob, opts ...grpc.CallOption) (*pbmodel.EmptyStruct, error) {
	out := new(pbmodel.EmptyStruct)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/ResumeReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) ListReleaseStreamJobs(ctx context.Context, in *pbrequest.ListReleaseStreamJobs, opts ...grpc.CallOption) (*pbresponse.ListReleaseStreamJobs, error) {
	out := new(pbresponse.ListReleaseStreamJobs)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/ListReleaseStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) ListStreamJobVersions(ctx context.Context, in *pbrequest.ListStreamJobVersions, opts ...grpc.CallOption) (*pbresponse.ListStreamJobVersions, error) {
	out := new(pbresponse.ListStreamJobVersions)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/ListStreamJobVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) DescribeStreamJobVersion(ctx context.Context, in *pbrequest.DescribeStreamJob, opts ...grpc.CallOption) (*pbresponse.DescribeStreamJob, error) {
	out := new(pbresponse.DescribeStreamJob)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/DescribeStreamJobVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) GetStreamJobVersionCode(ctx context.Context, in *pbrequest.GetStreamJobCode, opts ...grpc.CallOption) (*pbresponse.GetStreamJobCode, error) {
	out := new(pbresponse.GetStreamJobCode)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/GetStreamJobVersionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) GetStreamJobVersionArgs(ctx context.Context, in *pbrequest.GetStreamJobArgs, opts ...grpc.CallOption) (*pbresponse.GetStreamJobArgs, error) {
	out := new(pbresponse.GetStreamJobArgs)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/GetStreamJobVersionArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamJobManageClient) GetStreamJobVersionSchedule(ctx context.Context, in *pbrequest.GetStreamJobSchedule, opts ...grpc.CallOption) (*pbresponse.GetStreamJobSchedule, error) {
	out := new(pbresponse.GetStreamJobSchedule)
	err := c.cc.Invoke(ctx, "/spacemanager.StreamJobManage/GetStreamJobVersionSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamJobManageServer is the server API for StreamJobManage service.
// All implementations must embed UnimplementedStreamJobManageServer
// for forward compatibility
type StreamJobManageServer interface {
	// Interface for stream job dev.
	//
	// ListStreamJobs to get a list of stream job of the workspace.
	ListStreamJobs(context.Context, *pbrequest.ListStreamJobs) (*pbresponse.ListStreamJobs, error)
	// DeleteStreamJobs delete stream job ant its related resources where in ids.
	// Resources includes:
	//  - History version and Released's job.
	//  - Node, env schedule and its history version.
	//  - Offline job and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteStreamJobs(context.Context, *pbrequest.DeleteStreamJobs) (*pbmodel.EmptyStruct, error)
	// CreateStreamJob to create a new stream job.
	CreateStreamJob(context.Context, *pbrequest.CreateStreamJob) (*pbresponse.CreateStreamJob, error)
	// UpdateStreamJob to update the info for the specified stream job.
	UpdateStreamJob(context.Context, *pbrequest.UpdateStreamJob) (*pbmodel.EmptyStruct, error)
	// DescribeStreamJob to get the info of the specified stream job.
	DescribeStreamJob(context.Context, *pbrequest.DescribeStreamJob) (*pbresponse.DescribeStreamJob, error)
	// SetStreamJobCode to set the code properties of the specified stream job.
	SetStreamJobCode(context.Context, *pbrequest.SetStreamJobCode) (*pbmodel.EmptyStruct, error)
	// GetStreamJobCode to get the code properties of the specified stream job.
	GetStreamJobCode(context.Context, *pbrequest.GetStreamJobCode) (*pbresponse.GetStreamJobCode, error)
	StreamJobCodeSyntax(context.Context, *pbrequest.StreamJobCodeSyntax) (*pbresponse.StreamJobCodeSyntax, error)
	// SetStreamJobArgs to set the run parameters of the specified stream job.
	SetStreamJobArgs(context.Context, *pbrequest.SetStreamJobArgs) (*pbmodel.EmptyStruct, error)
	// GetStreamJobArgs to get the run parameters of the specified stream job.
	GetStreamJobArgs(context.Context, *pbrequest.GetStreamJobArgs) (*pbresponse.GetStreamJobArgs, error)
	ListBuiltInConnectors(context.Context, *pbmodel.EmptyStruct) (*pbresponse.ListBuiltInConnectors, error)
	// SetStreamJobSchedule to set the schedule properties of the specified stream job.
	SetStreamJobSchedule(context.Context, *pbrequest.SetStreamJobSchedule) (*pbmodel.EmptyStruct, error)
	// GetStreamJobSchedule to get the schedule properties of the specified stream job.
	GetStreamJobSchedule(context.Context, *pbrequest.GetStreamJobSchedule) (*pbresponse.GetStreamJobSchedule, error)
	// Interface for stream job release.
	//
	// ReleaseStreamJob to publish the specified job to schedule system with a new version.
	ReleaseStreamJob(context.Context, *pbrequest.ReleaseStreamJob) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseStreamJobs to suspend the specified job list in schedule system.
	OfflineReleaseStreamJob(context.Context, *pbrequest.OfflineReleaseStreamJob) (*pbmodel.EmptyStruct, error)
	// SuspendReleaseStreamJob to suspend the specified job list in schedule system.
	SuspendReleaseStreamJob(context.Context, *pbrequest.SuspendReleaseStreamJob) (*pbmodel.EmptyStruct, error)
	// ResumeReleaseStreamJob to resume the suspended job list in schedule system.
	ResumeReleaseStreamJob(context.Context, *pbrequest.ResumeReleaseStreamJob) (*pbmodel.EmptyStruct, error)
	// ListReleaseStreamJobs for gets a list of all published job in the workspace.
	ListReleaseStreamJobs(context.Context, *pbrequest.ListReleaseStreamJobs) (*pbresponse.ListReleaseStreamJobs, error)
	// Interface for stream job versions.
	//
	// ListStreamJobVersions for gets a list of all versions of the specified job.
	ListStreamJobVersions(context.Context, *pbrequest.ListStreamJobVersions) (*pbresponse.ListStreamJobVersions, error)
	// DescribeStreamJobVersion for get the info of the job of the specified version.
	DescribeStreamJobVersion(context.Context, *pbrequest.DescribeStreamJob) (*pbresponse.DescribeStreamJob, error)
	// GetStreamJobVersionCode for get the node properties of the job of the specified version.
	GetStreamJobVersionCode(context.Context, *pbrequest.GetStreamJobCode) (*pbresponse.GetStreamJobCode, error)
	// GetStreamJobVersionArgs for get the run parameters of the job of the specified version.
	GetStreamJobVersionArgs(context.Context, *pbrequest.GetStreamJobArgs) (*pbresponse.GetStreamJobArgs, error)
	// GetStreamJobVersionSchedule for get the schedule properties of the job of the specified version.
	GetStreamJobVersionSchedule(context.Context, *pbrequest.GetStreamJobSchedule) (*pbresponse.GetStreamJobSchedule, error)
	mustEmbedUnimplementedStreamJobManageServer()
}

// UnimplementedStreamJobManageServer must be embedded to have forward compatible implementations.
type UnimplementedStreamJobManageServer struct {
}

func (UnimplementedStreamJobManageServer) ListStreamJobs(context.Context, *pbrequest.ListStreamJobs) (*pbresponse.ListStreamJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamJobs not implemented")
}
func (UnimplementedStreamJobManageServer) DeleteStreamJobs(context.Context, *pbrequest.DeleteStreamJobs) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamJobs not implemented")
}
func (UnimplementedStreamJobManageServer) CreateStreamJob(context.Context, *pbrequest.CreateStreamJob) (*pbresponse.CreateStreamJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) UpdateStreamJob(context.Context, *pbrequest.UpdateStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) DescribeStreamJob(context.Context, *pbrequest.DescribeStreamJob) (*pbresponse.DescribeStreamJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) SetStreamJobCode(context.Context, *pbrequest.SetStreamJobCode) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamJobCode not implemented")
}
func (UnimplementedStreamJobManageServer) GetStreamJobCode(context.Context, *pbrequest.GetStreamJobCode) (*pbresponse.GetStreamJobCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobCode not implemented")
}
func (UnimplementedStreamJobManageServer) StreamJobCodeSyntax(context.Context, *pbrequest.StreamJobCodeSyntax) (*pbresponse.StreamJobCodeSyntax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamJobCodeSyntax not implemented")
}
func (UnimplementedStreamJobManageServer) SetStreamJobArgs(context.Context, *pbrequest.SetStreamJobArgs) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamJobArgs not implemented")
}
func (UnimplementedStreamJobManageServer) GetStreamJobArgs(context.Context, *pbrequest.GetStreamJobArgs) (*pbresponse.GetStreamJobArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobArgs not implemented")
}
func (UnimplementedStreamJobManageServer) ListBuiltInConnectors(context.Context, *pbmodel.EmptyStruct) (*pbresponse.ListBuiltInConnectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuiltInConnectors not implemented")
}
func (UnimplementedStreamJobManageServer) SetStreamJobSchedule(context.Context, *pbrequest.SetStreamJobSchedule) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamJobSchedule not implemented")
}
func (UnimplementedStreamJobManageServer) GetStreamJobSchedule(context.Context, *pbrequest.GetStreamJobSchedule) (*pbresponse.GetStreamJobSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobSchedule not implemented")
}
func (UnimplementedStreamJobManageServer) ReleaseStreamJob(context.Context, *pbrequest.ReleaseStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) OfflineReleaseStreamJob(context.Context, *pbrequest.OfflineReleaseStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineReleaseStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) SuspendReleaseStreamJob(context.Context, *pbrequest.SuspendReleaseStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendReleaseStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) ResumeReleaseStreamJob(context.Context, *pbrequest.ResumeReleaseStreamJob) (*pbmodel.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReleaseStreamJob not implemented")
}
func (UnimplementedStreamJobManageServer) ListReleaseStreamJobs(context.Context, *pbrequest.ListReleaseStreamJobs) (*pbresponse.ListReleaseStreamJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseStreamJobs not implemented")
}
func (UnimplementedStreamJobManageServer) ListStreamJobVersions(context.Context, *pbrequest.ListStreamJobVersions) (*pbresponse.ListStreamJobVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamJobVersions not implemented")
}
func (UnimplementedStreamJobManageServer) DescribeStreamJobVersion(context.Context, *pbrequest.DescribeStreamJob) (*pbresponse.DescribeStreamJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamJobVersion not implemented")
}
func (UnimplementedStreamJobManageServer) GetStreamJobVersionCode(context.Context, *pbrequest.GetStreamJobCode) (*pbresponse.GetStreamJobCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobVersionCode not implemented")
}
func (UnimplementedStreamJobManageServer) GetStreamJobVersionArgs(context.Context, *pbrequest.GetStreamJobArgs) (*pbresponse.GetStreamJobArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobVersionArgs not implemented")
}
func (UnimplementedStreamJobManageServer) GetStreamJobVersionSchedule(context.Context, *pbrequest.GetStreamJobSchedule) (*pbresponse.GetStreamJobSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobVersionSchedule not implemented")
}
func (UnimplementedStreamJobManageServer) mustEmbedUnimplementedStreamJobManageServer() {}

// UnsafeStreamJobManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamJobManageServer will
// result in compilation errors.
type UnsafeStreamJobManageServer interface {
	mustEmbedUnimplementedStreamJobManageServer()
}

func RegisterStreamJobManageServer(s grpc.ServiceRegistrar, srv StreamJobManageServer) {
	s.RegisterService(&StreamJobManage_ServiceDesc, srv)
}

func _StreamJobManage_ListStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).ListStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/ListStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).ListStreamJobs(ctx, req.(*pbrequest.ListStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_DeleteStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DeleteStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).DeleteStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/DeleteStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).DeleteStreamJobs(ctx, req.(*pbrequest.DeleteStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_CreateStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.CreateStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).CreateStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/CreateStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).CreateStreamJob(ctx, req.(*pbrequest.CreateStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_UpdateStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.UpdateStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).UpdateStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/UpdateStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).UpdateStreamJob(ctx, req.(*pbrequest.UpdateStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_DescribeStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).DescribeStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/DescribeStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).DescribeStreamJob(ctx, req.(*pbrequest.DescribeStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_SetStreamJobCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SetStreamJobCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).SetStreamJobCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/SetStreamJobCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).SetStreamJobCode(ctx, req.(*pbrequest.SetStreamJobCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_GetStreamJobCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetStreamJobCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).GetStreamJobCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/GetStreamJobCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).GetStreamJobCode(ctx, req.(*pbrequest.GetStreamJobCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_StreamJobCodeSyntax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.StreamJobCodeSyntax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).StreamJobCodeSyntax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/StreamJobCodeSyntax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).StreamJobCodeSyntax(ctx, req.(*pbrequest.StreamJobCodeSyntax))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_SetStreamJobArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SetStreamJobArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).SetStreamJobArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/SetStreamJobArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).SetStreamJobArgs(ctx, req.(*pbrequest.SetStreamJobArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_GetStreamJobArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetStreamJobArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).GetStreamJobArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/GetStreamJobArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).GetStreamJobArgs(ctx, req.(*pbrequest.GetStreamJobArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_ListBuiltInConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmodel.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).ListBuiltInConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/ListBuiltInConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).ListBuiltInConnectors(ctx, req.(*pbmodel.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_SetStreamJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SetStreamJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).SetStreamJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/SetStreamJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).SetStreamJobSchedule(ctx, req.(*pbrequest.SetStreamJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_GetStreamJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetStreamJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).GetStreamJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/GetStreamJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).GetStreamJobSchedule(ctx, req.(*pbrequest.GetStreamJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_ReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).ReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/ReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).ReleaseStreamJob(ctx, req.(*pbrequest.ReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_OfflineReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.OfflineReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).OfflineReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/OfflineReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).OfflineReleaseStreamJob(ctx, req.(*pbrequest.OfflineReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_SuspendReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.SuspendReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).SuspendReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/SuspendReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).SuspendReleaseStreamJob(ctx, req.(*pbrequest.SuspendReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_ResumeReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ResumeReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).ResumeReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/ResumeReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).ResumeReleaseStreamJob(ctx, req.(*pbrequest.ResumeReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_ListReleaseStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListReleaseStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).ListReleaseStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/ListReleaseStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).ListReleaseStreamJobs(ctx, req.(*pbrequest.ListReleaseStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_ListStreamJobVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.ListStreamJobVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).ListStreamJobVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/ListStreamJobVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).ListStreamJobVersions(ctx, req.(*pbrequest.ListStreamJobVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_DescribeStreamJobVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.DescribeStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).DescribeStreamJobVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/DescribeStreamJobVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).DescribeStreamJobVersion(ctx, req.(*pbrequest.DescribeStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_GetStreamJobVersionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetStreamJobCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).GetStreamJobVersionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/GetStreamJobVersionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).GetStreamJobVersionCode(ctx, req.(*pbrequest.GetStreamJobCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_GetStreamJobVersionArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetStreamJobArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).GetStreamJobVersionArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/GetStreamJobVersionArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).GetStreamJobVersionArgs(ctx, req.(*pbrequest.GetStreamJobArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamJobManage_GetStreamJobVersionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbrequest.GetStreamJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamJobManageServer).GetStreamJobVersionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemanager.StreamJobManage/GetStreamJobVersionSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamJobManageServer).GetStreamJobVersionSchedule(ctx, req.(*pbrequest.GetStreamJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamJobManage_ServiceDesc is the grpc.ServiceDesc for StreamJobManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamJobManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemanager.StreamJobManage",
	HandlerType: (*StreamJobManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStreamJobs",
			Handler:    _StreamJobManage_ListStreamJobs_Handler,
		},
		{
			MethodName: "DeleteStreamJobs",
			Handler:    _StreamJobManage_DeleteStreamJobs_Handler,
		},
		{
			MethodName: "CreateStreamJob",
			Handler:    _StreamJobManage_CreateStreamJob_Handler,
		},
		{
			MethodName: "UpdateStreamJob",
			Handler:    _StreamJobManage_UpdateStreamJob_Handler,
		},
		{
			MethodName: "DescribeStreamJob",
			Handler:    _StreamJobManage_DescribeStreamJob_Handler,
		},
		{
			MethodName: "SetStreamJobCode",
			Handler:    _StreamJobManage_SetStreamJobCode_Handler,
		},
		{
			MethodName: "GetStreamJobCode",
			Handler:    _StreamJobManage_GetStreamJobCode_Handler,
		},
		{
			MethodName: "StreamJobCodeSyntax",
			Handler:    _StreamJobManage_StreamJobCodeSyntax_Handler,
		},
		{
			MethodName: "SetStreamJobArgs",
			Handler:    _StreamJobManage_SetStreamJobArgs_Handler,
		},
		{
			MethodName: "GetStreamJobArgs",
			Handler:    _StreamJobManage_GetStreamJobArgs_Handler,
		},
		{
			MethodName: "ListBuiltInConnectors",
			Handler:    _StreamJobManage_ListBuiltInConnectors_Handler,
		},
		{
			MethodName: "SetStreamJobSchedule",
			Handler:    _StreamJobManage_SetStreamJobSchedule_Handler,
		},
		{
			MethodName: "GetStreamJobSchedule",
			Handler:    _StreamJobManage_GetStreamJobSchedule_Handler,
		},
		{
			MethodName: "ReleaseStreamJob",
			Handler:    _StreamJobManage_ReleaseStreamJob_Handler,
		},
		{
			MethodName: "OfflineReleaseStreamJob",
			Handler:    _StreamJobManage_OfflineReleaseStreamJob_Handler,
		},
		{
			MethodName: "SuspendReleaseStreamJob",
			Handler:    _StreamJobManage_SuspendReleaseStreamJob_Handler,
		},
		{
			MethodName: "ResumeReleaseStreamJob",
			Handler:    _StreamJobManage_ResumeReleaseStreamJob_Handler,
		},
		{
			MethodName: "ListReleaseStreamJobs",
			Handler:    _StreamJobManage_ListReleaseStreamJobs_Handler,
		},
		{
			MethodName: "ListStreamJobVersions",
			Handler:    _StreamJobManage_ListStreamJobVersions_Handler,
		},
		{
			MethodName: "DescribeStreamJobVersion",
			Handler:    _StreamJobManage_DescribeStreamJobVersion_Handler,
		},
		{
			MethodName: "GetStreamJobVersionCode",
			Handler:    _StreamJobManage_GetStreamJobVersionCode_Handler,
		},
		{
			MethodName: "GetStreamJobVersionArgs",
			Handler:    _StreamJobManage_GetStreamJobVersionArgs_Handler,
		},
		{
			MethodName: "GetStreamJobVersionSchedule",
			Handler:    _StreamJobManage_GetStreamJobVersionSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/spacemanager/stream_job_manage.proto",
}
