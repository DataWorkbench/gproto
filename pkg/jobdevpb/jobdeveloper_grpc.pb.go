// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobdevpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JobdeveloperClient is the client API for Jobdeveloper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobdeveloperClient interface {
	JobParser(ctx context.Context, in *JobParserRequest, opts ...grpc.CallOption) (*JobElement, error)
	JobFree(ctx context.Context, in *JobFreeRequest, opts ...grpc.CallOption) (*JobFreeAction, error)
	NodeRelations(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*Relations, error)
}

type jobdeveloperClient struct {
	cc grpc.ClientConnInterface
}

func NewJobdeveloperClient(cc grpc.ClientConnInterface) JobdeveloperClient {
	return &jobdeveloperClient{cc}
}

func (c *jobdeveloperClient) JobParser(ctx context.Context, in *JobParserRequest, opts ...grpc.CallOption) (*JobElement, error) {
	out := new(JobElement)
	err := c.cc.Invoke(ctx, "/jobdevpb.Jobdeveloper/JobParser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobdeveloperClient) JobFree(ctx context.Context, in *JobFreeRequest, opts ...grpc.CallOption) (*JobFreeAction, error) {
	out := new(JobFreeAction)
	err := c.cc.Invoke(ctx, "/jobdevpb.Jobdeveloper/JobFree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobdeveloperClient) NodeRelations(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*Relations, error) {
	out := new(Relations)
	err := c.cc.Invoke(ctx, "/jobdevpb.Jobdeveloper/NodeRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobdeveloperServer is the server API for Jobdeveloper service.
// All implementations must embed UnimplementedJobdeveloperServer
// for forward compatibility
type JobdeveloperServer interface {
	JobParser(context.Context, *JobParserRequest) (*JobElement, error)
	JobFree(context.Context, *JobFreeRequest) (*JobFreeAction, error)
	NodeRelations(context.Context, *model.EmptyStruct) (*Relations, error)
	mustEmbedUnimplementedJobdeveloperServer()
}

// UnimplementedJobdeveloperServer must be embedded to have forward compatible implementations.
type UnimplementedJobdeveloperServer struct {
}

func (UnimplementedJobdeveloperServer) JobParser(context.Context, *JobParserRequest) (*JobElement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobParser not implemented")
}
func (UnimplementedJobdeveloperServer) JobFree(context.Context, *JobFreeRequest) (*JobFreeAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobFree not implemented")
}
func (UnimplementedJobdeveloperServer) NodeRelations(context.Context, *model.EmptyStruct) (*Relations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRelations not implemented")
}
func (UnimplementedJobdeveloperServer) mustEmbedUnimplementedJobdeveloperServer() {}

// UnsafeJobdeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobdeveloperServer will
// result in compilation errors.
type UnsafeJobdeveloperServer interface {
	mustEmbedUnimplementedJobdeveloperServer()
}

func RegisterJobdeveloperServer(s grpc.ServiceRegistrar, srv JobdeveloperServer) {
	s.RegisterService(&_Jobdeveloper_serviceDesc, srv)
}

func _Jobdeveloper_JobParser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobParserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobdeveloperServer).JobParser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobdevpb.Jobdeveloper/JobParser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobdeveloperServer).JobParser(ctx, req.(*JobParserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobdeveloper_JobFree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobFreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobdeveloperServer).JobFree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobdevpb.Jobdeveloper/JobFree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobdeveloperServer).JobFree(ctx, req.(*JobFreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobdeveloper_NodeRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobdeveloperServer).NodeRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobdevpb.Jobdeveloper/NodeRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobdeveloperServer).NodeRelations(ctx, req.(*model.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobdeveloper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobdevpb.Jobdeveloper",
	HandlerType: (*JobdeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobParser",
			Handler:    _Jobdeveloper_JobParser_Handler,
		},
		{
			MethodName: "JobFree",
			Handler:    _Jobdeveloper_JobFree_Handler,
		},
		{
			MethodName: "NodeRelations",
			Handler:    _Jobdeveloper_NodeRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobdeveloper.proto",
}
