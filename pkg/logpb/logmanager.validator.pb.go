// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/logmanager.proto

package logpb

import (
	fmt "fmt"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ListHistLogsRequest) Validate() error {
	if this.SpaceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SpaceId", fmt.Errorf(`value '%v' must not be an empty string`, this.SpaceId))
	}
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	if this.InstanceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceId", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceId))
	}
	return nil
}
func (this *ListJMHistLogsReply) Validate() error {
	for _, item := range this.Stat {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Stat", err)
			}
		}
	}
	return nil
}
func (this *ListTMHistLogsReply) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *TaskLogFiles) Validate() error {
	for _, item := range this.Stat {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Stat", err)
			}
		}
	}
	return nil
}
func (this *FileState) Validate() error {
	if !(this.FileSize > -1) {
		return github_com_mwitkow_go_proto_validators.FieldError("FileSize", fmt.Errorf(`value '%v' must be greater than '-1'`, this.FileSize))
	}
	if this.FileName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("FileName", fmt.Errorf(`value '%v' must not be an empty string`, this.FileName))
	}
	return nil
}
func (this *DownloadJobMgrRequest) Validate() error {
	if this.SpaceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SpaceId", fmt.Errorf(`value '%v' must not be an empty string`, this.SpaceId))
	}
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	if this.InstanceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceId", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceId))
	}
	if this.FileName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("FileName", fmt.Errorf(`value '%v' must not be an empty string`, this.FileName))
	}
	return nil
}
func (this *DownloadTaskMgrRequest) Validate() error {
	if this.SpaceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SpaceId", fmt.Errorf(`value '%v' must not be an empty string`, this.SpaceId))
	}
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	if this.InstanceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceId", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceId))
	}
	if this.FileName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("FileName", fmt.Errorf(`value '%v' must not be an empty string`, this.FileName))
	}
	if this.TaskManagerId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TaskManagerId", fmt.Errorf(`value '%v' must not be an empty string`, this.TaskManagerId))
	}
	return nil
}
func (this *FileContent) Validate() error {
	if !(this.FileSize > -1) {
		return github_com_mwitkow_go_proto_validators.FieldError("FileSize", fmt.Errorf(`value '%v' must be greater than '-1'`, this.FileSize))
	}
	return nil
}
func (this *UploadFileRequest) Validate() error {
	if this.SpaceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SpaceId", fmt.Errorf(`value '%v' must not be an empty string`, this.SpaceId))
	}
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	if this.InstanceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceId", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceId))
	}
	if this.ServerUrl == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ServerUrl", fmt.Errorf(`value '%v' must not be an empty string`, this.ServerUrl))
	}
	return nil
}
func (this *UploadFileReply) Validate() error {
	return nil
}
func (this *TaskStatRequest) Validate() error {
	if this.SpaceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SpaceId", fmt.Errorf(`value '%v' must not be an empty string`, this.SpaceId))
	}
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	if this.InstanceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceId", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceId))
	}
	if this.ServerUrl == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ServerUrl", fmt.Errorf(`value '%v' must not be an empty string`, this.ServerUrl))
	}
	return nil
}
func (this *TaskStatReply) Validate() error {
	return nil
}
