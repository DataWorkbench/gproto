// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package obpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ObserverClient is the client API for Observer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObserverClient interface {
	GetPeriodicTasksStatusStatistics(ctx context.Context, in *PTasksStatusStatRequest, opts ...grpc.CallOption) (*PTasksStatusStatReply, error)
	GetPeriodicTasksExecutingStatistics(ctx context.Context, in *PTasksExecStatRequest, opts ...grpc.CallOption) (*PTasksExecStatReply, error)
	GetPeriodicTasksDispatchCount(ctx context.Context, in *PTaskDispatchCountRequest, opts ...grpc.CallOption) (*PTaskDispatchCountReply, error)
	GetPeriodicTasksRuntimeRanking(ctx context.Context, in *PTaskRuntimeRankingRequest, opts ...grpc.CallOption) (*PTaskRuntimeRankingReply, error)
	GetPeriodicTasksErrorRanking(ctx context.Context, in *PTaskErrorRankingRequest, opts ...grpc.CallOption) (*PTaskErrorRankingReply, error)
}

type observerClient struct {
	cc grpc.ClientConnInterface
}

func NewObserverClient(cc grpc.ClientConnInterface) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) GetPeriodicTasksStatusStatistics(ctx context.Context, in *PTasksStatusStatRequest, opts ...grpc.CallOption) (*PTasksStatusStatReply, error) {
	out := new(PTasksStatusStatReply)
	err := c.cc.Invoke(ctx, "/Observer/GetPeriodicTasksStatusStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) GetPeriodicTasksExecutingStatistics(ctx context.Context, in *PTasksExecStatRequest, opts ...grpc.CallOption) (*PTasksExecStatReply, error) {
	out := new(PTasksExecStatReply)
	err := c.cc.Invoke(ctx, "/Observer/GetPeriodicTasksExecutingStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) GetPeriodicTasksDispatchCount(ctx context.Context, in *PTaskDispatchCountRequest, opts ...grpc.CallOption) (*PTaskDispatchCountReply, error) {
	out := new(PTaskDispatchCountReply)
	err := c.cc.Invoke(ctx, "/Observer/GetPeriodicTasksDispatchCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) GetPeriodicTasksRuntimeRanking(ctx context.Context, in *PTaskRuntimeRankingRequest, opts ...grpc.CallOption) (*PTaskRuntimeRankingReply, error) {
	out := new(PTaskRuntimeRankingReply)
	err := c.cc.Invoke(ctx, "/Observer/GetPeriodicTasksRuntimeRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) GetPeriodicTasksErrorRanking(ctx context.Context, in *PTaskErrorRankingRequest, opts ...grpc.CallOption) (*PTaskErrorRankingReply, error) {
	out := new(PTaskErrorRankingReply)
	err := c.cc.Invoke(ctx, "/Observer/GetPeriodicTasksErrorRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObserverServer is the server API for Observer service.
// All implementations must embed UnimplementedObserverServer
// for forward compatibility
type ObserverServer interface {
	GetPeriodicTasksStatusStatistics(context.Context, *PTasksStatusStatRequest) (*PTasksStatusStatReply, error)
	GetPeriodicTasksExecutingStatistics(context.Context, *PTasksExecStatRequest) (*PTasksExecStatReply, error)
	GetPeriodicTasksDispatchCount(context.Context, *PTaskDispatchCountRequest) (*PTaskDispatchCountReply, error)
	GetPeriodicTasksRuntimeRanking(context.Context, *PTaskRuntimeRankingRequest) (*PTaskRuntimeRankingReply, error)
	GetPeriodicTasksErrorRanking(context.Context, *PTaskErrorRankingRequest) (*PTaskErrorRankingReply, error)
	mustEmbedUnimplementedObserverServer()
}

// UnimplementedObserverServer must be embedded to have forward compatible implementations.
type UnimplementedObserverServer struct {
}

func (UnimplementedObserverServer) GetPeriodicTasksStatusStatistics(context.Context, *PTasksStatusStatRequest) (*PTasksStatusStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodicTasksStatusStatistics not implemented")
}
func (UnimplementedObserverServer) GetPeriodicTasksExecutingStatistics(context.Context, *PTasksExecStatRequest) (*PTasksExecStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodicTasksExecutingStatistics not implemented")
}
func (UnimplementedObserverServer) GetPeriodicTasksDispatchCount(context.Context, *PTaskDispatchCountRequest) (*PTaskDispatchCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodicTasksDispatchCount not implemented")
}
func (UnimplementedObserverServer) GetPeriodicTasksRuntimeRanking(context.Context, *PTaskRuntimeRankingRequest) (*PTaskRuntimeRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodicTasksRuntimeRanking not implemented")
}
func (UnimplementedObserverServer) GetPeriodicTasksErrorRanking(context.Context, *PTaskErrorRankingRequest) (*PTaskErrorRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodicTasksErrorRanking not implemented")
}
func (UnimplementedObserverServer) mustEmbedUnimplementedObserverServer() {}

// UnsafeObserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObserverServer will
// result in compilation errors.
type UnsafeObserverServer interface {
	mustEmbedUnimplementedObserverServer()
}

func RegisterObserverServer(s grpc.ServiceRegistrar, srv ObserverServer) {
	s.RegisterService(&_Observer_serviceDesc, srv)
}

func _Observer_GetPeriodicTasksStatusStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PTasksStatusStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).GetPeriodicTasksStatusStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Observer/GetPeriodicTasksStatusStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).GetPeriodicTasksStatusStatistics(ctx, req.(*PTasksStatusStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_GetPeriodicTasksExecutingStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PTasksExecStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).GetPeriodicTasksExecutingStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Observer/GetPeriodicTasksExecutingStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).GetPeriodicTasksExecutingStatistics(ctx, req.(*PTasksExecStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_GetPeriodicTasksDispatchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PTaskDispatchCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).GetPeriodicTasksDispatchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Observer/GetPeriodicTasksDispatchCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).GetPeriodicTasksDispatchCount(ctx, req.(*PTaskDispatchCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_GetPeriodicTasksRuntimeRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PTaskRuntimeRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).GetPeriodicTasksRuntimeRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Observer/GetPeriodicTasksRuntimeRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).GetPeriodicTasksRuntimeRanking(ctx, req.(*PTaskRuntimeRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_GetPeriodicTasksErrorRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PTaskErrorRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).GetPeriodicTasksErrorRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Observer/GetPeriodicTasksErrorRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).GetPeriodicTasksErrorRanking(ctx, req.(*PTaskErrorRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Observer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeriodicTasksStatusStatistics",
			Handler:    _Observer_GetPeriodicTasksStatusStatistics_Handler,
		},
		{
			MethodName: "GetPeriodicTasksExecutingStatistics",
			Handler:    _Observer_GetPeriodicTasksExecutingStatistics_Handler,
		},
		{
			MethodName: "GetPeriodicTasksDispatchCount",
			Handler:    _Observer_GetPeriodicTasksDispatchCount_Handler,
		},
		{
			MethodName: "GetPeriodicTasksRuntimeRanking",
			Handler:    _Observer_GetPeriodicTasksRuntimeRanking_Handler,
		},
		{
			MethodName: "GetPeriodicTasksErrorRanking",
			Handler:    _Observer_GetPeriodicTasksErrorRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/observer.proto",
}
