// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/flink.proto

package flinkpb

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/yu31/proto-go-plugin/pb/gosqlpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FlinkOperator_Type int32

const (
	FlinkOperator__Type     FlinkOperator_Type = 0
	FlinkOperator_Values    FlinkOperator_Type = 1
	FlinkOperator_Const     FlinkOperator_Type = 2
	FlinkOperator_Source    FlinkOperator_Type = 3
	FlinkOperator_Dimension FlinkOperator_Type = 4
	FlinkOperator_Dest      FlinkOperator_Type = 5
	FlinkOperator_OrderBy   FlinkOperator_Type = 6
	FlinkOperator_Limit     FlinkOperator_Type = 7
	FlinkOperator_Offset    FlinkOperator_Type = 8
	FlinkOperator_Fetch     FlinkOperator_Type = 9
	FlinkOperator_Filter    FlinkOperator_Type = 10
	FlinkOperator_Union     FlinkOperator_Type = 11
	FlinkOperator_Except    FlinkOperator_Type = 12
	FlinkOperator_Intersect FlinkOperator_Type = 13
	FlinkOperator_GroupBy   FlinkOperator_Type = 14
	FlinkOperator_Having    FlinkOperator_Type = 15
	FlinkOperator_Window    FlinkOperator_Type = 16
	FlinkOperator_Join      FlinkOperator_Type = 17
	FlinkOperator_UDTF      FlinkOperator_Type = 18
	FlinkOperator_UDTTF     FlinkOperator_Type = 19
)

// Enum value maps for FlinkOperator_Type.
var (
	FlinkOperator_Type_name = map[int32]string{
		0:  "_Type",
		1:  "Values",
		2:  "Const",
		3:  "Source",
		4:  "Dimension",
		5:  "Dest",
		6:  "OrderBy",
		7:  "Limit",
		8:  "Offset",
		9:  "Fetch",
		10: "Filter",
		11: "Union",
		12: "Except",
		13: "Intersect",
		14: "GroupBy",
		15: "Having",
		16: "Window",
		17: "Join",
		18: "UDTF",
		19: "UDTTF",
	}
	FlinkOperator_Type_value = map[string]int32{
		"_Type":     0,
		"Values":    1,
		"Const":     2,
		"Source":    3,
		"Dimension": 4,
		"Dest":      5,
		"OrderBy":   6,
		"Limit":     7,
		"Offset":    8,
		"Fetch":     9,
		"Filter":    10,
		"Union":     11,
		"Except":    12,
		"Intersect": 13,
		"GroupBy":   14,
		"Having":    15,
		"Window":    16,
		"Join":      17,
		"UDTF":      18,
		"UDTTF":     19,
	}
)

func (x FlinkOperator_Type) Enum() *FlinkOperator_Type {
	p := new(FlinkOperator_Type)
	*p = x
	return p
}

func (x FlinkOperator_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlinkOperator_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_flink_proto_enumTypes[0].Descriptor()
}

func (FlinkOperator_Type) Type() protoreflect.EnumType {
	return &file_proto_flink_proto_enumTypes[0]
}

func (x FlinkOperator_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlinkOperator_Type.Descriptor instead.
func (FlinkOperator_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{21, 0}
}

// ColumnAs
type ColumnAs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// func
	Func string `protobuf:"bytes,2,opt,name=func,proto3" json:"func" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// WindowsName
	WindowsName string `protobuf:"bytes,3,opt,name=windows_name,json=windowsName,proto3" json:"windows_name" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// Type
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"`
	// Column AS
	As string `protobuf:"bytes,5,opt,name=as,proto3" json:"as" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
}

func (x *ColumnAs) Reset() {
	*x = ColumnAs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnAs) ProtoMessage() {}

func (x *ColumnAs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnAs.ProtoReflect.Descriptor instead.
func (*ColumnAs) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnAs) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ColumnAs) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *ColumnAs) GetWindowsName() string {
	if x != nil {
		return x.WindowsName
	}
	return ""
}

func (x *ColumnAs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnAs) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

// DestOperatorProperty
type DestOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// insert into these columns
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"`
	// tableid
	TableId string `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id" binding:"len=20" required:"false" minLength:"20" maxLength:"20"`
}

func (x *DestOperator) Reset() {
	*x = DestOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestOperator) ProtoMessage() {}

func (x *DestOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestOperator.ProtoReflect.Descriptor instead.
func (*DestOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{1}
}

func (x *DestOperator) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DestOperator) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

// ValuesOperatorProperty
type ValuesOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all rows.
	Rows []*ValuesOperator_ValuesType `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows" binding:"gte=1" required:"true" minLength:"1"`
}

func (x *ValuesOperator) Reset() {
	*x = ValuesOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesOperator) ProtoMessage() {}

func (x *ValuesOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesOperator.ProtoReflect.Descriptor instead.
func (*ValuesOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{2}
}

func (x *ValuesOperator) GetRows() []*ValuesOperator_ValuesType {
	if x != nil {
		return x.Rows
	}
	return nil
}

// OrderByOperatorProperty
type OrderByOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OrderBy
	Column []*OrderByOperator_OrderByColumn `protobuf:"bytes,1,rep,name=column,proto3" json:"column" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"`
}

func (x *OrderByOperator) Reset() {
	*x = OrderByOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByOperator) ProtoMessage() {}

func (x *OrderByOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByOperator.ProtoReflect.Descriptor instead.
func (*OrderByOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{3}
}

func (x *OrderByOperator) GetColumn() []*OrderByOperator_OrderByColumn {
	if x != nil {
		return x.Column
	}
	return nil
}

// LimitOperatorProperty
type LimitOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"`
}

func (x *LimitOperator) Reset() {
	*x = LimitOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOperator) ProtoMessage() {}

func (x *LimitOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOperator.ProtoReflect.Descriptor instead.
func (*LimitOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{4}
}

func (x *LimitOperator) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// OffsetOperatorProperty
type OffsetOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"`
}

func (x *OffsetOperator) Reset() {
	*x = OffsetOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetOperator) ProtoMessage() {}

func (x *OffsetOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetOperator.ProtoReflect.Descriptor instead.
func (*OffsetOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{5}
}

func (x *OffsetOperator) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// FetchOperatorProperty
type FetchOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The limit
	Fetch int32 `protobuf:"varint,1,opt,name=fetch,proto3" json:"fetch" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"`
}

func (x *FetchOperator) Reset() {
	*x = FetchOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOperator) ProtoMessage() {}

func (x *FetchOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOperator.ProtoReflect.Descriptor instead.
func (*FetchOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{6}
}

func (x *FetchOperator) GetFetch() int32 {
	if x != nil {
		return x.Fetch
	}
	return 0
}

// UnionOperatorProperty
type UnionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bool true or false
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all"`
}

func (x *UnionOperator) Reset() {
	*x = UnionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionOperator) ProtoMessage() {}

func (x *UnionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionOperator.ProtoReflect.Descriptor instead.
func (*UnionOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{7}
}

func (x *UnionOperator) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

// GroupByOperatorProperty
type GroupByOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Groupby column
	GroupBy []string `protobuf:"bytes,1,rep,name=group_by,json=groupBy,proto3" json:"group_by" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *GroupByOperator) Reset() {
	*x = GroupByOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByOperator) ProtoMessage() {}

func (x *GroupByOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByOperator.ProtoReflect.Descriptor instead.
func (*GroupByOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{8}
}

func (x *GroupByOperator) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

// HavingOperatorProperty
type HavingOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// having code
	Having string `protobuf:"bytes,1,opt,name=having,proto3" json:"having" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *HavingOperator) Reset() {
	*x = HavingOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HavingOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HavingOperator) ProtoMessage() {}

func (x *HavingOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HavingOperator.ProtoReflect.Descriptor instead.
func (*HavingOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{9}
}

func (x *HavingOperator) GetHaving() string {
	if x != nil {
		return x.Having
	}
	return ""
}

// ConstOperatorProperty
type ConstOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table name
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,2,rep,name=column,proto3" json:"column" binding:"-"`
}

func (x *ConstOperator) Reset() {
	*x = ConstOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstOperator) ProtoMessage() {}

func (x *ConstOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstOperator.ProtoReflect.Descriptor instead.
func (*ConstOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{10}
}

func (x *ConstOperator) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ConstOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

// SourceOperatorProperty
type SourceOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableid
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" binding:"len=20" required:"false" minLength:"20" maxLength:"20"`
	// table name
	TableAs string `protobuf:"bytes,2,opt,name=table_as,json=tableAs,proto3" json:"table_as" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// distinct or all, oneof ''(empty string) 'distinct'
	Distinct string `protobuf:"bytes,3,opt,name=distinct,proto3" json:"distinct" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column" binding:"-"`
	// column define.
	CustomColumn []*ColumnAs `protobuf:"bytes,5,rep,name=custom_column,json=customColumn,proto3" json:"custom_column" binding:"-"`
	// column define.
	TimeColumn []*ColumnAs `protobuf:"bytes,6,rep,name=time_column,json=timeColumn,proto3" json:"time_column" binding:"-"`
}

func (x *SourceOperator) Reset() {
	*x = SourceOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceOperator) ProtoMessage() {}

func (x *SourceOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceOperator.ProtoReflect.Descriptor instead.
func (*SourceOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{11}
}

func (x *SourceOperator) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *SourceOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *SourceOperator) GetDistinct() string {
	if x != nil {
		return x.Distinct
	}
	return ""
}

func (x *SourceOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *SourceOperator) GetCustomColumn() []*ColumnAs {
	if x != nil {
		return x.CustomColumn
	}
	return nil
}

func (x *SourceOperator) GetTimeColumn() []*ColumnAs {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// DimensionOperatorProperty
type DimensionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableid
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" binding:"len=20" required:"false" minLength:"20" maxLength:"20"`
	// table name
	TableAs string `protobuf:"bytes,2,opt,name=table_as,json=tableAs,proto3" json:"table_as" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// distinct or all, oneof 'all' 'distinct'
	Distinct string `protobuf:"bytes,3,opt,name=distinct,proto3" json:"distinct" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column" binding:"-"`
	// column define.
	CustomColumn []*ColumnAs `protobuf:"bytes,5,rep,name=custom_column,json=customColumn,proto3" json:"custom_column" binding:"-"`
	// column define.
	TimeColumn []*ColumnAs `protobuf:"bytes,6,rep,name=time_column,json=timeColumn,proto3" json:"time_column" binding:"-"`
}

func (x *DimensionOperator) Reset() {
	*x = DimensionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionOperator) ProtoMessage() {}

func (x *DimensionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionOperator.ProtoReflect.Descriptor instead.
func (*DimensionOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{12}
}

func (x *DimensionOperator) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *DimensionOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *DimensionOperator) GetDistinct() string {
	if x != nil {
		return x.Distinct
	}
	return ""
}

func (x *DimensionOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *DimensionOperator) GetCustomColumn() []*ColumnAs {
	if x != nil {
		return x.CustomColumn
	}
	return nil
}

func (x *DimensionOperator) GetTimeColumn() []*ColumnAs {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// ExceptOperatorProperty
type ExceptOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExceptOperator) Reset() {
	*x = ExceptOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExceptOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptOperator) ProtoMessage() {}

func (x *ExceptOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptOperator.ProtoReflect.Descriptor instead.
func (*ExceptOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{13}
}

// IntersectOperatorProperty
type IntersectOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntersectOperator) Reset() {
	*x = IntersectOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectOperator) ProtoMessage() {}

func (x *IntersectOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectOperator.ProtoReflect.Descriptor instead.
func (*IntersectOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{14}
}

// FilterOperatorProperty
type FilterOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where eg: a.id = 10
	Where string `protobuf:"bytes,1,opt,name=where,proto3" json:"where" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// in: if upstreamright is not null. this is columnname, if upstreamright is null is in express  eg in(1, 2, 3)
	In string `protobuf:"bytes,2,opt,name=in,proto3" json:"in" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// Exists: if upstreamright is not null. this is columnname, if upstreamright is null is in express  eg in(1, 2, 3)
	Exists string `protobuf:"bytes,3,opt,name=exists,proto3" json:"exists" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *FilterOperator) Reset() {
	*x = FilterOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperator) ProtoMessage() {}

func (x *FilterOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperator.ProtoReflect.Descriptor instead.
func (*FilterOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{15}
}

func (x *FilterOperator) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *FilterOperator) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

func (x *FilterOperator) GetExists() string {
	if x != nil {
		return x.Exists
	}
	return ""
}

// JoinOperatorProperty
type JoinOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
	Join string `protobuf:"bytes,1,opt,name=join,proto3" json:"join" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Expression
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// table name
	TableAs string `protobuf:"bytes,3,opt,name=table_as,json=tableAs,proto3" json:"table_as" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// table name
	TableAsRight string `protobuf:"bytes,4,opt,name=table_as_right,json=tableAsRight,proto3" json:"table_as_right" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// Args
	Args string `protobuf:"bytes,5,opt,name=args,proto3" json:"args" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,6,rep,name=column,proto3" json:"column" binding:"-"`
	// column define.
	GenerateColumn []*ColumnAs `protobuf:"bytes,7,rep,name=generate_column,json=generateColumn,proto3" json:"generate_column" binding:"-"`
}

func (x *JoinOperator) Reset() {
	*x = JoinOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinOperator) ProtoMessage() {}

func (x *JoinOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinOperator.ProtoReflect.Descriptor instead.
func (*JoinOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{16}
}

func (x *JoinOperator) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *JoinOperator) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *JoinOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *JoinOperator) GetTableAsRight() string {
	if x != nil {
		return x.TableAsRight
	}
	return ""
}

func (x *JoinOperator) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *JoinOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *JoinOperator) GetGenerateColumn() []*ColumnAs {
	if x != nil {
		return x.GenerateColumn
	}
	return nil
}

// UDTFOperatorProperty
type UDTFOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// udfid in udfmanager
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// Args
	Args string `protobuf:"bytes,2,opt,name=args,proto3" json:"args" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// table name
	TableAs string `protobuf:"bytes,3,opt,name=table_as,json=tableAs,proto3" json:"table_as" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column" binding:"-"`
	// selectcolumn define.
	SelectColumn []*ColumnAs `protobuf:"bytes,5,rep,name=select_column,json=selectColumn,proto3" json:"select_column" binding:"-"`
}

func (x *UDTFOperator) Reset() {
	*x = UDTFOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTFOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTFOperator) ProtoMessage() {}

func (x *UDTFOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTFOperator.ProtoReflect.Descriptor instead.
func (*UDTFOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{17}
}

func (x *UDTFOperator) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *UDTFOperator) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *UDTFOperator) GetTableAs() string {
	if x != nil {
		return x.TableAs
	}
	return ""
}

func (x *UDTFOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *UDTFOperator) GetSelectColumn() []*ColumnAs {
	if x != nil {
		return x.SelectColumn
	}
	return nil
}

// UDTTFOperatorProperty
type UDTTFOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// udfid in udfmanager
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// Args
	Args string `protobuf:"bytes,2,opt,name=args,proto3" json:"args" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// func name
	Funcname string `protobuf:"bytes,3,opt,name=funcname,proto3" json:"funcname" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// column define.
	Column []*ColumnAs `protobuf:"bytes,4,rep,name=column,proto3" json:"column" binding:"-"`
}

func (x *UDTTFOperator) Reset() {
	*x = UDTTFOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTTFOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTTFOperator) ProtoMessage() {}

func (x *UDTTFOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTTFOperator.ProtoReflect.Descriptor instead.
func (*UDTTFOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{18}
}

func (x *UDTTFOperator) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *UDTTFOperator) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *UDTTFOperator) GetFuncname() string {
	if x != nil {
		return x.Funcname
	}
	return ""
}

func (x *UDTTFOperator) GetColumn() []*ColumnAs {
	if x != nil {
		return x.Column
	}
	return nil
}

// WindowOperatorProperty
type WindowOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Window
	Window []*WindowOperator_WindowOperatorItem `protobuf:"bytes,1,rep,name=window,proto3" json:"window" binding:"-"`
}

func (x *WindowOperator) Reset() {
	*x = WindowOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowOperator) ProtoMessage() {}

func (x *WindowOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowOperator.ProtoReflect.Descriptor instead.
func (*WindowOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{19}
}

func (x *WindowOperator) GetWindow() []*WindowOperator_WindowOperatorItem {
	if x != nil {
		return x.Window
	}
	return nil
}

// FlinkOperatorProperty
type OperatorProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source
	Source *SourceOperator `protobuf:"bytes,1,opt,name=source,proto3" json:"source" binding:"-"`
	// dest node
	Dest *DestOperator `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest" binding:"-"`
	// values node
	Values *ValuesOperator `protobuf:"bytes,3,opt,name=values,proto3" json:"values" binding:"-"`
	// OrderBy
	OrderBy *OrderByOperator `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by" binding:"-"`
	// Limit
	Limit *LimitOperator `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit" binding:"-"`
	// Offset
	Offset *OffsetOperator `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty" binding:"-"`
	// Fetch
	Fetch *FetchOperator `protobuf:"bytes,7,opt,name=fetch,proto3" json:"fetch" binding:"-"`
	// Union
	Union *UnionOperator `protobuf:"bytes,8,opt,name=union,proto3" json:"union" binding:"-"`
	// GroupBy
	GroupBy *GroupByOperator `protobuf:"bytes,9,opt,name=group_by,json=groupBy,proto3" json:"group_by" binding:"-"`
	// Having
	Having *HavingOperator `protobuf:"bytes,10,opt,name=having,proto3" json:"having" binding:"-"`
	// Const
	Const *ConstOperator `protobuf:"bytes,11,opt,name=const,proto3" json:"const" binding:"-"`
	// Dimension
	Dimension *DimensionOperator `protobuf:"bytes,12,opt,name=dimension,proto3" json:"dimension" binding:"-"`
	// Except
	Except *ExceptOperator `protobuf:"bytes,13,opt,name=except,proto3" json:"except" binding:"-"`
	// Intersect
	Intersect *IntersectOperator `protobuf:"bytes,14,opt,name=intersect,proto3" json:"intersect" binding:"-"`
	// Filter
	Filter *FilterOperator `protobuf:"bytes,15,opt,name=filter,proto3" json:"filter" binding:"-"`
	// UDTF
	Udtf *UDTFOperator `protobuf:"bytes,16,opt,name=udtf,proto3" json:"udtf" binding:"-"`
	// UDTTF
	Udttf *UDTTFOperator `protobuf:"bytes,17,opt,name=udttf,proto3" json:"udttf" binding:"-"`
	// Window
	Window *WindowOperator `protobuf:"bytes,18,opt,name=window,proto3" json:"window" binding:"-"`
	// Join
	Join *JoinOperator `protobuf:"bytes,19,opt,name=join,proto3" json:"join" binding:"-"`
}

func (x *OperatorProperty) Reset() {
	*x = OperatorProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorProperty) ProtoMessage() {}

func (x *OperatorProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorProperty.ProtoReflect.Descriptor instead.
func (*OperatorProperty) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{20}
}

func (x *OperatorProperty) GetSource() *SourceOperator {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OperatorProperty) GetDest() *DestOperator {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *OperatorProperty) GetValues() *ValuesOperator {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *OperatorProperty) GetOrderBy() *OrderByOperator {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *OperatorProperty) GetLimit() *LimitOperator {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *OperatorProperty) GetOffset() *OffsetOperator {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *OperatorProperty) GetFetch() *FetchOperator {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *OperatorProperty) GetUnion() *UnionOperator {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *OperatorProperty) GetGroupBy() *GroupByOperator {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *OperatorProperty) GetHaving() *HavingOperator {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *OperatorProperty) GetConst() *ConstOperator {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *OperatorProperty) GetDimension() *DimensionOperator {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *OperatorProperty) GetExcept() *ExceptOperator {
	if x != nil {
		return x.Except
	}
	return nil
}

func (x *OperatorProperty) GetIntersect() *IntersectOperator {
	if x != nil {
		return x.Intersect
	}
	return nil
}

func (x *OperatorProperty) GetFilter() *FilterOperator {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *OperatorProperty) GetUdtf() *UDTFOperator {
	if x != nil {
		return x.Udtf
	}
	return nil
}

func (x *OperatorProperty) GetUdttf() *UDTTFOperator {
	if x != nil {
		return x.Udttf
	}
	return nil
}

func (x *OperatorProperty) GetWindow() *WindowOperator {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *OperatorProperty) GetJoin() *JoinOperator {
	if x != nil {
		return x.Join
	}
	return nil
}

// FlinkOperator
type FlinkOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OperatorType one of "Values" "Const" "Source" "Dimension" "Dest" "OrderBy" "Limit" "Offset" "Fetch" "Filter" "Union" "Except" "Intersect" "GroupBy" "Having" "Window" "Join" "UDTF" "UDTTF"
	Type FlinkOperator_Type `protobuf:"varint,1,opt,name=type,proto3,enum=flink.FlinkOperator_Type" json:"node_type" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// nodeid is unique in this flow.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// this node name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// the upstream node id
	Upstream string `protobuf:"bytes,4,opt,name=upstream,proto3" json:"upstream" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
	// the right upstream node id
	UpstreamRight string `protobuf:"bytes,5,opt,name=upstream_right,json=upstreamRight,proto3" json:"upstream_right" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
	// the downstream node id
	DownStream string `protobuf:"bytes,6,opt,name=down_stream,json=downStream,proto3" json:"down_stream" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"`
	// the PointX
	PointX int32 `protobuf:"varint,7,opt,name=point_x,json=pointX,proto3" json:"point_x" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"`
	// the PointY
	PointY int32 `protobuf:"varint,8,opt,name=point_y,json=pointY,proto3" json:"point_y" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"`
	// this operator's property
	Property *OperatorProperty `protobuf:"bytes,9,opt,name=property,proto3" json:"property"`
}

func (x *FlinkOperator) Reset() {
	*x = FlinkOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkOperator) ProtoMessage() {}

func (x *FlinkOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkOperator.ProtoReflect.Descriptor instead.
func (*FlinkOperator) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{21}
}

func (x *FlinkOperator) GetType() FlinkOperator_Type {
	if x != nil {
		return x.Type
	}
	return FlinkOperator__Type
}

func (x *FlinkOperator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlinkOperator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlinkOperator) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

func (x *FlinkOperator) GetUpstreamRight() string {
	if x != nil {
		return x.UpstreamRight
	}
	return ""
}

func (x *FlinkOperator) GetDownStream() string {
	if x != nil {
		return x.DownStream
	}
	return ""
}

func (x *FlinkOperator) GetPointX() int32 {
	if x != nil {
		return x.PointX
	}
	return 0
}

func (x *FlinkOperator) GetPointY() int32 {
	if x != nil {
		return x.PointY
	}
	return 0
}

func (x *FlinkOperator) GetProperty() *OperatorProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

// FlinkJar
type FlinkJar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jarid in resource manager. Is resource_id.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id" binding:"len=20" minLength:"20" maxLength:"20"`
	// JarArgs
	JarArgs string `protobuf:"bytes,2,opt,name=jar_args,json=jarArgs,proto3" json:"jar_args" binding:"gte=1,lte=1024" minLength:"0" maxLength:"1024"`
	// JarEntry
	JarEntry string `protobuf:"bytes,3,opt,name=jar_entry,json=jarEntry,proto3" json:"jar_entry" binding:"gte=1,lte=1024" minLength:"0" maxLength:"1024"`
}

func (x *FlinkJar) Reset() {
	*x = FlinkJar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkJar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkJar) ProtoMessage() {}

func (x *FlinkJar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkJar.ProtoReflect.Descriptor instead.
func (*FlinkJar) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{22}
}

func (x *FlinkJar) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *FlinkJar) GetJarArgs() string {
	if x != nil {
		return x.JarArgs
	}
	return ""
}

func (x *FlinkJar) GetJarEntry() string {
	if x != nil {
		return x.JarEntry
	}
	return ""
}

// ScalaOperatorProperty
type FlinkScala struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"`
}

func (x *FlinkScala) Reset() {
	*x = FlinkScala{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkScala) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkScala) ProtoMessage() {}

func (x *FlinkScala) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkScala.ProtoReflect.Descriptor instead.
func (*FlinkScala) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{23}
}

func (x *FlinkScala) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// PythonOperatorProperty
type FlinkPython struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"`
}

func (x *FlinkPython) Reset() {
	*x = FlinkPython{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkPython) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkPython) ProtoMessage() {}

func (x *FlinkPython) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkPython.ProtoReflect.Descriptor instead.
func (*FlinkPython) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{24}
}

func (x *FlinkPython) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// FlinkSQL
type FlinkSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sql code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"`
}

func (x *FlinkSQL) Reset() {
	*x = FlinkSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkSQL) ProtoMessage() {}

func (x *FlinkSQL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkSQL.ProtoReflect.Descriptor instead.
func (*FlinkSQL) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{25}
}

func (x *FlinkSQL) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// SqlColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column comment
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// if it is primary key column, one of true/false
	PrimaryKey string `protobuf:"bytes,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"`
	// the column type length
	Length string `protobuf:"bytes,5,opt,name=Length,proto3" json:"length" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"`
}

func (x *SqlColumnType) Reset() {
	*x = SqlColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlColumnType) ProtoMessage() {}

func (x *SqlColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlColumnType.ProtoReflect.Descriptor instead.
func (*SqlColumnType) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{26}
}

func (x *SqlColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlColumnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlColumnType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SqlColumnType) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SqlColumnType) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

// SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
type SqlTimeColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column name
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// The column type. oneof proctime/watermark
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type" binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"`
	// The column expression
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"`
}

func (x *SqlTimeColumnType) Reset() {
	*x = SqlTimeColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimeColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimeColumnType) ProtoMessage() {}

func (x *SqlTimeColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimeColumnType.ProtoReflect.Descriptor instead.
func (*SqlTimeColumnType) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{27}
}

func (x *SqlTimeColumnType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SqlTimeColumnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlTimeColumnType) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// ConnectorOption used as request parameters for RPC and HTTP(based on Body)
type ConnectorOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The config name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"`
	// The config value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"`
}

func (x *ConnectorOption) Reset() {
	*x = ConnectorOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorOption) ProtoMessage() {}

func (x *ConnectorOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorOption.ProtoReflect.Descriptor instead.
func (*ConnectorOption) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{28}
}

func (x *ConnectorOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectorOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
type MySQLTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName,proto3" json:"mapping_name" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *MySQLTable) Reset() {
	*x = MySQLTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLTable) ProtoMessage() {}

func (x *MySQLTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLTable.ProtoReflect.Descriptor instead.
func (*MySQLTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{29}
}

func (x *MySQLTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *MySQLTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *MySQLTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *MySQLTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
type PostgreSQLTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName,proto3" json:"mapping_name" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *PostgreSQLTable) Reset() {
	*x = PostgreSQLTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQLTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTable) ProtoMessage() {}

func (x *PostgreSQLTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTable.ProtoReflect.Descriptor instead.
func (*PostgreSQLTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{30}
}

func (x *PostgreSQLTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *PostgreSQLTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *PostgreSQLTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *PostgreSQLTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
type ClickHouseTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=MappingName,proto3" json:"mapping_name" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *ClickHouseTable) Reset() {
	*x = ClickHouseTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickHouseTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseTable) ProtoMessage() {}

func (x *ClickHouseTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseTable.ProtoReflect.Descriptor instead.
func (*ClickHouseTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{31}
}

func (x *ClickHouseTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *ClickHouseTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *ClickHouseTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *ClickHouseTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
type HBaseTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the table name in origin upstream node.
	MappingName string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName,proto3" json:"mapping_name" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,3,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,4,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *HBaseTable) Reset() {
	*x = HBaseTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBaseTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBaseTable) ProtoMessage() {}

func (x *HBaseTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBaseTable.ProtoReflect.Descriptor instead.
func (*HBaseTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{32}
}

func (x *HBaseTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HBaseTable) GetMappingName() string {
	if x != nil {
		return x.MappingName
	}
	return ""
}

func (x *HBaseTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *HBaseTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
type HDFSTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *HDFSTable) Reset() {
	*x = HDFSTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDFSTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSTable) ProtoMessage() {}

func (x *HDFSTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSTable.ProtoReflect.Descriptor instead.
func (*HDFSTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{33}
}

func (x *HDFSTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *HDFSTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *HDFSTable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HDFSTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *HDFSTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// S3TableDefine used as request parameters for RPC and HTTP(based on Body)
type S3Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *S3Table) Reset() {
	*x = S3Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Table) ProtoMessage() {}

func (x *S3Table) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Table.ProtoReflect.Descriptor instead.
func (*S3Table) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{34}
}

func (x *S3Table) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *S3Table) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *S3Table) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *S3Table) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *S3Table) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
type FtpTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *FtpTable) Reset() {
	*x = FtpTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpTable) ProtoMessage() {}

func (x *FtpTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpTable.ProtoReflect.Descriptor instead.
func (*FtpTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{35}
}

func (x *FtpTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *FtpTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FtpTable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FtpTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *FtpTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

// KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
type KafkaTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// columns info.
	SqlColumn []*SqlColumnType `protobuf:"bytes,1,rep,name=sql_column,json=sqlColumn,proto3" json:"sql_column"`
	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// the data path
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
	// connection config values.
	ConnectorOptions []*ConnectorOption `protobuf:"bytes,4,rep,name=connector_options,json=connectorOptions,proto3" json:"connector_options"`
	// timecolumns info.
	TimeColumn []*SqlTimeColumnType `protobuf:"bytes,5,rep,name=time_column,json=timeColumn,proto3" json:"time_column"`
}

func (x *KafkaTable) Reset() {
	*x = KafkaTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTable) ProtoMessage() {}

func (x *KafkaTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTable.ProtoReflect.Descriptor instead.
func (*KafkaTable) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{36}
}

func (x *KafkaTable) GetSqlColumn() []*SqlColumnType {
	if x != nil {
		return x.SqlColumn
	}
	return nil
}

func (x *KafkaTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *KafkaTable) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaTable) GetConnectorOptions() []*ConnectorOption {
	if x != nil {
		return x.ConnectorOptions
	}
	return nil
}

func (x *KafkaTable) GetTimeColumn() []*SqlTimeColumnType {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL Table Info.
	Mysql *MySQLTable `protobuf:"bytes,1,opt,name=mysql,proto3" json:"mysql"`
	// PostgreSQL Table Info.
	Postgresql *PostgreSQLTable `protobuf:"bytes,2,opt,name=postgresql,proto3" json:"postgresql"`
	// ClickHouse Table Info.
	Clickhouse *ClickHouseTable `protobuf:"bytes,3,opt,name=clickhouse,proto3" json:"clickhouse"`
	// Hbase Table Info.
	Hbase *HBaseTable `protobuf:"bytes,4,opt,name=Hbase,proto3" json:"hbase"`
	// Kafka Table Info.
	Kafka *KafkaTable `protobuf:"bytes,5,opt,name=kafka,proto3" json:"kafka"`
	// S3 Table Info.
	S3 *S3Table `protobuf:"bytes,6,opt,name=s3,proto3" json:"s3"`
	// Ftp Table Info.
	Ftp *FtpTable `protobuf:"bytes,7,opt,name=ftp,proto3" json:"ftp"`
	// HDFS Table Info.
	Hdfs *HDFSTable `protobuf:"bytes,8,opt,name=hdfs,proto3" json:"hdfs"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{37}
}

func (x *TableSchema) GetMysql() *MySQLTable {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *TableSchema) GetPostgresql() *PostgreSQLTable {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *TableSchema) GetClickhouse() *ClickHouseTable {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *TableSchema) GetHbase() *HBaseTable {
	if x != nil {
		return x.Hbase
	}
	return nil
}

func (x *TableSchema) GetKafka() *KafkaTable {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *TableSchema) GetS3() *S3Table {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *TableSchema) GetFtp() *FtpTable {
	if x != nil {
		return x.Ftp
	}
	return nil
}

func (x *TableSchema) GetHdfs() *HDFSTable {
	if x != nil {
		return x.Hdfs
	}
	return nil
}

// FlinkConfig
type FlinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custom []*FlinkConfig_Item `protobuf:"bytes,1,rep,name=custom,proto3" json:"custom" binding:"-"`
	// Is required.
	RestartStrategy *FlinkConfig_RestartStrategy `protobuf:"bytes,2,opt,name=restart_strategy,json=restartStrategy,proto3" json:"restart_strategy" binding:"-"`
	// Is required.
	Logger *FlinkConfig_Logger `protobuf:"bytes,3,opt,name=logger,proto3" json:"logger" binding:"-"`
}

func (x *FlinkConfig) Reset() {
	*x = FlinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig) ProtoMessage() {}

func (x *FlinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig.ProtoReflect.Descriptor instead.
func (*FlinkConfig) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{38}
}

func (x *FlinkConfig) GetCustom() []*FlinkConfig_Item {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *FlinkConfig) GetRestartStrategy() *FlinkConfig_RestartStrategy {
	if x != nil {
		return x.RestartStrategy
	}
	return nil
}

func (x *FlinkConfig) GetLogger() *FlinkConfig_Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

type ValuesOperator_ValuesType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is one row.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values" binding:"gte=1" required:"false" minLength:"1"`
}

func (x *ValuesOperator_ValuesType) Reset() {
	*x = ValuesOperator_ValuesType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesOperator_ValuesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesOperator_ValuesType) ProtoMessage() {}

func (x *ValuesOperator_ValuesType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesOperator_ValuesType.ProtoReflect.Descriptor instead.
func (*ValuesOperator_ValuesType) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ValuesOperator_ValuesType) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type OrderByOperator_OrderByColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
	// order oneof 'asc' 'desc'
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"`
}

func (x *OrderByOperator_OrderByColumn) Reset() {
	*x = OrderByOperator_OrderByColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByOperator_OrderByColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByOperator_OrderByColumn) ProtoMessage() {}

func (x *OrderByOperator_OrderByColumn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByOperator_OrderByColumn.ProtoReflect.Descriptor instead.
func (*OrderByOperator_OrderByColumn) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OrderByOperator_OrderByColumn) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OrderByOperator_OrderByColumn) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type WindowOperator_WindowOperatorItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// Spec
	Spec string `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"`
}

func (x *WindowOperator_WindowOperatorItem) Reset() {
	*x = WindowOperator_WindowOperatorItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowOperator_WindowOperatorItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowOperator_WindowOperatorItem) ProtoMessage() {}

func (x *WindowOperator_WindowOperatorItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowOperator_WindowOperatorItem.ProtoReflect.Descriptor instead.
func (*WindowOperator_WindowOperatorItem) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{19, 0}
}

func (x *WindowOperator_WindowOperatorItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowOperator_WindowOperatorItem) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

// Item for uses-defined config.
type FlinkConfig_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key in key/value item, Is required, Min: 1, Max: 1024.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key" binding:"gte=1,lte=1024" minLength:"1" maxLength:"1024"`
	// The value in key/value item, Is required, Min: 1, Max: 1024.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" binding:"gte=1,lte=1024" minLength:"1" maxLength:"1024"`
}

func (x *FlinkConfig_Item) Reset() {
	*x = FlinkConfig_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_Item) ProtoMessage() {}

func (x *FlinkConfig_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_Item.ProtoReflect.Descriptor instead.
func (*FlinkConfig_Item) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{38, 0}
}

func (x *FlinkConfig_Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FlinkConfig_Item) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Config for flink restart strategy.
type FlinkConfig_RestartStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
	RestartStrategy string `protobuf:"bytes,1,opt,name=restart_strategy,json=restartStrategy,proto3" json:"restart_strategy" default:"1" binding:"oneof=none fixed-delay failure-rate"`
	// Affect when restart_strategy == "fixed-delay". Default 1.
	FixedDelayAttempts int32 `protobuf:"varint,2,opt,name=fixed_delay_attempts,json=fixedDelayAttempts,proto3" json:"fixed_delay_attempts" default:"1" binding:"-"`
	// Affect when restart_strategy == "fixed-delay". Default 1, unit is second.
	FixedDelayDelay int32 `protobuf:"varint,3,opt,name=fixed_delay_delay,json=fixedDelayDelay,proto3" json:"fixed_delay_delay" default:"1" binding:"-"`
	// Affect when restart_strategy == "failure-rate". Default 1.
	FailureRateMaxFailuresPerInterval int32 `protobuf:"varint,4,opt,name=failure_rate_max_failures_per_interval,json=failureRateMaxFailuresPerInterval,proto3" json:"failure_rate_max_failures_per_interval" default:"1" binding:"-"`
	// Affect when restart_strategy == "failure-rate". Default 1. unit is second.
	FailureRateDelay int32 `protobuf:"varint,5,opt,name=failure_rate_delay,json=failureRateDelay,proto3" json:"failure_rate_delay" default:"1" binding:"-"`
	// Affect when restart_strategy == "failure-rate". Default 3, unit is minute.
	FailureRateFailureRateInterval int32 `protobuf:"varint,6,opt,name=failure_rate_failure_rate_interval,json=failureRateFailureRateInterval,proto3" json:"failure_rate_failure_rate_interval" default:"3" binding:"-"`
}

func (x *FlinkConfig_RestartStrategy) Reset() {
	*x = FlinkConfig_RestartStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_RestartStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_RestartStrategy) ProtoMessage() {}

func (x *FlinkConfig_RestartStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_RestartStrategy.ProtoReflect.Descriptor instead.
func (*FlinkConfig_RestartStrategy) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{38, 1}
}

func (x *FlinkConfig_RestartStrategy) GetRestartStrategy() string {
	if x != nil {
		return x.RestartStrategy
	}
	return ""
}

func (x *FlinkConfig_RestartStrategy) GetFixedDelayAttempts() int32 {
	if x != nil {
		return x.FixedDelayAttempts
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFixedDelayDelay() int32 {
	if x != nil {
		return x.FixedDelayDelay
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFailureRateMaxFailuresPerInterval() int32 {
	if x != nil {
		return x.FailureRateMaxFailuresPerInterval
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFailureRateDelay() int32 {
	if x != nil {
		return x.FailureRateDelay
	}
	return 0
}

func (x *FlinkConfig_RestartStrategy) GetFailureRateFailureRateInterval() int32 {
	if x != nil {
		return x.FailureRateFailureRateInterval
	}
	return 0
}

// Log config.
type FlinkConfig_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
	RootLogLevel string `protobuf:"bytes,1,opt,name=root_log_level,json=rootLogLevel,proto3" json:"root_log_level" default:"INFO" binding:"TRACE DEBUG INFO WARN ERROR"`
}

func (x *FlinkConfig_Logger) Reset() {
	*x = FlinkConfig_Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flink_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlinkConfig_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkConfig_Logger) ProtoMessage() {}

func (x *FlinkConfig_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flink_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkConfig_Logger.ProtoReflect.Descriptor instead.
func (*FlinkConfig_Logger) Descriptor() ([]byte, []int) {
	return file_proto_flink_proto_rawDescGZIP(), []int{38, 2}
}

func (x *FlinkConfig_Logger) GetRootLogLevel() string {
	if x != nil {
		return x.RootLogLevel
	}
	return ""
}

var File_proto_flink_proto protoreflect.FileDescriptor

var file_proto_flink_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f,
	0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x66,
	0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x04, 0x66, 0x75,
	0x6e, 0x63, 0x12, 0x34, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52,
	0x02, 0x61, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x70, 0x00, 0x78, 0xa1, 0x9c, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a,
	0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x1a, 0x2c, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x70, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x61, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x0d, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3b, 0x0a, 0x0e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11,
	0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78,
	0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x2f, 0x0a, 0x0d, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70,
	0x00, 0x78, 0x65, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x22, 0x27, 0x0a, 0x0d, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x22, 0x37, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00,
	0x78, 0x81, 0x08, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x33, 0x0a, 0x0e,
	0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x22, 0x67, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x78, 0x41, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xb4, 0x02, 0x0a, 0x0e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x78, 0x41, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x22, 0xb7, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2,
	0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f,
	0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x13, 0x0a,
	0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x02, 0x69, 0x6e,
	0x12, 0x21, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x6a, 0x6f,
	0x69, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81,
	0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x78, 0x41, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x55, 0x44, 0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x75, 0x64,
	0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73,
	0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41,
	0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x0d,
	0x55, 0x44, 0x54, 0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x75, 0x64, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x41, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x51, 0x0a, 0x12,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22,
	0xfa, 0x07, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x30, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x64, 0x74, 0x66, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x44,
	0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x04, 0x75, 0x64, 0x74, 0x66, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x64, 0x74, 0x74, 0x66, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x44,
	0x54, 0x54, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x05, 0x75, 0x64, 0x74, 0x74, 0x66, 0x12, 0x33, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2d, 0x0a,
	0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x22, 0x9e, 0x05, 0x0a,
	0x0d, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x15, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x15, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x78, 0x41, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d,
	0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x15, 0x52, 0x08, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x78, 0x15, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x15, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xc9,
	0x01, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x70, 0x00, 0x78, 0xc9, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x59, 0x12, 0x39, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x10, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x44, 0x54, 0x46,
	0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x44, 0x54, 0x54, 0x46, 0x10, 0x13, 0x22, 0x91, 0x01,
	0x0a, 0x08, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x4a, 0x61, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x08, 0x6a, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x07, 0x6a, 0x61, 0x72, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x09, 0x6a, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x08, 0x6a, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x35, 0x0a, 0x0a, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x12,
	0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2,
	0xdf, 0x1f, 0x0f, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0xc1,
	0xb8, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f, 0x70, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0xc1, 0xb8, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x33, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x51, 0x4c, 0x12, 0x27, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe2, 0xdf, 0x1f, 0x0f,
	0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0xc1, 0xb8, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x41, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x02, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x70, 0x00, 0x78, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x78, 0x0b, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x87, 0x01, 0x0a, 0x11,
	0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x11, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x70, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x81, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81,
	0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x0a, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x96, 0x02, 0x0a,
	0x0f, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x70,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41, 0x52, 0x0b, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x91, 0x02,
	0x0a, 0x0a, 0x48, 0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2,
	0xdf, 0x1f, 0x0d, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x78, 0x41,
	0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a,
	0x00, 0x22, 0x9b, 0x02, 0x0a, 0x09, 0x48, 0x44, 0x46, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22,
	0x99, 0x02, 0x0a, 0x07, 0x53, 0x33, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81,
	0x08, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9a, 0x02, 0x0a, 0x08,
	0x46, 0x74, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0x9e, 0x02, 0x0a, 0x0a, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x81, 0x08, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xe9, 0x02, 0x0a, 0x0b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x48, 0x42, 0x61, 0x73, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x48, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x12, 0x1e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x33, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x02, 0x73, 0x33, 0x12, 0x21, 0x0a, 0x03, 0x66, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x74, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x03, 0x66, 0x74, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x64, 0x66, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x48, 0x44,
	0x46, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x68, 0x64, 0x66, 0x73, 0x3a, 0x06, 0xca,
	0xb2, 0x04, 0x02, 0x0a, 0x00, 0x22, 0xba, 0x05, 0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46,
	0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x44,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xed, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x26, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x1a, 0x34, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x72, 0x6f,
	0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x06, 0xca, 0xb2, 0x04, 0x02,
	0x0a, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_flink_proto_rawDescOnce sync.Once
	file_proto_flink_proto_rawDescData = file_proto_flink_proto_rawDesc
)

func file_proto_flink_proto_rawDescGZIP() []byte {
	file_proto_flink_proto_rawDescOnce.Do(func() {
		file_proto_flink_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_flink_proto_rawDescData)
	})
	return file_proto_flink_proto_rawDescData
}

var file_proto_flink_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_flink_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_proto_flink_proto_goTypes = []interface{}{
	(FlinkOperator_Type)(0),                   // 0: flink.FlinkOperator.Type
	(*ColumnAs)(nil),                          // 1: flink.ColumnAs
	(*DestOperator)(nil),                      // 2: flink.DestOperator
	(*ValuesOperator)(nil),                    // 3: flink.ValuesOperator
	(*OrderByOperator)(nil),                   // 4: flink.OrderByOperator
	(*LimitOperator)(nil),                     // 5: flink.LimitOperator
	(*OffsetOperator)(nil),                    // 6: flink.OffsetOperator
	(*FetchOperator)(nil),                     // 7: flink.FetchOperator
	(*UnionOperator)(nil),                     // 8: flink.UnionOperator
	(*GroupByOperator)(nil),                   // 9: flink.GroupByOperator
	(*HavingOperator)(nil),                    // 10: flink.HavingOperator
	(*ConstOperator)(nil),                     // 11: flink.ConstOperator
	(*SourceOperator)(nil),                    // 12: flink.SourceOperator
	(*DimensionOperator)(nil),                 // 13: flink.DimensionOperator
	(*ExceptOperator)(nil),                    // 14: flink.ExceptOperator
	(*IntersectOperator)(nil),                 // 15: flink.IntersectOperator
	(*FilterOperator)(nil),                    // 16: flink.FilterOperator
	(*JoinOperator)(nil),                      // 17: flink.JoinOperator
	(*UDTFOperator)(nil),                      // 18: flink.UDTFOperator
	(*UDTTFOperator)(nil),                     // 19: flink.UDTTFOperator
	(*WindowOperator)(nil),                    // 20: flink.WindowOperator
	(*OperatorProperty)(nil),                  // 21: flink.OperatorProperty
	(*FlinkOperator)(nil),                     // 22: flink.FlinkOperator
	(*FlinkJar)(nil),                          // 23: flink.FlinkJar
	(*FlinkScala)(nil),                        // 24: flink.FlinkScala
	(*FlinkPython)(nil),                       // 25: flink.FlinkPython
	(*FlinkSQL)(nil),                          // 26: flink.FlinkSQL
	(*SqlColumnType)(nil),                     // 27: flink.SqlColumnType
	(*SqlTimeColumnType)(nil),                 // 28: flink.SqlTimeColumnType
	(*ConnectorOption)(nil),                   // 29: flink.ConnectorOption
	(*MySQLTable)(nil),                        // 30: flink.MySQLTable
	(*PostgreSQLTable)(nil),                   // 31: flink.PostgreSQLTable
	(*ClickHouseTable)(nil),                   // 32: flink.ClickHouseTable
	(*HBaseTable)(nil),                        // 33: flink.HBaseTable
	(*HDFSTable)(nil),                         // 34: flink.HDFSTable
	(*S3Table)(nil),                           // 35: flink.S3Table
	(*FtpTable)(nil),                          // 36: flink.FtpTable
	(*KafkaTable)(nil),                        // 37: flink.KafkaTable
	(*TableSchema)(nil),                       // 38: flink.TableSchema
	(*FlinkConfig)(nil),                       // 39: flink.FlinkConfig
	(*ValuesOperator_ValuesType)(nil),         // 40: flink.ValuesOperator.ValuesType
	(*OrderByOperator_OrderByColumn)(nil),     // 41: flink.OrderByOperator.OrderByColumn
	(*WindowOperator_WindowOperatorItem)(nil), // 42: flink.WindowOperator.WindowOperatorItem
	(*FlinkConfig_Item)(nil),                  // 43: flink.FlinkConfig.Item
	(*FlinkConfig_RestartStrategy)(nil),       // 44: flink.FlinkConfig.RestartStrategy
	(*FlinkConfig_Logger)(nil),                // 45: flink.FlinkConfig.Logger
}
var file_proto_flink_proto_depIdxs = []int32{
	40, // 0: flink.ValuesOperator.rows:type_name -> flink.ValuesOperator.ValuesType
	41, // 1: flink.OrderByOperator.column:type_name -> flink.OrderByOperator.OrderByColumn
	1,  // 2: flink.ConstOperator.column:type_name -> flink.ColumnAs
	1,  // 3: flink.SourceOperator.column:type_name -> flink.ColumnAs
	1,  // 4: flink.SourceOperator.custom_column:type_name -> flink.ColumnAs
	1,  // 5: flink.SourceOperator.time_column:type_name -> flink.ColumnAs
	1,  // 6: flink.DimensionOperator.column:type_name -> flink.ColumnAs
	1,  // 7: flink.DimensionOperator.custom_column:type_name -> flink.ColumnAs
	1,  // 8: flink.DimensionOperator.time_column:type_name -> flink.ColumnAs
	1,  // 9: flink.JoinOperator.column:type_name -> flink.ColumnAs
	1,  // 10: flink.JoinOperator.generate_column:type_name -> flink.ColumnAs
	1,  // 11: flink.UDTFOperator.column:type_name -> flink.ColumnAs
	1,  // 12: flink.UDTFOperator.select_column:type_name -> flink.ColumnAs
	1,  // 13: flink.UDTTFOperator.column:type_name -> flink.ColumnAs
	42, // 14: flink.WindowOperator.window:type_name -> flink.WindowOperator.WindowOperatorItem
	12, // 15: flink.OperatorProperty.source:type_name -> flink.SourceOperator
	2,  // 16: flink.OperatorProperty.dest:type_name -> flink.DestOperator
	3,  // 17: flink.OperatorProperty.values:type_name -> flink.ValuesOperator
	4,  // 18: flink.OperatorProperty.order_by:type_name -> flink.OrderByOperator
	5,  // 19: flink.OperatorProperty.limit:type_name -> flink.LimitOperator
	6,  // 20: flink.OperatorProperty.offset:type_name -> flink.OffsetOperator
	7,  // 21: flink.OperatorProperty.fetch:type_name -> flink.FetchOperator
	8,  // 22: flink.OperatorProperty.union:type_name -> flink.UnionOperator
	9,  // 23: flink.OperatorProperty.group_by:type_name -> flink.GroupByOperator
	10, // 24: flink.OperatorProperty.having:type_name -> flink.HavingOperator
	11, // 25: flink.OperatorProperty.const:type_name -> flink.ConstOperator
	13, // 26: flink.OperatorProperty.dimension:type_name -> flink.DimensionOperator
	14, // 27: flink.OperatorProperty.except:type_name -> flink.ExceptOperator
	15, // 28: flink.OperatorProperty.intersect:type_name -> flink.IntersectOperator
	16, // 29: flink.OperatorProperty.filter:type_name -> flink.FilterOperator
	18, // 30: flink.OperatorProperty.udtf:type_name -> flink.UDTFOperator
	19, // 31: flink.OperatorProperty.udttf:type_name -> flink.UDTTFOperator
	20, // 32: flink.OperatorProperty.window:type_name -> flink.WindowOperator
	17, // 33: flink.OperatorProperty.join:type_name -> flink.JoinOperator
	0,  // 34: flink.FlinkOperator.type:type_name -> flink.FlinkOperator.Type
	21, // 35: flink.FlinkOperator.property:type_name -> flink.OperatorProperty
	27, // 36: flink.MySQLTable.sql_column:type_name -> flink.SqlColumnType
	29, // 37: flink.MySQLTable.connector_options:type_name -> flink.ConnectorOption
	28, // 38: flink.MySQLTable.time_column:type_name -> flink.SqlTimeColumnType
	27, // 39: flink.PostgreSQLTable.sql_column:type_name -> flink.SqlColumnType
	29, // 40: flink.PostgreSQLTable.connector_options:type_name -> flink.ConnectorOption
	28, // 41: flink.PostgreSQLTable.time_column:type_name -> flink.SqlTimeColumnType
	27, // 42: flink.ClickHouseTable.sql_column:type_name -> flink.SqlColumnType
	29, // 43: flink.ClickHouseTable.connector_options:type_name -> flink.ConnectorOption
	28, // 44: flink.ClickHouseTable.time_column:type_name -> flink.SqlTimeColumnType
	27, // 45: flink.HBaseTable.sql_column:type_name -> flink.SqlColumnType
	29, // 46: flink.HBaseTable.connector_options:type_name -> flink.ConnectorOption
	28, // 47: flink.HBaseTable.time_column:type_name -> flink.SqlTimeColumnType
	27, // 48: flink.HDFSTable.sql_column:type_name -> flink.SqlColumnType
	29, // 49: flink.HDFSTable.connector_options:type_name -> flink.ConnectorOption
	28, // 50: flink.HDFSTable.time_column:type_name -> flink.SqlTimeColumnType
	27, // 51: flink.S3Table.sql_column:type_name -> flink.SqlColumnType
	29, // 52: flink.S3Table.connector_options:type_name -> flink.ConnectorOption
	28, // 53: flink.S3Table.time_column:type_name -> flink.SqlTimeColumnType
	27, // 54: flink.FtpTable.sql_column:type_name -> flink.SqlColumnType
	29, // 55: flink.FtpTable.connector_options:type_name -> flink.ConnectorOption
	28, // 56: flink.FtpTable.time_column:type_name -> flink.SqlTimeColumnType
	27, // 57: flink.KafkaTable.sql_column:type_name -> flink.SqlColumnType
	29, // 58: flink.KafkaTable.connector_options:type_name -> flink.ConnectorOption
	28, // 59: flink.KafkaTable.time_column:type_name -> flink.SqlTimeColumnType
	30, // 60: flink.TableSchema.mysql:type_name -> flink.MySQLTable
	31, // 61: flink.TableSchema.postgresql:type_name -> flink.PostgreSQLTable
	32, // 62: flink.TableSchema.clickhouse:type_name -> flink.ClickHouseTable
	33, // 63: flink.TableSchema.Hbase:type_name -> flink.HBaseTable
	37, // 64: flink.TableSchema.kafka:type_name -> flink.KafkaTable
	35, // 65: flink.TableSchema.s3:type_name -> flink.S3Table
	36, // 66: flink.TableSchema.ftp:type_name -> flink.FtpTable
	34, // 67: flink.TableSchema.hdfs:type_name -> flink.HDFSTable
	43, // 68: flink.FlinkConfig.custom:type_name -> flink.FlinkConfig.Item
	44, // 69: flink.FlinkConfig.restart_strategy:type_name -> flink.FlinkConfig.RestartStrategy
	45, // 70: flink.FlinkConfig.logger:type_name -> flink.FlinkConfig.Logger
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_proto_flink_proto_init() }
func file_proto_flink_proto_init() {
	if File_proto_flink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_flink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnAs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HavingOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExceptOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTFOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTTFOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkJar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkScala); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkPython); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimeColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQLTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickHouseTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBaseTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDFSTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesOperator_ValuesType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByOperator_OrderByColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowOperator_WindowOperatorItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_RestartStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flink_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlinkConfig_Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_flink_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_flink_proto_goTypes,
		DependencyIndexes: file_proto_flink_proto_depIdxs,
		EnumInfos:         file_proto_flink_proto_enumTypes,
		MessageInfos:      file_proto_flink_proto_msgTypes,
	}.Build()
	File_proto_flink_proto = out.File
	file_proto_flink_proto_rawDesc = nil
	file_proto_flink_proto_goTypes = nil
	file_proto_flink_proto_depIdxs = nil
}
