// Code generated by protoc-gen-govalidator. DO NOT EDIT.
// versions:
// 		protoc-gen-govalidator v0.1
// source: proto/flink.proto

package flinkpb

import (
	_ "github.com/yu31/proto-go-plugin/pkg/pb/defaultspb"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/gosqlpb"
	_ "github.com/yu31/proto-go-plugin/pkg/pb/validatorpb"
	protovalidator "github.com/yu31/proto-go-plugin/pkg/protovalidator"
	strconv "strconv"
)

func (this *ColumnAs) _xxx_xxx_Validator_Validate_field() error {
	if !(len(this.Field) >= 0) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'field' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Field))
	}
	if !(len(this.Field) <= 64) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'field' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Field))
	}
	return nil
}

func (this *ColumnAs) _xxx_xxx_Validator_Validate_func() error {
	if !(len(this.Func) >= 0) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'func' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Func))
	}
	if !(len(this.Func) <= 64) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'func' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Func))
	}
	return nil
}

func (this *ColumnAs) _xxx_xxx_Validator_Validate_type() error {
	if !(len(this.Type) >= 0) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'type' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Type))
	}
	if !(len(this.Type) <= 256) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'type' must be less than or equal to '256'", protovalidator.StringByteLenToString(this.Type))
	}
	return nil
}

func (this *ColumnAs) _xxx_xxx_Validator_Validate_as() error {
	if !(len(this.As) >= 0) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'as' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.As))
	}
	if !(len(this.As) <= 64) {
		return protovalidator.FieldError1("ColumnAs", "the byte length of field 'as' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.As))
	}
	return nil
}

// Set default value for message flink.ColumnAs
func (this *ColumnAs) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_field(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_func(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_as(); err != nil {
		return err
	}
	return nil
}

func (this *DestOperator) _xxx_xxx_Validator_Validate_columns() error {
	if !(len(this.Columns) > 0) {
		return protovalidator.FieldError1("DestOperator", "the length of field 'columns' must be greater than '0'", strconv.Itoa(len(this.Columns)))
	}
	if !(len(this.Columns) <= 20000) {
		return protovalidator.FieldError1("DestOperator", "the length of field 'columns' must be less than or equal to '20000'", strconv.Itoa(len(this.Columns)))
	}
	return nil
}

func (this *DestOperator) _xxx_xxx_Validator_Validate_table_id() error {
	if !(len(this.TableId) == 20) {
		return protovalidator.FieldError1("DestOperator", "the byte length of field 'table_id' must be equal to '20'", protovalidator.StringByteLenToString(this.TableId))
	}
	return nil
}

// Set default value for message flink.DestOperator
func (this *DestOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_columns(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_id(); err != nil {
		return err
	}
	return nil
}

func (this *ValuesOperator) _xxx_xxx_Validator_Validate_rows() error {
	if !(len(this.Rows) > 0) {
		return protovalidator.FieldError1("ValuesOperator", "the length of field 'rows' must be greater than '0'", strconv.Itoa(len(this.Rows)))
	}
	for _, item := range this.Rows {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.ValuesOperator
func (this *ValuesOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_rows(); err != nil {
		return err
	}
	return nil
}

func (this *ValuesOperator_ValuesType) _xxx_xxx_Validator_Validate_values() error {
	if !(len(this.Values) > 0) {
		return protovalidator.FieldError1("ValuesOperator_ValuesType", "the length of field 'values' must be greater than '0'", strconv.Itoa(len(this.Values)))
	}
	return nil
}

// Set default value for message flink.ValuesOperator.ValuesType
func (this *ValuesOperator_ValuesType) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_values(); err != nil {
		return err
	}
	return nil
}

func (this *OrderByOperator) _xxx_xxx_Validator_Validate_column() error {
	if !(len(this.Column) > 0) {
		return protovalidator.FieldError1("OrderByOperator", "the length of field 'column' must be greater than '0'", strconv.Itoa(len(this.Column)))
	}
	if !(len(this.Column) <= 1025) {
		return protovalidator.FieldError1("OrderByOperator", "the length of field 'column' must be less than or equal to '1025'", strconv.Itoa(len(this.Column)))
	}
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.OrderByOperator
func (this *OrderByOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	return nil
}

func (this *OrderByOperator_OrderByColumn) _xxx_xxx_Validator_Validate_field() error {
	if !(len(this.Field) >= 0) {
		return protovalidator.FieldError1("OrderByOperator_OrderByColumn", "the byte length of field 'field' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Field))
	}
	if !(len(this.Field) <= 64) {
		return protovalidator.FieldError1("OrderByOperator_OrderByColumn", "the byte length of field 'field' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Field))
	}
	return nil
}

func (this *OrderByOperator_OrderByColumn) _xxx_xxx_Validator_Validate_order() error {
	if !(len(this.Order) >= 0) {
		return protovalidator.FieldError1("OrderByOperator_OrderByColumn", "the byte length of field 'order' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Order))
	}
	if !(len(this.Order) <= 64) {
		return protovalidator.FieldError1("OrderByOperator_OrderByColumn", "the byte length of field 'order' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Order))
	}
	return nil
}

// Set default value for message flink.OrderByOperator.OrderByColumn
func (this *OrderByOperator_OrderByColumn) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_field(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_order(); err != nil {
		return err
	}
	return nil
}

func (this *LimitOperator) _xxx_xxx_Validator_Validate_limit() error {
	if !(this.Limit > 0) {
		return protovalidator.FieldError1("LimitOperator", "the value of field 'limit' must be greater than '0'", protovalidator.Int32ToString(this.Limit))
	}
	if !(this.Limit <= 100) {
		return protovalidator.FieldError1("LimitOperator", "the value of field 'limit' must be less than or equal to '100'", protovalidator.Int32ToString(this.Limit))
	}
	return nil
}

// Set default value for message flink.LimitOperator
func (this *LimitOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_limit(); err != nil {
		return err
	}
	return nil
}

func (this *OffsetOperator) _xxx_xxx_Validator_Validate_offset() error {
	if !(this.Offset > 0) {
		return protovalidator.FieldError1("OffsetOperator", "the value of field 'offset' must be greater than '0'", protovalidator.Int32ToString(this.Offset))
	}
	if !(this.Offset <= 100) {
		return protovalidator.FieldError1("OffsetOperator", "the value of field 'offset' must be less than or equal to '100'", protovalidator.Int32ToString(this.Offset))
	}
	return nil
}

// Set default value for message flink.OffsetOperator
func (this *OffsetOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_offset(); err != nil {
		return err
	}
	return nil
}

func (this *FetchOperator) _xxx_xxx_Validator_Validate_fetch() error {
	if !(this.Fetch > 0) {
		return protovalidator.FieldError1("FetchOperator", "the value of field 'fetch' must be greater than '0'", protovalidator.Int32ToString(this.Fetch))
	}
	if !(this.Fetch <= 100) {
		return protovalidator.FieldError1("FetchOperator", "the value of field 'fetch' must be less than or equal to '100'", protovalidator.Int32ToString(this.Fetch))
	}
	return nil
}

// Set default value for message flink.FetchOperator
func (this *FetchOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_fetch(); err != nil {
		return err
	}
	return nil
}

// Set default value for message flink.UnionOperator
func (this *UnionOperator) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

func (this *GroupByOperator) _xxx_xxx_Validator_Validate_group_by() error {
	if !(len(this.GroupBy) > 0) {
		return protovalidator.FieldError1("GroupByOperator", "the length of field 'group_by' must be greater than '0'", strconv.Itoa(len(this.GroupBy)))
	}
	if !(len(this.GroupBy) <= 1024) {
		return protovalidator.FieldError1("GroupByOperator", "the length of field 'group_by' must be less than or equal to '1024'", strconv.Itoa(len(this.GroupBy)))
	}
	return nil
}

// Set default value for message flink.GroupByOperator
func (this *GroupByOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_group_by(); err != nil {
		return err
	}
	return nil
}

func (this *HavingOperator) _xxx_xxx_Validator_Validate_having() error {
	if !(len(this.Having) > 0) {
		return protovalidator.FieldError1("HavingOperator", "the byte length of field 'having' must be greater than '0'", protovalidator.StringByteLenToString(this.Having))
	}
	if !(len(this.Having) < 1024) {
		return protovalidator.FieldError1("HavingOperator", "the byte length of field 'having' must be less than '1024'", protovalidator.StringByteLenToString(this.Having))
	}
	return nil
}

// Set default value for message flink.HavingOperator
func (this *HavingOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_having(); err != nil {
		return err
	}
	return nil
}

func (this *ConstOperator) _xxx_xxx_Validator_Validate_table() error {
	if !(len(this.Table) >= 0) {
		return protovalidator.FieldError1("ConstOperator", "the byte length of field 'table' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Table))
	}
	if !(len(this.Table) <= 64) {
		return protovalidator.FieldError1("ConstOperator", "the byte length of field 'table' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Table))
	}
	return nil
}

func (this *ConstOperator) _xxx_xxx_Validator_Validate_column() error {
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.ConstOperator
func (this *ConstOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_table(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	return nil
}

func (this *SourceOperator) _xxx_xxx_Validator_Validate_table_id() error {
	if !(len(this.TableId) == 20) {
		return protovalidator.FieldError1("SourceOperator", "the byte length of field 'table_id' must be equal to '20'", protovalidator.StringByteLenToString(this.TableId))
	}
	return nil
}

func (this *SourceOperator) _xxx_xxx_Validator_Validate_table_as() error {
	if !(len(this.TableAs) >= 0) {
		return protovalidator.FieldError1("SourceOperator", "the byte length of field 'table_as' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.TableAs))
	}
	if !(len(this.TableAs) <= 64) {
		return protovalidator.FieldError1("SourceOperator", "the byte length of field 'table_as' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.TableAs))
	}
	return nil
}

func (this *SourceOperator) _xxx_xxx_Validator_Validate_distinct() error {
	if !(len(this.Distinct) >= 0) {
		return protovalidator.FieldError1("SourceOperator", "the byte length of field 'distinct' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Distinct))
	}
	if !(len(this.Distinct) <= 64) {
		return protovalidator.FieldError1("SourceOperator", "the byte length of field 'distinct' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Distinct))
	}
	return nil
}

func (this *SourceOperator) _xxx_xxx_Validator_Validate_column() error {
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *SourceOperator) _xxx_xxx_Validator_Validate_custom_column() error {
	for _, item := range this.CustomColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *SourceOperator) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.SourceOperator
func (this *SourceOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_table_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_as(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_distinct(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_custom_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *DimensionOperator) _xxx_xxx_Validator_Validate_table_id() error {
	if !(len(this.TableId) == 20) {
		return protovalidator.FieldError1("DimensionOperator", "the byte length of field 'table_id' must be equal to '20'", protovalidator.StringByteLenToString(this.TableId))
	}
	return nil
}

func (this *DimensionOperator) _xxx_xxx_Validator_Validate_table_as() error {
	if !(len(this.TableAs) >= 0) {
		return protovalidator.FieldError1("DimensionOperator", "the byte length of field 'table_as' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.TableAs))
	}
	if !(len(this.TableAs) <= 64) {
		return protovalidator.FieldError1("DimensionOperator", "the byte length of field 'table_as' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.TableAs))
	}
	return nil
}

func (this *DimensionOperator) _xxx_xxx_Validator_Validate_distinct() error {
	if !(len(this.Distinct) >= 0) {
		return protovalidator.FieldError1("DimensionOperator", "the byte length of field 'distinct' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Distinct))
	}
	if !(len(this.Distinct) <= 64) {
		return protovalidator.FieldError1("DimensionOperator", "the byte length of field 'distinct' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Distinct))
	}
	return nil
}

func (this *DimensionOperator) _xxx_xxx_Validator_Validate_column() error {
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *DimensionOperator) _xxx_xxx_Validator_Validate_custom_column() error {
	for _, item := range this.CustomColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *DimensionOperator) _xxx_xxx_Validator_Validate_time_column() error {
	if dt, ok := interface{}(this.TimeColumn).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.DimensionOperator
func (this *DimensionOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_table_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_as(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_distinct(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_custom_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

// Set default value for message flink.ExceptOperator
func (this *ExceptOperator) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

// Set default value for message flink.IntersectOperator
func (this *IntersectOperator) Validate() error {
	if this == nil {
		return nil
	}
	return nil
}

func (this *FilterOperator) _xxx_xxx_Validator_Validate_where() error {
	if !(len(this.Where) >= 0) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'where' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Where))
	}
	if !(len(this.Where) <= 1024) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'where' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Where))
	}
	return nil
}

func (this *FilterOperator) _xxx_xxx_Validator_Validate_in() error {
	if !(len(this.In) >= 0) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'in' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.In))
	}
	if !(len(this.In) <= 1024) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'in' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.In))
	}
	return nil
}

func (this *FilterOperator) _xxx_xxx_Validator_Validate_exists() error {
	if !(len(this.Exists) >= 0) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'exists' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Exists))
	}
	if !(len(this.Exists) <= 1024) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'exists' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Exists))
	}
	return nil
}

func (this *FilterOperator) _xxx_xxx_Validator_Validate_expression() error {
	if !(len(this.Expression) >= 0) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'expression' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Expression))
	}
	if !(len(this.Expression) <= 1024) {
		return protovalidator.FieldError1("FilterOperator", "the byte length of field 'expression' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Expression))
	}
	return nil
}

// Set default value for message flink.FilterOperator
func (this *FilterOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_where(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_in(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_exists(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_expression(); err != nil {
		return err
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_join() error {
	if !(len(this.Join) >= 0) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'join' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Join))
	}
	if !(len(this.Join) <= 64) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'join' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Join))
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_expression() error {
	if !(len(this.Expression) >= 0) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'expression' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Expression))
	}
	if !(len(this.Expression) <= 1024) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'expression' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Expression))
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_table_as() error {
	if !(len(this.TableAs) >= 0) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'table_as' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.TableAs))
	}
	if !(len(this.TableAs) <= 64) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'table_as' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.TableAs))
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_table_as_right() error {
	if !(len(this.TableAsRight) >= 0) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'table_as_right' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.TableAsRight))
	}
	if !(len(this.TableAsRight) <= 64) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'table_as_right' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.TableAsRight))
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_args() error {
	if !(len(this.Args) >= 0) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'args' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Args))
	}
	if !(len(this.Args) <= 1024) {
		return protovalidator.FieldError1("JoinOperator", "the byte length of field 'args' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Args))
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_column() error {
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *JoinOperator) _xxx_xxx_Validator_Validate_generate_column() error {
	for _, item := range this.GenerateColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.JoinOperator
func (this *JoinOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_join(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_expression(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_as(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_as_right(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_args(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_generate_column(); err != nil {
		return err
	}
	return nil
}

func (this *UDTFOperator) _xxx_xxx_Validator_Validate_udf_id() error {
	if !(len(this.UdfId) == 20) {
		return protovalidator.FieldError1("UDTFOperator", "the byte length of field 'udf_id' must be equal to '20'", protovalidator.StringByteLenToString(this.UdfId))
	}
	return nil
}

func (this *UDTFOperator) _xxx_xxx_Validator_Validate_args() error {
	if !(len(this.Args) >= 0) {
		return protovalidator.FieldError1("UDTFOperator", "the byte length of field 'args' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Args))
	}
	if !(len(this.Args) <= 1024) {
		return protovalidator.FieldError1("UDTFOperator", "the byte length of field 'args' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Args))
	}
	return nil
}

func (this *UDTFOperator) _xxx_xxx_Validator_Validate_table_as() error {
	if !(len(this.TableAs) >= 0) {
		return protovalidator.FieldError1("UDTFOperator", "the byte length of field 'table_as' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.TableAs))
	}
	if !(len(this.TableAs) <= 64) {
		return protovalidator.FieldError1("UDTFOperator", "the byte length of field 'table_as' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.TableAs))
	}
	return nil
}

func (this *UDTFOperator) _xxx_xxx_Validator_Validate_column() error {
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *UDTFOperator) _xxx_xxx_Validator_Validate_select_column() error {
	for _, item := range this.SelectColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.UDTFOperator
func (this *UDTFOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_udf_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_args(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_table_as(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_select_column(); err != nil {
		return err
	}
	return nil
}

func (this *UDTTFOperator) _xxx_xxx_Validator_Validate_udf_id() error {
	if !(len(this.UdfId) == 20) {
		return protovalidator.FieldError1("UDTTFOperator", "the byte length of field 'udf_id' must be equal to '20'", protovalidator.StringByteLenToString(this.UdfId))
	}
	return nil
}

func (this *UDTTFOperator) _xxx_xxx_Validator_Validate_args() error {
	if !(len(this.Args) >= 0) {
		return protovalidator.FieldError1("UDTTFOperator", "the byte length of field 'args' must be greater than or equal to '0'", protovalidator.StringByteLenToString(this.Args))
	}
	if !(len(this.Args) <= 1024) {
		return protovalidator.FieldError1("UDTTFOperator", "the byte length of field 'args' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Args))
	}
	return nil
}

func (this *UDTTFOperator) _xxx_xxx_Validator_Validate_column() error {
	for _, item := range this.Column {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.UDTTFOperator
func (this *UDTTFOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_udf_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_args(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_source() error {
	if dt, ok := interface{}(this.Source).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_dest() error {
	if dt, ok := interface{}(this.Dest).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_values() error {
	if dt, ok := interface{}(this.Values).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_order_by() error {
	if dt, ok := interface{}(this.OrderBy).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_limit() error {
	if dt, ok := interface{}(this.Limit).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_offset() error {
	if dt, ok := interface{}(this.Offset).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_fetch() error {
	if dt, ok := interface{}(this.Fetch).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_union() error {
	if dt, ok := interface{}(this.Union).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_group_by() error {
	if dt, ok := interface{}(this.GroupBy).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_having() error {
	if dt, ok := interface{}(this.Having).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_const() error {
	if dt, ok := interface{}(this.Const).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_dimension() error {
	if dt, ok := interface{}(this.Dimension).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_except() error {
	if dt, ok := interface{}(this.Except).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_intersect() error {
	if dt, ok := interface{}(this.Intersect).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_filter() error {
	if dt, ok := interface{}(this.Filter).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_udtf() error {
	if dt, ok := interface{}(this.Udtf).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_udttf() error {
	if dt, ok := interface{}(this.Udttf).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *OperatorProperty) _xxx_xxx_Validator_Validate_join() error {
	if dt, ok := interface{}(this.Join).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.OperatorProperty
func (this *OperatorProperty) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_source(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_dest(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_values(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_order_by(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_limit(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_offset(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_fetch(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_union(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_group_by(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_having(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_const(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_dimension(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_except(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_intersect(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_filter(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_udtf(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_udttf(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_join(); err != nil {
		return err
	}
	return nil
}

var _xxx_xxx_Validator_FlinkOperator_InEnums_Type = map[FlinkOperator_Type]bool{0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true, 7: true, 8: true, 9: true, 10: true, 11: true, 12: true, 13: true, 14: true, 15: true, 16: true, 17: true, 18: true}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_type() error {
	if !(this.Type >= 1) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'type' must be greater than or equal to '1'", protovalidator.Int32ToString(int32(this.Type)))
	}
	if !(_xxx_xxx_Validator_FlinkOperator_InEnums_Type[this.Type]) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'type' must in enums of '[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]'", protovalidator.Int32ToString(int32(this.Type)))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_id() error {
	if !(len(this.Id) < 21) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'id' must be less than '21'", protovalidator.StringByteLenToString(this.Id))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_name() error {
	if !(len(this.Name) < 65) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'name' must be less than '65'", protovalidator.StringByteLenToString(this.Name))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_upstream() error {
	if !(len(this.Upstream) < 21) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'upstream' must be less than '21'", protovalidator.StringByteLenToString(this.Upstream))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_upstream_right() error {
	if !(len(this.UpstreamRight) < 21) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'upstream_right' must be less than '21'", protovalidator.StringByteLenToString(this.UpstreamRight))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_down_stream() error {
	if !(len(this.DownStream) < 21) {
		return protovalidator.FieldError1("FlinkOperator", "the byte length of field 'down_stream' must be less than '21'", protovalidator.StringByteLenToString(this.DownStream))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_point_x() error {
	if !(this.PointX >= 1) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_x' must be greater than or equal to '1'", protovalidator.Int32ToString(this.PointX))
	}
	if !(this.PointX <= 200) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_x' must be less than or equal to '200'", protovalidator.Int32ToString(this.PointX))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_point_y() error {
	if !(this.PointY >= 1) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_y' must be greater than or equal to '1'", protovalidator.Int32ToString(this.PointY))
	}
	if !(this.PointY <= 200) {
		return protovalidator.FieldError1("FlinkOperator", "the value of field 'point_y' must be less than or equal to '200'", protovalidator.Int32ToString(this.PointY))
	}
	return nil
}

func (this *FlinkOperator) _xxx_xxx_Validator_Validate_property() error {
	if dt, ok := interface{}(this.Property).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.FlinkOperator
func (this *FlinkOperator) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_id(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_upstream(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_upstream_right(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_down_stream(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_point_x(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_point_y(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_property(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkJar) _xxx_xxx_Validator_Validate_jar_args() error {
	if !(len(this.JarArgs) <= 1024) {
		return protovalidator.FieldError1("FlinkJar", "the byte length of field 'jar_args' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.JarArgs))
	}
	return nil
}

func (this *FlinkJar) _xxx_xxx_Validator_Validate_jar_entry() error {
	if !(len(this.JarEntry) <= 1024) {
		return protovalidator.FieldError1("FlinkJar", "the byte length of field 'jar_entry' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.JarEntry))
	}
	return nil
}

// Set default value for message flink.FlinkJar
func (this *FlinkJar) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_jar_args(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_jar_entry(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkScala) _xxx_xxx_Validator_Validate_code() error {
	if !(len(this.Code) <= 40000) {
		return protovalidator.FieldError1("FlinkScala", "the byte length of field 'code' must be less than or equal to '40000'", protovalidator.StringByteLenToString(this.Code))
	}
	return nil
}

// Set default value for message flink.FlinkScala
func (this *FlinkScala) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_code(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkPython) _xxx_xxx_Validator_Validate_code() error {
	if !(len(this.Code) <= 40000) {
		return protovalidator.FieldError1("FlinkPython", "the byte length of field 'code' must be less than or equal to '40000'", protovalidator.StringByteLenToString(this.Code))
	}
	return nil
}

// Set default value for message flink.FlinkPython
func (this *FlinkPython) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_code(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkSQL) _xxx_xxx_Validator_Validate_code() error {
	if !(len(this.Code) <= 40000) {
		return protovalidator.FieldError1("FlinkSQL", "the byte length of field 'code' must be less than or equal to '40000'", protovalidator.StringByteLenToString(this.Code))
	}
	return nil
}

// Set default value for message flink.FlinkSQL
func (this *FlinkSQL) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_code(); err != nil {
		return err
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_column() error {
	if !(len(this.Column) <= 64) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'column' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Column))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_type() error {
	if !(len(this.Type) <= 64) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'type' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Type))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_comment() error {
	if !(len(this.Comment) <= 256) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'comment' must be less than or equal to '256'", protovalidator.StringByteLenToString(this.Comment))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_primary_key() error {
	if !(len(this.PrimaryKey) <= 8) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'primary_key' must be less than or equal to '8'", protovalidator.StringByteLenToString(this.PrimaryKey))
	}
	return nil
}

func (this *SqlColumnType) _xxx_xxx_Validator_Validate_Length() error {
	if !(len(this.Length) <= 10) {
		return protovalidator.FieldError1("SqlColumnType", "the byte length of field 'Length' must be less than or equal to '10'", protovalidator.StringByteLenToString(this.Length))
	}
	return nil
}

// Set default value for message flink.SqlColumnType
func (this *SqlColumnType) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_comment(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_primary_key(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_Length(); err != nil {
		return err
	}
	return nil
}

func (this *SqlTimeColumnType) _xxx_xxx_Validator_Validate_column() error {
	if !(len(this.Column) <= 64) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the byte length of field 'column' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Column))
	}
	return nil
}

var _xxx_xxx_Validator_SqlTimeColumnType_InEnums_Type = map[SqlTimeColumnType_Type]bool{0: true, 1: true, 2: true}

func (this *SqlTimeColumnType) _xxx_xxx_Validator_Validate_type() error {
	if !(this.Type >= 1) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the value of field 'type' must be greater than or equal to '1'", protovalidator.Int32ToString(int32(this.Type)))
	}
	if !(_xxx_xxx_Validator_SqlTimeColumnType_InEnums_Type[this.Type]) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the value of field 'type' must in enums of '[0 1 2]'", protovalidator.Int32ToString(int32(this.Type)))
	}
	return nil
}

func (this *SqlTimeColumnType) _xxx_xxx_Validator_Validate_expression() error {
	if !(len(this.Expression) <= 1024) {
		return protovalidator.FieldError1("SqlTimeColumnType", "the byte length of field 'expression' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Expression))
	}
	return nil
}

// Set default value for message flink.SqlTimeColumnType
func (this *SqlTimeColumnType) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_type(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_expression(); err != nil {
		return err
	}
	return nil
}

func (this *ConnectorOption) _xxx_xxx_Validator_Validate_name() error {
	if !(len(this.Name) <= 256) {
		return protovalidator.FieldError1("ConnectorOption", "the byte length of field 'name' must be less than or equal to '256'", protovalidator.StringByteLenToString(this.Name))
	}
	return nil
}

func (this *ConnectorOption) _xxx_xxx_Validator_Validate_value() error {
	if !(len(this.Value) <= 4096) {
		return protovalidator.FieldError1("ConnectorOption", "the byte length of field 'value' must be less than or equal to '4096'", protovalidator.StringByteLenToString(this.Value))
	}
	return nil
}

// Set default value for message flink.ConnectorOption
func (this *ConnectorOption) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_value(); err != nil {
		return err
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_mapping_name() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("MySQLTable", "the byte length of field 'mapping_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *MySQLTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.MySQLTable
func (this *MySQLTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_mapping_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_mapping_name() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("PostgreSQLTable", "the byte length of field 'mapping_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *PostgreSQLTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.PostgreSQLTable
func (this *PostgreSQLTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_mapping_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_MappingName() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("ClickHouseTable", "the byte length of field 'MappingName' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *ClickHouseTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.ClickHouseTable
func (this *ClickHouseTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_MappingName(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_mapping_name() error {
	if !(len(this.MappingName) <= 64) {
		return protovalidator.FieldError1("HBaseTable", "the byte length of field 'mapping_name' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.MappingName))
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HBaseTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.HBaseTable
func (this *HBaseTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_mapping_name(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("HDFSTable", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_path() error {
	if !(len(this.Path) <= 1024) {
		return protovalidator.FieldError1("HDFSTable", "the byte length of field 'path' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Path))
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *HDFSTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.HDFSTable
func (this *HDFSTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_path(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("S3Table", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_path() error {
	if !(len(this.Path) <= 1024) {
		return protovalidator.FieldError1("S3Table", "the byte length of field 'path' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Path))
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *S3Table) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.S3Table
func (this *S3Table) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_path(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("FtpTable", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_path() error {
	if !(len(this.Path) <= 1024) {
		return protovalidator.FieldError1("FtpTable", "the byte length of field 'path' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Path))
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *FtpTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.FtpTable
func (this *FtpTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_path(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_sql_column() error {
	for _, item := range this.SqlColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_format() error {
	if !(len(this.Format) <= 64) {
		return protovalidator.FieldError1("KafkaTable", "the byte length of field 'format' must be less than or equal to '64'", protovalidator.StringByteLenToString(this.Format))
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_topic() error {
	if !(len(this.Topic) <= 1024) {
		return protovalidator.FieldError1("KafkaTable", "the byte length of field 'topic' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Topic))
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_connector_options() error {
	for _, item := range this.ConnectorOptions {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *KafkaTable) _xxx_xxx_Validator_Validate_time_column() error {
	for _, item := range this.TimeColumn {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

// Set default value for message flink.KafkaTable
func (this *KafkaTable) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_sql_column(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_format(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_topic(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_connector_options(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_time_column(); err != nil {
		return err
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_mysql() error {
	if dt, ok := interface{}(this.Mysql).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_postgresql() error {
	if dt, ok := interface{}(this.Postgresql).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_clickhouse() error {
	if dt, ok := interface{}(this.Clickhouse).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_Hbase() error {
	if dt, ok := interface{}(this.Hbase).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_kafka() error {
	if dt, ok := interface{}(this.Kafka).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_s3() error {
	if dt, ok := interface{}(this.S3).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_ftp() error {
	if dt, ok := interface{}(this.Ftp).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *TableSchema) _xxx_xxx_Validator_Validate_hdfs() error {
	if dt, ok := interface{}(this.Hdfs).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.TableSchema
func (this *TableSchema) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_mysql(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_postgresql(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_clickhouse(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_Hbase(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_kafka(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_s3(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_ftp(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_hdfs(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkConfig) _xxx_xxx_Validator_Validate_custom() error {
	for _, item := range this.Custom {
		_ = item // To avoid unused panics.
		if dt, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := dt.Validate(); err != nil {
				return err
			}
		}
	}
	return nil
}

func (this *FlinkConfig) _xxx_xxx_Validator_Validate_restart_strategy() error {
	if dt, ok := interface{}(this.RestartStrategy).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (this *FlinkConfig) _xxx_xxx_Validator_Validate_logger() error {
	if dt, ok := interface{}(this.Logger).(interface{ Validate() error }); ok {
		if err := dt.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// Set default value for message flink.FlinkConfig
func (this *FlinkConfig) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_custom(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_restart_strategy(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_logger(); err != nil {
		return err
	}
	return nil
}

func (this *FlinkConfig_Item) _xxx_xxx_Validator_Validate_key() error {
	if !(len(this.Key) <= 1024) {
		return protovalidator.FieldError1("FlinkConfig_Item", "the byte length of field 'key' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Key))
	}
	return nil
}

func (this *FlinkConfig_Item) _xxx_xxx_Validator_Validate_value() error {
	if !(len(this.Value) <= 1024) {
		return protovalidator.FieldError1("FlinkConfig_Item", "the byte length of field 'value' must be less than or equal to '1024'", protovalidator.StringByteLenToString(this.Value))
	}
	return nil
}

// Set default value for message flink.FlinkConfig.Item
func (this *FlinkConfig_Item) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_key(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_value(); err != nil {
		return err
	}
	return nil
}

var _xxx_xxx_Validator_FlinkConfig_RestartStrategy_In_RestartStrategy = map[string]bool{"none": true, "fixed-delay": true, "failure-rate": true}

func (this *FlinkConfig_RestartStrategy) _xxx_xxx_Validator_Validate_restart_strategy() error {
	if !(_xxx_xxx_Validator_FlinkConfig_RestartStrategy_In_RestartStrategy[this.RestartStrategy]) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'restart_strategy' must be one of '[none fixed-delay failure-rate]'", this.RestartStrategy)
	}
	return nil
}

func (this *FlinkConfig_RestartStrategy) _xxx_xxx_Validator_Validate_fixed_delay_attempts() error {
	if !(this.FixedDelayAttempts >= 1) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'fixed_delay_attempts' must be greater than or equal to '1'", protovalidator.Int32ToString(this.FixedDelayAttempts))
	}
	if !(this.FixedDelayAttempts <= 1000) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'fixed_delay_attempts' must be less than or equal to '1000'", protovalidator.Int32ToString(this.FixedDelayAttempts))
	}
	return nil
}

func (this *FlinkConfig_RestartStrategy) _xxx_xxx_Validator_Validate_failure_rate_delay() error {
	if !(this.FailureRateDelay >= 1) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'failure_rate_delay' must be greater than or equal to '1'", protovalidator.Int32ToString(this.FailureRateDelay))
	}
	if !(this.FailureRateDelay <= 86400) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'failure_rate_delay' must be less than or equal to '86400'", protovalidator.Int32ToString(this.FailureRateDelay))
	}
	return nil
}

func (this *FlinkConfig_RestartStrategy) _xxx_xxx_Validator_Validate_failure_rate_failure_rate_interval() error {
	if !(this.FailureRateFailureRateInterval >= 1) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'failure_rate_failure_rate_interval' must be greater than or equal to '1'", protovalidator.Int32ToString(this.FailureRateFailureRateInterval))
	}
	if !(this.FailureRateFailureRateInterval <= 86400) {
		return protovalidator.FieldError1("FlinkConfig_RestartStrategy", "the value of field 'failure_rate_failure_rate_interval' must be less than or equal to '86400'", protovalidator.Int32ToString(this.FailureRateFailureRateInterval))
	}
	return nil
}

// Set default value for message flink.FlinkConfig.RestartStrategy
func (this *FlinkConfig_RestartStrategy) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_restart_strategy(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_fixed_delay_attempts(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_failure_rate_delay(); err != nil {
		return err
	}
	if err := this._xxx_xxx_Validator_Validate_failure_rate_failure_rate_interval(); err != nil {
		return err
	}
	return nil
}

var _xxx_xxx_Validator_FlinkConfig_Logger_In_RootLogLevel = map[string]bool{"TRACE": true, "DEBUG": true, "INFO": true, "WARN": true, "ERROR": true}

func (this *FlinkConfig_Logger) _xxx_xxx_Validator_Validate_root_log_level() error {
	if !(_xxx_xxx_Validator_FlinkConfig_Logger_In_RootLogLevel[this.RootLogLevel]) {
		return protovalidator.FieldError1("FlinkConfig_Logger", "the value of field 'root_log_level' must be one of '[TRACE DEBUG INFO WARN ERROR]'", this.RootLogLevel)
	}
	return nil
}

// Set default value for message flink.FlinkConfig.Logger
func (this *FlinkConfig_Logger) Validate() error {
	if this == nil {
		return nil
	}
	if err := this._xxx_xxx_Validator_Validate_root_log_level(); err != nil {
		return err
	}
	return nil
}
