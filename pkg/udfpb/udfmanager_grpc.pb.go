// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/udfmanager.proto

package udfpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UdfmanagerClient is the client API for Udfmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UdfmanagerClient interface {
	Create(ctx context.Context, in *request.CreateUDF, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	Update(ctx context.Context, in *request.UpdateUDF, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	Describe(ctx context.Context, in *request.DescribeUDF, opts ...grpc.CallOption) (*response.DescribeUDF, error)
	Delete(ctx context.Context, in *request.DeleteUDF, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteAll(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	List(ctx context.Context, in *request.ListUDF, opts ...grpc.CallOption) (*response.ListUDF, error)
	CommonFunc(ctx context.Context, in *request.UDFCommonFunc, opts ...grpc.CallOption) (*response.JsonList, error)
}

type udfmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUdfmanagerClient(cc grpc.ClientConnInterface) UdfmanagerClient {
	return &udfmanagerClient{cc}
}

func (c *udfmanagerClient) Create(ctx context.Context, in *request.CreateUDF, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfmanagerClient) Update(ctx context.Context, in *request.UpdateUDF, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfmanagerClient) Describe(ctx context.Context, in *request.DescribeUDF, opts ...grpc.CallOption) (*response.DescribeUDF, error) {
	out := new(response.DescribeUDF)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfmanagerClient) Delete(ctx context.Context, in *request.DeleteUDF, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfmanagerClient) DeleteAll(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfmanagerClient) List(ctx context.Context, in *request.ListUDF, opts ...grpc.CallOption) (*response.ListUDF, error) {
	out := new(response.ListUDF)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfmanagerClient) CommonFunc(ctx context.Context, in *request.UDFCommonFunc, opts ...grpc.CallOption) (*response.JsonList, error) {
	out := new(response.JsonList)
	err := c.cc.Invoke(ctx, "/udfpb.Udfmanager/CommonFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UdfmanagerServer is the server API for Udfmanager service.
// All implementations must embed UnimplementedUdfmanagerServer
// for forward compatibility
type UdfmanagerServer interface {
	Create(context.Context, *request.CreateUDF) (*model.EmptyStruct, error)
	Update(context.Context, *request.UpdateUDF) (*model.EmptyStruct, error)
	Describe(context.Context, *request.DescribeUDF) (*response.DescribeUDF, error)
	Delete(context.Context, *request.DeleteUDF) (*model.EmptyStruct, error)
	DeleteAll(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error)
	List(context.Context, *request.ListUDF) (*response.ListUDF, error)
	CommonFunc(context.Context, *request.UDFCommonFunc) (*response.JsonList, error)
	mustEmbedUnimplementedUdfmanagerServer()
}

// UnimplementedUdfmanagerServer must be embedded to have forward compatible implementations.
type UnimplementedUdfmanagerServer struct {
}

func (UnimplementedUdfmanagerServer) Create(context.Context, *request.CreateUDF) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUdfmanagerServer) Update(context.Context, *request.UpdateUDF) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUdfmanagerServer) Describe(context.Context, *request.DescribeUDF) (*response.DescribeUDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedUdfmanagerServer) Delete(context.Context, *request.DeleteUDF) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUdfmanagerServer) DeleteAll(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedUdfmanagerServer) List(context.Context, *request.ListUDF) (*response.ListUDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUdfmanagerServer) CommonFunc(context.Context, *request.UDFCommonFunc) (*response.JsonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonFunc not implemented")
}
func (UnimplementedUdfmanagerServer) mustEmbedUnimplementedUdfmanagerServer() {}

// UnsafeUdfmanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UdfmanagerServer will
// result in compilation errors.
type UnsafeUdfmanagerServer interface {
	mustEmbedUnimplementedUdfmanagerServer()
}

func RegisterUdfmanagerServer(s grpc.ServiceRegistrar, srv UdfmanagerServer) {
	s.RegisterService(&Udfmanager_ServiceDesc, srv)
}

func _Udfmanager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).Create(ctx, req.(*request.CreateUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udfmanager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).Update(ctx, req.(*request.UpdateUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udfmanager_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).Describe(ctx, req.(*request.DescribeUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udfmanager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).Delete(ctx, req.(*request.DeleteUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udfmanager_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).DeleteAll(ctx, req.(*request.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udfmanager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListUDF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).List(ctx, req.(*request.ListUDF))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udfmanager_CommonFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UDFCommonFunc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfmanagerServer).CommonFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udfpb.Udfmanager/CommonFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfmanagerServer).CommonFunc(ctx, req.(*request.UDFCommonFunc))
	}
	return interceptor(ctx, in, info, handler)
}

// Udfmanager_ServiceDesc is the grpc.ServiceDesc for Udfmanager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Udfmanager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "udfpb.Udfmanager",
	HandlerType: (*UdfmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Udfmanager_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Udfmanager_Update_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Udfmanager_Describe_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Udfmanager_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _Udfmanager_DeleteAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Udfmanager_List_Handler,
		},
		{
			MethodName: "CommonFunc",
			Handler:    _Udfmanager_CommonFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/udfmanager.proto",
}
