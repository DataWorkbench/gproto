// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/sourcemanager.proto

package smpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourcemanagerClient is the client API for Sourcemanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcemanagerClient interface {
	//table
	CreateTable(ctx context.Context, in *request.CreateTable, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeTable(ctx context.Context, in *request.DescribeTable, opts ...grpc.CallOption) (*response.DescribeTable, error)
	UpdateTable(ctx context.Context, in *request.UpdateTable, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteTable(ctx context.Context, in *request.DeleteTable, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ListTable(ctx context.Context, in *request.ListTable, opts ...grpc.CallOption) (*response.ListTable, error)
}

type sourcemanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcemanagerClient(cc grpc.ClientConnInterface) SourcemanagerClient {
	return &sourcemanagerClient{cc}
}

func (c *sourcemanagerClient) CreateTable(ctx context.Context, in *request.CreateTable, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/smpb.Sourcemanager/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcemanagerClient) DescribeTable(ctx context.Context, in *request.DescribeTable, opts ...grpc.CallOption) (*response.DescribeTable, error) {
	out := new(response.DescribeTable)
	err := c.cc.Invoke(ctx, "/smpb.Sourcemanager/DescribeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcemanagerClient) UpdateTable(ctx context.Context, in *request.UpdateTable, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/smpb.Sourcemanager/UpdateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcemanagerClient) DeleteTable(ctx context.Context, in *request.DeleteTable, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/smpb.Sourcemanager/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcemanagerClient) ListTable(ctx context.Context, in *request.ListTable, opts ...grpc.CallOption) (*response.ListTable, error) {
	out := new(response.ListTable)
	err := c.cc.Invoke(ctx, "/smpb.Sourcemanager/ListTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourcemanagerServer is the server API for Sourcemanager service.
// All implementations must embed UnimplementedSourcemanagerServer
// for forward compatibility
type SourcemanagerServer interface {
	//table
	CreateTable(context.Context, *request.CreateTable) (*model.EmptyStruct, error)
	DescribeTable(context.Context, *request.DescribeTable) (*response.DescribeTable, error)
	UpdateTable(context.Context, *request.UpdateTable) (*model.EmptyStruct, error)
	DeleteTable(context.Context, *request.DeleteTable) (*model.EmptyStruct, error)
	ListTable(context.Context, *request.ListTable) (*response.ListTable, error)
	mustEmbedUnimplementedSourcemanagerServer()
}

// UnimplementedSourcemanagerServer must be embedded to have forward compatible implementations.
type UnimplementedSourcemanagerServer struct {
}

func (UnimplementedSourcemanagerServer) CreateTable(context.Context, *request.CreateTable) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedSourcemanagerServer) DescribeTable(context.Context, *request.DescribeTable) (*response.DescribeTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedSourcemanagerServer) UpdateTable(context.Context, *request.UpdateTable) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedSourcemanagerServer) DeleteTable(context.Context, *request.DeleteTable) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedSourcemanagerServer) ListTable(context.Context, *request.ListTable) (*response.ListTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTable not implemented")
}
func (UnimplementedSourcemanagerServer) mustEmbedUnimplementedSourcemanagerServer() {}

// UnsafeSourcemanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcemanagerServer will
// result in compilation errors.
type UnsafeSourcemanagerServer interface {
	mustEmbedUnimplementedSourcemanagerServer()
}

func RegisterSourcemanagerServer(s grpc.ServiceRegistrar, srv SourcemanagerServer) {
	s.RegisterService(&Sourcemanager_ServiceDesc, srv)
}

func _Sourcemanager_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcemanagerServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpb.Sourcemanager/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcemanagerServer).CreateTable(ctx, req.(*request.CreateTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sourcemanager_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcemanagerServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpb.Sourcemanager/DescribeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcemanagerServer).DescribeTable(ctx, req.(*request.DescribeTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sourcemanager_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcemanagerServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpb.Sourcemanager/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcemanagerServer).UpdateTable(ctx, req.(*request.UpdateTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sourcemanager_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcemanagerServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpb.Sourcemanager/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcemanagerServer).DeleteTable(ctx, req.(*request.DeleteTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sourcemanager_ListTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcemanagerServer).ListTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpb.Sourcemanager/ListTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcemanagerServer).ListTable(ctx, req.(*request.ListTable))
	}
	return interceptor(ctx, in, info, handler)
}

// Sourcemanager_ServiceDesc is the grpc.ServiceDesc for Sourcemanager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sourcemanager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smpb.Sourcemanager",
	HandlerType: (*SourcemanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _Sourcemanager_CreateTable_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _Sourcemanager_DescribeTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _Sourcemanager_UpdateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Sourcemanager_DeleteTable_Handler,
		},
		{
			MethodName: "ListTable",
			Handler:    _Sourcemanager_ListTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sourcemanager.proto",
}
