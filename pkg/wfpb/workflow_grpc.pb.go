// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wfpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	// DeleteFlowsBySpaceIds delete the specified workspaces and its resources;
	// This Interface called by apiserver(DeleteWorkspaces).
	// Resources includes:
	//   - Workflow of stream and batch and them's history version.
	//   - Node, env schedule and them's history version.
	//   - Released's workflow.
	//   - Offline workflow and force stop all running instances. (By Scheduler-Server)
	//   - All instances records. (By Scheduler-Server)
	DeleteFlowsBySpaceIds(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for stream workflow.
	//
	// ListStreamFlows to get a list of stream workflow of the workspace.
	ListStreamFlows(ctx context.Context, in *request.ListStreamFlows, opts ...grpc.CallOption) (*response.ListStreamFlows, error)
	// DeleteStreamFlows delete stream workflow ant its related resources where in ids.
	// Resources includes:
	//  - History version and Released's workflow.
	//  - Node, env schedule and its history version.
	//  - Offline workflow and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteStreamFlows(ctx context.Context, in *request.DeleteStreamFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// CreateStreamFlow to create a new stream workflow.
	CreateStreamFlow(ctx context.Context, in *request.CreateStreamFlow, opts ...grpc.CallOption) (*response.CreateStreamFlow, error)
	// UpdateStreamFlow to update the info for the specified stream workflow.
	UpdateStreamFlow(ctx context.Context, in *request.UpdateStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// DescribeStreamFlow to get the info of the specified stream workflow.
	DescribeStreamFlow(ctx context.Context, in *request.DescribeStreamFlow, opts ...grpc.CallOption) (*response.DescribeStreamFlow, error)
	// SetStreamFlowNode to set the node properties of the specified stream workflow.
	SetStreamFlowNode(ctx context.Context, in *request.SetStreamFlowNode, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// GetStreamFlowNode to get the node properties of the specified stream workflow.
	GetStreamFlowNode(ctx context.Context, in *request.GetStreamFlowNode, opts ...grpc.CallOption) (*response.GetStreamFlowNode, error)
	// SetStreamFlowEnv to set the environmental parameters of the specified stream workflow.
	SetStreamFlowEnv(ctx context.Context, in *request.SetStreamFlowEnv, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// GetStreamFlowEnv to get the environmental parameters of the specified stream workflow.
	GetStreamFlowEnv(ctx context.Context, in *request.GetStreamFlowEnv, opts ...grpc.CallOption) (*response.GetStreamFlowEnv, error)
	// SetStreamFlowSchedule to set the schedule properties of the specified stream workflow.
	SetStreamFlowSchedule(ctx context.Context, in *request.SetStreamFlowSchedule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// GetStreamFlowSchedule to get the schedule properties of the specified stream workflow.
	GetStreamFlowSchedule(ctx context.Context, in *request.GetStreamFlowSchedule, opts ...grpc.CallOption) (*response.GetStreamFlowSchedule, error)
	// ExecuteStreamFlow to manual execution a stream workflow task.
	ExecuteStreamFlow(ctx context.Context, in *request.ExecuteStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for stream workflow release.
	//
	// ReleaseStreamFlow to publish the specified workflow to schedule system with a new version.
	ReleaseStreamFlow(ctx context.Context, in *request.ReleaseStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// SuspendReleaseStreamFlows to suspend the specified workflow list in schedule system.
	SuspendReleaseStreamFlows(ctx context.Context, in *request.SuspendReleaseStreamFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// ResumeReleaseStreamFlows to resume the suspended workflow list in schedule system.
	ResumeReleaseStreamFlows(ctx context.Context, in *request.ResumeReleaseStreamFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// ListReleaseStreamFlows for gets a list of all published workflow in the workspace.
	ListReleaseStreamFlows(ctx context.Context, in *request.ListReleaseStreamFlows, opts ...grpc.CallOption) (*response.ListReleaseStreamFlows, error)
	// Interface for stream workflow versions.
	//
	// ListStreamVersions for gets a list of all versions of the specified workflow.
	ListStreamFlowVersions(ctx context.Context, in *request.ListStreamFlowVersions, opts ...grpc.CallOption) (*response.ListStreamFlowVersions, error)
	// DescribeStreamVersion for get the info of the workflow of the specified version.
	DescribeStreamFlowVersion(ctx context.Context, in *request.DescribeStreamFlowVersion, opts ...grpc.CallOption) (*response.DescribeStreamFlowVersion, error)
	// GetStreamVersionNode for get the node properties of the workflow of the specified version.
	GetStreamFlowVersionNode(ctx context.Context, in *request.GetStreamFlowVersionNode, opts ...grpc.CallOption) (*response.GetStreamFlowVersionNode, error)
	// GetStreamVersionEnv for get the environmental parameters of the workflow of the specified version.
	GetStreamFlowVersionEnv(ctx context.Context, in *request.GetStreamFlowVersionEnv, opts ...grpc.CallOption) (*response.GetStreamFlowVersionEnv, error)
	// GetStreamReleaseSchedule for get the schedule properties of the workflow of the specified version.
	GetStreamFlowVersionSchedule(ctx context.Context, in *request.GetStreamFlowVersionSchedule, opts ...grpc.CallOption) (*response.GetStreamFlowVersionSchedule, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) DeleteFlowsBySpaceIds(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DeleteFlowsBySpaceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListStreamFlows(ctx context.Context, in *request.ListStreamFlows, opts ...grpc.CallOption) (*response.ListStreamFlows, error) {
	out := new(response.ListStreamFlows)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListStreamFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DeleteStreamFlows(ctx context.Context, in *request.DeleteStreamFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DeleteStreamFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CreateStreamFlow(ctx context.Context, in *request.CreateStreamFlow, opts ...grpc.CallOption) (*response.CreateStreamFlow, error) {
	out := new(response.CreateStreamFlow)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/CreateStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateStreamFlow(ctx context.Context, in *request.UpdateStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/UpdateStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeStreamFlow(ctx context.Context, in *request.DescribeStreamFlow, opts ...grpc.CallOption) (*response.DescribeStreamFlow, error) {
	out := new(response.DescribeStreamFlow)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SetStreamFlowNode(ctx context.Context, in *request.SetStreamFlowNode, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SetStreamFlowNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamFlowNode(ctx context.Context, in *request.GetStreamFlowNode, opts ...grpc.CallOption) (*response.GetStreamFlowNode, error) {
	out := new(response.GetStreamFlowNode)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamFlowNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SetStreamFlowEnv(ctx context.Context, in *request.SetStreamFlowEnv, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SetStreamFlowEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamFlowEnv(ctx context.Context, in *request.GetStreamFlowEnv, opts ...grpc.CallOption) (*response.GetStreamFlowEnv, error) {
	out := new(response.GetStreamFlowEnv)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamFlowEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SetStreamFlowSchedule(ctx context.Context, in *request.SetStreamFlowSchedule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SetStreamFlowSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamFlowSchedule(ctx context.Context, in *request.GetStreamFlowSchedule, opts ...grpc.CallOption) (*response.GetStreamFlowSchedule, error) {
	out := new(response.GetStreamFlowSchedule)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamFlowSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ExecuteStreamFlow(ctx context.Context, in *request.ExecuteStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ExecuteStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ReleaseStreamFlow(ctx context.Context, in *request.ReleaseStreamFlow, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ReleaseStreamFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SuspendReleaseStreamFlows(ctx context.Context, in *request.SuspendReleaseStreamFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SuspendReleaseStreamFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ResumeReleaseStreamFlows(ctx context.Context, in *request.ResumeReleaseStreamFlows, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ResumeReleaseStreamFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListReleaseStreamFlows(ctx context.Context, in *request.ListReleaseStreamFlows, opts ...grpc.CallOption) (*response.ListReleaseStreamFlows, error) {
	out := new(response.ListReleaseStreamFlows)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListReleaseStreamFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListStreamFlowVersions(ctx context.Context, in *request.ListStreamFlowVersions, opts ...grpc.CallOption) (*response.ListStreamFlowVersions, error) {
	out := new(response.ListStreamFlowVersions)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListStreamFlowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeStreamFlowVersion(ctx context.Context, in *request.DescribeStreamFlowVersion, opts ...grpc.CallOption) (*response.DescribeStreamFlowVersion, error) {
	out := new(response.DescribeStreamFlowVersion)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeStreamFlowVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamFlowVersionNode(ctx context.Context, in *request.GetStreamFlowVersionNode, opts ...grpc.CallOption) (*response.GetStreamFlowVersionNode, error) {
	out := new(response.GetStreamFlowVersionNode)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamFlowVersionNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamFlowVersionEnv(ctx context.Context, in *request.GetStreamFlowVersionEnv, opts ...grpc.CallOption) (*response.GetStreamFlowVersionEnv, error) {
	out := new(response.GetStreamFlowVersionEnv)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamFlowVersionEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamFlowVersionSchedule(ctx context.Context, in *request.GetStreamFlowVersionSchedule, opts ...grpc.CallOption) (*response.GetStreamFlowVersionSchedule, error) {
	out := new(response.GetStreamFlowVersionSchedule)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamFlowVersionSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations must embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	// DeleteFlowsBySpaceIds delete the specified workspaces and its resources;
	// This Interface called by apiserver(DeleteWorkspaces).
	// Resources includes:
	//   - Workflow of stream and batch and them's history version.
	//   - Node, env schedule and them's history version.
	//   - Released's workflow.
	//   - Offline workflow and force stop all running instances. (By Scheduler-Server)
	//   - All instances records. (By Scheduler-Server)
	DeleteFlowsBySpaceIds(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error)
	// Interface for stream workflow.
	//
	// ListStreamFlows to get a list of stream workflow of the workspace.
	ListStreamFlows(context.Context, *request.ListStreamFlows) (*response.ListStreamFlows, error)
	// DeleteStreamFlows delete stream workflow ant its related resources where in ids.
	// Resources includes:
	//  - History version and Released's workflow.
	//  - Node, env schedule and its history version.
	//  - Offline workflow and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteStreamFlows(context.Context, *request.DeleteStreamFlows) (*model.EmptyStruct, error)
	// CreateStreamFlow to create a new stream workflow.
	CreateStreamFlow(context.Context, *request.CreateStreamFlow) (*response.CreateStreamFlow, error)
	// UpdateStreamFlow to update the info for the specified stream workflow.
	UpdateStreamFlow(context.Context, *request.UpdateStreamFlow) (*model.EmptyStruct, error)
	// DescribeStreamFlow to get the info of the specified stream workflow.
	DescribeStreamFlow(context.Context, *request.DescribeStreamFlow) (*response.DescribeStreamFlow, error)
	// SetStreamFlowNode to set the node properties of the specified stream workflow.
	SetStreamFlowNode(context.Context, *request.SetStreamFlowNode) (*model.EmptyStruct, error)
	// GetStreamFlowNode to get the node properties of the specified stream workflow.
	GetStreamFlowNode(context.Context, *request.GetStreamFlowNode) (*response.GetStreamFlowNode, error)
	// SetStreamFlowEnv to set the environmental parameters of the specified stream workflow.
	SetStreamFlowEnv(context.Context, *request.SetStreamFlowEnv) (*model.EmptyStruct, error)
	// GetStreamFlowEnv to get the environmental parameters of the specified stream workflow.
	GetStreamFlowEnv(context.Context, *request.GetStreamFlowEnv) (*response.GetStreamFlowEnv, error)
	// SetStreamFlowSchedule to set the schedule properties of the specified stream workflow.
	SetStreamFlowSchedule(context.Context, *request.SetStreamFlowSchedule) (*model.EmptyStruct, error)
	// GetStreamFlowSchedule to get the schedule properties of the specified stream workflow.
	GetStreamFlowSchedule(context.Context, *request.GetStreamFlowSchedule) (*response.GetStreamFlowSchedule, error)
	// ExecuteStreamFlow to manual execution a stream workflow task.
	ExecuteStreamFlow(context.Context, *request.ExecuteStreamFlow) (*model.EmptyStruct, error)
	// Interface for stream workflow release.
	//
	// ReleaseStreamFlow to publish the specified workflow to schedule system with a new version.
	ReleaseStreamFlow(context.Context, *request.ReleaseStreamFlow) (*model.EmptyStruct, error)
	// SuspendReleaseStreamFlows to suspend the specified workflow list in schedule system.
	SuspendReleaseStreamFlows(context.Context, *request.SuspendReleaseStreamFlows) (*model.EmptyStruct, error)
	// ResumeReleaseStreamFlows to resume the suspended workflow list in schedule system.
	ResumeReleaseStreamFlows(context.Context, *request.ResumeReleaseStreamFlows) (*model.EmptyStruct, error)
	// ListReleaseStreamFlows for gets a list of all published workflow in the workspace.
	ListReleaseStreamFlows(context.Context, *request.ListReleaseStreamFlows) (*response.ListReleaseStreamFlows, error)
	// Interface for stream workflow versions.
	//
	// ListStreamVersions for gets a list of all versions of the specified workflow.
	ListStreamFlowVersions(context.Context, *request.ListStreamFlowVersions) (*response.ListStreamFlowVersions, error)
	// DescribeStreamVersion for get the info of the workflow of the specified version.
	DescribeStreamFlowVersion(context.Context, *request.DescribeStreamFlowVersion) (*response.DescribeStreamFlowVersion, error)
	// GetStreamVersionNode for get the node properties of the workflow of the specified version.
	GetStreamFlowVersionNode(context.Context, *request.GetStreamFlowVersionNode) (*response.GetStreamFlowVersionNode, error)
	// GetStreamVersionEnv for get the environmental parameters of the workflow of the specified version.
	GetStreamFlowVersionEnv(context.Context, *request.GetStreamFlowVersionEnv) (*response.GetStreamFlowVersionEnv, error)
	// GetStreamReleaseSchedule for get the schedule properties of the workflow of the specified version.
	GetStreamFlowVersionSchedule(context.Context, *request.GetStreamFlowVersionSchedule) (*response.GetStreamFlowVersionSchedule, error)
	mustEmbedUnimplementedWorkflowServer()
}

// UnimplementedWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) DeleteFlowsBySpaceIds(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlowsBySpaceIds not implemented")
}
func (UnimplementedWorkflowServer) ListStreamFlows(context.Context, *request.ListStreamFlows) (*response.ListStreamFlows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamFlows not implemented")
}
func (UnimplementedWorkflowServer) DeleteStreamFlows(context.Context, *request.DeleteStreamFlows) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamFlows not implemented")
}
func (UnimplementedWorkflowServer) CreateStreamFlow(context.Context, *request.CreateStreamFlow) (*response.CreateStreamFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStreamFlow not implemented")
}
func (UnimplementedWorkflowServer) UpdateStreamFlow(context.Context, *request.UpdateStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamFlow not implemented")
}
func (UnimplementedWorkflowServer) DescribeStreamFlow(context.Context, *request.DescribeStreamFlow) (*response.DescribeStreamFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamFlow not implemented")
}
func (UnimplementedWorkflowServer) SetStreamFlowNode(context.Context, *request.SetStreamFlowNode) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamFlowNode not implemented")
}
func (UnimplementedWorkflowServer) GetStreamFlowNode(context.Context, *request.GetStreamFlowNode) (*response.GetStreamFlowNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFlowNode not implemented")
}
func (UnimplementedWorkflowServer) SetStreamFlowEnv(context.Context, *request.SetStreamFlowEnv) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamFlowEnv not implemented")
}
func (UnimplementedWorkflowServer) GetStreamFlowEnv(context.Context, *request.GetStreamFlowEnv) (*response.GetStreamFlowEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFlowEnv not implemented")
}
func (UnimplementedWorkflowServer) SetStreamFlowSchedule(context.Context, *request.SetStreamFlowSchedule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamFlowSchedule not implemented")
}
func (UnimplementedWorkflowServer) GetStreamFlowSchedule(context.Context, *request.GetStreamFlowSchedule) (*response.GetStreamFlowSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFlowSchedule not implemented")
}
func (UnimplementedWorkflowServer) ExecuteStreamFlow(context.Context, *request.ExecuteStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStreamFlow not implemented")
}
func (UnimplementedWorkflowServer) ReleaseStreamFlow(context.Context, *request.ReleaseStreamFlow) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseStreamFlow not implemented")
}
func (UnimplementedWorkflowServer) SuspendReleaseStreamFlows(context.Context, *request.SuspendReleaseStreamFlows) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendReleaseStreamFlows not implemented")
}
func (UnimplementedWorkflowServer) ResumeReleaseStreamFlows(context.Context, *request.ResumeReleaseStreamFlows) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReleaseStreamFlows not implemented")
}
func (UnimplementedWorkflowServer) ListReleaseStreamFlows(context.Context, *request.ListReleaseStreamFlows) (*response.ListReleaseStreamFlows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseStreamFlows not implemented")
}
func (UnimplementedWorkflowServer) ListStreamFlowVersions(context.Context, *request.ListStreamFlowVersions) (*response.ListStreamFlowVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamFlowVersions not implemented")
}
func (UnimplementedWorkflowServer) DescribeStreamFlowVersion(context.Context, *request.DescribeStreamFlowVersion) (*response.DescribeStreamFlowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamFlowVersion not implemented")
}
func (UnimplementedWorkflowServer) GetStreamFlowVersionNode(context.Context, *request.GetStreamFlowVersionNode) (*response.GetStreamFlowVersionNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFlowVersionNode not implemented")
}
func (UnimplementedWorkflowServer) GetStreamFlowVersionEnv(context.Context, *request.GetStreamFlowVersionEnv) (*response.GetStreamFlowVersionEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFlowVersionEnv not implemented")
}
func (UnimplementedWorkflowServer) GetStreamFlowVersionSchedule(context.Context, *request.GetStreamFlowVersionSchedule) (*response.GetStreamFlowVersionSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFlowVersionSchedule not implemented")
}
func (UnimplementedWorkflowServer) mustEmbedUnimplementedWorkflowServer() {}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&_Workflow_serviceDesc, srv)
}

func _Workflow_DeleteFlowsBySpaceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DeleteFlowsBySpaceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DeleteFlowsBySpaceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DeleteFlowsBySpaceIds(ctx, req.(*request.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListStreamFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListStreamFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListStreamFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListStreamFlows(ctx, req.(*request.ListStreamFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DeleteStreamFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteStreamFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DeleteStreamFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DeleteStreamFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DeleteStreamFlows(ctx, req.(*request.DeleteStreamFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CreateStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CreateStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/CreateStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CreateStreamFlow(ctx, req.(*request.CreateStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/UpdateStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateStreamFlow(ctx, req.(*request.UpdateStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeStreamFlow(ctx, req.(*request.DescribeStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SetStreamFlowNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SetStreamFlowNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SetStreamFlowNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SetStreamFlowNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SetStreamFlowNode(ctx, req.(*request.SetStreamFlowNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamFlowNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamFlowNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamFlowNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamFlowNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamFlowNode(ctx, req.(*request.GetStreamFlowNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SetStreamFlowEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SetStreamFlowEnv)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SetStreamFlowEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SetStreamFlowEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SetStreamFlowEnv(ctx, req.(*request.SetStreamFlowEnv))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamFlowEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamFlowEnv)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamFlowEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamFlowEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamFlowEnv(ctx, req.(*request.GetStreamFlowEnv))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SetStreamFlowSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SetStreamFlowSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SetStreamFlowSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SetStreamFlowSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SetStreamFlowSchedule(ctx, req.(*request.SetStreamFlowSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamFlowSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamFlowSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamFlowSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamFlowSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamFlowSchedule(ctx, req.(*request.GetStreamFlowSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ExecuteStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ExecuteStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ExecuteStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ExecuteStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ExecuteStreamFlow(ctx, req.(*request.ExecuteStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ReleaseStreamFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReleaseStreamFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ReleaseStreamFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ReleaseStreamFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ReleaseStreamFlow(ctx, req.(*request.ReleaseStreamFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SuspendReleaseStreamFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SuspendReleaseStreamFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SuspendReleaseStreamFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SuspendReleaseStreamFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SuspendReleaseStreamFlows(ctx, req.(*request.SuspendReleaseStreamFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ResumeReleaseStreamFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResumeReleaseStreamFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ResumeReleaseStreamFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ResumeReleaseStreamFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ResumeReleaseStreamFlows(ctx, req.(*request.ResumeReleaseStreamFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListReleaseStreamFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListReleaseStreamFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListReleaseStreamFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListReleaseStreamFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListReleaseStreamFlows(ctx, req.(*request.ListReleaseStreamFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListStreamFlowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamFlowVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListStreamFlowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListStreamFlowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListStreamFlowVersions(ctx, req.(*request.ListStreamFlowVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeStreamFlowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeStreamFlowVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeStreamFlowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeStreamFlowVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeStreamFlowVersion(ctx, req.(*request.DescribeStreamFlowVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamFlowVersionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamFlowVersionNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamFlowVersionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamFlowVersionNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamFlowVersionNode(ctx, req.(*request.GetStreamFlowVersionNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamFlowVersionEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamFlowVersionEnv)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamFlowVersionEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamFlowVersionEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamFlowVersionEnv(ctx, req.(*request.GetStreamFlowVersionEnv))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamFlowVersionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamFlowVersionSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamFlowVersionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamFlowVersionSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamFlowVersionSchedule(ctx, req.(*request.GetStreamFlowVersionSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wfpb.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFlowsBySpaceIds",
			Handler:    _Workflow_DeleteFlowsBySpaceIds_Handler,
		},
		{
			MethodName: "ListStreamFlows",
			Handler:    _Workflow_ListStreamFlows_Handler,
		},
		{
			MethodName: "DeleteStreamFlows",
			Handler:    _Workflow_DeleteStreamFlows_Handler,
		},
		{
			MethodName: "CreateStreamFlow",
			Handler:    _Workflow_CreateStreamFlow_Handler,
		},
		{
			MethodName: "UpdateStreamFlow",
			Handler:    _Workflow_UpdateStreamFlow_Handler,
		},
		{
			MethodName: "DescribeStreamFlow",
			Handler:    _Workflow_DescribeStreamFlow_Handler,
		},
		{
			MethodName: "SetStreamFlowNode",
			Handler:    _Workflow_SetStreamFlowNode_Handler,
		},
		{
			MethodName: "GetStreamFlowNode",
			Handler:    _Workflow_GetStreamFlowNode_Handler,
		},
		{
			MethodName: "SetStreamFlowEnv",
			Handler:    _Workflow_SetStreamFlowEnv_Handler,
		},
		{
			MethodName: "GetStreamFlowEnv",
			Handler:    _Workflow_GetStreamFlowEnv_Handler,
		},
		{
			MethodName: "SetStreamFlowSchedule",
			Handler:    _Workflow_SetStreamFlowSchedule_Handler,
		},
		{
			MethodName: "GetStreamFlowSchedule",
			Handler:    _Workflow_GetStreamFlowSchedule_Handler,
		},
		{
			MethodName: "ExecuteStreamFlow",
			Handler:    _Workflow_ExecuteStreamFlow_Handler,
		},
		{
			MethodName: "ReleaseStreamFlow",
			Handler:    _Workflow_ReleaseStreamFlow_Handler,
		},
		{
			MethodName: "SuspendReleaseStreamFlows",
			Handler:    _Workflow_SuspendReleaseStreamFlows_Handler,
		},
		{
			MethodName: "ResumeReleaseStreamFlows",
			Handler:    _Workflow_ResumeReleaseStreamFlows_Handler,
		},
		{
			MethodName: "ListReleaseStreamFlows",
			Handler:    _Workflow_ListReleaseStreamFlows_Handler,
		},
		{
			MethodName: "ListStreamFlowVersions",
			Handler:    _Workflow_ListStreamFlowVersions_Handler,
		},
		{
			MethodName: "DescribeStreamFlowVersion",
			Handler:    _Workflow_DescribeStreamFlowVersion_Handler,
		},
		{
			MethodName: "GetStreamFlowVersionNode",
			Handler:    _Workflow_GetStreamFlowVersionNode_Handler,
		},
		{
			MethodName: "GetStreamFlowVersionEnv",
			Handler:    _Workflow_GetStreamFlowVersionEnv_Handler,
		},
		{
			MethodName: "GetStreamFlowVersionSchedule",
			Handler:    _Workflow_GetStreamFlowVersionSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workflow.proto",
}
