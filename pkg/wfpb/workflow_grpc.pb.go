// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wfpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	// DeleteJobsBySpaceIds delete the specified workspaces and its resources;
	// This Interface called by apiserver(DeleteWorkspaces).
	// Resources includes:
	//   - Workflow of stream and batch and them's history version.
	//   - Node, env schedule and them's history version.
	//   - Released's job.
	//   - Offline job and force stop all running instances. (By Scheduler-Server)
	//   - All instances records. (By Scheduler-Server)
	DeleteJobsBySpaceIds(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Interface for stream job.
	//
	// ListStreamJobs to get a list of stream job of the workspace.
	ListStreamJobs(ctx context.Context, in *request.ListStreamJobs, opts ...grpc.CallOption) (*response.ListStreamJobs, error)
	// DeleteStreamJobs delete stream job ant its related resources where in ids.
	// Resources includes:
	//  - History version and Released's job.
	//  - Node, env schedule and its history version.
	//  - Offline job and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteStreamJobs(ctx context.Context, in *request.DeleteStreamJobs, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// CreateStreamJob to create a new stream job.
	CreateStreamJob(ctx context.Context, in *request.CreateStreamJob, opts ...grpc.CallOption) (*response.CreateStreamJob, error)
	// UpdateStreamJob to update the info for the specified stream job.
	UpdateStreamJob(ctx context.Context, in *request.UpdateStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// DescribeStreamJob to get the info of the specified stream job.
	DescribeStreamJob(ctx context.Context, in *request.DescribeStreamJob, opts ...grpc.CallOption) (*response.DescribeStreamJob, error)
	// SetStreamJobCode to set the code properties of the specified stream job.
	SetStreamJobCode(ctx context.Context, in *request.SetStreamJobCode, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// GetStreamJobCode to get the code properties of the specified stream job.
	GetStreamJobCode(ctx context.Context, in *request.GetStreamJobCode, opts ...grpc.CallOption) (*response.GetStreamJobCode, error)
	// SetStreamJobArgs to set the run parameters of the specified stream job.
	SetStreamJobArgs(ctx context.Context, in *request.SetStreamJobArgs, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// GetStreamJobArgs to get the run parameters of the specified stream job.
	GetStreamJobArgs(ctx context.Context, in *request.GetStreamJobArgs, opts ...grpc.CallOption) (*response.GetStreamJobArgs, error)
	// SetStreamJobSchedule to set the schedule properties of the specified stream job.
	SetStreamJobSchedule(ctx context.Context, in *request.SetStreamJobSchedule, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// GetStreamJobSchedule to get the schedule properties of the specified stream job.
	GetStreamJobSchedule(ctx context.Context, in *request.GetStreamJobSchedule, opts ...grpc.CallOption) (*response.GetStreamJobSchedule, error)
	// Interface for stream job release.
	//
	// ReleaseStreamJob to publish the specified job to schedule system with a new version.
	ReleaseStreamJob(ctx context.Context, in *request.ReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// SuspendReleaseStreamJobs to suspend the specified job list in schedule system.
	OfflineReleaseStreamJob(ctx context.Context, in *request.OfflineReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// SuspendReleaseStreamJob to suspend the specified job list in schedule system.
	SuspendReleaseStreamJob(ctx context.Context, in *request.SuspendReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// ResumeReleaseStreamJob to resume the suspended job list in schedule system.
	ResumeReleaseStreamJob(ctx context.Context, in *request.ResumeReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// ListReleaseStreamJobs for gets a list of all published job in the workspace.
	ListReleaseStreamJobs(ctx context.Context, in *request.ListReleaseStreamJobs, opts ...grpc.CallOption) (*response.ListReleaseStreamJobs, error)
	// Interface for stream job versions.
	//
	// ListStreamJobVersions for gets a list of all versions of the specified job.
	ListStreamJobVersions(ctx context.Context, in *request.ListStreamJobVersions, opts ...grpc.CallOption) (*response.ListStreamJobVersions, error)
	// DescribeStreamJobVersion for get the info of the job of the specified version.
	DescribeStreamJobVersion(ctx context.Context, in *request.DescribeStreamJob, opts ...grpc.CallOption) (*response.DescribeStreamJob, error)
	// GetStreamJobVersionNode for get the node properties of the job of the specified version.
	GetStreamJobVersionNode(ctx context.Context, in *request.GetStreamJobCode, opts ...grpc.CallOption) (*response.GetStreamJobCode, error)
	// GetStreamJobVersionArgs for get the run parameters of the job of the specified version.
	GetStreamJobVersionArgs(ctx context.Context, in *request.GetStreamJobArgs, opts ...grpc.CallOption) (*response.GetStreamJobArgs, error)
	// GetStreamJobVersionSchedule for get the schedule properties of the job of the specified version.
	GetStreamJobVersionSchedule(ctx context.Context, in *request.GetStreamJobSchedule, opts ...grpc.CallOption) (*response.GetStreamJobSchedule, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) DeleteJobsBySpaceIds(ctx context.Context, in *request.DeleteWorkspaces, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DeleteJobsBySpaceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListStreamJobs(ctx context.Context, in *request.ListStreamJobs, opts ...grpc.CallOption) (*response.ListStreamJobs, error) {
	out := new(response.ListStreamJobs)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DeleteStreamJobs(ctx context.Context, in *request.DeleteStreamJobs, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DeleteStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CreateStreamJob(ctx context.Context, in *request.CreateStreamJob, opts ...grpc.CallOption) (*response.CreateStreamJob, error) {
	out := new(response.CreateStreamJob)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/CreateStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateStreamJob(ctx context.Context, in *request.UpdateStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/UpdateStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeStreamJob(ctx context.Context, in *request.DescribeStreamJob, opts ...grpc.CallOption) (*response.DescribeStreamJob, error) {
	out := new(response.DescribeStreamJob)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SetStreamJobCode(ctx context.Context, in *request.SetStreamJobCode, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SetStreamJobCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamJobCode(ctx context.Context, in *request.GetStreamJobCode, opts ...grpc.CallOption) (*response.GetStreamJobCode, error) {
	out := new(response.GetStreamJobCode)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamJobCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SetStreamJobArgs(ctx context.Context, in *request.SetStreamJobArgs, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SetStreamJobArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamJobArgs(ctx context.Context, in *request.GetStreamJobArgs, opts ...grpc.CallOption) (*response.GetStreamJobArgs, error) {
	out := new(response.GetStreamJobArgs)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamJobArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SetStreamJobSchedule(ctx context.Context, in *request.SetStreamJobSchedule, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SetStreamJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamJobSchedule(ctx context.Context, in *request.GetStreamJobSchedule, opts ...grpc.CallOption) (*response.GetStreamJobSchedule, error) {
	out := new(response.GetStreamJobSchedule)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ReleaseStreamJob(ctx context.Context, in *request.ReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) OfflineReleaseStreamJob(ctx context.Context, in *request.OfflineReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/OfflineReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SuspendReleaseStreamJob(ctx context.Context, in *request.SuspendReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SuspendReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ResumeReleaseStreamJob(ctx context.Context, in *request.ResumeReleaseStreamJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ResumeReleaseStreamJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListReleaseStreamJobs(ctx context.Context, in *request.ListReleaseStreamJobs, opts ...grpc.CallOption) (*response.ListReleaseStreamJobs, error) {
	out := new(response.ListReleaseStreamJobs)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListReleaseStreamJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListStreamJobVersions(ctx context.Context, in *request.ListStreamJobVersions, opts ...grpc.CallOption) (*response.ListStreamJobVersions, error) {
	out := new(response.ListStreamJobVersions)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListStreamJobVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeStreamJobVersion(ctx context.Context, in *request.DescribeStreamJob, opts ...grpc.CallOption) (*response.DescribeStreamJob, error) {
	out := new(response.DescribeStreamJob)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeStreamJobVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamJobVersionNode(ctx context.Context, in *request.GetStreamJobCode, opts ...grpc.CallOption) (*response.GetStreamJobCode, error) {
	out := new(response.GetStreamJobCode)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamJobVersionNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamJobVersionArgs(ctx context.Context, in *request.GetStreamJobArgs, opts ...grpc.CallOption) (*response.GetStreamJobArgs, error) {
	out := new(response.GetStreamJobArgs)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamJobVersionArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetStreamJobVersionSchedule(ctx context.Context, in *request.GetStreamJobSchedule, opts ...grpc.CallOption) (*response.GetStreamJobSchedule, error) {
	out := new(response.GetStreamJobSchedule)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/GetStreamJobVersionSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations must embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	// DeleteJobsBySpaceIds delete the specified workspaces and its resources;
	// This Interface called by apiserver(DeleteWorkspaces).
	// Resources includes:
	//   - Workflow of stream and batch and them's history version.
	//   - Node, env schedule and them's history version.
	//   - Released's job.
	//   - Offline job and force stop all running instances. (By Scheduler-Server)
	//   - All instances records. (By Scheduler-Server)
	DeleteJobsBySpaceIds(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error)
	// Interface for stream job.
	//
	// ListStreamJobs to get a list of stream job of the workspace.
	ListStreamJobs(context.Context, *request.ListStreamJobs) (*response.ListStreamJobs, error)
	// DeleteStreamJobs delete stream job ant its related resources where in ids.
	// Resources includes:
	//  - History version and Released's job.
	//  - Node, env schedule and its history version.
	//  - Offline job and force stop all running instances. (By Scheduler-Server)
	//  - All instances records. (By Scheduler-Server)
	DeleteStreamJobs(context.Context, *request.DeleteStreamJobs) (*model.EmptyStruct, error)
	// CreateStreamJob to create a new stream job.
	CreateStreamJob(context.Context, *request.CreateStreamJob) (*response.CreateStreamJob, error)
	// UpdateStreamJob to update the info for the specified stream job.
	UpdateStreamJob(context.Context, *request.UpdateStreamJob) (*model.EmptyStruct, error)
	// DescribeStreamJob to get the info of the specified stream job.
	DescribeStreamJob(context.Context, *request.DescribeStreamJob) (*response.DescribeStreamJob, error)
	// SetStreamJobCode to set the code properties of the specified stream job.
	SetStreamJobCode(context.Context, *request.SetStreamJobCode) (*model.EmptyStruct, error)
	// GetStreamJobCode to get the code properties of the specified stream job.
	GetStreamJobCode(context.Context, *request.GetStreamJobCode) (*response.GetStreamJobCode, error)
	// SetStreamJobArgs to set the run parameters of the specified stream job.
	SetStreamJobArgs(context.Context, *request.SetStreamJobArgs) (*model.EmptyStruct, error)
	// GetStreamJobArgs to get the run parameters of the specified stream job.
	GetStreamJobArgs(context.Context, *request.GetStreamJobArgs) (*response.GetStreamJobArgs, error)
	// SetStreamJobSchedule to set the schedule properties of the specified stream job.
	SetStreamJobSchedule(context.Context, *request.SetStreamJobSchedule) (*model.EmptyStruct, error)
	// GetStreamJobSchedule to get the schedule properties of the specified stream job.
	GetStreamJobSchedule(context.Context, *request.GetStreamJobSchedule) (*response.GetStreamJobSchedule, error)
	// Interface for stream job release.
	//
	// ReleaseStreamJob to publish the specified job to schedule system with a new version.
	ReleaseStreamJob(context.Context, *request.ReleaseStreamJob) (*model.EmptyStruct, error)
	// SuspendReleaseStreamJobs to suspend the specified job list in schedule system.
	OfflineReleaseStreamJob(context.Context, *request.OfflineReleaseStreamJob) (*model.EmptyStruct, error)
	// SuspendReleaseStreamJob to suspend the specified job list in schedule system.
	SuspendReleaseStreamJob(context.Context, *request.SuspendReleaseStreamJob) (*model.EmptyStruct, error)
	// ResumeReleaseStreamJob to resume the suspended job list in schedule system.
	ResumeReleaseStreamJob(context.Context, *request.ResumeReleaseStreamJob) (*model.EmptyStruct, error)
	// ListReleaseStreamJobs for gets a list of all published job in the workspace.
	ListReleaseStreamJobs(context.Context, *request.ListReleaseStreamJobs) (*response.ListReleaseStreamJobs, error)
	// Interface for stream job versions.
	//
	// ListStreamJobVersions for gets a list of all versions of the specified job.
	ListStreamJobVersions(context.Context, *request.ListStreamJobVersions) (*response.ListStreamJobVersions, error)
	// DescribeStreamJobVersion for get the info of the job of the specified version.
	DescribeStreamJobVersion(context.Context, *request.DescribeStreamJob) (*response.DescribeStreamJob, error)
	// GetStreamJobVersionNode for get the node properties of the job of the specified version.
	GetStreamJobVersionNode(context.Context, *request.GetStreamJobCode) (*response.GetStreamJobCode, error)
	// GetStreamJobVersionArgs for get the run parameters of the job of the specified version.
	GetStreamJobVersionArgs(context.Context, *request.GetStreamJobArgs) (*response.GetStreamJobArgs, error)
	// GetStreamJobVersionSchedule for get the schedule properties of the job of the specified version.
	GetStreamJobVersionSchedule(context.Context, *request.GetStreamJobSchedule) (*response.GetStreamJobSchedule, error)
	mustEmbedUnimplementedWorkflowServer()
}

// UnimplementedWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) DeleteJobsBySpaceIds(context.Context, *request.DeleteWorkspaces) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobsBySpaceIds not implemented")
}
func (UnimplementedWorkflowServer) ListStreamJobs(context.Context, *request.ListStreamJobs) (*response.ListStreamJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamJobs not implemented")
}
func (UnimplementedWorkflowServer) DeleteStreamJobs(context.Context, *request.DeleteStreamJobs) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamJobs not implemented")
}
func (UnimplementedWorkflowServer) CreateStreamJob(context.Context, *request.CreateStreamJob) (*response.CreateStreamJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStreamJob not implemented")
}
func (UnimplementedWorkflowServer) UpdateStreamJob(context.Context, *request.UpdateStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamJob not implemented")
}
func (UnimplementedWorkflowServer) DescribeStreamJob(context.Context, *request.DescribeStreamJob) (*response.DescribeStreamJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamJob not implemented")
}
func (UnimplementedWorkflowServer) SetStreamJobCode(context.Context, *request.SetStreamJobCode) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamJobCode not implemented")
}
func (UnimplementedWorkflowServer) GetStreamJobCode(context.Context, *request.GetStreamJobCode) (*response.GetStreamJobCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobCode not implemented")
}
func (UnimplementedWorkflowServer) SetStreamJobArgs(context.Context, *request.SetStreamJobArgs) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamJobArgs not implemented")
}
func (UnimplementedWorkflowServer) GetStreamJobArgs(context.Context, *request.GetStreamJobArgs) (*response.GetStreamJobArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobArgs not implemented")
}
func (UnimplementedWorkflowServer) SetStreamJobSchedule(context.Context, *request.SetStreamJobSchedule) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamJobSchedule not implemented")
}
func (UnimplementedWorkflowServer) GetStreamJobSchedule(context.Context, *request.GetStreamJobSchedule) (*response.GetStreamJobSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobSchedule not implemented")
}
func (UnimplementedWorkflowServer) ReleaseStreamJob(context.Context, *request.ReleaseStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseStreamJob not implemented")
}
func (UnimplementedWorkflowServer) OfflineReleaseStreamJob(context.Context, *request.OfflineReleaseStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineReleaseStreamJob not implemented")
}
func (UnimplementedWorkflowServer) SuspendReleaseStreamJob(context.Context, *request.SuspendReleaseStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendReleaseStreamJob not implemented")
}
func (UnimplementedWorkflowServer) ResumeReleaseStreamJob(context.Context, *request.ResumeReleaseStreamJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReleaseStreamJob not implemented")
}
func (UnimplementedWorkflowServer) ListReleaseStreamJobs(context.Context, *request.ListReleaseStreamJobs) (*response.ListReleaseStreamJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseStreamJobs not implemented")
}
func (UnimplementedWorkflowServer) ListStreamJobVersions(context.Context, *request.ListStreamJobVersions) (*response.ListStreamJobVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamJobVersions not implemented")
}
func (UnimplementedWorkflowServer) DescribeStreamJobVersion(context.Context, *request.DescribeStreamJob) (*response.DescribeStreamJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStreamJobVersion not implemented")
}
func (UnimplementedWorkflowServer) GetStreamJobVersionNode(context.Context, *request.GetStreamJobCode) (*response.GetStreamJobCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobVersionNode not implemented")
}
func (UnimplementedWorkflowServer) GetStreamJobVersionArgs(context.Context, *request.GetStreamJobArgs) (*response.GetStreamJobArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobVersionArgs not implemented")
}
func (UnimplementedWorkflowServer) GetStreamJobVersionSchedule(context.Context, *request.GetStreamJobSchedule) (*response.GetStreamJobSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamJobVersionSchedule not implemented")
}
func (UnimplementedWorkflowServer) mustEmbedUnimplementedWorkflowServer() {}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&_Workflow_serviceDesc, srv)
}

func _Workflow_DeleteJobsBySpaceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DeleteJobsBySpaceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DeleteJobsBySpaceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DeleteJobsBySpaceIds(ctx, req.(*request.DeleteWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListStreamJobs(ctx, req.(*request.ListStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DeleteStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DeleteStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DeleteStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DeleteStreamJobs(ctx, req.(*request.DeleteStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CreateStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CreateStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/CreateStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CreateStreamJob(ctx, req.(*request.CreateStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/UpdateStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateStreamJob(ctx, req.(*request.UpdateStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeStreamJob(ctx, req.(*request.DescribeStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SetStreamJobCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SetStreamJobCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SetStreamJobCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SetStreamJobCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SetStreamJobCode(ctx, req.(*request.SetStreamJobCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamJobCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamJobCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamJobCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamJobCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamJobCode(ctx, req.(*request.GetStreamJobCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SetStreamJobArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SetStreamJobArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SetStreamJobArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SetStreamJobArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SetStreamJobArgs(ctx, req.(*request.SetStreamJobArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamJobArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamJobArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamJobArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamJobArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamJobArgs(ctx, req.(*request.GetStreamJobArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SetStreamJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SetStreamJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SetStreamJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SetStreamJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SetStreamJobSchedule(ctx, req.(*request.SetStreamJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamJobSchedule(ctx, req.(*request.GetStreamJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ReleaseStreamJob(ctx, req.(*request.ReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_OfflineReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.OfflineReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).OfflineReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/OfflineReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).OfflineReleaseStreamJob(ctx, req.(*request.OfflineReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SuspendReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SuspendReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SuspendReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SuspendReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SuspendReleaseStreamJob(ctx, req.(*request.SuspendReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ResumeReleaseStreamJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResumeReleaseStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ResumeReleaseStreamJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ResumeReleaseStreamJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ResumeReleaseStreamJob(ctx, req.(*request.ResumeReleaseStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListReleaseStreamJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListReleaseStreamJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListReleaseStreamJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListReleaseStreamJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListReleaseStreamJobs(ctx, req.(*request.ListReleaseStreamJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListStreamJobVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListStreamJobVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListStreamJobVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListStreamJobVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListStreamJobVersions(ctx, req.(*request.ListStreamJobVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeStreamJobVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DescribeStreamJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeStreamJobVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeStreamJobVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeStreamJobVersion(ctx, req.(*request.DescribeStreamJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamJobVersionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamJobCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamJobVersionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamJobVersionNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamJobVersionNode(ctx, req.(*request.GetStreamJobCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamJobVersionArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamJobArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamJobVersionArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamJobVersionArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamJobVersionArgs(ctx, req.(*request.GetStreamJobArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetStreamJobVersionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStreamJobSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetStreamJobVersionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/GetStreamJobVersionSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetStreamJobVersionSchedule(ctx, req.(*request.GetStreamJobSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wfpb.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteJobsBySpaceIds",
			Handler:    _Workflow_DeleteJobsBySpaceIds_Handler,
		},
		{
			MethodName: "ListStreamJobs",
			Handler:    _Workflow_ListStreamJobs_Handler,
		},
		{
			MethodName: "DeleteStreamJobs",
			Handler:    _Workflow_DeleteStreamJobs_Handler,
		},
		{
			MethodName: "CreateStreamJob",
			Handler:    _Workflow_CreateStreamJob_Handler,
		},
		{
			MethodName: "UpdateStreamJob",
			Handler:    _Workflow_UpdateStreamJob_Handler,
		},
		{
			MethodName: "DescribeStreamJob",
			Handler:    _Workflow_DescribeStreamJob_Handler,
		},
		{
			MethodName: "SetStreamJobCode",
			Handler:    _Workflow_SetStreamJobCode_Handler,
		},
		{
			MethodName: "GetStreamJobCode",
			Handler:    _Workflow_GetStreamJobCode_Handler,
		},
		{
			MethodName: "SetStreamJobArgs",
			Handler:    _Workflow_SetStreamJobArgs_Handler,
		},
		{
			MethodName: "GetStreamJobArgs",
			Handler:    _Workflow_GetStreamJobArgs_Handler,
		},
		{
			MethodName: "SetStreamJobSchedule",
			Handler:    _Workflow_SetStreamJobSchedule_Handler,
		},
		{
			MethodName: "GetStreamJobSchedule",
			Handler:    _Workflow_GetStreamJobSchedule_Handler,
		},
		{
			MethodName: "ReleaseStreamJob",
			Handler:    _Workflow_ReleaseStreamJob_Handler,
		},
		{
			MethodName: "OfflineReleaseStreamJob",
			Handler:    _Workflow_OfflineReleaseStreamJob_Handler,
		},
		{
			MethodName: "SuspendReleaseStreamJob",
			Handler:    _Workflow_SuspendReleaseStreamJob_Handler,
		},
		{
			MethodName: "ResumeReleaseStreamJob",
			Handler:    _Workflow_ResumeReleaseStreamJob_Handler,
		},
		{
			MethodName: "ListReleaseStreamJobs",
			Handler:    _Workflow_ListReleaseStreamJobs_Handler,
		},
		{
			MethodName: "ListStreamJobVersions",
			Handler:    _Workflow_ListStreamJobVersions_Handler,
		},
		{
			MethodName: "DescribeStreamJobVersion",
			Handler:    _Workflow_DescribeStreamJobVersion_Handler,
		},
		{
			MethodName: "GetStreamJobVersionNode",
			Handler:    _Workflow_GetStreamJobVersionNode_Handler,
		},
		{
			MethodName: "GetStreamJobVersionArgs",
			Handler:    _Workflow_GetStreamJobVersionArgs_Handler,
		},
		{
			MethodName: "GetStreamJobVersionSchedule",
			Handler:    _Workflow_GetStreamJobVersionSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workflow.proto",
}
