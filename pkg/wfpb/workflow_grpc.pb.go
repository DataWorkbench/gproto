// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wfpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	// Operation of workflow.
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsReply, error)
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeWorkflow(ctx context.Context, in *DescribeWorkflowRequest, opts ...grpc.CallOption) (*DescribeWorkflowReply, error)
	ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Operation of schedule.
	UpsertSchedule(ctx context.Context, in *UpsertScheduleRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeSchedule(ctx context.Context, in *DescribeScheduleRequest, opts ...grpc.CallOption) (*DescribeScheduleReply, error)
	// Operation of node.
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesReply, error)
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	DescribeNode(ctx context.Context, in *DescribeNodeRequest, opts ...grpc.CallOption) (*DescribeNodeReply, error)
	UpdateNodePosition(ctx context.Context, in *UpdateNodePositionRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	// Operation of release version.
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesReply, error)
	ReleaseWorkflow(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	SuspendWorkflow(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ResumeWorkflow(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*ListWorkflowVersionsReply, error)
	ListScheduleVersions(ctx context.Context, in *ListScheduleVersionsRequest, opts ...grpc.CallOption) (*ListScheduleVersionsReply, error)
	ListVersionNodes(ctx context.Context, in *ListVersionNodesRequest, opts ...grpc.CallOption) (*ListVersionNodesReply, error)
	ListNodeVersions(ctx context.Context, in *ListNodeVersionsRequest, opts ...grpc.CallOption) (*ListNodeVersionsReply, error)
	DescribeWorkflowVersion(ctx context.Context, in *DescribeWorkflowVersionRequest, opts ...grpc.CallOption) (*DescribeWorkflowVersionReply, error)
	DescribeScheduleVersion(ctx context.Context, in *DescribeScheduleVersionRequest, opts ...grpc.CallOption) (*DescribeScheduleVersionReply, error)
	DescribeNodeVersion(ctx context.Context, in *DescribeNodeVersionRequest, opts ...grpc.CallOption) (*DescribeNodeVersionReply, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsReply, error) {
	out := new(ListWorkflowsReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/UpdateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeWorkflow(ctx context.Context, in *DescribeWorkflowRequest, opts ...grpc.CallOption) (*DescribeWorkflowReply, error) {
	out := new(DescribeWorkflowReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ExecuteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpsertSchedule(ctx context.Context, in *UpsertScheduleRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/UpsertSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeSchedule(ctx context.Context, in *DescribeScheduleRequest, opts ...grpc.CallOption) (*DescribeScheduleReply, error) {
	out := new(DescribeScheduleReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesReply, error) {
	out := new(ListNodesReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeNode(ctx context.Context, in *DescribeNodeRequest, opts ...grpc.CallOption) (*DescribeNodeReply, error) {
	out := new(DescribeNodeReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateNodePosition(ctx context.Context, in *UpdateNodePositionRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/UpdateNodePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesReply, error) {
	out := new(ListReleasesReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ReleaseWorkflow(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ReleaseWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SuspendWorkflow(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/SuspendWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ResumeWorkflow(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ResumeWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*ListWorkflowVersionsReply, error) {
	out := new(ListWorkflowVersionsReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListScheduleVersions(ctx context.Context, in *ListScheduleVersionsRequest, opts ...grpc.CallOption) (*ListScheduleVersionsReply, error) {
	out := new(ListScheduleVersionsReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListScheduleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListVersionNodes(ctx context.Context, in *ListVersionNodesRequest, opts ...grpc.CallOption) (*ListVersionNodesReply, error) {
	out := new(ListVersionNodesReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListVersionNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ListNodeVersions(ctx context.Context, in *ListNodeVersionsRequest, opts ...grpc.CallOption) (*ListNodeVersionsReply, error) {
	out := new(ListNodeVersionsReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/ListNodeVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeWorkflowVersion(ctx context.Context, in *DescribeWorkflowVersionRequest, opts ...grpc.CallOption) (*DescribeWorkflowVersionReply, error) {
	out := new(DescribeWorkflowVersionReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeWorkflowVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeScheduleVersion(ctx context.Context, in *DescribeScheduleVersionRequest, opts ...grpc.CallOption) (*DescribeScheduleVersionReply, error) {
	out := new(DescribeScheduleVersionReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeScheduleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DescribeNodeVersion(ctx context.Context, in *DescribeNodeVersionRequest, opts ...grpc.CallOption) (*DescribeNodeVersionReply, error) {
	out := new(DescribeNodeVersionReply)
	err := c.cc.Invoke(ctx, "/wfpb.Workflow/DescribeNodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations must embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	// Operation of workflow.
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsReply, error)
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*model.EmptyStruct, error)
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*model.EmptyStruct, error)
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*model.EmptyStruct, error)
	DescribeWorkflow(context.Context, *DescribeWorkflowRequest) (*DescribeWorkflowReply, error)
	ExecuteWorkflow(context.Context, *ExecuteWorkflowRequest) (*model.EmptyStruct, error)
	// Operation of schedule.
	UpsertSchedule(context.Context, *UpsertScheduleRequest) (*model.EmptyStruct, error)
	DescribeSchedule(context.Context, *DescribeScheduleRequest) (*DescribeScheduleReply, error)
	// Operation of node.
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesReply, error)
	CreateNode(context.Context, *CreateNodeRequest) (*model.EmptyStruct, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*model.EmptyStruct, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*model.EmptyStruct, error)
	DescribeNode(context.Context, *DescribeNodeRequest) (*DescribeNodeReply, error)
	UpdateNodePosition(context.Context, *UpdateNodePositionRequest) (*model.EmptyStruct, error)
	// Operation of release version.
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesReply, error)
	ReleaseWorkflow(context.Context, *ReleaseRequest) (*model.EmptyStruct, error)
	SuspendWorkflow(context.Context, *SuspendRequest) (*model.EmptyStruct, error)
	ResumeWorkflow(context.Context, *ResumeRequest) (*model.EmptyStruct, error)
	ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*ListWorkflowVersionsReply, error)
	ListScheduleVersions(context.Context, *ListScheduleVersionsRequest) (*ListScheduleVersionsReply, error)
	ListVersionNodes(context.Context, *ListVersionNodesRequest) (*ListVersionNodesReply, error)
	ListNodeVersions(context.Context, *ListNodeVersionsRequest) (*ListNodeVersionsReply, error)
	DescribeWorkflowVersion(context.Context, *DescribeWorkflowVersionRequest) (*DescribeWorkflowVersionReply, error)
	DescribeScheduleVersion(context.Context, *DescribeScheduleVersionRequest) (*DescribeScheduleVersionReply, error)
	DescribeNodeVersion(context.Context, *DescribeNodeVersionRequest) (*DescribeNodeVersionReply, error)
	mustEmbedUnimplementedWorkflowServer()
}

// UnimplementedWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedWorkflowServer) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedWorkflowServer) UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (UnimplementedWorkflowServer) DescribeWorkflow(context.Context, *DescribeWorkflowRequest) (*DescribeWorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWorkflow not implemented")
}
func (UnimplementedWorkflowServer) ExecuteWorkflow(context.Context, *ExecuteWorkflowRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWorkflow not implemented")
}
func (UnimplementedWorkflowServer) UpsertSchedule(context.Context, *UpsertScheduleRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSchedule not implemented")
}
func (UnimplementedWorkflowServer) DescribeSchedule(context.Context, *DescribeScheduleRequest) (*DescribeScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSchedule not implemented")
}
func (UnimplementedWorkflowServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedWorkflowServer) CreateNode(context.Context, *CreateNodeRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedWorkflowServer) DeleteNode(context.Context, *DeleteNodeRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedWorkflowServer) UpdateNode(context.Context, *UpdateNodeRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedWorkflowServer) DescribeNode(context.Context, *DescribeNodeRequest) (*DescribeNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeNode not implemented")
}
func (UnimplementedWorkflowServer) UpdateNodePosition(context.Context, *UpdateNodePositionRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodePosition not implemented")
}
func (UnimplementedWorkflowServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedWorkflowServer) ReleaseWorkflow(context.Context, *ReleaseRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseWorkflow not implemented")
}
func (UnimplementedWorkflowServer) SuspendWorkflow(context.Context, *SuspendRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendWorkflow not implemented")
}
func (UnimplementedWorkflowServer) ResumeWorkflow(context.Context, *ResumeRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeWorkflow not implemented")
}
func (UnimplementedWorkflowServer) ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*ListWorkflowVersionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowVersions not implemented")
}
func (UnimplementedWorkflowServer) ListScheduleVersions(context.Context, *ListScheduleVersionsRequest) (*ListScheduleVersionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduleVersions not implemented")
}
func (UnimplementedWorkflowServer) ListVersionNodes(context.Context, *ListVersionNodesRequest) (*ListVersionNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersionNodes not implemented")
}
func (UnimplementedWorkflowServer) ListNodeVersions(context.Context, *ListNodeVersionsRequest) (*ListNodeVersionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeVersions not implemented")
}
func (UnimplementedWorkflowServer) DescribeWorkflowVersion(context.Context, *DescribeWorkflowVersionRequest) (*DescribeWorkflowVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWorkflowVersion not implemented")
}
func (UnimplementedWorkflowServer) DescribeScheduleVersion(context.Context, *DescribeScheduleVersionRequest) (*DescribeScheduleVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScheduleVersion not implemented")
}
func (UnimplementedWorkflowServer) DescribeNodeVersion(context.Context, *DescribeNodeVersionRequest) (*DescribeNodeVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeNodeVersion not implemented")
}
func (UnimplementedWorkflowServer) mustEmbedUnimplementedWorkflowServer() {}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&_Workflow_serviceDesc, srv)
}

func _Workflow_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/UpdateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeWorkflow(ctx, req.(*DescribeWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ExecuteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ExecuteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ExecuteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ExecuteWorkflow(ctx, req.(*ExecuteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpsertSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpsertSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/UpsertSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpsertSchedule(ctx, req.(*UpsertScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeSchedule(ctx, req.(*DescribeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeNode(ctx, req.(*DescribeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateNodePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateNodePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/UpdateNodePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateNodePosition(ctx, req.(*UpdateNodePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ReleaseWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ReleaseWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ReleaseWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ReleaseWorkflow(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SuspendWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SuspendWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/SuspendWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SuspendWorkflow(ctx, req.(*SuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ResumeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ResumeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ResumeWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ResumeWorkflow(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListWorkflowVersions(ctx, req.(*ListWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListScheduleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListScheduleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListScheduleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListScheduleVersions(ctx, req.(*ListScheduleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListVersionNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListVersionNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListVersionNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListVersionNodes(ctx, req.(*ListVersionNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ListNodeVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ListNodeVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/ListNodeVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ListNodeVersions(ctx, req.(*ListNodeVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWorkflowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeWorkflowVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeWorkflowVersion(ctx, req.(*DescribeWorkflowVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeScheduleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScheduleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeScheduleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeScheduleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeScheduleVersion(ctx, req.(*DescribeScheduleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DescribeNodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeNodeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DescribeNodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wfpb.Workflow/DescribeNodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DescribeNodeVersion(ctx, req.(*DescribeNodeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wfpb.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkflows",
			Handler:    _Workflow_ListWorkflows_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _Workflow_CreateWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _Workflow_DeleteWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _Workflow_UpdateWorkflow_Handler,
		},
		{
			MethodName: "DescribeWorkflow",
			Handler:    _Workflow_DescribeWorkflow_Handler,
		},
		{
			MethodName: "ExecuteWorkflow",
			Handler:    _Workflow_ExecuteWorkflow_Handler,
		},
		{
			MethodName: "UpsertSchedule",
			Handler:    _Workflow_UpsertSchedule_Handler,
		},
		{
			MethodName: "DescribeSchedule",
			Handler:    _Workflow_DescribeSchedule_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Workflow_ListNodes_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _Workflow_CreateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Workflow_DeleteNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Workflow_UpdateNode_Handler,
		},
		{
			MethodName: "DescribeNode",
			Handler:    _Workflow_DescribeNode_Handler,
		},
		{
			MethodName: "UpdateNodePosition",
			Handler:    _Workflow_UpdateNodePosition_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Workflow_ListReleases_Handler,
		},
		{
			MethodName: "ReleaseWorkflow",
			Handler:    _Workflow_ReleaseWorkflow_Handler,
		},
		{
			MethodName: "SuspendWorkflow",
			Handler:    _Workflow_SuspendWorkflow_Handler,
		},
		{
			MethodName: "ResumeWorkflow",
			Handler:    _Workflow_ResumeWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowVersions",
			Handler:    _Workflow_ListWorkflowVersions_Handler,
		},
		{
			MethodName: "ListScheduleVersions",
			Handler:    _Workflow_ListScheduleVersions_Handler,
		},
		{
			MethodName: "ListVersionNodes",
			Handler:    _Workflow_ListVersionNodes_Handler,
		},
		{
			MethodName: "ListNodeVersions",
			Handler:    _Workflow_ListNodeVersions_Handler,
		},
		{
			MethodName: "DescribeWorkflowVersion",
			Handler:    _Workflow_DescribeWorkflowVersion_Handler,
		},
		{
			MethodName: "DescribeScheduleVersion",
			Handler:    _Workflow_DescribeScheduleVersion_Handler,
		},
		{
			MethodName: "DescribeNodeVersion",
			Handler:    _Workflow_DescribeNodeVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workflow.proto",
}
