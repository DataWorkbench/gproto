// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JobmanagerClient is the client API for Jobmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobmanagerClient interface {
	RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*JobReply, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobReply, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	PickupAloneJobs(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	CancelAllJob(ctx context.Context, in *CancelAllJobRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
}

type jobmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobmanagerClient(cc grpc.ClientConnInterface) JobmanagerClient {
	return &jobmanagerClient{cc}
}

func (c *jobmanagerClient) RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*JobReply, error) {
	out := new(JobReply)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobReply, error) {
	out := new(JobReply)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) PickupAloneJobs(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/PickupAloneJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) CancelAllJob(ctx context.Context, in *CancelAllJobRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/CancelAllJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobmanagerServer is the server API for Jobmanager service.
// All implementations must embed UnimplementedJobmanagerServer
// for forward compatibility
type JobmanagerServer interface {
	RunJob(context.Context, *RunJobRequest) (*JobReply, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*JobReply, error)
	CancelJob(context.Context, *CancelJobRequest) (*model.EmptyStruct, error)
	PickupAloneJobs(context.Context, *model.EmptyStruct) (*model.EmptyStruct, error)
	CancelAllJob(context.Context, *CancelAllJobRequest) (*model.EmptyStruct, error)
	mustEmbedUnimplementedJobmanagerServer()
}

// UnimplementedJobmanagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobmanagerServer struct {
}

func (UnimplementedJobmanagerServer) RunJob(context.Context, *RunJobRequest) (*JobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedJobmanagerServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*JobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedJobmanagerServer) CancelJob(context.Context, *CancelJobRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobmanagerServer) PickupAloneJobs(context.Context, *model.EmptyStruct) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickupAloneJobs not implemented")
}
func (UnimplementedJobmanagerServer) CancelAllJob(context.Context, *CancelAllJobRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllJob not implemented")
}
func (UnimplementedJobmanagerServer) mustEmbedUnimplementedJobmanagerServer() {}

// UnsafeJobmanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobmanagerServer will
// result in compilation errors.
type UnsafeJobmanagerServer interface {
	mustEmbedUnimplementedJobmanagerServer()
}

func RegisterJobmanagerServer(s grpc.ServiceRegistrar, srv JobmanagerServer) {
	s.RegisterService(&_Jobmanager_serviceDesc, srv)
}

func _Jobmanager_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).RunJob(ctx, req.(*RunJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_PickupAloneJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).PickupAloneJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/PickupAloneJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).PickupAloneJobs(ctx, req.(*model.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_CancelAllJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).CancelAllJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/CancelAllJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).CancelAllJob(ctx, req.(*CancelAllJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobpb.Jobmanager",
	HandlerType: (*JobmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunJob",
			Handler:    _Jobmanager_RunJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _Jobmanager_GetJobStatus_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Jobmanager_CancelJob_Handler,
		},
		{
			MethodName: "PickupAloneJobs",
			Handler:    _Jobmanager_PickupAloneJobs_Handler,
		},
		{
			MethodName: "CancelAllJob",
			Handler:    _Jobmanager_CancelAllJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobmanager.proto",
}
