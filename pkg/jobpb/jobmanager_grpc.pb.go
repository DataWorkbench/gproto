// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/jobmanager.proto

package jobpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobmanagerClient is the client API for Jobmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobmanagerClient interface {
	FreeFlinkJob(ctx context.Context, in *request.FreeFlinkJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	InitFlinkJob(ctx context.Context, in *request.InitFlinkJob, opts ...grpc.CallOption) (*response.InitFlinkJob, error)
	SubmitFlinkJob(ctx context.Context, in *request.SubmitFlinkJob, opts ...grpc.CallOption) (*response.SubmitFlinkJob, error)
	GetFlinkJob(ctx context.Context, in *request.GetFlinkJob, opts ...grpc.CallOption) (*response.GetFlinkJob, error)
	CancelFlinkJob(ctx context.Context, in *request.CancelFlinkJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ValidateFlinkJob(ctx context.Context, in *request.ValidateFlinkJob, opts ...grpc.CallOption) (*response.StreamJobCodeSyntax, error)
}

type jobmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobmanagerClient(cc grpc.ClientConnInterface) JobmanagerClient {
	return &jobmanagerClient{cc}
}

func (c *jobmanagerClient) FreeFlinkJob(ctx context.Context, in *request.FreeFlinkJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/FreeFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) InitFlinkJob(ctx context.Context, in *request.InitFlinkJob, opts ...grpc.CallOption) (*response.InitFlinkJob, error) {
	out := new(response.InitFlinkJob)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/InitFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) SubmitFlinkJob(ctx context.Context, in *request.SubmitFlinkJob, opts ...grpc.CallOption) (*response.SubmitFlinkJob, error) {
	out := new(response.SubmitFlinkJob)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/SubmitFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) GetFlinkJob(ctx context.Context, in *request.GetFlinkJob, opts ...grpc.CallOption) (*response.GetFlinkJob, error) {
	out := new(response.GetFlinkJob)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/GetFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) CancelFlinkJob(ctx context.Context, in *request.CancelFlinkJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/CancelFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) ValidateFlinkJob(ctx context.Context, in *request.ValidateFlinkJob, opts ...grpc.CallOption) (*response.StreamJobCodeSyntax, error) {
	out := new(response.StreamJobCodeSyntax)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/ValidateFlinkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobmanagerServer is the server API for Jobmanager service.
// All implementations must embed UnimplementedJobmanagerServer
// for forward compatibility
type JobmanagerServer interface {
	FreeFlinkJob(context.Context, *request.FreeFlinkJob) (*model.EmptyStruct, error)
	InitFlinkJob(context.Context, *request.InitFlinkJob) (*response.InitFlinkJob, error)
	SubmitFlinkJob(context.Context, *request.SubmitFlinkJob) (*response.SubmitFlinkJob, error)
	GetFlinkJob(context.Context, *request.GetFlinkJob) (*response.GetFlinkJob, error)
	CancelFlinkJob(context.Context, *request.CancelFlinkJob) (*model.EmptyStruct, error)
	ValidateFlinkJob(context.Context, *request.ValidateFlinkJob) (*response.StreamJobCodeSyntax, error)
	mustEmbedUnimplementedJobmanagerServer()
}

// UnimplementedJobmanagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobmanagerServer struct {
}

func (UnimplementedJobmanagerServer) FreeFlinkJob(context.Context, *request.FreeFlinkJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeFlinkJob not implemented")
}
func (UnimplementedJobmanagerServer) InitFlinkJob(context.Context, *request.InitFlinkJob) (*response.InitFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFlinkJob not implemented")
}
func (UnimplementedJobmanagerServer) SubmitFlinkJob(context.Context, *request.SubmitFlinkJob) (*response.SubmitFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFlinkJob not implemented")
}
func (UnimplementedJobmanagerServer) GetFlinkJob(context.Context, *request.GetFlinkJob) (*response.GetFlinkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlinkJob not implemented")
}
func (UnimplementedJobmanagerServer) CancelFlinkJob(context.Context, *request.CancelFlinkJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlinkJob not implemented")
}
func (UnimplementedJobmanagerServer) ValidateFlinkJob(context.Context, *request.ValidateFlinkJob) (*response.StreamJobCodeSyntax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateFlinkJob not implemented")
}
func (UnimplementedJobmanagerServer) mustEmbedUnimplementedJobmanagerServer() {}

// UnsafeJobmanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobmanagerServer will
// result in compilation errors.
type UnsafeJobmanagerServer interface {
	mustEmbedUnimplementedJobmanagerServer()
}

func RegisterJobmanagerServer(s grpc.ServiceRegistrar, srv JobmanagerServer) {
	s.RegisterService(&Jobmanager_ServiceDesc, srv)
}

func _Jobmanager_FreeFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.FreeFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).FreeFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/FreeFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).FreeFlinkJob(ctx, req.(*request.FreeFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_InitFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.InitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).InitFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/InitFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).InitFlinkJob(ctx, req.(*request.InitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_SubmitFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SubmitFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).SubmitFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/SubmitFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).SubmitFlinkJob(ctx, req.(*request.SubmitFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_GetFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).GetFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/GetFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).GetFlinkJob(ctx, req.(*request.GetFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_CancelFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CancelFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).CancelFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/CancelFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).CancelFlinkJob(ctx, req.(*request.CancelFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_ValidateFlinkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ValidateFlinkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).ValidateFlinkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/ValidateFlinkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).ValidateFlinkJob(ctx, req.(*request.ValidateFlinkJob))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobmanager_ServiceDesc is the grpc.ServiceDesc for Jobmanager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobmanager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobpb.Jobmanager",
	HandlerType: (*JobmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FreeFlinkJob",
			Handler:    _Jobmanager_FreeFlinkJob_Handler,
		},
		{
			MethodName: "InitFlinkJob",
			Handler:    _Jobmanager_InitFlinkJob_Handler,
		},
		{
			MethodName: "SubmitFlinkJob",
			Handler:    _Jobmanager_SubmitFlinkJob_Handler,
		},
		{
			MethodName: "GetFlinkJob",
			Handler:    _Jobmanager_GetFlinkJob_Handler,
		},
		{
			MethodName: "CancelFlinkJob",
			Handler:    _Jobmanager_CancelFlinkJob_Handler,
		},
		{
			MethodName: "ValidateFlinkJob",
			Handler:    _Jobmanager_ValidateFlinkJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobmanager.proto",
}
