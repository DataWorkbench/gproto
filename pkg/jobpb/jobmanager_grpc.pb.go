// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	request "github.com/DataWorkbench/gproto/pkg/request"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JobmanagerClient is the client API for Jobmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobmanagerClient interface {
	ReleaseNote(ctx context.Context, in *request.ReleaseNote, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	PreRunJob(ctx context.Context, in *request.RunJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	RunJob(ctx context.Context, in *request.RunJob, opts ...grpc.CallOption) (*response.RunJob, error)
	GetJobInfo(ctx context.Context, in *request.GetJobInfo, opts ...grpc.CallOption) (*response.GetJobInfo, error)
	CancelJob(ctx context.Context, in *request.CancelJob, opts ...grpc.CallOption) (*model.EmptyStruct, error)
	ValidateJob(ctx context.Context, in *request.ValidateJob, opts ...grpc.CallOption) (*response.StreamJobCodeSyntax, error)
}

type jobmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobmanagerClient(cc grpc.ClientConnInterface) JobmanagerClient {
	return &jobmanagerClient{cc}
}

func (c *jobmanagerClient) ReleaseNote(ctx context.Context, in *request.ReleaseNote, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/ReleaseNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) PreRunJob(ctx context.Context, in *request.RunJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/PreRunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) RunJob(ctx context.Context, in *request.RunJob, opts ...grpc.CallOption) (*response.RunJob, error) {
	out := new(response.RunJob)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) GetJobInfo(ctx context.Context, in *request.GetJobInfo, opts ...grpc.CallOption) (*response.GetJobInfo, error) {
	out := new(response.GetJobInfo)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/GetJobInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) CancelJob(ctx context.Context, in *request.CancelJob, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmanagerClient) ValidateJob(ctx context.Context, in *request.ValidateJob, opts ...grpc.CallOption) (*response.StreamJobCodeSyntax, error) {
	out := new(response.StreamJobCodeSyntax)
	err := c.cc.Invoke(ctx, "/jobpb.Jobmanager/ValidateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobmanagerServer is the server API for Jobmanager service.
// All implementations must embed UnimplementedJobmanagerServer
// for forward compatibility
type JobmanagerServer interface {
	ReleaseNote(context.Context, *request.ReleaseNote) (*model.EmptyStruct, error)
	PreRunJob(context.Context, *request.RunJob) (*model.EmptyStruct, error)
	RunJob(context.Context, *request.RunJob) (*response.RunJob, error)
	GetJobInfo(context.Context, *request.GetJobInfo) (*response.GetJobInfo, error)
	CancelJob(context.Context, *request.CancelJob) (*model.EmptyStruct, error)
	ValidateJob(context.Context, *request.ValidateJob) (*response.StreamJobCodeSyntax, error)
	mustEmbedUnimplementedJobmanagerServer()
}

// UnimplementedJobmanagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobmanagerServer struct {
}

func (UnimplementedJobmanagerServer) ReleaseNote(context.Context, *request.ReleaseNote) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseNote not implemented")
}
func (UnimplementedJobmanagerServer) PreRunJob(context.Context, *request.RunJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreRunJob not implemented")
}
func (UnimplementedJobmanagerServer) RunJob(context.Context, *request.RunJob) (*response.RunJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedJobmanagerServer) GetJobInfo(context.Context, *request.GetJobInfo) (*response.GetJobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobInfo not implemented")
}
func (UnimplementedJobmanagerServer) CancelJob(context.Context, *request.CancelJob) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobmanagerServer) ValidateJob(context.Context, *request.ValidateJob) (*response.StreamJobCodeSyntax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJob not implemented")
}
func (UnimplementedJobmanagerServer) mustEmbedUnimplementedJobmanagerServer() {}

// UnsafeJobmanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobmanagerServer will
// result in compilation errors.
type UnsafeJobmanagerServer interface {
	mustEmbedUnimplementedJobmanagerServer()
}

func RegisterJobmanagerServer(s grpc.ServiceRegistrar, srv JobmanagerServer) {
	s.RegisterService(&_Jobmanager_serviceDesc, srv)
}

func _Jobmanager_ReleaseNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReleaseNote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).ReleaseNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/ReleaseNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).ReleaseNote(ctx, req.(*request.ReleaseNote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_PreRunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RunJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).PreRunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/PreRunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).PreRunJob(ctx, req.(*request.RunJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RunJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).RunJob(ctx, req.(*request.RunJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_GetJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetJobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).GetJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/GetJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).GetJobInfo(ctx, req.(*request.GetJobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CancelJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).CancelJob(ctx, req.(*request.CancelJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobmanager_ValidateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ValidateJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmanagerServer).ValidateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobpb.Jobmanager/ValidateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmanagerServer).ValidateJob(ctx, req.(*request.ValidateJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobpb.Jobmanager",
	HandlerType: (*JobmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReleaseNote",
			Handler:    _Jobmanager_ReleaseNote_Handler,
		},
		{
			MethodName: "PreRunJob",
			Handler:    _Jobmanager_PreRunJob_Handler,
		},
		{
			MethodName: "RunJob",
			Handler:    _Jobmanager_RunJob_Handler,
		},
		{
			MethodName: "GetJobInfo",
			Handler:    _Jobmanager_GetJobInfo_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Jobmanager_CancelJob_Handler,
		},
		{
			MethodName: "ValidateJob",
			Handler:    _Jobmanager_ValidateJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobmanager.proto",
}
