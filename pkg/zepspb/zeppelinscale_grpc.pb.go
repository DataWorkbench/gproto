// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zepspb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	response "github.com/DataWorkbench/gproto/pkg/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ZeppelinScaleClient is the client API for ZeppelinScale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeppelinScaleClient interface {
	GetZeppelinAddress(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*response.ZeppelinAddress, error)
}

type zeppelinScaleClient struct {
	cc grpc.ClientConnInterface
}

func NewZeppelinScaleClient(cc grpc.ClientConnInterface) ZeppelinScaleClient {
	return &zeppelinScaleClient{cc}
}

func (c *zeppelinScaleClient) GetZeppelinAddress(ctx context.Context, in *model.EmptyStruct, opts ...grpc.CallOption) (*response.ZeppelinAddress, error) {
	out := new(response.ZeppelinAddress)
	err := c.cc.Invoke(ctx, "/zepspb.ZeppelinScale/GetZeppelinAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeppelinScaleServer is the server API for ZeppelinScale service.
// All implementations must embed UnimplementedZeppelinScaleServer
// for forward compatibility
type ZeppelinScaleServer interface {
	GetZeppelinAddress(context.Context, *model.EmptyStruct) (*response.ZeppelinAddress, error)
	mustEmbedUnimplementedZeppelinScaleServer()
}

// UnimplementedZeppelinScaleServer must be embedded to have forward compatible implementations.
type UnimplementedZeppelinScaleServer struct {
}

func (UnimplementedZeppelinScaleServer) GetZeppelinAddress(context.Context, *model.EmptyStruct) (*response.ZeppelinAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZeppelinAddress not implemented")
}
func (UnimplementedZeppelinScaleServer) mustEmbedUnimplementedZeppelinScaleServer() {}

// UnsafeZeppelinScaleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeppelinScaleServer will
// result in compilation errors.
type UnsafeZeppelinScaleServer interface {
	mustEmbedUnimplementedZeppelinScaleServer()
}

func RegisterZeppelinScaleServer(s grpc.ServiceRegistrar, srv ZeppelinScaleServer) {
	s.RegisterService(&_ZeppelinScale_serviceDesc, srv)
}

func _ZeppelinScale_GetZeppelinAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeppelinScaleServer).GetZeppelinAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zepspb.ZeppelinScale/GetZeppelinAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeppelinScaleServer).GetZeppelinAddress(ctx, req.(*model.EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZeppelinScale_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zepspb.ZeppelinScale",
	HandlerType: (*ZeppelinScaleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetZeppelinAddress",
			Handler:    _ZeppelinScale_GetZeppelinAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zeppelinscale.proto",
}
