// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobwpb

import (
	context "context"
	model "github.com/DataWorkbench/gproto/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JobwatcherClient is the client API for Jobwatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobwatcherClient interface {
	WatchJob(ctx context.Context, in *WatchJobRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error)
}

type jobwatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewJobwatcherClient(cc grpc.ClientConnInterface) JobwatcherClient {
	return &jobwatcherClient{cc}
}

func (c *jobwatcherClient) WatchJob(ctx context.Context, in *WatchJobRequest, opts ...grpc.CallOption) (*model.EmptyStruct, error) {
	out := new(model.EmptyStruct)
	err := c.cc.Invoke(ctx, "/jobwpb.Jobwatcher/WatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobwatcherServer is the server API for Jobwatcher service.
// All implementations must embed UnimplementedJobwatcherServer
// for forward compatibility
type JobwatcherServer interface {
	WatchJob(context.Context, *WatchJobRequest) (*model.EmptyStruct, error)
	mustEmbedUnimplementedJobwatcherServer()
}

// UnimplementedJobwatcherServer must be embedded to have forward compatible implementations.
type UnimplementedJobwatcherServer struct {
}

func (UnimplementedJobwatcherServer) WatchJob(context.Context, *WatchJobRequest) (*model.EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchJob not implemented")
}
func (UnimplementedJobwatcherServer) mustEmbedUnimplementedJobwatcherServer() {}

// UnsafeJobwatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobwatcherServer will
// result in compilation errors.
type UnsafeJobwatcherServer interface {
	mustEmbedUnimplementedJobwatcherServer()
}

func RegisterJobwatcherServer(s grpc.ServiceRegistrar, srv JobwatcherServer) {
	s.RegisterService(&_Jobwatcher_serviceDesc, srv)
}

func _Jobwatcher_WatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobwatcherServer).WatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobwpb.Jobwatcher/WatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobwatcherServer).WatchJob(ctx, req.(*WatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobwatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobwpb.Jobwatcher",
	HandlerType: (*JobwatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchJob",
			Handler:    _Jobwatcher_WatchJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobwatcher.proto",
}
