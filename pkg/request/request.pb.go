// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/request.proto

package request

import (
	datasourcepb "github.com/DataWorkbench/gproto/pkg/datasourcepb"
	flinkpb "github.com/DataWorkbench/gproto/pkg/flinkpb"
	model "github.com/DataWorkbench/gproto/pkg/model"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
type ListWorkspaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updated".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// Search with workspace name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search" binding:"-"`
	// The used_id fixed to request user id.
	UserId string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id" form:"-" binding:"-" swaggerignore:"true"`
	// Filter by workspace status;  Not required.
	// Valid optional: 1 => "enabled", 2 => "disabled".
	Status model.Workspace_Status `protobuf:"varint,7,opt,name=status,proto3,enum=model.Workspace_Status" json:"status" form:"status" binding:"oneof=0 1 2"`
	// Filter by workspace name; valid if `search` is empty; Not required.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name" form:"name" binding:"-"`
}

func (x *ListWorkspaces) Reset() {
	*x = ListWorkspaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkspaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkspaces) ProtoMessage() {}

func (x *ListWorkspaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkspaces.ProtoReflect.Descriptor instead.
func (*ListWorkspaces) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{0}
}

func (x *ListWorkspaces) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListWorkspaces) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListWorkspaces) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListWorkspaces) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListWorkspaces) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListWorkspaces) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListWorkspaces) GetStatus() model.Workspace_Status {
	if x != nil {
		return x.Status
	}
	return model.Workspace__
}

func (x *ListWorkspaces) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteWorkspaces used as a request parameters for RPC and HTTP(based on Body).
type DeleteWorkspaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of workspace id. Is required, Min 1, Max 100.
	SpaceIds []string `protobuf:"bytes,1,rep,name=space_ids,json=spaceIds,proto3" json:"space_ids" binding:"gte=1,lte=100"`
}

func (x *DeleteWorkspaces) Reset() {
	*x = DeleteWorkspaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkspaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkspaces) ProtoMessage() {}

func (x *DeleteWorkspaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkspaces.ProtoReflect.Descriptor instead.
func (*DeleteWorkspaces) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteWorkspaces) GetSpaceIds() []string {
	if x != nil {
		return x.SpaceIds
	}
	return nil
}

// RenameFlinkStatePath used as a request parameters for RPC.
type RenameFlinkStatePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The real path of flink job's savepoint or checkpoint.
	SrcPath string `protobuf:"bytes,1,opt,name=src_path,json=srcPath,proto3" json:"src_path" binding:"gte=1,lte=100"`
	// The dest path of flink job's savepoint or checkpoint.
	DstPath string `protobuf:"bytes,2,opt,name=dst_path,json=dstPath,proto3" json:"dst_path" binding:"gte=1,lte=100"`
}

func (x *RenameFlinkStatePath) Reset() {
	*x = RenameFlinkStatePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFlinkStatePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFlinkStatePath) ProtoMessage() {}

func (x *RenameFlinkStatePath) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFlinkStatePath.ProtoReflect.Descriptor instead.
func (*RenameFlinkStatePath) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{2}
}

func (x *RenameFlinkStatePath) GetSrcPath() string {
	if x != nil {
		return x.SrcPath
	}
	return ""
}

func (x *RenameFlinkStatePath) GetDstPath() string {
	if x != nil {
		return x.DstPath
	}
	return ""
}

// DeleteFlinkState used as a request parameters for RPC.
type DeleteFlinkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path of flink job's savepoint or checkpoint.
	DeletePath string `protobuf:"bytes,1,opt,name=delete_path,json=deletePath,proto3" json:"delete_path" binding:"gte=1,lte=100"`
	// The type of flink state path.
	IsDir bool `protobuf:"varint,2,opt,name=is_dir,json=isDir,proto3" json:"is_dir"`
}

func (x *DeleteFlinkState) Reset() {
	*x = DeleteFlinkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlinkState) ProtoMessage() {}

func (x *DeleteFlinkState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlinkState.ProtoReflect.Descriptor instead.
func (*DeleteFlinkState) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteFlinkState) GetDeletePath() string {
	if x != nil {
		return x.DeletePath
	}
	return ""
}

func (x *DeleteFlinkState) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

// DisableWorkspaces used as a request parameters for RPC and HTTP(based on Body).
type DisableWorkspaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of workspace id. Is required, Contains at least one.
	// Disable workspace will suspend all release stream job and stop all running instances.
	SpaceIds []string `protobuf:"bytes,1,rep,name=space_ids,json=spaceIds,proto3" json:"space_ids" binding:"gte=1,lte=100"`
}

func (x *DisableWorkspaces) Reset() {
	*x = DisableWorkspaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableWorkspaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableWorkspaces) ProtoMessage() {}

func (x *DisableWorkspaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableWorkspaces.ProtoReflect.Descriptor instead.
func (*DisableWorkspaces) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{4}
}

func (x *DisableWorkspaces) GetSpaceIds() []string {
	if x != nil {
		return x.SpaceIds
	}
	return nil
}

// EnableWorkspaces used as a request parameters for RPC and HTTP(based on Body).
type EnableWorkspaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of workspace id. Is required, Contains at least one.
	SpaceIds []string `protobuf:"bytes,1,rep,name=space_ids,json=spaceIds,proto3" json:"space_ids" binding:"gte=1,lte=100"`
	// Whether resume all suspended job. Not required, default false.
	ResumeJob bool `protobuf:"varint,2,opt,name=resume_job,json=resumeJob,proto3" json:"resume_job" default:"false" binding:"-"`
}

func (x *EnableWorkspaces) Reset() {
	*x = EnableWorkspaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWorkspaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWorkspaces) ProtoMessage() {}

func (x *EnableWorkspaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWorkspaces.ProtoReflect.Descriptor instead.
func (*EnableWorkspaces) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{5}
}

func (x *EnableWorkspaces) GetSpaceIds() []string {
	if x != nil {
		return x.SpaceIds
	}
	return nil
}

func (x *EnableWorkspaces) GetResumeJob() bool {
	if x != nil {
		return x.ResumeJob
	}
	return false
}

// CreateWorkspace used as a request parameters for RPC and HTTP(based on Body)
type CreateWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner fixed to request user id.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" binding:"-" swaggerignore:"true"`
	// The space name of each account in each region is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" binding:"gte=2,lte=128" minLength:"2" maxLength:"128"`
	// Description of the workspace, Not required, Max 1024 char.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" binding:"lte=1024"`
}

func (x *CreateWorkspace) Reset() {
	*x = CreateWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspace) ProtoMessage() {}

func (x *CreateWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspace.ProtoReflect.Descriptor instead.
func (*CreateWorkspace) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{6}
}

func (x *CreateWorkspace) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreateWorkspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWorkspace) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// UpdateWorkspace used as a request parameters for RPC and HTTP(based on Body)
type UpdateWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The space name of each account in each region is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" binding:"gte=2,lte=128" minLength:"2" maxLength:"128"`
	// Description of the workspace, Not required, Max length 1024.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" binding:"lte=1024"`
}

func (x *UpdateWorkspace) Reset() {
	*x = UpdateWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspace) ProtoMessage() {}

func (x *UpdateWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspace.ProtoReflect.Descriptor instead.
func (*UpdateWorkspace) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWorkspace) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateWorkspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateWorkspace) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// DescribeWorkspace used as a request parameters for RPC.
type DescribeWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
}

func (x *DescribeWorkspace) Reset() {
	*x = DescribeWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkspace) ProtoMessage() {}

func (x *DescribeWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkspace.ProtoReflect.Descriptor instead.
func (*DescribeWorkspace) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeWorkspace) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// AddAudit used as a request parameters for RPC.
type AddAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *model.Operation `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *AddAudit) Reset() {
	*x = AddAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAudit) ProtoMessage() {}

func (x *AddAudit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAudit.ProtoReflect.Descriptor instead.
func (*AddAudit) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{9}
}

func (x *AddAudit) GetInfo() *model.Operation {
	if x != nil {
		return x.Info
	}
	return nil
}

// ListAudits used as a request parameters for RPC and HTTP(based on URL-Query)
type ListAudits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {id, created}.
	// Multiple fields are separated by commas(","), eg: sort_by="created".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// The used_id fixed to request user id.
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id" form:"-" binding:"-" swaggerignore:"true"`
	// Querying conditions. Not required.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id" form:"space_id" binding:"-"`
	// Querying conditions. Not required.
	Type model.Operation_Type `protobuf:"varint,7,opt,name=type,proto3,enum=model.Operation_Type" json:"type" form:"type" binding:"-"`
	// Querying conditions. Not required.
	Action string `protobuf:"bytes,8,opt,name=action,proto3" json:"action" form:"action" binding:"-"`
	// Querying conditions. Not required.
	State model.Operation_State `protobuf:"varint,9,opt,name=state,proto3,enum=model.Operation_State" json:"state" form:"state" binding:"-"`
	// Querying conditions. Not required.
	// Desc: Timestamp of start time.
	Started int64 `protobuf:"varint,10,opt,name=started,proto3" json:"started" form:"started" binding:"-"`
	// Querying conditions. Not required.
	// Desc: Timestamp of end time.
	Ended int64 `protobuf:"varint,11,opt,name=ended,proto3" json:"ended" form:"ended" binding:"-"`
}

func (x *ListAudits) Reset() {
	*x = ListAudits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAudits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudits) ProtoMessage() {}

func (x *ListAudits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudits.ProtoReflect.Descriptor instead.
func (*ListAudits) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{10}
}

func (x *ListAudits) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListAudits) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAudits) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListAudits) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListAudits) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListAudits) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListAudits) GetType() model.Operation_Type {
	if x != nil {
		return x.Type
	}
	return model.Operation__
}

func (x *ListAudits) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ListAudits) GetState() model.Operation_State {
	if x != nil {
		return x.State
	}
	return model.Operation___
}

func (x *ListAudits) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *ListAudits) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
type ListSystemRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	// Limit the maximum number of entries returned this time.
	//	// Not required, Max 100, default 100.
	//	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	//
	//	// The offset position. Not required, default 0.
	//	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	//
	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
}

func (x *ListSystemRoles) Reset() {
	*x = ListSystemRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemRoles) ProtoMessage() {}

func (x *ListSystemRoles) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemRoles.ProtoReflect.Descriptor instead.
func (*ListSystemRoles) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{11}
}

func (x *ListSystemRoles) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// ListMembers used as a request parameters for RPC and HTTP(based on URL-Query)
type ListMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
}

func (x *ListMembers) Reset() {
	*x = ListMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMembers) ProtoMessage() {}

func (x *ListMembers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMembers.ProtoReflect.Descriptor instead.
func (*ListMembers) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{12}
}

func (x *ListMembers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListMembers) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListMembers) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// UpsertMembers used as a request parameters for RPC and HTTP(based on Body).
type UpsertMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of pair to user_id => role_ids. Min: 1, Max: 100
	Users []*UpsertMembers_Pair `protobuf:"bytes,2,rep,name=users,proto3" json:"users" binding:"gte=1,lte=100"`
}

func (x *UpsertMembers) Reset() {
	*x = UpsertMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMembers) ProtoMessage() {}

func (x *UpsertMembers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMembers.ProtoReflect.Descriptor instead.
func (*UpsertMembers) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{13}
}

func (x *UpsertMembers) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpsertMembers) GetUsers() []*UpsertMembers_Pair {
	if x != nil {
		return x.Users
	}
	return nil
}

// DeleteMembers used as a request parameters for RPC and HTTP(based on Body).
type DeleteMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The user(member) id. Is required, Min: 1, Max 100.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids" binding:"-"`
}

func (x *DeleteMembers) Reset() {
	*x = DeleteMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMembers) ProtoMessage() {}

func (x *DeleteMembers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMembers.ProtoReflect.Descriptor instead.
func (*DeleteMembers) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteMembers) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DeleteMembers) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// CheckPermission used as a request parameters for RPC.
type CheckPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqUserId string               `protobuf:"bytes,1,opt,name=req_user_id,json=reqUserId,proto3" json:"req_user_id,omitempty"`
	SpaceId   string               `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Module    string               `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	OpType    model.Operation_Type `protobuf:"varint,4,opt,name=op_type,json=opType,proto3,enum=model.Operation_Type" json:"op_type,omitempty"`
	OpName    string               `protobuf:"bytes,5,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	Roles     map[string]bool      `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CheckPermission) Reset() {
	*x = CheckPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPermission) ProtoMessage() {}

func (x *CheckPermission) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPermission.ProtoReflect.Descriptor instead.
func (*CheckPermission) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{15}
}

func (x *CheckPermission) GetReqUserId() string {
	if x != nil {
		return x.ReqUserId
	}
	return ""
}

func (x *CheckPermission) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CheckPermission) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *CheckPermission) GetOpType() model.Operation_Type {
	if x != nil {
		return x.OpType
	}
	return model.Operation__
}

func (x *CheckPermission) GetOpName() string {
	if x != nil {
		return x.OpName
	}
	return ""
}

func (x *CheckPermission) GetRoles() map[string]bool {
	if x != nil {
		return x.Roles
	}
	return nil
}

// ListStreamJobs used as a request parameters for RPC and HTTP(based on URL-Query)
type ListStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="name,crated".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,5,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// Search with stream job name; Not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search" binding:"-"`
}

func (x *ListStreamJobs) Reset() {
	*x = ListStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamJobs) ProtoMessage() {}

func (x *ListStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamJobs.ProtoReflect.Descriptor instead.
func (*ListStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{16}
}

func (x *ListStreamJobs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListStreamJobs) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListStreamJobs) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListStreamJobs) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListStreamJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListStreamJobs) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// CreateStreamJob used as a request parameters for RPC and HTTP(based on Body)
type CreateStreamJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The job name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" binding:"gte=2,lte=128"`
	// Description of the job, Not required, Max length 1024.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" binding:"lte=1024"`
	// The job Type. Is Required, Optional Value: 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
	// Desc: Cannot be modified after creation.
	Type model.StreamJob_Type `protobuf:"varint,4,opt,name=type,proto3,enum=model.StreamJob_Type" json:"type" binding:"gte=1,lte=3"`
	// The flink compute cluster id. Is required.
	ClusterId string `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" binding:"len=20"`
}

func (x *CreateStreamJob) Reset() {
	*x = CreateStreamJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamJob) ProtoMessage() {}

func (x *CreateStreamJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamJob.ProtoReflect.Descriptor instead.
func (*CreateStreamJob) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{17}
}

func (x *CreateStreamJob) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateStreamJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStreamJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateStreamJob) GetType() model.StreamJob_Type {
	if x != nil {
		return x.Type
	}
	return model.StreamJob__
}

func (x *CreateStreamJob) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// DeleteStreamJobs used as a request parameters for RPC and HTTP(based on Body)
type DeleteStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of stream job id. Is required, Min 1, Max 100.
	JobIds []string `protobuf:"bytes,2,rep,name=job_ids,json=jobIds,proto3" json:"job_ids" binding:"gte=1,lte=100"`
}

func (x *DeleteStreamJobs) Reset() {
	*x = DeleteStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamJobs) ProtoMessage() {}

func (x *DeleteStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamJobs.ProtoReflect.Descriptor instead.
func (*DeleteStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteStreamJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DeleteStreamJobs) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

// UpdateStreamJob used as a request parameters for RPC and HTTP(based on Body).
type UpdateStreamJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// The stream job name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" binding:"gte=2,lte=128"`
	// Description of the workspace, Not required, Max length 1024.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" binding:"lte=1024"`
}

func (x *UpdateStreamJob) Reset() {
	*x = UpdateStreamJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamJob) ProtoMessage() {}

func (x *UpdateStreamJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamJob.ProtoReflect.Descriptor instead.
func (*UpdateStreamJob) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateStreamJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateStreamJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStreamJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// DescribeStreamJob used as a request parameters for RPC.
type DescribeStreamJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version" uri:"ver_id" binding:"-" swaggerignore:"true"`
}

func (x *DescribeStreamJob) Reset() {
	*x = DescribeStreamJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeStreamJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStreamJob) ProtoMessage() {}

func (x *DescribeStreamJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStreamJob.ProtoReflect.Descriptor instead.
func (*DescribeStreamJob) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{20}
}

func (x *DescribeStreamJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DescribeStreamJob) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// SetStreamJobCode used as a request parameters for RPC.
type SetStreamJobCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The stream job id it belongs to.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// The code info of JSON format.
	Code *model.StreamJobCode `protobuf:"bytes,3,opt,name=code,proto3" json:"code" binding:"-"`
}

func (x *SetStreamJobCode) Reset() {
	*x = SetStreamJobCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStreamJobCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStreamJobCode) ProtoMessage() {}

func (x *SetStreamJobCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStreamJobCode.ProtoReflect.Descriptor instead.
func (*SetStreamJobCode) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{21}
}

func (x *SetStreamJobCode) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SetStreamJobCode) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SetStreamJobCode) GetCode() *model.StreamJobCode {
	if x != nil {
		return x.Code
	}
	return nil
}

// SetStreamJobSchedule used as a request parameters for RPC.
type SetStreamJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The stream job id it belongs to.
	JobId string                   `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	Info  *model.StreamJobSchedule `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SetStreamJobSchedule) Reset() {
	*x = SetStreamJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStreamJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStreamJobSchedule) ProtoMessage() {}

func (x *SetStreamJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStreamJobSchedule.ProtoReflect.Descriptor instead.
func (*SetStreamJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{22}
}

func (x *SetStreamJobSchedule) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SetStreamJobSchedule) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SetStreamJobSchedule) GetInfo() *model.StreamJobSchedule {
	if x != nil {
		return x.Info
	}
	return nil
}

// SetStreamJobArgs used as a request parameters for RPC.
type SetStreamJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The stream job ID it belongs to.
	JobId string               `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	Info  *model.StreamJobArgs `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SetStreamJobArgs) Reset() {
	*x = SetStreamJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStreamJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStreamJobArgs) ProtoMessage() {}

func (x *SetStreamJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStreamJobArgs.ProtoReflect.Descriptor instead.
func (*SetStreamJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{23}
}

func (x *SetStreamJobArgs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SetStreamJobArgs) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SetStreamJobArgs) GetInfo() *model.StreamJobArgs {
	if x != nil {
		return x.Info
	}
	return nil
}

// GetStreamJobCode used as a request parameters for RPC.
type GetStreamJobCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version" uri:"ver_id" binding:"-" swaggerignore:"true"`
}

func (x *GetStreamJobCode) Reset() {
	*x = GetStreamJobCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamJobCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamJobCode) ProtoMessage() {}

func (x *GetStreamJobCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamJobCode.ProtoReflect.Descriptor instead.
func (*GetStreamJobCode) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{24}
}

func (x *GetStreamJobCode) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetStreamJobCode) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// GetStreamJobSchedule used as a request parameters for RPC.
type GetStreamJobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version" uri:"ver_id" binding:"-" swaggerignore:"true"`
}

func (x *GetStreamJobSchedule) Reset() {
	*x = GetStreamJobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamJobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamJobSchedule) ProtoMessage() {}

func (x *GetStreamJobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamJobSchedule.ProtoReflect.Descriptor instead.
func (*GetStreamJobSchedule) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{25}
}

func (x *GetStreamJobSchedule) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetStreamJobSchedule) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// GetStreamJobArgs used as a request parameters for RPC.
type GetStreamJobArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// The stream job version id in HTTP Request-URI
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version" uri:"ver_id" binding:"-" swaggerignore:"true"`
}

func (x *GetStreamJobArgs) Reset() {
	*x = GetStreamJobArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamJobArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamJobArgs) ProtoMessage() {}

func (x *GetStreamJobArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamJobArgs.ProtoReflect.Descriptor instead.
func (*GetStreamJobArgs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{26}
}

func (x *GetStreamJobArgs) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetStreamJobArgs) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// ListReleaseStreamJobs used as a request parameters for RPC and HTTP(based on URL-Query).
type ListReleaseStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {job_id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="name,crated".
	// Not required, default: job_id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,5,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// Search with stream job name; Not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search" binding:"-"`
}

func (x *ListReleaseStreamJobs) Reset() {
	*x = ListReleaseStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseStreamJobs) ProtoMessage() {}

func (x *ListReleaseStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseStreamJobs.ProtoReflect.Descriptor instead.
func (*ListReleaseStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{27}
}

func (x *ListReleaseStreamJobs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListReleaseStreamJobs) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListReleaseStreamJobs) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListReleaseStreamJobs) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListReleaseStreamJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListReleaseStreamJobs) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// ReleaseStreamJob used as a request parameters for RPC and HTTP(based on Body.)
type ReleaseStreamJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
	// Description for this releases. Not required, Max length 1024.
	Desc        string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc" binding:"lte=1024"`
	StopRunning bool   `protobuf:"varint,3,opt,name=stop_running,json=stopRunning,proto3" json:"stop_running" binding:"-"`
}

func (x *ReleaseStreamJob) Reset() {
	*x = ReleaseStreamJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseStreamJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseStreamJob) ProtoMessage() {}

func (x *ReleaseStreamJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseStreamJob.ProtoReflect.Descriptor instead.
func (*ReleaseStreamJob) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{28}
}

func (x *ReleaseStreamJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ReleaseStreamJob) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseStreamJob) GetStopRunning() bool {
	if x != nil {
		return x.StopRunning
	}
	return false
}

// SuspendReleaseStreamJobs used as a request parameters for RPC and HTTP(based on Body).
type SuspendReleaseStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of stream job id. Is Required. Min: 1, Max: 100
	JobIds      []string `protobuf:"bytes,2,rep,name=job_ids,json=jobIds,proto3" json:"job_ids" binding:"gte=1,lte=100"`
	StopRunning bool     `protobuf:"varint,3,opt,name=stop_running,json=stopRunning,proto3" json:"stop_running" binding:"-"`
}

func (x *SuspendReleaseStreamJobs) Reset() {
	*x = SuspendReleaseStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendReleaseStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendReleaseStreamJobs) ProtoMessage() {}

func (x *SuspendReleaseStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendReleaseStreamJobs.ProtoReflect.Descriptor instead.
func (*SuspendReleaseStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{29}
}

func (x *SuspendReleaseStreamJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SuspendReleaseStreamJobs) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *SuspendReleaseStreamJobs) GetStopRunning() bool {
	if x != nil {
		return x.StopRunning
	}
	return false
}

// ResumeReleaseStreamJobs used as a request parameters for RPC.
type ResumeReleaseStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of stream job id. Is Required. Min: 1, Max: 100
	JobIds []string `protobuf:"bytes,2,rep,name=job_ids,json=jobIds,proto3" json:"job_ids" binding:"gte=1,lte=100"`
}

func (x *ResumeReleaseStreamJobs) Reset() {
	*x = ResumeReleaseStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeReleaseStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeReleaseStreamJobs) ProtoMessage() {}

func (x *ResumeReleaseStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeReleaseStreamJobs.ProtoReflect.Descriptor instead.
func (*ResumeReleaseStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{30}
}

func (x *ResumeReleaseStreamJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ResumeReleaseStreamJobs) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

// ListStreamJobVersions used as a request parameters for RPC and HTTP(based on URL-Query)
type ListStreamJobVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {version, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="version,updated".
	// Not required, default: version.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// The stream job id in HTTP Request-URI
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id" uri:"job_id" binding:"len=20" swaggerignore:"true"`
}

func (x *ListStreamJobVersions) Reset() {
	*x = ListStreamJobVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamJobVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamJobVersions) ProtoMessage() {}

func (x *ListStreamJobVersions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamJobVersions.ProtoReflect.Descriptor instead.
func (*ListStreamJobVersions) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{31}
}

func (x *ListStreamJobVersions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListStreamJobVersions) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListStreamJobVersions) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListStreamJobVersions) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListStreamJobVersions) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
type ListMonitorRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
}

func (x *ListMonitorRules) Reset() {
	*x = ListMonitorRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMonitorRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonitorRules) ProtoMessage() {}

func (x *ListMonitorRules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonitorRules.ProtoReflect.Descriptor instead.
func (*ListMonitorRules) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{32}
}

func (x *ListMonitorRules) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListMonitorRules) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListMonitorRules) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// CreateMonitorRule used as a request parameters for RPC and HTTP(based on Body).
type CreateMonitorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *model.MonitorRule `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CreateMonitorRule) Reset() {
	*x = CreateMonitorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorRule) ProtoMessage() {}

func (x *CreateMonitorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorRule.ProtoReflect.Descriptor instead.
func (*CreateMonitorRule) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{33}
}

func (x *CreateMonitorRule) GetInfo() *model.MonitorRule {
	if x != nil {
		return x.Info
	}
	return nil
}

// DeleteMonitorRules used as a request parameters for RPC and HTTP(based on Body).
type DeleteMonitorRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of monitor rule id. Is required, Min 1, Max 100.
	RuleIds []string `protobuf:"bytes,1,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids" binding:"gte=1,lte=100"`
}

func (x *DeleteMonitorRules) Reset() {
	*x = DeleteMonitorRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorRules) ProtoMessage() {}

func (x *DeleteMonitorRules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorRules.ProtoReflect.Descriptor instead.
func (*DeleteMonitorRules) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteMonitorRules) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

// EnableMonitorRules used as a request parameters for RPC and HTTP(based on Body).
type EnableMonitorRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of monitor rule id. Is required, Min 1, Max 100.
	RuleIds []string `protobuf:"bytes,1,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids" binding:"gte=1,lte=100"`
}

func (x *EnableMonitorRules) Reset() {
	*x = EnableMonitorRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMonitorRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMonitorRules) ProtoMessage() {}

func (x *EnableMonitorRules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMonitorRules.ProtoReflect.Descriptor instead.
func (*EnableMonitorRules) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{35}
}

func (x *EnableMonitorRules) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

// DisableMonitorRules used as a request parameters for RPC and HTTP(based on Body).
type DisableMonitorRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of monitor rule id. Is required, Min 1, Max 100.
	RuleIds []string `protobuf:"bytes,1,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids" binding:"gte=1,lte=100"`
}

func (x *DisableMonitorRules) Reset() {
	*x = DisableMonitorRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMonitorRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMonitorRules) ProtoMessage() {}

func (x *DisableMonitorRules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMonitorRules.ProtoReflect.Descriptor instead.
func (*DisableMonitorRules) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{36}
}

func (x *DisableMonitorRules) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

// UpdateMonitorRule used as a request parameters for RPC.
type UpdateMonitorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *model.MonitorRule `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateMonitorRule) Reset() {
	*x = UpdateMonitorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorRule) ProtoMessage() {}

func (x *UpdateMonitorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorRule.ProtoReflect.Descriptor instead.
func (*UpdateMonitorRule) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateMonitorRule) GetInfo() *model.MonitorRule {
	if x != nil {
		return x.Info
	}
	return nil
}

// DescribeMonitorRule used as a request parameters for RPC.
type DescribeMonitorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The monitor rule id in HTTP Request-URI. Is Required.
	RuleId string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id" uri:"rule_id" binding:"len=20" swaggerignore:"true"`
}

func (x *DescribeMonitorRule) Reset() {
	*x = DescribeMonitorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMonitorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMonitorRule) ProtoMessage() {}

func (x *DescribeMonitorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMonitorRule.ProtoReflect.Descriptor instead.
func (*DescribeMonitorRule) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{38}
}

func (x *DescribeMonitorRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

// SubmitStreamJobs used as a request parameters for RPC.
// FIXME: review it.
type SubmitStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties  []*model.StreamJobProperty `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
	StopRunning bool                       `protobuf:"varint,2,opt,name=stop_running,json=stopRunning,proto3" json:"stop_running,omitempty"`
}

func (x *SubmitStreamJobs) Reset() {
	*x = SubmitStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitStreamJobs) ProtoMessage() {}

func (x *SubmitStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitStreamJobs.ProtoReflect.Descriptor instead.
func (*SubmitStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{39}
}

func (x *SubmitStreamJobs) GetProperties() []*model.StreamJobProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SubmitStreamJobs) GetStopRunning() bool {
	if x != nil {
		return x.StopRunning
	}
	return false
}

// OfflineStreamJobs used as a request parameters for RPC.
type OfflineStreamJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId     string   `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	JobIds      []string `protobuf:"bytes,2,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
	StopRunning bool     `protobuf:"varint,3,opt,name=stop_running,json=stopRunning,proto3" json:"stop_running,omitempty"`
}

func (x *OfflineStreamJobs) Reset() {
	*x = OfflineStreamJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineStreamJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineStreamJobs) ProtoMessage() {}

func (x *OfflineStreamJobs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineStreamJobs.ProtoReflect.Descriptor instead.
func (*OfflineStreamJobs) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{40}
}

func (x *OfflineStreamJobs) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *OfflineStreamJobs) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *OfflineStreamJobs) GetStopRunning() bool {
	if x != nil {
		return x.StopRunning
	}
	return false
}

// ListStreamInsts used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamInsts and ListStreamInsts
type ListStreamInsts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The stream job id. Not required.
	JobId string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id" form:"job_id" binding:"-"`
	// The stream job version id. Not required.
	Version int64 `protobuf:"varint,5,opt,name=version,proto3" json:"version" form:"ver_id" binding:"-"`
}

func (x *ListStreamInsts) Reset() {
	*x = ListStreamInsts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamInsts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamInsts) ProtoMessage() {}

func (x *ListStreamInsts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamInsts.ProtoReflect.Descriptor instead.
func (*ListStreamInsts) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{41}
}

func (x *ListStreamInsts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListStreamInsts) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListStreamInsts) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListStreamInsts) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ListStreamInsts) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// JobInstIdPair is the k/v pair of jobId => instId.
type JobInstIdPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream job id. Is Required.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id" binding:"len=20"`
	// The instance id. Is Required.
	InstId string `protobuf:"bytes,3,opt,name=inst_id,json=instId,proto3" json:"inst_id" binding:"len=20"`
}

func (x *JobInstIdPair) Reset() {
	*x = JobInstIdPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInstIdPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInstIdPair) ProtoMessage() {}

func (x *JobInstIdPair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInstIdPair.ProtoReflect.Descriptor instead.
func (*JobInstIdPair) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{42}
}

func (x *JobInstIdPair) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobInstIdPair) GetInstId() string {
	if x != nil {
		return x.InstId
	}
	return ""
}

// TerminateStreamInsts used as a request parameters for RPC.
// This struct can used for TerminateStreamCycleInst and TerminateStreamTestInst.
type TerminateStreamInsts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of instance id and its stream job id. Is Required. Min: 1, Max: 100
	InstIds []*JobInstIdPair `protobuf:"bytes,2,rep,name=inst_ids,json=instIds,proto3" json:"inst_ids" binding:"gte=1,lte=100"`
}

func (x *TerminateStreamInsts) Reset() {
	*x = TerminateStreamInsts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateStreamInsts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateStreamInsts) ProtoMessage() {}

func (x *TerminateStreamInsts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateStreamInsts.ProtoReflect.Descriptor instead.
func (*TerminateStreamInsts) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{43}
}

func (x *TerminateStreamInsts) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *TerminateStreamInsts) GetInstIds() []*JobInstIdPair {
	if x != nil {
		return x.InstIds
	}
	return nil
}

// SuspendStreamInsts used as a request parameters for RPC.
// This struct can used for SuspendStreamCycleInst and SuspendStreamTestInst.
type SuspendStreamInsts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of instance id and its stream job id. Is Required. Min: 1, Max: 100
	InstIds []*JobInstIdPair `protobuf:"bytes,2,rep,name=inst_ids,json=instIds,proto3" json:"inst_ids" binding:"gte=1,lte=100"`
}

func (x *SuspendStreamInsts) Reset() {
	*x = SuspendStreamInsts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendStreamInsts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendStreamInsts) ProtoMessage() {}

func (x *SuspendStreamInsts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendStreamInsts.ProtoReflect.Descriptor instead.
func (*SuspendStreamInsts) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{44}
}

func (x *SuspendStreamInsts) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SuspendStreamInsts) GetInstIds() []*JobInstIdPair {
	if x != nil {
		return x.InstIds
	}
	return nil
}

// ResumeStreamInsts used as a request parameters for RPC.
// This struct can used for ResumeStreamCycleInst and SuspendStreamTestInst.
type ResumeStreamInsts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of instance id and its stream job id. Is Required. Min: 1, Max: 100
	InstIds []*JobInstIdPair `protobuf:"bytes,2,rep,name=inst_ids,json=instIds,proto3" json:"inst_ids" binding:"gte=1,lte=100"`
}

func (x *ResumeStreamInsts) Reset() {
	*x = ResumeStreamInsts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeStreamInsts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeStreamInsts) ProtoMessage() {}

func (x *ResumeStreamInsts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeStreamInsts.ProtoReflect.Descriptor instead.
func (*ResumeStreamInsts) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{45}
}

func (x *ResumeStreamInsts) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ResumeStreamInsts) GetInstIds() []*JobInstIdPair {
	if x != nil {
		return x.InstIds
	}
	return nil
}

// CreateSource used as request parameters for RPC and HTTP(based on Body)
type CreateSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source id.
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id" binding:"lte=20" swaggerignore:"true"`
	// The space id.
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"lte=20" swaggerignore:"true"`
	// Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	SourceType model.DataSource_Type `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=model.DataSource_Type" json:"source_type" binding:"gte=1,lte=8" required:"true" mininum:"1" maximum:"8"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// describe this source.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// this source connection info
	Url *datasourcepb.DataSourceURL `protobuf:"bytes,6,opt,name=url,proto3" json:"url" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
}

func (x *CreateSource) Reset() {
	*x = CreateSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSource) ProtoMessage() {}

func (x *CreateSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSource.ProtoReflect.Descriptor instead.
func (*CreateSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{46}
}

func (x *CreateSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CreateSource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateSource) GetSourceType() model.DataSource_Type {
	if x != nil {
		return x.SourceType
	}
	return model.DataSource____
}

func (x *CreateSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSource) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateSource) GetUrl() *datasourcepb.DataSourceURL {
	if x != nil {
		return x.Url
	}
	return nil
}

// UpdateSource used as request parameters for RPC and HTTP(based on Body)
type UpdateSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source id.
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id" binding:"lte=20" swaggerignore:"true"`
	// Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	SourceType model.DataSource_Type `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=model.DataSource_Type" json:"source_type" binding:"gte=1,lte=20" required:"true" mininum:"1" maximum:"8"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// describe this source.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// this source connection info
	Url *datasourcepb.DataSourceURL `protobuf:"bytes,5,opt,name=url,proto3" json:"url" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
}

func (x *UpdateSource) Reset() {
	*x = UpdateSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSource) ProtoMessage() {}

func (x *UpdateSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSource.ProtoReflect.Descriptor instead.
func (*UpdateSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *UpdateSource) GetSourceType() model.DataSource_Type {
	if x != nil {
		return x.SourceType
	}
	return model.DataSource____
}

func (x *UpdateSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSource) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateSource) GetUrl() *datasourcepb.DataSourceURL {
	if x != nil {
		return x.Url
	}
	return nil
}

// DeleteSource used as request parameters for RPC and HTTP(based on Body)
type DeleteSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delete these SourceIDs
	SourceIds []string `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"`
}

func (x *DeleteSource) Reset() {
	*x = DeleteSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSource) ProtoMessage() {}

func (x *DeleteSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSource.ProtoReflect.Descriptor instead.
func (*DeleteSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteSource) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

// DescribeSource used as request parameters for RPC and HTTP(based on Body)
type DescribeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceID
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
}

func (x *DescribeSource) Reset() {
	*x = DescribeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSource) ProtoMessage() {}

func (x *DescribeSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSource.ProtoReflect.Descriptor instead.
func (*DescribeSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{49}
}

func (x *DescribeSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

// EnableSource used as request parameters for RPC and HTTP(based on Body)
type EnableSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable these SourceIDs
	SourceIds []string `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"`
}

func (x *EnableSource) Reset() {
	*x = EnableSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableSource) ProtoMessage() {}

func (x *EnableSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableSource.ProtoReflect.Descriptor instead.
func (*EnableSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{50}
}

func (x *EnableSource) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

// DeleteSource used as request parameters for RPC and HTTP(based on Body)
type DisableSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delete these SourceIDs
	SourceIds []string `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"`
}

func (x *DisableSource) Reset() {
	*x = DisableSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableSource) ProtoMessage() {}

func (x *DisableSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableSource.ProtoReflect.Descriptor instead.
func (*DisableSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{51}
}

func (x *DisableSource) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

// PingSource used as request parameters for RPC and HTTP(based on Body)
type PingSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	SourceType model.DataSource_Type `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=model.DataSource_Type" json:"source_type" binding:"gte=1,lte=20" required:"true" mininum:"1" maximum:"8"`
	// this source connection info
	Url *datasourcepb.DataSourceURL `protobuf:"bytes,2,opt,name=url,proto3" json:"url" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
}

func (x *PingSource) Reset() {
	*x = PingSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingSource) ProtoMessage() {}

func (x *PingSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingSource.ProtoReflect.Descriptor instead.
func (*PingSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{52}
}

func (x *PingSource) GetSourceType() model.DataSource_Type {
	if x != nil {
		return x.SourceType
	}
	return model.DataSource____
}

func (x *PingSource) GetUrl() *datasourcepb.DataSourceURL {
	if x != nil {
		return x.Url
	}
	return nil
}

// SourceTables used as request parameters for RPC and HTTP(based on Body)
type SourceTables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceID
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id" binding:"lte=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"`
}

func (x *SourceTables) Reset() {
	*x = SourceTables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTables) ProtoMessage() {}

func (x *SourceTables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTables.ProtoReflect.Descriptor instead.
func (*SourceTables) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{53}
}

func (x *SourceTables) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

// TableColumns used as request parameters for RPC and HTTP(based on Body)
type TableColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tablename
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name" binding:"gte=1" required:"true" minLength:"2" maxLength:"64"`
	// tablename
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id" binding:"lte=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"`
}

func (x *TableColumns) Reset() {
	*x = TableColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableColumns) ProtoMessage() {}

func (x *TableColumns) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableColumns.ProtoReflect.Descriptor instead.
func (*TableColumns) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{54}
}

func (x *TableColumns) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableColumns) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

// CreateTable used as request parameters for RPC and HTTP(based on Body)
type CreateTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table id.
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" binding:"lte=20" swaggerignore:"true"`
	// The source id.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id" binding:"len=20" minLength:"20" maxLength:"20"`
	// The space id.
	SpaceId string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"lte=20" swaggerignore:"true"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// describe this source.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// this source connection info
	TableSchema *flinkpb.TableSchema `protobuf:"bytes,6,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind model.TableInfo_Kind `protobuf:"varint,7,opt,name=table_kind,json=tableKind,proto3,enum=model.TableInfo_Kind" json:"table_kind" gorm:"column:table_kind;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
}

func (x *CreateTable) Reset() {
	*x = CreateTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTable) ProtoMessage() {}

func (x *CreateTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTable.ProtoReflect.Descriptor instead.
func (*CreateTable) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{55}
}

func (x *CreateTable) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *CreateTable) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CreateTable) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTable) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateTable) GetTableSchema() *flinkpb.TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *CreateTable) GetTableKind() model.TableInfo_Kind {
	if x != nil {
		return x.TableKind
	}
	return model.TableInfo__
}

// UpdateTable used as request parameters for RPC and HTTP(based on Body)
type UpdateTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table id.
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" binding:"lte=20" swaggerignore:"true"`
	// Source name unique within a space.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"`
	// describe this source.
	Comment string `protobuf:"bytes,3,opt,name=Comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// this source connection info
	TableSchema *flinkpb.TableSchema `protobuf:"bytes,4,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind model.TableInfo_Kind `protobuf:"varint,5,opt,name=table_kind,json=tableKind,proto3,enum=model.TableInfo_Kind" json:"table_kind" gorm:"column:table_kind;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
}

func (x *UpdateTable) Reset() {
	*x = UpdateTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTable) ProtoMessage() {}

func (x *UpdateTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTable.ProtoReflect.Descriptor instead.
func (*UpdateTable) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateTable) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *UpdateTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTable) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateTable) GetTableSchema() *flinkpb.TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *UpdateTable) GetTableKind() model.TableInfo_Kind {
	if x != nil {
		return x.TableKind
	}
	return model.TableInfo__
}

// DeleteTable used as request parameters for RPC and HTTP(based on Body)
type DeleteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delete these tableIDs
	TableIds []string `protobuf:"bytes,1,rep,name=table_ids,json=tableIds,proto3" json:"table_ids" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"`
}

func (x *DeleteTable) Reset() {
	*x = DeleteTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTable) ProtoMessage() {}

func (x *DeleteTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTable.ProtoReflect.Descriptor instead.
func (*DeleteTable) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteTable) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

// DescribeTable used as request parameters for RPC and HTTP(based on Body)
type DescribeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceIDs
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
}

func (x *DescribeTable) Reset() {
	*x = DescribeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTable) ProtoMessage() {}

func (x *DescribeTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTable.ProtoReflect.Descriptor instead.
func (*DescribeTable) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{58}
}

func (x *DescribeTable) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

// ListSource used as a request parameters for RPC and HTTP(based on URL-Query)
type ListSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" mininum:"1" maximum:"100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0" mininum:"0"`
	// The field list used to sorted query results.
	// Optional values: {sourceid, name, createtime, updatetime}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updatetime,createtime".
	// Not required, default: updatetime.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-" minLength:"0" maxLength:"100"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" default:"false" form:"reverse" binding:"-"`
	// Search with name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search" binding:"-" minLength:"0" maxLength:"100"`
	// SpaceID; required.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"lte=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"`
}

func (x *ListSource) Reset() {
	*x = ListSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSource) ProtoMessage() {}

func (x *ListSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSource.ProtoReflect.Descriptor instead.
func (*ListSource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{59}
}

func (x *ListSource) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSource) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSource) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListSource) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListSource) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListSource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// ListTable used as a request parameters for RPC and HTTP(based on URL-Query)
type ListTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" mininum:"1" maximum:"100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0" mininum:"0"`
	// The field list used to sorted query results.
	// Optional values: {tableid, name, createtime, updatetime}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updatetime,createtime".
	// Not required, default: updatetime.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-" minLength:"0" maxLength:"100"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" default:"false" form:"reverse" binding:"-"`
	// Search with name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search" binding:"-" minLength:"0" maxLength:"100"`
	// get this spaceid tables.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id" required:"true" binding:"lte=20" minLength:"20" maxLength:"20" swaggerignore:"true"`
	// get this source tables.
	SourceId string `protobuf:"bytes,7,opt,name=source_id,json=sourceId,proto3" json:"source_id" form:"source_id" required:"true" binding:"lte=20" minLength:"0" maxLength:"20" swaggerignore:"true"`
	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	TableKind model.TableInfo_Kind `protobuf:"varint,8,opt,name=table_kind,json=tableKind,proto3,enum=model.TableInfo_Kind" json:"table_kind" form:"table_kind" gorm:"column:table_kind;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
}

func (x *ListTable) Reset() {
	*x = ListTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTable) ProtoMessage() {}

func (x *ListTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTable.ProtoReflect.Descriptor instead.
func (*ListTable) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{60}
}

func (x *ListTable) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTable) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListTable) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListTable) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListTable) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListTable) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListTable) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *ListTable) GetTableKind() model.TableInfo_Kind {
	if x != nil {
		return x.TableKind
	}
	return model.TableInfo__
}

// DownloadFile used as a request parameters for RPC and HTTP(based on URL-Query).
type DownloadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource id in HTTP Request_URI.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" params:"resource_id" uri:"resource_id" swaggerignore:"true"`
}

func (x *DownloadFile) Reset() {
	*x = DownloadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFile) ProtoMessage() {}

func (x *DownloadFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFile.ProtoReflect.Descriptor instead.
func (*DownloadFile) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{61}
}

func (x *DownloadFile) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// DescribeFile used as a request parameters for RPC and HTTP(based on URL-Query).
type DescribeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource id in HTTP Request_URI.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" params:"resource_id" uri:"resource_id" binding:"len=20" swaggerignore:"true"`
}

func (x *DescribeFile) Reset() {
	*x = DescribeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFile) ProtoMessage() {}

func (x *DescribeFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFile.ProtoReflect.Descriptor instead.
func (*DescribeFile) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{62}
}

func (x *DescribeFile) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// ListResources used as a request parameters for RPC and HTTP(based on URL-Query).
type ListResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" params:"offset" form:"offset" default:"0" binding:"gte=0,lte=100"`
	// The resource type. required.
	ResourceType int32 `protobuf:"varint,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty" params:"resource_type" form:"resource_type" binding:"gte=0,lte=3"`
	// The resource name. not required.
	ResourceName string `protobuf:"bytes,5,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty" params:"resource_name" form:"resource_name" binding:"-"`
	// Search with resource name; not required.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search" form:"search" binding:"-" minLength:"0" maxLength:"100"`
	// The field list used to sorted query results.
	// Optional values: {id, created, updated, name, size}.
	// Not required, default: id.
	SortBy string `protobuf:"bytes,7,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" default:"updated" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,8,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
}

func (x *ListResources) Reset() {
	*x = ListResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResources) ProtoMessage() {}

func (x *ListResources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResources.ProtoReflect.Descriptor instead.
func (*ListResources) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{63}
}

func (x *ListResources) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListResources) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListResources) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListResources) GetResourceType() int32 {
	if x != nil {
		return x.ResourceType
	}
	return 0
}

func (x *ListResources) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ListResources) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListResources) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListResources) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// UpdateResource used as a request parameters for RPC and HTTP(based on URL-Query).
type UpdateResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The resource id in HTTP Request_URI.
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" params:"resource_id" uri:"resource_id" binding:"len=20" swaggerignore:"true"`
	// The resource name. required.
	ResourceName string `protobuf:"bytes,3,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty" params:"resource_name" binding:"required,lte=500"`
	// The resource description. Not required.
	ResourceDescription string `protobuf:"bytes,4,opt,name=resource_description,json=resourceDescription,proto3" json:"resource_description,omitempty" params:"resource_description" binding:"lte=500"`
	// The resource type. Not required.
	ResourceType model.Resource_Type `protobuf:"varint,5,opt,name=resource_type,json=resourceType,proto3,enum=model.Resource_Type" json:"resource_type,omitempty" params:"resource_type" form:"resource_type" binding:"gte=0,lte=3"`
}

func (x *UpdateResource) Reset() {
	*x = UpdateResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResource) ProtoMessage() {}

func (x *UpdateResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResource.ProtoReflect.Descriptor instead.
func (*UpdateResource) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateResource) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UpdateResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *UpdateResource) GetResourceDescription() string {
	if x != nil {
		return x.ResourceDescription
	}
	return ""
}

func (x *UpdateResource) GetResourceType() model.Resource_Type {
	if x != nil {
		return x.ResourceType
	}
	return model.Resource__
}

type DeleteResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The list of resource id. Is required, Min 1 Max 100.
	ResourceIds []string `protobuf:"bytes,2,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids" binding:"gte=1,lte=100"`
}

func (x *DeleteResources) Reset() {
	*x = DeleteResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResources) ProtoMessage() {}

func (x *DeleteResources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResources.ProtoReflect.Descriptor instead.
func (*DeleteResources) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteResources) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DeleteResources) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

// UDF is one of ScalaUDF/ScalaUDTF/ScalaUDTTF/JarUDF/JarUDTF/JarUDTTF/PythonUDF/PythonUDTF
// CreateUDF used as request parameters for RPC and HTTP(based on Body)
type CreateUDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The udf id.
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id" binding:"lte=20" required:"true" swaggerignore:"true"`
	// The space id.
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"lte=20" required:"true" swaggerignore:"true"`
	// UDF Type one of 1/2/3 1=>UDF/2=>UDTF/3=>UDTTF
	UdfType model.UDFInfo_Type `protobuf:"varint,3,opt,name=udf_type,json=udfType,proto3,enum=model.UDFInfo_Type" json:"udf_type" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
	// UDF language one of 1/2/3 1=>Scala/2=>Java/3=>Python
	UdfLanguage model.UDFInfo_Language `protobuf:"varint,4,opt,name=udf_language,json=udfLanguage,proto3,enum=model.UDFInfo_Language" json:"udf_language" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
	// UDF name unique within a space.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" binding:"gte=1,lte=1025" required:"true" minLength:"1" maxLength:"1025"`
	// describe this udf.
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// define this udf. jar udf this is resourcemanager jarID, python/scala this is code.
	Define string `protobuf:"bytes,7,opt,name=define,proto3" json:"define" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"`
	// usage for this udf
	UsageSample string `protobuf:"bytes,8,opt,name=usage_sample,json=usageSample,proto3" json:"usage_sample" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"`
}

func (x *CreateUDF) Reset() {
	*x = CreateUDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUDF) ProtoMessage() {}

func (x *CreateUDF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUDF.ProtoReflect.Descriptor instead.
func (*CreateUDF) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{66}
}

func (x *CreateUDF) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *CreateUDF) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateUDF) GetUdfType() model.UDFInfo_Type {
	if x != nil {
		return x.UdfType
	}
	return model.UDFInfo__
}

func (x *CreateUDF) GetUdfLanguage() model.UDFInfo_Language {
	if x != nil {
		return x.UdfLanguage
	}
	return model.UDFInfo___
}

func (x *CreateUDF) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUDF) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateUDF) GetDefine() string {
	if x != nil {
		return x.Define
	}
	return ""
}

func (x *CreateUDF) GetUsageSample() string {
	if x != nil {
		return x.UsageSample
	}
	return ""
}

// UpdateUDF used as request parameters for RPC and HTTP(based on Body)
type UpdateUDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The udf id.
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id" binding:"lte=20" swaggerignore:"true"`
	// UDF name unique within a space.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" binding:"gte=1,lte=1025" required:"true" minLength:"1" maxLength:"1025"`
	// describe this udf.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"`
	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	Define string `protobuf:"bytes,4,opt,name=define,proto3" json:"define" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"`
	// usage for this udf
	UsageSample string `protobuf:"bytes,5,opt,name=usage_sample,json=usageSample,proto3" json:"usage_sample" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"`
}

func (x *UpdateUDF) Reset() {
	*x = UpdateUDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUDF) ProtoMessage() {}

func (x *UpdateUDF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUDF.ProtoReflect.Descriptor instead.
func (*UpdateUDF) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateUDF) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

func (x *UpdateUDF) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUDF) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateUDF) GetDefine() string {
	if x != nil {
		return x.Define
	}
	return ""
}

func (x *UpdateUDF) GetUsageSample() string {
	if x != nil {
		return x.UsageSample
	}
	return ""
}

// DeleteUDF used as request parameters for RPC and HTTP(based on Body)
type DeleteUDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delete these UDFIDs
	UdfIds []string `protobuf:"bytes,1,rep,name=udf_ids,json=udfIds,proto3" json:"udf_ids" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"`
}

func (x *DeleteUDF) Reset() {
	*x = DeleteUDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUDF) ProtoMessage() {}

func (x *DeleteUDF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUDF.ProtoReflect.Descriptor instead.
func (*DeleteUDF) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteUDF) GetUdfIds() []string {
	if x != nil {
		return x.UdfIds
	}
	return nil
}

// DescribeUDF used as request parameters for RPC and HTTP(based on Body)
type DescribeUDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UDFID
	UdfId string `protobuf:"bytes,1,opt,name=udf_id,json=udfId,proto3" json:"udf_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"`
}

func (x *DescribeUDF) Reset() {
	*x = DescribeUDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeUDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeUDF) ProtoMessage() {}

func (x *DescribeUDF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeUDF.ProtoReflect.Descriptor instead.
func (*DescribeUDF) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{69}
}

func (x *DescribeUDF) GetUdfId() string {
	if x != nil {
		return x.UdfId
	}
	return ""
}

// ListUDF used as a request parameters for RPC and HTTP(based on URL-Query)
type ListUDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" mininum:"1" maximum:"100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0" mininum:"0"`
	// The field list used to sorted query results.
	// Optional values: {sourceid, name, createtime, updatetime}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updatetime,createtime".
	// Not required, default: updatetime.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-" minLength:"0" maxLength:"100"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" default:"false" form:"reverse" binding:"-"`
	// Search with name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search" binding:"-" minLength:"0" maxLength:"100"`
	// SpaceID; required.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"lte=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"`
	// UDF Type one of 1/2/3 1=>UDF/2=>UDTF/3=>UDTTF, default is 1
	UdfType model.UDFInfo_Type `protobuf:"varint,7,opt,name=udf_type,json=udfType,proto3,enum=model.UDFInfo_Type" json:"udf_type" form:"udf_type" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"`
}

func (x *ListUDF) Reset() {
	*x = ListUDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUDF) ProtoMessage() {}

func (x *ListUDF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUDF.ProtoReflect.Descriptor instead.
func (*ListUDF) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{70}
}

func (x *ListUDF) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListUDF) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListUDF) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListUDF) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListUDF) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListUDF) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListUDF) GetUdfType() model.UDFInfo_Type {
	if x != nil {
		return x.UdfType
	}
	return model.UDFInfo__
}

// UDFCommonFunc used as request parameters for RPC and HTTP(based on Body)
type UDFCommonFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The space id.
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"lte=20" swaggerignore:"true"`
}

func (x *UDFCommonFunc) Reset() {
	*x = UDFCommonFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDFCommonFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDFCommonFunc) ProtoMessage() {}

func (x *UDFCommonFunc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDFCommonFunc.ProtoReflect.Descriptor instead.
func (*UDFCommonFunc) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{71}
}

func (x *UDFCommonFunc) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// JobInfo
type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JobID
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// workspace id
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
	// ENV
	Args *model.StreamJobArgs `protobuf:"bytes,3,opt,name=args,proto3" json:"args" binding:"-"`
	// code
	Code *model.StreamJobCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code" binding:"-"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{72}
}

func (x *JobInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobInfo) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *JobInfo) GetArgs() *model.StreamJobArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *JobInfo) GetCode() *model.StreamJobCode {
	if x != nil {
		return x.Code
	}
	return nil
}

// JobGetState
type JobGetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JobID
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
}

func (x *JobGetState) Reset() {
	*x = JobGetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetState) ProtoMessage() {}

func (x *JobGetState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetState.ProtoReflect.Descriptor instead.
func (*JobGetState) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{73}
}

func (x *JobGetState) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// JobCancel
type JobCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JobID
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id" binding:"len=20" required:"true" minLength:"20" maxLength:"20"`
}

func (x *JobCancel) Reset() {
	*x = JobCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCancel) ProtoMessage() {}

func (x *JobCancel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCancel.ProtoReflect.Descriptor instead.
func (*JobCancel) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{74}
}

func (x *JobCancel) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type JobParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// command oneof 'run' 'syntax' 'preview' 'explain'
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"`
	// jobinfo
	Job *JobInfo `protobuf:"bytes,2,opt,name=Job,proto3" json:"job" binding:"-"`
}

func (x *JobParser) Reset() {
	*x = JobParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobParser) ProtoMessage() {}

func (x *JobParser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobParser.ProtoReflect.Descriptor instead.
func (*JobParser) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{75}
}

func (x *JobParser) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *JobParser) GetJob() *JobInfo {
	if x != nil {
		return x.Job
	}
	return nil
}

type PTasksStatusStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" params:"start_time" form:"start_time" binding:"gte=0"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" params:"end_time" form:"end_time" binding:"gte=0"`
}

func (x *PTasksStatusStat) Reset() {
	*x = PTasksStatusStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTasksStatusStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTasksStatusStat) ProtoMessage() {}

func (x *PTasksStatusStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTasksStatusStat.ProtoReflect.Descriptor instead.
func (*PTasksStatusStat) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{76}
}

func (x *PTasksStatusStat) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *PTasksStatusStat) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PTasksStatusStat) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type PTasksExecStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	State   int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty" params:"state" form:"state"`
}

func (x *PTasksExecStat) Reset() {
	*x = PTasksExecStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTasksExecStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTasksExecStat) ProtoMessage() {}

func (x *PTasksExecStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTasksExecStat.ProtoReflect.Descriptor instead.
func (*PTasksExecStat) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{77}
}

func (x *PTasksExecStat) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *PTasksExecStat) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type PTaskRuntimeRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	Limit   int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	Offset  int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" params:"offset" form:"offset" default:"0" binding:"gte=0,lte=100"`
}

func (x *PTaskRuntimeRanking) Reset() {
	*x = PTaskRuntimeRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTaskRuntimeRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTaskRuntimeRanking) ProtoMessage() {}

func (x *PTaskRuntimeRanking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTaskRuntimeRanking.ProtoReflect.Descriptor instead.
func (*PTaskRuntimeRanking) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{78}
}

func (x *PTaskRuntimeRanking) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *PTaskRuntimeRanking) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PTaskRuntimeRanking) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PTaskErrorRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	Limit   int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	Offset  int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" params:"offset" form:"offset" default:"0" binding:"gte=0,lte=100"`
}

func (x *PTaskErrorRanking) Reset() {
	*x = PTaskErrorRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTaskErrorRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTaskErrorRanking) ProtoMessage() {}

func (x *PTaskErrorRanking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTaskErrorRanking.ProtoReflect.Descriptor instead.
func (*PTaskErrorRanking) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{79}
}

func (x *PTaskErrorRanking) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *PTaskErrorRanking) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PTaskErrorRanking) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PTaskDispatchCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty" params:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" params:"start_time" form:"start_time" binding:"gte=0"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" params:"end_time" form:"end_time" binding:"gte=0"`
}

func (x *PTaskDispatchCount) Reset() {
	*x = PTaskDispatchCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTaskDispatchCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTaskDispatchCount) ProtoMessage() {}

func (x *PTaskDispatchCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTaskDispatchCount.ProtoReflect.Descriptor instead.
func (*PTaskDispatchCount) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{80}
}

func (x *PTaskDispatchCount) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *PTaskDispatchCount) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PTaskDispatchCount) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type JobFree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JobResources
	Resources *model.JobResources `protobuf:"bytes,1,opt,name=Resources,proto3" json:"resources" binding:"-"`
}

func (x *JobFree) Reset() {
	*x = JobFree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobFree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobFree) ProtoMessage() {}

func (x *JobFree) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobFree.ProtoReflect.Descriptor instead.
func (*JobFree) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{81}
}

func (x *JobFree) GetResources() *model.JobResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type DescribeFlickClusterAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DescribeFlickClusterAPI) Reset() {
	*x = DescribeFlickClusterAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlickClusterAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlickClusterAPI) ProtoMessage() {}

func (x *DescribeFlickClusterAPI) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlickClusterAPI.ProtoReflect.Descriptor instead.
func (*DescribeFlickClusterAPI) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{82}
}

func (x *DescribeFlickClusterAPI) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *DescribeFlickClusterAPI) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updated".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// Search with workspace name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search" binding:"-"`
	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// Filter by Flink cluster status;  Not required.
	// Valid optional: 1 => "enabled", 2 => "disabled".
	Status model.FlinkCluster_Status `protobuf:"varint,7,opt,name=status,proto3,enum=model.FlinkCluster_Status" json:"status" form:"status" binding:"oneof=0 1 2"`
	// Filter by Flink cluster name; valid if `search` is empty; Not required.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name" form:"name" binding:"-"`
}

func (x *ListFlinkClusters) Reset() {
	*x = ListFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlinkClusters) ProtoMessage() {}

func (x *ListFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlinkClusters.ProtoReflect.Descriptor instead.
func (*ListFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{83}
}

func (x *ListFlinkClusters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFlinkClusters) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListFlinkClusters) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListFlinkClusters) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListFlinkClusters) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListFlinkClusters) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListFlinkClusters) GetStatus() model.FlinkCluster_Status {
	if x != nil {
		return x.Status
	}
	return model.FlinkCluster__
}

func (x *ListFlinkClusters) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of flink cluster id. Is required, Min 1, Max 100.
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids" binding:"gte=1,lte=100"`
}

func (x *DeleteFlinkClusters) Reset() {
	*x = DeleteFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlinkClusters) ProtoMessage() {}

func (x *DeleteFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlinkClusters.ProtoReflect.Descriptor instead.
func (*DeleteFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteFlinkClusters) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type StartFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of flink cluster id. Is required, Min 1, Max 100.
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids" binding:"gte=1,lte=100"`
}

func (x *StartFlinkClusters) Reset() {
	*x = StartFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFlinkClusters) ProtoMessage() {}

func (x *StartFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFlinkClusters.ProtoReflect.Descriptor instead.
func (*StartFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{85}
}

func (x *StartFlinkClusters) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type StopFlinkClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of flink cluster id. Is required, Min 1, Max 100.
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids" binding:"gte=1,lte=100"`
}

func (x *StopFlinkClusters) Reset() {
	*x = StopFlinkClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopFlinkClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopFlinkClusters) ProtoMessage() {}

func (x *StopFlinkClusters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopFlinkClusters.ProtoReflect.Descriptor instead.
func (*StopFlinkClusters) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{86}
}

func (x *StopFlinkClusters) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type CreateFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The user-id of created this cluster. It fixed to request user id.
	CreateBy string `protobuf:"bytes,2,opt,name=create_by,json=createBy,proto3" json:"create_by" swaggerignore:"true"`
	// Cluster Name. Is required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// Flink Version. Is required. Optional value: "flink-v1.12.4_scala-1.11"
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version" binding:"oneof=flink-v1.12.4_scala-1.11"`
	// resource config.
	//
	// Flink task number for TaskManager. Is required, Min 1, Max 24
	TaskNum int32 `protobuf:"varint,6,opt,name=task_num,json=taskNum,proto3" json:"task_num" binding:"gte=1,lte=24"`
	// Flink JobManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	JobCu float32 `protobuf:"fixed32,7,opt,name=job_cu,json=jobCu,proto3" json:"job_cu" binding:"gte=0.5,lte=8"`
	// Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	TaskCu float32 `protobuf:"fixed32,8,opt,name=task_cu,json=taskCu,proto3" json:"task_cu" binding:"gte=0.5,lte=8"`
	// Network config. Is required.
	NetworkId string `protobuf:"bytes,9,opt,name=network_id,json=networkId,proto3" json:"network_id" binding:"-"`
	// Config of host aliases. Not required.
	HostAliases *model.HostAliases `protobuf:"bytes,11,opt,name=host_aliases,json=hostAliases,proto3" json:"host_aliases" binding:"-"`
	// Flink config. Not required.
	Config *flinkpb.FlinkConfig `protobuf:"bytes,10,opt,name=config,proto3" json:"config" binding:"-"`
}

func (x *CreateFlinkCluster) Reset() {
	*x = CreateFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlinkCluster) ProtoMessage() {}

func (x *CreateFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlinkCluster.ProtoReflect.Descriptor instead.
func (*CreateFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{87}
}

func (x *CreateFlinkCluster) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateFlinkCluster) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreateFlinkCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlinkCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateFlinkCluster) GetTaskNum() int32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *CreateFlinkCluster) GetJobCu() float32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *CreateFlinkCluster) GetTaskCu() float32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *CreateFlinkCluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateFlinkCluster) GetHostAliases() *model.HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *CreateFlinkCluster) GetConfig() *flinkpb.FlinkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The flink cluster id in HTTP Request-URI
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" uri:"cluster_id" binding:"len=20" swaggerignore:"true"`
	// Cluster Name. Is required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// Flink Version. Is required. Optional value: "flink-v1.12.4_scala-1.11"
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version" binding:"oneof=flink-v1.12.4_scala-1.11"`
	// resource config.
	//
	// Flink task number for TaskManager. Is required, Min 1, Max ?
	TaskNum int32 `protobuf:"varint,6,opt,name=task_num,json=taskNum,proto3" json:"task_num" binding:"gte=1"`
	// Flink JobManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	JobCu float32 `protobuf:"fixed32,7,opt,name=job_cu,json=jobCu,proto3" json:"job_cu" binding:"gte=0.5,lte=8"`
	// Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
	TaskCu float32 `protobuf:"fixed32,8,opt,name=task_cu,json=taskCu,proto3" json:"task_cu" binding:"gte=0.5,lte=8"`
	// Network config. Is required.
	NetworkId string `protobuf:"bytes,9,opt,name=network_id,json=networkId,proto3" json:"network_id" binding:"-"`
	// Config of host aliases. Not required.
	HostAliases *model.HostAliases `protobuf:"bytes,10,opt,name=host_aliases,json=hostAliases,proto3" json:"host_aliases" binding:"-"`
	// Flink config, Is required.
	Config *flinkpb.FlinkConfig `protobuf:"bytes,11,opt,name=config,proto3" json:"config" binding:"-"`
}

func (x *UpdateFlinkCluster) Reset() {
	*x = UpdateFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlinkCluster) ProtoMessage() {}

func (x *UpdateFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlinkCluster.ProtoReflect.Descriptor instead.
func (*UpdateFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateFlinkCluster) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateFlinkCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateFlinkCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFlinkCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateFlinkCluster) GetTaskNum() int32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *UpdateFlinkCluster) GetJobCu() float32 {
	if x != nil {
		return x.JobCu
	}
	return 0
}

func (x *UpdateFlinkCluster) GetTaskCu() float32 {
	if x != nil {
		return x.TaskCu
	}
	return 0
}

func (x *UpdateFlinkCluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UpdateFlinkCluster) GetHostAliases() *model.HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *UpdateFlinkCluster) GetConfig() *flinkpb.FlinkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DescribeFlinkCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" uri:"cluster_id" binding:"len=20" swaggerignore:"true"`
}

func (x *DescribeFlinkCluster) Reset() {
	*x = DescribeFlinkCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFlinkCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFlinkCluster) ProtoMessage() {}

func (x *DescribeFlinkCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFlinkCluster.ProtoReflect.Descriptor instead.
func (*DescribeFlinkCluster) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{89}
}

func (x *DescribeFlinkCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"`
	// The offset position. Not required, default 0.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset" form:"offset" default:"0" binding:"gte=0"`
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updated".
	// Not required, default: id.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by" form:"sort_by" binding:"-"`
	// Reverse order results. Not required, default: false.
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse" form:"reverse" binding:"-"`
	// Search with workspace name; Not required.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search" form:"search" binding:"-"`
	// The workspace id in HTTP Request-URI. Is Required.
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// Filter by network name; valid if `search` is empty; Not required.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name" form:"name" binding:"-"`
}

func (x *ListNetworks) Reset() {
	*x = ListNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworks) ProtoMessage() {}

func (x *ListNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworks.ProtoReflect.Descriptor instead.
func (*ListNetworks) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{90}
}

func (x *ListNetworks) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNetworks) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNetworks) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListNetworks) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListNetworks) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListNetworks) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ListNetworks) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of network id. Is required, Min 1, Max 100.
	NetworkIds []string `protobuf:"bytes,1,rep,name=network_ids,json=networkIds,proto3" json:"network_ids" binding:"gte=1,lte=100"`
}

func (x *DeleteNetworks) Reset() {
	*x = DeleteNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworks) ProtoMessage() {}

func (x *DeleteNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworks.ProtoReflect.Descriptor instead.
func (*DeleteNetworks) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteNetworks) GetNetworkIds() []string {
	if x != nil {
		return x.NetworkIds
	}
	return nil
}

type CreateNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The user-id of created this cluster. It fixed to request user id.
	CreateBy string `protobuf:"bytes,2,opt,name=create_by,json=createBy,proto3" json:"create_by" swaggerignore:"true"`
	// Network Name. Is required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// FIXME: Confirm the length.
	// VPC's route id, Is required.
	RouterId string `protobuf:"bytes,4,opt,name=router_id,json=routerId,proto3" json:"router_id"`
	// FIXME: Confirm the length.
	// vxnet id. Is required.
	VxnetId string `protobuf:"bytes,5,opt,name=vxnet_id,json=vxnetId,proto3" json:"vxnet_id"`
}

func (x *CreateNetwork) Reset() {
	*x = CreateNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetwork) ProtoMessage() {}

func (x *CreateNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetwork.ProtoReflect.Descriptor instead.
func (*CreateNetwork) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{92}
}

func (x *CreateNetwork) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *CreateNetwork) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreateNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNetwork) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *CreateNetwork) GetVxnetId() string {
	if x != nil {
		return x.VxnetId
	}
	return ""
}

type UpdateNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id" uri:"space_id" binding:"len=20" swaggerignore:"true"`
	// The flink cluster id in HTTP Request-URI
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id" uri:"network_id" binding:"len=20" swaggerignore:"true"`
	// Network Name. Is required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// FIXME: Confirm the length.
	// VPC's route id. Is required.
	RouterId string `protobuf:"bytes,4,opt,name=router_id,json=routerId,proto3" json:"router_id"`
	// FIXME: Confirm the length.
	// vxnet id. Is required.
	VxnetId string `protobuf:"bytes,5,opt,name=vxnet_id,json=vxnetId,proto3" json:"vxnet_id"`
}

func (x *UpdateNetwork) Reset() {
	*x = UpdateNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetwork) ProtoMessage() {}

func (x *UpdateNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetwork.ProtoReflect.Descriptor instead.
func (*UpdateNetwork) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateNetwork) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *UpdateNetwork) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UpdateNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNetwork) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *UpdateNetwork) GetVxnetId() string {
	if x != nil {
		return x.VxnetId
	}
	return ""
}

type DescribeNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace id in HTTP Request-URI
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id" uri:"network_id" binding:"len=20" swaggerignore:"true"`
}

func (x *DescribeNetwork) Reset() {
	*x = DescribeNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNetwork) ProtoMessage() {}

func (x *DescribeNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNetwork.ProtoReflect.Descriptor instead.
func (*DescribeNetwork) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{94}
}

func (x *DescribeNetwork) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type UpsertMembers_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account user_id. Is Required.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id" binding:"required"`
	// The lists of role_id. Multiple 'role_id' are separated by ','. Is Required, Min 1, Max 100.
	RoleIds string `protobuf:"bytes,3,opt,name=role_ids,json=roleIds,proto3" json:"role_ids" binding:"gte=1,lte=100"`
}

func (x *UpsertMembers_Pair) Reset() {
	*x = UpsertMembers_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_request_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMembers_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMembers_Pair) ProtoMessage() {}

func (x *UpsertMembers_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_request_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMembers_Pair.ProtoReflect.Descriptor instead.
func (*UpsertMembers_Pair) Descriptor() ([]byte, []int) {
	return file_proto_request_proto_rawDescGZIP(), []int{13, 0}
}

func (x *UpsertMembers_Pair) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpsertMembers_Pair) GetRoleIds() string {
	if x != nil {
		return x.RoleIds
	}
	return ""
}

var File_proto_request_proto protoreflect.FileDescriptor

var file_proto_request_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b,
	0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x78, 0x41, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x65, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x22, 0x3a, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x4a, 0x6f, 0x62, 0x22, 0x6b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x22, 0x6f, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x37, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x95, 0x03, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x35, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xba, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x1a, 0x4a, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x78, 0x41, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x78, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x56, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x64, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x41, 0x52, 0x09, 0x72, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x01, 0x18, 0x04, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73,
	0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x06, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x08, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x22, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a,
	0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f,
	0x62, 0x41, 0x72, 0x67, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1e, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2,
	0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x78, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78,
	0x81, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x06, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x60,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a,
	0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10,
	0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x7f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x3a,
	0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78,
	0x65, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x37, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a,
	0x6f, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x73, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0d, 0x4a,
	0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x22, 0x77,
	0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x74,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x10, 0x00, 0x18, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x41, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x70, 0x01, 0x78, 0xc1, 0x3e, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x41, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0xc1, 0x3e, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x38, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0xcc, 0x08, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x38, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0xcc, 0x08, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0xcc, 0x08, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0xc1, 0x3e, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x34,
	0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01,
	0x78, 0x41, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x41, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x01, 0x78, 0xc1, 0x3e, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x11, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x41, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0xc1, 0x3e, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x01, 0x78, 0x11, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x35, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x01, 0x78, 0xcc, 0x08, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x33, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xba,
	0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf,
	0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78,
	0x15, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xbc, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x92,
	0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x18, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01,
	0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x44, 0x46, 0x12, 0x1d, 0x0a, 0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x05, 0x75,
	0x64, 0x66, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x64, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x55, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x07, 0x75, 0x64, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x75, 0x64, 0x66, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x55, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x0b, 0x75, 0x64, 0x66,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x80,
	0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81,
	0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04,
	0x78, 0xa1, 0x9c, 0x01, 0x52, 0x06, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x0c,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xd1, 0x0f, 0x52, 0x0b, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x44, 0x46, 0x12, 0x1d, 0x0a, 0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x15, 0x52, 0x05,
	0x75, 0x64, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0x80, 0x08, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x02, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x78, 0xa1, 0x9c,
	0x01, 0x52, 0x06, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xd1, 0x0f, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x44, 0x46, 0x12, 0x22, 0x0a, 0x07, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x00, 0x78, 0xcc, 0x08, 0x52, 0x06,
	0x75, 0x64, 0x66, 0x49, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x55, 0x44, 0x46, 0x12, 0x1e, 0x0a, 0x06, 0x75, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x05,
	0x75, 0x64, 0x66, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44,
	0x46, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x10, 0x00, 0x18, 0xe9, 0x07, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08,
	0x75, 0x64, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x07, 0x75,
	0x64, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0d, 0x55, 0x44, 0x46, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x07,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x80, 0x01, 0x14, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x15, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x03, 0x4a,
	0x6f, 0x62, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf,
	0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x50, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x50,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x42, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x46, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12,
	0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x40, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x3f, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x3e, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0xb5, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69,
	0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x75,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xe0, 0x3f, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x43, 0x75, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x75,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xe0, 0x3f, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x73,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb8, 0x03, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80,
	0x01, 0x14, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75,
	0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f,
	0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x43, 0x75,
	0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f,
	0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x75, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3e, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x46, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1e,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x70, 0x00, 0x78, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x01, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x01,
	0x52, 0x07, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x70, 0x01, 0x78, 0x81, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70,
	0x01, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x76,
	0x78, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x70, 0x01, 0x52, 0x07, 0x76, 0x78, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x39,
	0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x26, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x14, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_request_proto_rawDescOnce sync.Once
	file_proto_request_proto_rawDescData = file_proto_request_proto_rawDesc
)

func file_proto_request_proto_rawDescGZIP() []byte {
	file_proto_request_proto_rawDescOnce.Do(func() {
		file_proto_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_request_proto_rawDescData)
	})
	return file_proto_request_proto_rawDescData
}

var file_proto_request_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_proto_request_proto_goTypes = []interface{}{
	(*ListWorkspaces)(nil),             // 0: request.ListWorkspaces
	(*DeleteWorkspaces)(nil),           // 1: request.DeleteWorkspaces
	(*RenameFlinkStatePath)(nil),       // 2: request.RenameFlinkStatePath
	(*DeleteFlinkState)(nil),           // 3: request.DeleteFlinkState
	(*DisableWorkspaces)(nil),          // 4: request.DisableWorkspaces
	(*EnableWorkspaces)(nil),           // 5: request.EnableWorkspaces
	(*CreateWorkspace)(nil),            // 6: request.CreateWorkspace
	(*UpdateWorkspace)(nil),            // 7: request.UpdateWorkspace
	(*DescribeWorkspace)(nil),          // 8: request.DescribeWorkspace
	(*AddAudit)(nil),                   // 9: request.AddAudit
	(*ListAudits)(nil),                 // 10: request.ListAudits
	(*ListSystemRoles)(nil),            // 11: request.ListSystemRoles
	(*ListMembers)(nil),                // 12: request.ListMembers
	(*UpsertMembers)(nil),              // 13: request.UpsertMembers
	(*DeleteMembers)(nil),              // 14: request.DeleteMembers
	(*CheckPermission)(nil),            // 15: request.CheckPermission
	(*ListStreamJobs)(nil),             // 16: request.ListStreamJobs
	(*CreateStreamJob)(nil),            // 17: request.CreateStreamJob
	(*DeleteStreamJobs)(nil),           // 18: request.DeleteStreamJobs
	(*UpdateStreamJob)(nil),            // 19: request.UpdateStreamJob
	(*DescribeStreamJob)(nil),          // 20: request.DescribeStreamJob
	(*SetStreamJobCode)(nil),           // 21: request.SetStreamJobCode
	(*SetStreamJobSchedule)(nil),       // 22: request.SetStreamJobSchedule
	(*SetStreamJobArgs)(nil),           // 23: request.SetStreamJobArgs
	(*GetStreamJobCode)(nil),           // 24: request.GetStreamJobCode
	(*GetStreamJobSchedule)(nil),       // 25: request.GetStreamJobSchedule
	(*GetStreamJobArgs)(nil),           // 26: request.GetStreamJobArgs
	(*ListReleaseStreamJobs)(nil),      // 27: request.ListReleaseStreamJobs
	(*ReleaseStreamJob)(nil),           // 28: request.ReleaseStreamJob
	(*SuspendReleaseStreamJobs)(nil),   // 29: request.SuspendReleaseStreamJobs
	(*ResumeReleaseStreamJobs)(nil),    // 30: request.ResumeReleaseStreamJobs
	(*ListStreamJobVersions)(nil),      // 31: request.ListStreamJobVersions
	(*ListMonitorRules)(nil),           // 32: request.ListMonitorRules
	(*CreateMonitorRule)(nil),          // 33: request.CreateMonitorRule
	(*DeleteMonitorRules)(nil),         // 34: request.DeleteMonitorRules
	(*EnableMonitorRules)(nil),         // 35: request.EnableMonitorRules
	(*DisableMonitorRules)(nil),        // 36: request.DisableMonitorRules
	(*UpdateMonitorRule)(nil),          // 37: request.UpdateMonitorRule
	(*DescribeMonitorRule)(nil),        // 38: request.DescribeMonitorRule
	(*SubmitStreamJobs)(nil),           // 39: request.SubmitStreamJobs
	(*OfflineStreamJobs)(nil),          // 40: request.OfflineStreamJobs
	(*ListStreamInsts)(nil),            // 41: request.ListStreamInsts
	(*JobInstIdPair)(nil),              // 42: request.JobInstIdPair
	(*TerminateStreamInsts)(nil),       // 43: request.TerminateStreamInsts
	(*SuspendStreamInsts)(nil),         // 44: request.SuspendStreamInsts
	(*ResumeStreamInsts)(nil),          // 45: request.ResumeStreamInsts
	(*CreateSource)(nil),               // 46: request.CreateSource
	(*UpdateSource)(nil),               // 47: request.UpdateSource
	(*DeleteSource)(nil),               // 48: request.DeleteSource
	(*DescribeSource)(nil),             // 49: request.DescribeSource
	(*EnableSource)(nil),               // 50: request.EnableSource
	(*DisableSource)(nil),              // 51: request.DisableSource
	(*PingSource)(nil),                 // 52: request.PingSource
	(*SourceTables)(nil),               // 53: request.SourceTables
	(*TableColumns)(nil),               // 54: request.TableColumns
	(*CreateTable)(nil),                // 55: request.CreateTable
	(*UpdateTable)(nil),                // 56: request.UpdateTable
	(*DeleteTable)(nil),                // 57: request.DeleteTable
	(*DescribeTable)(nil),              // 58: request.DescribeTable
	(*ListSource)(nil),                 // 59: request.ListSource
	(*ListTable)(nil),                  // 60: request.ListTable
	(*DownloadFile)(nil),               // 61: request.DownloadFile
	(*DescribeFile)(nil),               // 62: request.DescribeFile
	(*ListResources)(nil),              // 63: request.ListResources
	(*UpdateResource)(nil),             // 64: request.UpdateResource
	(*DeleteResources)(nil),            // 65: request.DeleteResources
	(*CreateUDF)(nil),                  // 66: request.CreateUDF
	(*UpdateUDF)(nil),                  // 67: request.UpdateUDF
	(*DeleteUDF)(nil),                  // 68: request.DeleteUDF
	(*DescribeUDF)(nil),                // 69: request.DescribeUDF
	(*ListUDF)(nil),                    // 70: request.ListUDF
	(*UDFCommonFunc)(nil),              // 71: request.UDFCommonFunc
	(*JobInfo)(nil),                    // 72: request.JobInfo
	(*JobGetState)(nil),                // 73: request.JobGetState
	(*JobCancel)(nil),                  // 74: request.JobCancel
	(*JobParser)(nil),                  // 75: request.JobParser
	(*PTasksStatusStat)(nil),           // 76: request.PTasksStatusStat
	(*PTasksExecStat)(nil),             // 77: request.PTasksExecStat
	(*PTaskRuntimeRanking)(nil),        // 78: request.PTaskRuntimeRanking
	(*PTaskErrorRanking)(nil),          // 79: request.PTaskErrorRanking
	(*PTaskDispatchCount)(nil),         // 80: request.PTaskDispatchCount
	(*JobFree)(nil),                    // 81: request.JobFree
	(*DescribeFlickClusterAPI)(nil),    // 82: request.DescribeFlickClusterAPI
	(*ListFlinkClusters)(nil),          // 83: request.ListFlinkClusters
	(*DeleteFlinkClusters)(nil),        // 84: request.DeleteFlinkClusters
	(*StartFlinkClusters)(nil),         // 85: request.StartFlinkClusters
	(*StopFlinkClusters)(nil),          // 86: request.StopFlinkClusters
	(*CreateFlinkCluster)(nil),         // 87: request.CreateFlinkCluster
	(*UpdateFlinkCluster)(nil),         // 88: request.UpdateFlinkCluster
	(*DescribeFlinkCluster)(nil),       // 89: request.DescribeFlinkCluster
	(*ListNetworks)(nil),               // 90: request.ListNetworks
	(*DeleteNetworks)(nil),             // 91: request.DeleteNetworks
	(*CreateNetwork)(nil),              // 92: request.CreateNetwork
	(*UpdateNetwork)(nil),              // 93: request.UpdateNetwork
	(*DescribeNetwork)(nil),            // 94: request.DescribeNetwork
	(*UpsertMembers_Pair)(nil),         // 95: request.UpsertMembers.Pair
	nil,                                // 96: request.CheckPermission.RolesEntry
	(model.Workspace_Status)(0),        // 97: model.Workspace.Status
	(*model.Operation)(nil),            // 98: model.Operation
	(model.Operation_Type)(0),          // 99: model.Operation.Type
	(model.Operation_State)(0),         // 100: model.Operation.State
	(model.StreamJob_Type)(0),          // 101: model.StreamJob.Type
	(*model.StreamJobCode)(nil),        // 102: model.StreamJobCode
	(*model.StreamJobSchedule)(nil),    // 103: model.StreamJobSchedule
	(*model.StreamJobArgs)(nil),        // 104: model.StreamJobArgs
	(*model.MonitorRule)(nil),          // 105: model.MonitorRule
	(*model.StreamJobProperty)(nil),    // 106: model.StreamJobProperty
	(model.DataSource_Type)(0),         // 107: model.DataSource.Type
	(*datasourcepb.DataSourceURL)(nil), // 108: datasource.DataSourceURL
	(*flinkpb.TableSchema)(nil),        // 109: flink.TableSchema
	(model.TableInfo_Kind)(0),          // 110: model.TableInfo.Kind
	(model.Resource_Type)(0),           // 111: model.Resource.Type
	(model.UDFInfo_Type)(0),            // 112: model.UDFInfo.Type
	(model.UDFInfo_Language)(0),        // 113: model.UDFInfo.Language
	(*model.JobResources)(nil),         // 114: model.JobResources
	(model.FlinkCluster_Status)(0),     // 115: model.FlinkCluster.Status
	(*model.HostAliases)(nil),          // 116: model.HostAliases
	(*flinkpb.FlinkConfig)(nil),        // 117: flink.FlinkConfig
}
var file_proto_request_proto_depIdxs = []int32{
	97,  // 0: request.ListWorkspaces.status:type_name -> model.Workspace.Status
	98,  // 1: request.AddAudit.info:type_name -> model.Operation
	99,  // 2: request.ListAudits.type:type_name -> model.Operation.Type
	100, // 3: request.ListAudits.state:type_name -> model.Operation.State
	95,  // 4: request.UpsertMembers.users:type_name -> request.UpsertMembers.Pair
	99,  // 5: request.CheckPermission.op_type:type_name -> model.Operation.Type
	96,  // 6: request.CheckPermission.roles:type_name -> request.CheckPermission.RolesEntry
	101, // 7: request.CreateStreamJob.type:type_name -> model.StreamJob.Type
	102, // 8: request.SetStreamJobCode.code:type_name -> model.StreamJobCode
	103, // 9: request.SetStreamJobSchedule.info:type_name -> model.StreamJobSchedule
	104, // 10: request.SetStreamJobArgs.info:type_name -> model.StreamJobArgs
	105, // 11: request.CreateMonitorRule.info:type_name -> model.MonitorRule
	105, // 12: request.UpdateMonitorRule.info:type_name -> model.MonitorRule
	106, // 13: request.SubmitStreamJobs.properties:type_name -> model.StreamJobProperty
	42,  // 14: request.TerminateStreamInsts.inst_ids:type_name -> request.JobInstIdPair
	42,  // 15: request.SuspendStreamInsts.inst_ids:type_name -> request.JobInstIdPair
	42,  // 16: request.ResumeStreamInsts.inst_ids:type_name -> request.JobInstIdPair
	107, // 17: request.CreateSource.source_type:type_name -> model.DataSource.Type
	108, // 18: request.CreateSource.url:type_name -> datasource.DataSourceURL
	107, // 19: request.UpdateSource.source_type:type_name -> model.DataSource.Type
	108, // 20: request.UpdateSource.url:type_name -> datasource.DataSourceURL
	107, // 21: request.PingSource.source_type:type_name -> model.DataSource.Type
	108, // 22: request.PingSource.url:type_name -> datasource.DataSourceURL
	109, // 23: request.CreateTable.table_schema:type_name -> flink.TableSchema
	110, // 24: request.CreateTable.table_kind:type_name -> model.TableInfo.Kind
	109, // 25: request.UpdateTable.table_schema:type_name -> flink.TableSchema
	110, // 26: request.UpdateTable.table_kind:type_name -> model.TableInfo.Kind
	110, // 27: request.ListTable.table_kind:type_name -> model.TableInfo.Kind
	111, // 28: request.UpdateResource.resource_type:type_name -> model.Resource.Type
	112, // 29: request.CreateUDF.udf_type:type_name -> model.UDFInfo.Type
	113, // 30: request.CreateUDF.udf_language:type_name -> model.UDFInfo.Language
	112, // 31: request.ListUDF.udf_type:type_name -> model.UDFInfo.Type
	104, // 32: request.JobInfo.args:type_name -> model.StreamJobArgs
	102, // 33: request.JobInfo.code:type_name -> model.StreamJobCode
	72,  // 34: request.JobParser.Job:type_name -> request.JobInfo
	114, // 35: request.JobFree.Resources:type_name -> model.JobResources
	115, // 36: request.ListFlinkClusters.status:type_name -> model.FlinkCluster.Status
	116, // 37: request.CreateFlinkCluster.host_aliases:type_name -> model.HostAliases
	117, // 38: request.CreateFlinkCluster.config:type_name -> flink.FlinkConfig
	116, // 39: request.UpdateFlinkCluster.host_aliases:type_name -> model.HostAliases
	117, // 40: request.UpdateFlinkCluster.config:type_name -> flink.FlinkConfig
	41,  // [41:41] is the sub-list for method output_type
	41,  // [41:41] is the sub-list for method input_type
	41,  // [41:41] is the sub-list for extension type_name
	41,  // [41:41] is the sub-list for extension extendee
	0,   // [0:41] is the sub-list for field type_name
}

func init() { file_proto_request_proto_init() }
func file_proto_request_proto_init() {
	if File_proto_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkspaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkspaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFlinkStatePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlinkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableWorkspaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWorkspaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAudits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeStreamJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStreamJobCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStreamJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStreamJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamJobCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamJobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamJobArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseStreamJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendReleaseStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeReleaseStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamJobVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMonitorRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMonitorRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMonitorRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMonitorRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMonitorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineStreamJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamInsts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInstIdPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateStreamInsts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendStreamInsts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeStreamInsts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceTables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeUDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDFCommonFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTasksStatusStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTasksExecStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTaskRuntimeRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTaskErrorRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTaskDispatchCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobFree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlickClusterAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopFlinkClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFlinkCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_request_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMembers_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_request_proto_goTypes,
		DependencyIndexes: file_proto_request_proto_depIdxs,
		MessageInfos:      file_proto_request_proto_msgTypes,
	}.Build()
	File_proto_request_proto = out.File
	file_proto_request_proto_rawDesc = nil
	file_proto_request_proto_goTypes = nil
	file_proto_request_proto_depIdxs = nil
}
