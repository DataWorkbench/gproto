// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/flink.proto

package com.dataomnis.gproto.flinkpb;

public final class FlinkPB {
  private FlinkPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ColumnAsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ColumnAs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Column name
     * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string field = 1 [(.validator.field) = { ... }</code>
     * @return The field.
     */
    java.lang.String getField();
    /**
     * <pre>
     * Column name
     * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string field = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for field.
     */
    com.google.protobuf.ByteString
        getFieldBytes();

    /**
     * <pre>
     * func
     * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string func = 2 [(.validator.field) = { ... }</code>
     * @return The func.
     */
    java.lang.String getFunc();
    /**
     * <pre>
     * func
     * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string func = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for func.
     */
    com.google.protobuf.ByteString
        getFuncBytes();

    /**
     * <pre>
     * Type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string type = 4 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <pre>
     * Type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string type = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * Column AS
     * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string as = 5 [(.validator.field) = { ... }</code>
     * @return The as.
     */
    java.lang.String getAs();
    /**
     * <pre>
     * Column AS
     * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string as = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for as.
     */
    com.google.protobuf.ByteString
        getAsBytes();
  }
  /**
   * <pre>
   * ColumnAs
   * </pre>
   *
   * Protobuf type {@code flink.ColumnAs}
   */
  public static final class ColumnAs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ColumnAs)
      ColumnAsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ColumnAs.newBuilder() to construct.
    private ColumnAs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ColumnAs() {
      field_ = "";
      func_ = "";
      type_ = "";
      as_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ColumnAs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ColumnAs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              field_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              func_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              type_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              as_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ColumnAs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ColumnAs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.class, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder.class);
    }

    public static final int FIELD_FIELD_NUMBER = 1;
    private volatile java.lang.Object field_;
    /**
     * <pre>
     * Column name
     * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string field = 1 [(.validator.field) = { ... }</code>
     * @return The field.
     */
    @java.lang.Override
    public java.lang.String getField() {
      java.lang.Object ref = field_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        field_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Column name
     * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string field = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for field.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldBytes() {
      java.lang.Object ref = field_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        field_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FUNC_FIELD_NUMBER = 2;
    private volatile java.lang.Object func_;
    /**
     * <pre>
     * func
     * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string func = 2 [(.validator.field) = { ... }</code>
     * @return The func.
     */
    @java.lang.Override
    public java.lang.String getFunc() {
      java.lang.Object ref = func_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        func_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * func
     * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string func = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for func.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFuncBytes() {
      java.lang.Object ref = func_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        func_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 4;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * Type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string type = 4 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        type_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string type = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AS_FIELD_NUMBER = 5;
    private volatile java.lang.Object as_;
    /**
     * <pre>
     * Column AS
     * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string as = 5 [(.validator.field) = { ... }</code>
     * @return The as.
     */
    @java.lang.Override
    public java.lang.String getAs() {
      java.lang.Object ref = as_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        as_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Column AS
     * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string as = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for as.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAsBytes() {
      java.lang.Object ref = as_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        as_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getFieldBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, field_);
      }
      if (!getFuncBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, func_);
      }
      if (!getTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, type_);
      }
      if (!getAsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, as_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getFieldBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, field_);
      }
      if (!getFuncBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, func_);
      }
      if (!getTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, type_);
      }
      if (!getAsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, as_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs other = (com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs) obj;

      if (!getField()
          .equals(other.getField())) return false;
      if (!getFunc()
          .equals(other.getFunc())) return false;
      if (!getType()
          .equals(other.getType())) return false;
      if (!getAs()
          .equals(other.getAs())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FIELD_FIELD_NUMBER;
      hash = (53 * hash) + getField().hashCode();
      hash = (37 * hash) + FUNC_FIELD_NUMBER;
      hash = (53 * hash) + getFunc().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType().hashCode();
      hash = (37 * hash) + AS_FIELD_NUMBER;
      hash = (53 * hash) + getAs().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ColumnAs
     * </pre>
     *
     * Protobuf type {@code flink.ColumnAs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ColumnAs)
        com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ColumnAs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ColumnAs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.class, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        field_ = "";

        func_ = "";

        type_ = "";

        as_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ColumnAs_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs result = new com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs(this);
        result.field_ = field_;
        result.func_ = func_;
        result.type_ = type_;
        result.as_ = as_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance()) return this;
        if (!other.getField().isEmpty()) {
          field_ = other.field_;
          onChanged();
        }
        if (!other.getFunc().isEmpty()) {
          func_ = other.func_;
          onChanged();
        }
        if (!other.getType().isEmpty()) {
          type_ = other.type_;
          onChanged();
        }
        if (!other.getAs().isEmpty()) {
          as_ = other.as_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object field_ = "";
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return The field.
       */
      public java.lang.String getField() {
        java.lang.Object ref = field_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          field_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for field.
       */
      public com.google.protobuf.ByteString
          getFieldBytes() {
        java.lang.Object ref = field_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          field_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @param value The field to set.
       * @return This builder for chaining.
       */
      public Builder setField(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        field_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearField() {
        
        field_ = getDefaultInstance().getField();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for field to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        field_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object func_ = "";
      /**
       * <pre>
       * func
       * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string func = 2 [(.validator.field) = { ... }</code>
       * @return The func.
       */
      public java.lang.String getFunc() {
        java.lang.Object ref = func_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          func_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * func
       * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string func = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for func.
       */
      public com.google.protobuf.ByteString
          getFuncBytes() {
        java.lang.Object ref = func_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          func_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * func
       * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string func = 2 [(.validator.field) = { ... }</code>
       * @param value The func to set.
       * @return This builder for chaining.
       */
      public Builder setFunc(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        func_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * func
       * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string func = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFunc() {
        
        func_ = getDefaultInstance().getFunc();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * func
       * &#64;inject_tag: json:"func" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string func = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for func to set.
       * @return This builder for chaining.
       */
      public Builder setFuncBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        func_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * Type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string type = 4 [(.validator.field) = { ... }</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string type = 4 [(.validator.field) = { ... }</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string type = 4 [(.validator.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string type = 4 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string type = 4 [(.validator.field) = { ... }</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        type_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object as_ = "";
      /**
       * <pre>
       * Column AS
       * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string as = 5 [(.validator.field) = { ... }</code>
       * @return The as.
       */
      public java.lang.String getAs() {
        java.lang.Object ref = as_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          as_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Column AS
       * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string as = 5 [(.validator.field) = { ... }</code>
       * @return The bytes for as.
       */
      public com.google.protobuf.ByteString
          getAsBytes() {
        java.lang.Object ref = as_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          as_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Column AS
       * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string as = 5 [(.validator.field) = { ... }</code>
       * @param value The as to set.
       * @return This builder for chaining.
       */
      public Builder setAs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        as_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Column AS
       * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string as = 5 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearAs() {
        
        as_ = getDefaultInstance().getAs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Column AS
       * &#64;inject_tag: json:"as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string as = 5 [(.validator.field) = { ... }</code>
       * @param value The bytes for as to set.
       * @return This builder for chaining.
       */
      public Builder setAsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        as_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ColumnAs)
    }

    // @@protoc_insertion_point(class_scope:flink.ColumnAs)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ColumnAs>
        PARSER = new com.google.protobuf.AbstractParser<ColumnAs>() {
      @java.lang.Override
      public ColumnAs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColumnAs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ColumnAs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ColumnAs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DestOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.DestOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @return A list containing the columns.
     */
    java.util.List<java.lang.String>
        getColumnsList();
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @return The count of columns.
     */
    int getColumnsCount();
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The columns at the given index.
     */
    java.lang.String getColumns(int index);
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the columns at the given index.
     */
    com.google.protobuf.ByteString
        getColumnsBytes(int index);

    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 2 [(.validator.field) = { ... }</code>
     * @return The tableId.
     */
    java.lang.String getTableId();
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for tableId.
     */
    com.google.protobuf.ByteString
        getTableIdBytes();
  }
  /**
   * <pre>
   * DestOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.DestOperator}
   */
  public static final class DestOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.DestOperator)
      DestOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DestOperator.newBuilder() to construct.
    private DestOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DestOperator() {
      columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      tableId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DestOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DestOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                columns_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              columns_.add(s);
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              tableId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          columns_ = columns_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DestOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DestOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder.class);
    }

    public static final int COLUMNS_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList columns_;
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @return A list containing the columns.
     */
    public com.google.protobuf.ProtocolStringList
        getColumnsList() {
      return columns_;
    }
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @return The count of columns.
     */
    public int getColumnsCount() {
      return columns_.size();
    }
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The columns at the given index.
     */
    public java.lang.String getColumns(int index) {
      return columns_.get(index);
    }
    /**
     * <pre>
     * insert into these columns
     * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
     * </pre>
     *
     * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the columns at the given index.
     */
    public com.google.protobuf.ByteString
        getColumnsBytes(int index) {
      return columns_.getByteString(index);
    }

    public static final int TABLE_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object tableId_;
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 2 [(.validator.field) = { ... }</code>
     * @return The tableId.
     */
    @java.lang.Override
    public java.lang.String getTableId() {
      java.lang.Object ref = tableId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for tableId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableIdBytes() {
      java.lang.Object ref = tableId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < columns_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, columns_.getRaw(i));
      }
      if (!getTableIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tableId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < columns_.size(); i++) {
          dataSize += computeStringSizeNoTag(columns_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getColumnsList().size();
      }
      if (!getTableIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tableId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator) obj;

      if (!getColumnsList()
          .equals(other.getColumnsList())) return false;
      if (!getTableId()
          .equals(other.getTableId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getColumnsCount() > 0) {
        hash = (37 * hash) + COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getColumnsList().hashCode();
      }
      hash = (37 * hash) + TABLE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTableId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * DestOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.DestOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.DestOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DestOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DestOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        tableId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DestOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          columns_ = columns_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.columns_ = columns_;
        result.tableId_ = tableId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.getDefaultInstance()) return this;
        if (!other.columns_.isEmpty()) {
          if (columns_.isEmpty()) {
            columns_ = other.columns_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureColumnsIsMutable();
            columns_.addAll(other.columns_);
          }
          onChanged();
        }
        if (!other.getTableId().isEmpty()) {
          tableId_ = other.tableId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureColumnsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          columns_ = new com.google.protobuf.LazyStringArrayList(columns_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @return A list containing the columns.
       */
      public com.google.protobuf.ProtocolStringList
          getColumnsList() {
        return columns_.getUnmodifiableView();
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @return The count of columns.
       */
      public int getColumnsCount() {
        return columns_.size();
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the element to return.
       * @return The columns at the given index.
       */
      public java.lang.String getColumns(int index) {
        return columns_.get(index);
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the value to return.
       * @return The bytes of the columns at the given index.
       */
      public com.google.protobuf.ByteString
          getColumnsBytes(int index) {
        return columns_.getByteString(index);
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @param index The index to set the value at.
       * @param value The columns to set.
       * @return This builder for chaining.
       */
      public Builder setColumns(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureColumnsIsMutable();
        columns_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @param value The columns to add.
       * @return This builder for chaining.
       */
      public Builder addColumns(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureColumnsIsMutable();
        columns_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @param values The columns to add.
       * @return This builder for chaining.
       */
      public Builder addAllColumns(
          java.lang.Iterable<java.lang.String> values) {
        ensureColumnsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, columns_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearColumns() {
        columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * insert into these columns
       * &#64;inject_tag: json:"columns" default:"" binding:"gte=1,lte=20000" required:"false" minLength:"1" maxLength:"20000"
       * </pre>
       *
       * <code>repeated string columns = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes of the columns to add.
       * @return This builder for chaining.
       */
      public Builder addColumnsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureColumnsIsMutable();
        columns_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object tableId_ = "";
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 2 [(.validator.field) = { ... }</code>
       * @return The tableId.
       */
      public java.lang.String getTableId() {
        java.lang.Object ref = tableId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for tableId.
       */
      public com.google.protobuf.ByteString
          getTableIdBytes() {
        java.lang.Object ref = tableId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 2 [(.validator.field) = { ... }</code>
       * @param value The tableId to set.
       * @return This builder for chaining.
       */
      public Builder setTableId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableId() {
        
        tableId_ = getDefaultInstance().getTableId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableId to set.
       * @return This builder for chaining.
       */
      public Builder setTableIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.DestOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.DestOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DestOperator>
        PARSER = new com.google.protobuf.AbstractParser<DestOperator>() {
      @java.lang.Override
      public DestOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DestOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DestOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DestOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValuesOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ValuesOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType> 
        getRowsList();
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType getRows(int index);
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    int getRowsCount();
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder> 
        getRowsOrBuilderList();
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder getRowsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * ValuesOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.ValuesOperator}
   */
  public static final class ValuesOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ValuesOperator)
      ValuesOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ValuesOperator.newBuilder() to construct.
    private ValuesOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ValuesOperator() {
      rows_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ValuesOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ValuesOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                rows_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType>();
                mutable_bitField0_ |= 0x00000001;
              }
              rows_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          rows_ = java.util.Collections.unmodifiableList(rows_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder.class);
    }

    public interface ValuesTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:flink.ValuesOperator.ValuesType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @return A list containing the values.
       */
      java.util.List<java.lang.String>
          getValuesList();
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @return The count of values.
       */
      int getValuesCount();
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the element to return.
       * @return The values at the given index.
       */
      java.lang.String getValues(int index);
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the value to return.
       * @return The bytes of the values at the given index.
       */
      com.google.protobuf.ByteString
          getValuesBytes(int index);
    }
    /**
     * Protobuf type {@code flink.ValuesOperator.ValuesType}
     */
    public static final class ValuesType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:flink.ValuesOperator.ValuesType)
        ValuesTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ValuesType.newBuilder() to construct.
      private ValuesType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ValuesType() {
        values_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ValuesType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ValuesType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  values_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000001;
                }
                values_.add(s);
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            values_ = values_.getUnmodifiableView();
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_ValuesType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_ValuesType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.class, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder.class);
      }

      public static final int VALUES_FIELD_NUMBER = 1;
      private com.google.protobuf.LazyStringList values_;
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @return A list containing the values.
       */
      public com.google.protobuf.ProtocolStringList
          getValuesList() {
        return values_;
      }
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @return The count of values.
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the element to return.
       * @return The values at the given index.
       */
      public java.lang.String getValues(int index) {
        return values_.get(index);
      }
      /**
       * <pre>
       * this is one row.
       * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
       * </pre>
       *
       * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the value to return.
       * @return The bytes of the values at the given index.
       */
      public com.google.protobuf.ByteString
          getValuesBytes(int index) {
        return values_.getByteString(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < values_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, values_.getRaw(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < values_.size(); i++) {
            dataSize += computeStringSizeNoTag(values_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getValuesList().size();
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType)) {
          return super.equals(obj);
        }
        com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType other = (com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType) obj;

        if (!getValuesList()
            .equals(other.getValuesList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getValuesCount() > 0) {
          hash = (37 * hash) + VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getValuesList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code flink.ValuesOperator.ValuesType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:flink.ValuesOperator.ValuesType)
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_ValuesType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_ValuesType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.class, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder.class);
        }

        // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          values_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_ValuesType_descriptor;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType getDefaultInstanceForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.getDefaultInstance();
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType build() {
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType buildPartial() {
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType result = new com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) != 0)) {
            values_ = values_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.values_ = values_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType) {
            return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType other) {
          if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.getDefaultInstance()) return this;
          if (!other.values_.isEmpty()) {
            if (values_.isEmpty()) {
              values_ = other.values_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureValuesIsMutable();
              values_.addAll(other.values_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private com.google.protobuf.LazyStringList values_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureValuesIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            values_ = new com.google.protobuf.LazyStringArrayList(values_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @return A list containing the values.
         */
        public com.google.protobuf.ProtocolStringList
            getValuesList() {
          return values_.getUnmodifiableView();
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @return The count of values.
         */
        public int getValuesCount() {
          return values_.size();
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @param index The index of the element to return.
         * @return The values at the given index.
         */
        public java.lang.String getValues(int index) {
          return values_.get(index);
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @param index The index of the value to return.
         * @return The bytes of the values at the given index.
         */
        public com.google.protobuf.ByteString
            getValuesBytes(int index) {
          return values_.getByteString(index);
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @param index The index to set the value at.
         * @param value The values to set.
         * @return This builder for chaining.
         */
        public Builder setValues(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureValuesIsMutable();
          values_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @param value The values to add.
         * @return This builder for chaining.
         */
        public Builder addValues(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureValuesIsMutable();
          values_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @param values The values to add.
         * @return This builder for chaining.
         */
        public Builder addAllValues(
            java.lang.Iterable<java.lang.String> values) {
          ensureValuesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, values_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearValues() {
          values_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * this is one row.
         * &#64;inject_tag: json:"values" default:"" binding:"gte=1" required:"false" minLength:"1"
         * </pre>
         *
         * <code>repeated string values = 1 [(.validator.field) = { ... }</code>
         * @param value The bytes of the values to add.
         * @return This builder for chaining.
         */
        public Builder addValuesBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureValuesIsMutable();
          values_.add(value);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:flink.ValuesOperator.ValuesType)
      }

      // @@protoc_insertion_point(class_scope:flink.ValuesOperator.ValuesType)
      private static final com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType();
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ValuesType>
          PARSER = new com.google.protobuf.AbstractParser<ValuesType>() {
        @java.lang.Override
        public ValuesType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ValuesType(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ValuesType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ValuesType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int ROWS_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType> rows_;
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType> getRowsList() {
      return rows_;
    }
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder> 
        getRowsOrBuilderList() {
      return rows_;
    }
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getRowsCount() {
      return rows_.size();
    }
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType getRows(int index) {
      return rows_.get(index);
    }
    /**
     * <pre>
     * all rows.
     * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
     * </pre>
     *
     * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder getRowsOrBuilder(
        int index) {
      return rows_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < rows_.size(); i++) {
        output.writeMessage(1, rows_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < rows_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, rows_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator) obj;

      if (!getRowsList()
          .equals(other.getRowsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRowsCount() > 0) {
        hash = (37 * hash) + ROWS_FIELD_NUMBER;
        hash = (53 * hash) + getRowsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ValuesOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.ValuesOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ValuesOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRowsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (rowsBuilder_ == null) {
          rows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          rowsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ValuesOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator(this);
        int from_bitField0_ = bitField0_;
        if (rowsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            rows_ = java.util.Collections.unmodifiableList(rows_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.rows_ = rows_;
        } else {
          result.rows_ = rowsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.getDefaultInstance()) return this;
        if (rowsBuilder_ == null) {
          if (!other.rows_.isEmpty()) {
            if (rows_.isEmpty()) {
              rows_ = other.rows_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRowsIsMutable();
              rows_.addAll(other.rows_);
            }
            onChanged();
          }
        } else {
          if (!other.rows_.isEmpty()) {
            if (rowsBuilder_.isEmpty()) {
              rowsBuilder_.dispose();
              rowsBuilder_ = null;
              rows_ = other.rows_;
              bitField0_ = (bitField0_ & ~0x00000001);
              rowsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRowsFieldBuilder() : null;
            } else {
              rowsBuilder_.addAllMessages(other.rows_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType> rows_ =
        java.util.Collections.emptyList();
      private void ensureRowsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          rows_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType>(rows_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder> rowsBuilder_;

      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType> getRowsList() {
        if (rowsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rows_);
        } else {
          return rowsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public int getRowsCount() {
        if (rowsBuilder_ == null) {
          return rows_.size();
        } else {
          return rowsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType getRows(int index) {
        if (rowsBuilder_ == null) {
          return rows_.get(index);
        } else {
          return rowsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setRows(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType value) {
        if (rowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowsIsMutable();
          rows_.set(index, value);
          onChanged();
        } else {
          rowsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setRows(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder builderForValue) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addRows(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType value) {
        if (rowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowsIsMutable();
          rows_.add(value);
          onChanged();
        } else {
          rowsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addRows(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType value) {
        if (rowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowsIsMutable();
          rows_.add(index, value);
          onChanged();
        } else {
          rowsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addRows(
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder builderForValue) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.add(builderForValue.build());
          onChanged();
        } else {
          rowsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addRows(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder builderForValue) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllRows(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType> values) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rows_);
          onChanged();
        } else {
          rowsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearRows() {
        if (rowsBuilder_ == null) {
          rows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          rowsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeRows(int index) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.remove(index);
          onChanged();
        } else {
          rowsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder getRowsBuilder(
          int index) {
        return getRowsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder getRowsOrBuilder(
          int index) {
        if (rowsBuilder_ == null) {
          return rows_.get(index);  } else {
          return rowsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder> 
           getRowsOrBuilderList() {
        if (rowsBuilder_ != null) {
          return rowsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rows_);
        }
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder addRowsBuilder() {
        return getRowsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.getDefaultInstance());
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder addRowsBuilder(
          int index) {
        return getRowsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.getDefaultInstance());
      }
      /**
       * <pre>
       * all rows.
       * &#64;inject_tag: json:"rows" default:"" binding:"gte=1" required:"true" minLength:"1"
       * </pre>
       *
       * <code>repeated .flink.ValuesOperator.ValuesType rows = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder> 
           getRowsBuilderList() {
        return getRowsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder> 
          getRowsFieldBuilder() {
        if (rowsBuilder_ == null) {
          rowsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.ValuesTypeOrBuilder>(
                  rows_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          rows_ = null;
        }
        return rowsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ValuesOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.ValuesOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValuesOperator>
        PARSER = new com.google.protobuf.AbstractParser<ValuesOperator>() {
      @java.lang.Override
      public ValuesOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ValuesOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ValuesOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValuesOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OrderByOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.OrderByOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn> 
        getColumnList();
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn getColumn(int index);
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder getColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * OrderByOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.OrderByOperator}
   */
  public static final class OrderByOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.OrderByOperator)
      OrderByOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OrderByOperator.newBuilder() to construct.
    private OrderByOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OrderByOperator() {
      column_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OrderByOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OrderByOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder.class);
    }

    public interface OrderByColumnOrBuilder extends
        // @@protoc_insertion_point(interface_extends:flink.OrderByOperator.OrderByColumn)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return The field.
       */
      java.lang.String getField();
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for field.
       */
      com.google.protobuf.ByteString
          getFieldBytes();

      /**
       * <pre>
       * order oneof 'asc' 'desc'
       * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string order = 2 [(.validator.field) = { ... }</code>
       * @return The order.
       */
      java.lang.String getOrder();
      /**
       * <pre>
       * order oneof 'asc' 'desc'
       * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string order = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for order.
       */
      com.google.protobuf.ByteString
          getOrderBytes();
    }
    /**
     * Protobuf type {@code flink.OrderByOperator.OrderByColumn}
     */
    public static final class OrderByColumn extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:flink.OrderByOperator.OrderByColumn)
        OrderByColumnOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use OrderByColumn.newBuilder() to construct.
      private OrderByColumn(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private OrderByColumn() {
        field_ = "";
        order_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new OrderByColumn();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private OrderByColumn(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                field_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                order_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_OrderByColumn_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_OrderByColumn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.class, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder.class);
      }

      public static final int FIELD_FIELD_NUMBER = 1;
      private volatile java.lang.Object field_;
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return The field.
       */
      @java.lang.Override
      public java.lang.String getField() {
        java.lang.Object ref = field_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          field_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Column name
       * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string field = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for field.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFieldBytes() {
        java.lang.Object ref = field_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          field_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ORDER_FIELD_NUMBER = 2;
      private volatile java.lang.Object order_;
      /**
       * <pre>
       * order oneof 'asc' 'desc'
       * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string order = 2 [(.validator.field) = { ... }</code>
       * @return The order.
       */
      @java.lang.Override
      public java.lang.String getOrder() {
        java.lang.Object ref = order_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          order_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * order oneof 'asc' 'desc'
       * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string order = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for order.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOrderBytes() {
        java.lang.Object ref = order_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          order_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getFieldBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, field_);
        }
        if (!getOrderBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, order_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getFieldBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, field_);
        }
        if (!getOrderBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, order_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn)) {
          return super.equals(obj);
        }
        com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn other = (com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn) obj;

        if (!getField()
            .equals(other.getField())) return false;
        if (!getOrder()
            .equals(other.getOrder())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getField().hashCode();
        hash = (37 * hash) + ORDER_FIELD_NUMBER;
        hash = (53 * hash) + getOrder().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code flink.OrderByOperator.OrderByColumn}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:flink.OrderByOperator.OrderByColumn)
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_OrderByColumn_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_OrderByColumn_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.class, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder.class);
        }

        // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          field_ = "";

          order_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_OrderByColumn_descriptor;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn getDefaultInstanceForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.getDefaultInstance();
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn build() {
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn buildPartial() {
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn result = new com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn(this);
          result.field_ = field_;
          result.order_ = order_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn) {
            return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn other) {
          if (other == com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.getDefaultInstance()) return this;
          if (!other.getField().isEmpty()) {
            field_ = other.field_;
            onChanged();
          }
          if (!other.getOrder().isEmpty()) {
            order_ = other.order_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object field_ = "";
        /**
         * <pre>
         * Column name
         * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string field = 1 [(.validator.field) = { ... }</code>
         * @return The field.
         */
        public java.lang.String getField() {
          java.lang.Object ref = field_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            field_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Column name
         * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string field = 1 [(.validator.field) = { ... }</code>
         * @return The bytes for field.
         */
        public com.google.protobuf.ByteString
            getFieldBytes() {
          java.lang.Object ref = field_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            field_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Column name
         * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string field = 1 [(.validator.field) = { ... }</code>
         * @param value The field to set.
         * @return This builder for chaining.
         */
        public Builder setField(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          field_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Column name
         * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string field = 1 [(.validator.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearField() {
          
          field_ = getDefaultInstance().getField();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Column name
         * &#64;inject_tag: json:"field" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string field = 1 [(.validator.field) = { ... }</code>
         * @param value The bytes for field to set.
         * @return This builder for chaining.
         */
        public Builder setFieldBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          field_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object order_ = "";
        /**
         * <pre>
         * order oneof 'asc' 'desc'
         * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string order = 2 [(.validator.field) = { ... }</code>
         * @return The order.
         */
        public java.lang.String getOrder() {
          java.lang.Object ref = order_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            order_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * order oneof 'asc' 'desc'
         * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string order = 2 [(.validator.field) = { ... }</code>
         * @return The bytes for order.
         */
        public com.google.protobuf.ByteString
            getOrderBytes() {
          java.lang.Object ref = order_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            order_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * order oneof 'asc' 'desc'
         * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string order = 2 [(.validator.field) = { ... }</code>
         * @param value The order to set.
         * @return This builder for chaining.
         */
        public Builder setOrder(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          order_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * order oneof 'asc' 'desc'
         * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string order = 2 [(.validator.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearOrder() {
          
          order_ = getDefaultInstance().getOrder();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * order oneof 'asc' 'desc'
         * &#64;inject_tag: json:"order" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
         * </pre>
         *
         * <code>string order = 2 [(.validator.field) = { ... }</code>
         * @param value The bytes for order to set.
         * @return This builder for chaining.
         */
        public Builder setOrderBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          order_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:flink.OrderByOperator.OrderByColumn)
      }

      // @@protoc_insertion_point(class_scope:flink.OrderByOperator.OrderByColumn)
      private static final com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn();
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<OrderByColumn>
          PARSER = new com.google.protobuf.AbstractParser<OrderByColumn>() {
        @java.lang.Override
        public OrderByColumn parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new OrderByColumn(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<OrderByColumn> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<OrderByColumn> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn> column_;
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
     * </pre>
     *
     * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(1, column_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, column_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator) obj;

      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * OrderByOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.OrderByOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.OrderByOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OrderByOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator(this);
        int from_bitField0_ = bitField0_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.getDefaultInstance()) return this;
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder> columnBuilder_;

      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.getDefaultInstance());
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.getDefaultInstance());
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1026"
       * </pre>
       *
       * <code>repeated .flink.OrderByOperator.OrderByColumn column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumn.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.OrderByColumnOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.OrderByOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.OrderByOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OrderByOperator>
        PARSER = new com.google.protobuf.AbstractParser<OrderByOperator>() {
      @java.lang.Override
      public OrderByOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OrderByOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OrderByOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OrderByOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LimitOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.LimitOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The limit
     * &#64;inject_tag: json:"limit" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
     * </pre>
     *
     * <code>int32 limit = 1 [(.validator.field) = { ... }</code>
     * @return The limit.
     */
    int getLimit();
  }
  /**
   * <pre>
   * LimitOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.LimitOperator}
   */
  public static final class LimitOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.LimitOperator)
      LimitOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LimitOperator.newBuilder() to construct.
    private LimitOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LimitOperator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LimitOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LimitOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              limit_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_LimitOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_LimitOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder.class);
    }

    public static final int LIMIT_FIELD_NUMBER = 1;
    private int limit_;
    /**
     * <pre>
     * The limit
     * &#64;inject_tag: json:"limit" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
     * </pre>
     *
     * <code>int32 limit = 1 [(.validator.field) = { ... }</code>
     * @return The limit.
     */
    @java.lang.Override
    public int getLimit() {
      return limit_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (limit_ != 0) {
        output.writeInt32(1, limit_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (limit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, limit_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator) obj;

      if (getLimit()
          != other.getLimit()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getLimit();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * LimitOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.LimitOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.LimitOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_LimitOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_LimitOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        limit_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_LimitOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator(this);
        result.limit_ = limit_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.getDefaultInstance()) return this;
        if (other.getLimit() != 0) {
          setLimit(other.getLimit());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int limit_ ;
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"limit" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
       * </pre>
       *
       * <code>int32 limit = 1 [(.validator.field) = { ... }</code>
       * @return The limit.
       */
      @java.lang.Override
      public int getLimit() {
        return limit_;
      }
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"limit" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
       * </pre>
       *
       * <code>int32 limit = 1 [(.validator.field) = { ... }</code>
       * @param value The limit to set.
       * @return This builder for chaining.
       */
      public Builder setLimit(int value) {
        
        limit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"limit" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
       * </pre>
       *
       * <code>int32 limit = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearLimit() {
        
        limit_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.LimitOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.LimitOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LimitOperator>
        PARSER = new com.google.protobuf.AbstractParser<LimitOperator>() {
      @java.lang.Override
      public LimitOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LimitOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LimitOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LimitOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OffsetOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.OffsetOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The limit
     * &#64;inject_tag: json:"offset" default:"" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"
     * </pre>
     *
     * <code>int32 offset = 1 [(.validator.field) = { ... }</code>
     * @return The offset.
     */
    int getOffset();
  }
  /**
   * <pre>
   * OffsetOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.OffsetOperator}
   */
  public static final class OffsetOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.OffsetOperator)
      OffsetOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OffsetOperator.newBuilder() to construct.
    private OffsetOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OffsetOperator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OffsetOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OffsetOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              offset_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OffsetOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OffsetOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder.class);
    }

    public static final int OFFSET_FIELD_NUMBER = 1;
    private int offset_;
    /**
     * <pre>
     * The limit
     * &#64;inject_tag: json:"offset" default:"" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"
     * </pre>
     *
     * <code>int32 offset = 1 [(.validator.field) = { ... }</code>
     * @return The offset.
     */
    @java.lang.Override
    public int getOffset() {
      return offset_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (offset_ != 0) {
        output.writeInt32(1, offset_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (offset_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, offset_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator) obj;

      if (getOffset()
          != other.getOffset()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + getOffset();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * OffsetOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.OffsetOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.OffsetOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OffsetOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OffsetOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        offset_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OffsetOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator(this);
        result.offset_ = offset_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.getDefaultInstance()) return this;
        if (other.getOffset() != 0) {
          setOffset(other.getOffset());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int offset_ ;
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"offset" default:"" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"
       * </pre>
       *
       * <code>int32 offset = 1 [(.validator.field) = { ... }</code>
       * @return The offset.
       */
      @java.lang.Override
      public int getOffset() {
        return offset_;
      }
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"offset" default:"" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"
       * </pre>
       *
       * <code>int32 offset = 1 [(.validator.field) = { ... }</code>
       * @param value The offset to set.
       * @return This builder for chaining.
       */
      public Builder setOffset(int value) {
        
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"offset" default:"" binding:"gte=0,lte=100" required:"true" mininum:"0" maximum:"100"
       * </pre>
       *
       * <code>int32 offset = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearOffset() {
        
        offset_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.OffsetOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.OffsetOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OffsetOperator>
        PARSER = new com.google.protobuf.AbstractParser<OffsetOperator>() {
      @java.lang.Override
      public OffsetOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OffsetOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OffsetOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OffsetOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FetchOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FetchOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The limit
     * &#64;inject_tag: json:"fetch" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
     * </pre>
     *
     * <code>int32 fetch = 1 [(.validator.field) = { ... }</code>
     * @return The fetch.
     */
    int getFetch();
  }
  /**
   * <pre>
   * FetchOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.FetchOperator}
   */
  public static final class FetchOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FetchOperator)
      FetchOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FetchOperator.newBuilder() to construct.
    private FetchOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FetchOperator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FetchOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FetchOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              fetch_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FetchOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FetchOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder.class);
    }

    public static final int FETCH_FIELD_NUMBER = 1;
    private int fetch_;
    /**
     * <pre>
     * The limit
     * &#64;inject_tag: json:"fetch" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
     * </pre>
     *
     * <code>int32 fetch = 1 [(.validator.field) = { ... }</code>
     * @return The fetch.
     */
    @java.lang.Override
    public int getFetch() {
      return fetch_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (fetch_ != 0) {
        output.writeInt32(1, fetch_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (fetch_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, fetch_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator) obj;

      if (getFetch()
          != other.getFetch()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FETCH_FIELD_NUMBER;
      hash = (53 * hash) + getFetch();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FetchOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.FetchOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FetchOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FetchOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FetchOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        fetch_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FetchOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator(this);
        result.fetch_ = fetch_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.getDefaultInstance()) return this;
        if (other.getFetch() != 0) {
          setFetch(other.getFetch());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int fetch_ ;
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"fetch" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
       * </pre>
       *
       * <code>int32 fetch = 1 [(.validator.field) = { ... }</code>
       * @return The fetch.
       */
      @java.lang.Override
      public int getFetch() {
        return fetch_;
      }
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"fetch" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
       * </pre>
       *
       * <code>int32 fetch = 1 [(.validator.field) = { ... }</code>
       * @param value The fetch to set.
       * @return This builder for chaining.
       */
      public Builder setFetch(int value) {
        
        fetch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The limit
       * &#64;inject_tag: json:"fetch" default:"" binding:"gte=1,lte=100" required:"true" mininum:"1" maximum:"100"
       * </pre>
       *
       * <code>int32 fetch = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFetch() {
        
        fetch_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FetchOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.FetchOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FetchOperator>
        PARSER = new com.google.protobuf.AbstractParser<FetchOperator>() {
      @java.lang.Override
      public FetchOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FetchOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FetchOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FetchOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnionOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.UnionOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * bool true or false
     * &#64;inject_tag: json:"all" default:""
     * </pre>
     *
     * <code>bool all = 1 [(.validator.field) = { ... }</code>
     * @return The all.
     */
    boolean getAll();
  }
  /**
   * <pre>
   * UnionOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.UnionOperator}
   */
  public static final class UnionOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.UnionOperator)
      UnionOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnionOperator.newBuilder() to construct.
    private UnionOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnionOperator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnionOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UnionOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              all_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UnionOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UnionOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder.class);
    }

    public static final int ALL_FIELD_NUMBER = 1;
    private boolean all_;
    /**
     * <pre>
     * bool true or false
     * &#64;inject_tag: json:"all" default:""
     * </pre>
     *
     * <code>bool all = 1 [(.validator.field) = { ... }</code>
     * @return The all.
     */
    @java.lang.Override
    public boolean getAll() {
      return all_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (all_ != false) {
        output.writeBool(1, all_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (all_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, all_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator) obj;

      if (getAll()
          != other.getAll()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAll());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * UnionOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.UnionOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.UnionOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UnionOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UnionOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        all_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UnionOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator(this);
        result.all_ = all_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.getDefaultInstance()) return this;
        if (other.getAll() != false) {
          setAll(other.getAll());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean all_ ;
      /**
       * <pre>
       * bool true or false
       * &#64;inject_tag: json:"all" default:""
       * </pre>
       *
       * <code>bool all = 1 [(.validator.field) = { ... }</code>
       * @return The all.
       */
      @java.lang.Override
      public boolean getAll() {
        return all_;
      }
      /**
       * <pre>
       * bool true or false
       * &#64;inject_tag: json:"all" default:""
       * </pre>
       *
       * <code>bool all = 1 [(.validator.field) = { ... }</code>
       * @param value The all to set.
       * @return This builder for chaining.
       */
      public Builder setAll(boolean value) {
        
        all_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bool true or false
       * &#64;inject_tag: json:"all" default:""
       * </pre>
       *
       * <code>bool all = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearAll() {
        
        all_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.UnionOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.UnionOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnionOperator>
        PARSER = new com.google.protobuf.AbstractParser<UnionOperator>() {
      @java.lang.Override
      public UnionOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UnionOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UnionOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnionOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GroupByOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.GroupByOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @return A list containing the groupBy.
     */
    java.util.List<java.lang.String>
        getGroupByList();
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @return The count of groupBy.
     */
    int getGroupByCount();
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The groupBy at the given index.
     */
    java.lang.String getGroupBy(int index);
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the groupBy at the given index.
     */
    com.google.protobuf.ByteString
        getGroupByBytes(int index);
  }
  /**
   * <pre>
   * GroupByOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.GroupByOperator}
   */
  public static final class GroupByOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.GroupByOperator)
      GroupByOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GroupByOperator.newBuilder() to construct.
    private GroupByOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GroupByOperator() {
      groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GroupByOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GroupByOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                groupBy_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              groupBy_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          groupBy_ = groupBy_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_GroupByOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_GroupByOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder.class);
    }

    public static final int GROUP_BY_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList groupBy_;
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @return A list containing the groupBy.
     */
    public com.google.protobuf.ProtocolStringList
        getGroupByList() {
      return groupBy_;
    }
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @return The count of groupBy.
     */
    public int getGroupByCount() {
      return groupBy_.size();
    }
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The groupBy at the given index.
     */
    public java.lang.String getGroupBy(int index) {
      return groupBy_.get(index);
    }
    /**
     * <pre>
     * Groupby column
     * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the groupBy at the given index.
     */
    public com.google.protobuf.ByteString
        getGroupByBytes(int index) {
      return groupBy_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < groupBy_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, groupBy_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < groupBy_.size(); i++) {
          dataSize += computeStringSizeNoTag(groupBy_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getGroupByList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator) obj;

      if (!getGroupByList()
          .equals(other.getGroupByList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getGroupByCount() > 0) {
        hash = (37 * hash) + GROUP_BY_FIELD_NUMBER;
        hash = (53 * hash) + getGroupByList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * GroupByOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.GroupByOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.GroupByOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_GroupByOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_GroupByOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_GroupByOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          groupBy_ = groupBy_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.groupBy_ = groupBy_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.getDefaultInstance()) return this;
        if (!other.groupBy_.isEmpty()) {
          if (groupBy_.isEmpty()) {
            groupBy_ = other.groupBy_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureGroupByIsMutable();
            groupBy_.addAll(other.groupBy_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureGroupByIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          groupBy_ = new com.google.protobuf.LazyStringArrayList(groupBy_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @return A list containing the groupBy.
       */
      public com.google.protobuf.ProtocolStringList
          getGroupByList() {
        return groupBy_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @return The count of groupBy.
       */
      public int getGroupByCount() {
        return groupBy_.size();
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the element to return.
       * @return The groupBy at the given index.
       */
      public java.lang.String getGroupBy(int index) {
        return groupBy_.get(index);
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @param index The index of the value to return.
       * @return The bytes of the groupBy at the given index.
       */
      public com.google.protobuf.ByteString
          getGroupByBytes(int index) {
        return groupBy_.getByteString(index);
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @param index The index to set the value at.
       * @param value The groupBy to set.
       * @return This builder for chaining.
       */
      public Builder setGroupBy(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @param value The groupBy to add.
       * @return This builder for chaining.
       */
      public Builder addGroupBy(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @param values The groupBy to add.
       * @return This builder for chaining.
       */
      public Builder addAllGroupBy(
          java.lang.Iterable<java.lang.String> values) {
        ensureGroupByIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, groupBy_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearGroupBy() {
        groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Groupby column
       * &#64;inject_tag: json:"group_by" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>repeated string group_by = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes of the groupBy to add.
       * @return This builder for chaining.
       */
      public Builder addGroupByBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureGroupByIsMutable();
        groupBy_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.GroupByOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.GroupByOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GroupByOperator>
        PARSER = new com.google.protobuf.AbstractParser<GroupByOperator>() {
      @java.lang.Override
      public GroupByOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GroupByOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GroupByOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GroupByOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HavingOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.HavingOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * having code
     * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string having = 1 [(.validator.field) = { ... }</code>
     * @return The having.
     */
    java.lang.String getHaving();
    /**
     * <pre>
     * having code
     * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string having = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for having.
     */
    com.google.protobuf.ByteString
        getHavingBytes();
  }
  /**
   * <pre>
   * HavingOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.HavingOperator}
   */
  public static final class HavingOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.HavingOperator)
      HavingOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HavingOperator.newBuilder() to construct.
    private HavingOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HavingOperator() {
      having_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HavingOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HavingOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              having_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HavingOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HavingOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder.class);
    }

    public static final int HAVING_FIELD_NUMBER = 1;
    private volatile java.lang.Object having_;
    /**
     * <pre>
     * having code
     * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string having = 1 [(.validator.field) = { ... }</code>
     * @return The having.
     */
    @java.lang.Override
    public java.lang.String getHaving() {
      java.lang.Object ref = having_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        having_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * having code
     * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string having = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for having.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHavingBytes() {
      java.lang.Object ref = having_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        having_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getHavingBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, having_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getHavingBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, having_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator) obj;

      if (!getHaving()
          .equals(other.getHaving())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HAVING_FIELD_NUMBER;
      hash = (53 * hash) + getHaving().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * HavingOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.HavingOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.HavingOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HavingOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HavingOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        having_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HavingOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator(this);
        result.having_ = having_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.getDefaultInstance()) return this;
        if (!other.getHaving().isEmpty()) {
          having_ = other.having_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object having_ = "";
      /**
       * <pre>
       * having code
       * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string having = 1 [(.validator.field) = { ... }</code>
       * @return The having.
       */
      public java.lang.String getHaving() {
        java.lang.Object ref = having_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          having_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * having code
       * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string having = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for having.
       */
      public com.google.protobuf.ByteString
          getHavingBytes() {
        java.lang.Object ref = having_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          having_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * having code
       * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string having = 1 [(.validator.field) = { ... }</code>
       * @param value The having to set.
       * @return This builder for chaining.
       */
      public Builder setHaving(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        having_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * having code
       * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string having = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearHaving() {
        
        having_ = getDefaultInstance().getHaving();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * having code
       * &#64;inject_tag: json:"having" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string having = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for having to set.
       * @return This builder for chaining.
       */
      public Builder setHavingBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        having_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.HavingOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.HavingOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HavingOperator>
        PARSER = new com.google.protobuf.AbstractParser<HavingOperator>() {
      @java.lang.Override
      public HavingOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HavingOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HavingOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HavingOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConstOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ConstOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table = 1 [(.validator.field) = { ... }</code>
     * @return The table.
     */
    java.lang.String getTable();
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for table.
     */
    com.google.protobuf.ByteString
        getTableBytes();

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * ConstOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.ConstOperator}
   */
  public static final class ConstOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ConstOperator)
      ConstOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConstOperator.newBuilder() to construct.
    private ConstOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConstOperator() {
      table_ = "";
      column_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConstOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConstOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              table_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConstOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConstOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder.class);
    }

    public static final int TABLE_FIELD_NUMBER = 1;
    private volatile java.lang.Object table_;
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table = 1 [(.validator.field) = { ... }</code>
     * @return The table.
     */
    @java.lang.Override
    public java.lang.String getTable() {
      java.lang.Object ref = table_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        table_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for table.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableBytes() {
      java.lang.Object ref = table_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        table_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMN_FIELD_NUMBER = 2;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTableBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, table_);
      }
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(2, column_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTableBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, table_);
      }
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, column_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator) obj;

      if (!getTable()
          .equals(other.getTable())) return false;
      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TABLE_FIELD_NUMBER;
      hash = (53 * hash) + getTable().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ConstOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.ConstOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ConstOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConstOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConstOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        table_ = "";

        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConstOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator(this);
        int from_bitField0_ = bitField0_;
        result.table_ = table_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.getDefaultInstance()) return this;
        if (!other.getTable().isEmpty()) {
          table_ = other.table_;
          onChanged();
        }
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object table_ = "";
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table = 1 [(.validator.field) = { ... }</code>
       * @return The table.
       */
      public java.lang.String getTable() {
        java.lang.Object ref = table_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          table_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for table.
       */
      public com.google.protobuf.ByteString
          getTableBytes() {
        java.lang.Object ref = table_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          table_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table = 1 [(.validator.field) = { ... }</code>
       * @param value The table to set.
       * @return This builder for chaining.
       */
      public Builder setTable(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        table_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTable() {
        
        table_ = getDefaultInstance().getTable();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for table to set.
       * @return This builder for chaining.
       */
      public Builder setTableBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        table_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> columnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 2 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ConstOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.ConstOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConstOperator>
        PARSER = new com.google.protobuf.AbstractParser<ConstOperator>() {
      @java.lang.Override
      public ConstOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConstOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConstOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConstOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SourceOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.SourceOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The tableId.
     */
    java.lang.String getTableId();
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for tableId.
     */
    com.google.protobuf.ByteString
        getTableIdBytes();

    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    java.lang.String getTableAs();
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    com.google.protobuf.ByteString
        getTableAsBytes();

    /**
     * <pre>
     * distinct or all, oneof ''(empty string) 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The distinct.
     */
    java.lang.String getDistinct();
    /**
     * <pre>
     * distinct or all, oneof ''(empty string) 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for distinct.
     */
    com.google.protobuf.ByteString
        getDistinctBytes();

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index);

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getCustomColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getCustomColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    int getCustomColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getCustomColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getCustomColumnOrBuilder(
        int index);

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getTimeColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getTimeColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * SourceOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.SourceOperator}
   */
  public static final class SourceOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.SourceOperator)
      SourceOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SourceOperator.newBuilder() to construct.
    private SourceOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SourceOperator() {
      tableId_ = "";
      tableAs_ = "";
      distinct_ = "";
      column_ = java.util.Collections.emptyList();
      customColumn_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SourceOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SourceOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              tableId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              tableAs_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              distinct_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                customColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000002;
              }
              customColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          customColumn_ = java.util.Collections.unmodifiableList(customColumn_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SourceOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SourceOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder.class);
    }

    public static final int TABLE_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object tableId_;
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The tableId.
     */
    @java.lang.Override
    public java.lang.String getTableId() {
      java.lang.Object ref = tableId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for tableId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableIdBytes() {
      java.lang.Object ref = tableId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TABLE_AS_FIELD_NUMBER = 2;
    private volatile java.lang.Object tableAs_;
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    @java.lang.Override
    public java.lang.String getTableAs() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableAs_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableAsBytes() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableAs_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISTINCT_FIELD_NUMBER = 3;
    private volatile java.lang.Object distinct_;
    /**
     * <pre>
     * distinct or all, oneof ''(empty string) 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The distinct.
     */
    @java.lang.Override
    public java.lang.String getDistinct() {
      java.lang.Object ref = distinct_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        distinct_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * distinct or all, oneof ''(empty string) 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for distinct.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDistinctBytes() {
      java.lang.Object ref = distinct_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        distinct_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    public static final int CUSTOM_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> customColumn_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getCustomColumnList() {
      return customColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getCustomColumnOrBuilderList() {
      return customColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getCustomColumnCount() {
      return customColumn_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getCustomColumn(int index) {
      return customColumn_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getCustomColumnOrBuilder(
        int index) {
      return customColumn_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 6;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> timeColumn_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTableIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tableId_);
      }
      if (!getTableAsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tableAs_);
      }
      if (!getDistinctBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, distinct_);
      }
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(4, column_.get(i));
      }
      for (int i = 0; i < customColumn_.size(); i++) {
        output.writeMessage(5, customColumn_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(6, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTableIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tableId_);
      }
      if (!getTableAsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tableAs_);
      }
      if (!getDistinctBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, distinct_);
      }
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, column_.get(i));
      }
      for (int i = 0; i < customColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, customColumn_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator) obj;

      if (!getTableId()
          .equals(other.getTableId())) return false;
      if (!getTableAs()
          .equals(other.getTableAs())) return false;
      if (!getDistinct()
          .equals(other.getDistinct())) return false;
      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!getCustomColumnList()
          .equals(other.getCustomColumnList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TABLE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTableId().hashCode();
      hash = (37 * hash) + TABLE_AS_FIELD_NUMBER;
      hash = (53 * hash) + getTableAs().hashCode();
      hash = (37 * hash) + DISTINCT_FIELD_NUMBER;
      hash = (53 * hash) + getDistinct().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      if (getCustomColumnCount() > 0) {
        hash = (37 * hash) + CUSTOM_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getCustomColumnList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SourceOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.SourceOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.SourceOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SourceOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SourceOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
          getCustomColumnFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        tableId_ = "";

        tableAs_ = "";

        distinct_ = "";

        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        if (customColumnBuilder_ == null) {
          customColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          customColumnBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SourceOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator(this);
        int from_bitField0_ = bitField0_;
        result.tableId_ = tableId_;
        result.tableAs_ = tableAs_;
        result.distinct_ = distinct_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        if (customColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            customColumn_ = java.util.Collections.unmodifiableList(customColumn_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.customColumn_ = customColumn_;
        } else {
          result.customColumn_ = customColumnBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.getDefaultInstance()) return this;
        if (!other.getTableId().isEmpty()) {
          tableId_ = other.tableId_;
          onChanged();
        }
        if (!other.getTableAs().isEmpty()) {
          tableAs_ = other.tableAs_;
          onChanged();
        }
        if (!other.getDistinct().isEmpty()) {
          distinct_ = other.distinct_;
          onChanged();
        }
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        if (customColumnBuilder_ == null) {
          if (!other.customColumn_.isEmpty()) {
            if (customColumn_.isEmpty()) {
              customColumn_ = other.customColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCustomColumnIsMutable();
              customColumn_.addAll(other.customColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.customColumn_.isEmpty()) {
            if (customColumnBuilder_.isEmpty()) {
              customColumnBuilder_.dispose();
              customColumnBuilder_ = null;
              customColumn_ = other.customColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
              customColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCustomColumnFieldBuilder() : null;
            } else {
              customColumnBuilder_.addAllMessages(other.customColumn_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object tableId_ = "";
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @return The tableId.
       */
      public java.lang.String getTableId() {
        java.lang.Object ref = tableId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for tableId.
       */
      public com.google.protobuf.ByteString
          getTableIdBytes() {
        java.lang.Object ref = tableId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @param value The tableId to set.
       * @return This builder for chaining.
       */
      public Builder setTableId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableId() {
        
        tableId_ = getDefaultInstance().getTableId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableId to set.
       * @return This builder for chaining.
       */
      public Builder setTableIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tableAs_ = "";
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @return The tableAs.
       */
      public java.lang.String getTableAs() {
        java.lang.Object ref = tableAs_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableAs_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for tableAs.
       */
      public com.google.protobuf.ByteString
          getTableAsBytes() {
        java.lang.Object ref = tableAs_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableAs_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @param value The tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableAs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableAs() {
        
        tableAs_ = getDefaultInstance().getTableAs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableAs_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object distinct_ = "";
      /**
       * <pre>
       * distinct or all, oneof ''(empty string) 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @return The distinct.
       */
      public java.lang.String getDistinct() {
        java.lang.Object ref = distinct_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          distinct_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * distinct or all, oneof ''(empty string) 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for distinct.
       */
      public com.google.protobuf.ByteString
          getDistinctBytes() {
        java.lang.Object ref = distinct_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          distinct_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * distinct or all, oneof ''(empty string) 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @param value The distinct to set.
       * @return This builder for chaining.
       */
      public Builder setDistinct(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        distinct_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * distinct or all, oneof ''(empty string) 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearDistinct() {
        
        distinct_ = getDefaultInstance().getDistinct();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * distinct or all, oneof ''(empty string) 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for distinct to set.
       * @return This builder for chaining.
       */
      public Builder setDistinctBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        distinct_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> columnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> customColumn_ =
        java.util.Collections.emptyList();
      private void ensureCustomColumnIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          customColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(customColumn_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> customColumnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getCustomColumnList() {
        if (customColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(customColumn_);
        } else {
          return customColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getCustomColumnCount() {
        if (customColumnBuilder_ == null) {
          return customColumn_.size();
        } else {
          return customColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getCustomColumn(int index) {
        if (customColumnBuilder_ == null) {
          return customColumn_.get(index);
        } else {
          return customColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (customColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomColumnIsMutable();
          customColumn_.set(index, value);
          onChanged();
        } else {
          customColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          customColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (customColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomColumnIsMutable();
          customColumn_.add(value);
          onChanged();
        } else {
          customColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (customColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomColumnIsMutable();
          customColumn_.add(index, value);
          onChanged();
        } else {
          customColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.add(builderForValue.build());
          onChanged();
        } else {
          customColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          customColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllCustomColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, customColumn_);
          onChanged();
        } else {
          customColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearCustomColumn() {
        if (customColumnBuilder_ == null) {
          customColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          customColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeCustomColumn(int index) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.remove(index);
          onChanged();
        } else {
          customColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getCustomColumnBuilder(
          int index) {
        return getCustomColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getCustomColumnOrBuilder(
          int index) {
        if (customColumnBuilder_ == null) {
          return customColumn_.get(index);  } else {
          return customColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getCustomColumnOrBuilderList() {
        if (customColumnBuilder_ != null) {
          return customColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(customColumn_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addCustomColumnBuilder() {
        return getCustomColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addCustomColumnBuilder(
          int index) {
        return getCustomColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getCustomColumnBuilderList() {
        return getCustomColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getCustomColumnFieldBuilder() {
        if (customColumnBuilder_ == null) {
          customColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  customColumn_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          customColumn_ = null;
        }
        return customColumnBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.SourceOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.SourceOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SourceOperator>
        PARSER = new com.google.protobuf.AbstractParser<SourceOperator>() {
      @java.lang.Override
      public SourceOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SourceOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SourceOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SourceOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DimensionOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.DimensionOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The tableId.
     */
    java.lang.String getTableId();
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for tableId.
     */
    com.google.protobuf.ByteString
        getTableIdBytes();

    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    java.lang.String getTableAs();
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    com.google.protobuf.ByteString
        getTableAsBytes();

    /**
     * <pre>
     * distinct or all, oneof 'all' 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The distinct.
     */
    java.lang.String getDistinct();
    /**
     * <pre>
     * distinct or all, oneof 'all' 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for distinct.
     */
    com.google.protobuf.ByteString
        getDistinctBytes();

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index);

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getCustomColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getCustomColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    int getCustomColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getCustomColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getCustomColumnOrBuilder(
        int index);

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     * @return Whether the timeColumn field is set.
     */
    boolean hasTimeColumn();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     * @return The timeColumn.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getTimeColumn();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getTimeColumnOrBuilder();
  }
  /**
   * <pre>
   * DimensionOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.DimensionOperator}
   */
  public static final class DimensionOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.DimensionOperator)
      DimensionOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DimensionOperator.newBuilder() to construct.
    private DimensionOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DimensionOperator() {
      tableId_ = "";
      tableAs_ = "";
      distinct_ = "";
      column_ = java.util.Collections.emptyList();
      customColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DimensionOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DimensionOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              tableId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              tableAs_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              distinct_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                customColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000002;
              }
              customColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            case 50: {
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder subBuilder = null;
              if (timeColumn_ != null) {
                subBuilder = timeColumn_.toBuilder();
              }
              timeColumn_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timeColumn_);
                timeColumn_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          customColumn_ = java.util.Collections.unmodifiableList(customColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DimensionOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DimensionOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder.class);
    }

    public static final int TABLE_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object tableId_;
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The tableId.
     */
    @java.lang.Override
    public java.lang.String getTableId() {
      java.lang.Object ref = tableId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * tableid
     * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string table_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for tableId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableIdBytes() {
      java.lang.Object ref = tableId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TABLE_AS_FIELD_NUMBER = 2;
    private volatile java.lang.Object tableAs_;
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    @java.lang.Override
    public java.lang.String getTableAs() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableAs_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableAsBytes() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableAs_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISTINCT_FIELD_NUMBER = 3;
    private volatile java.lang.Object distinct_;
    /**
     * <pre>
     * distinct or all, oneof 'all' 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The distinct.
     */
    @java.lang.Override
    public java.lang.String getDistinct() {
      java.lang.Object ref = distinct_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        distinct_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * distinct or all, oneof 'all' 'distinct'
     * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string distinct = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for distinct.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDistinctBytes() {
      java.lang.Object ref = distinct_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        distinct_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    public static final int CUSTOM_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> customColumn_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getCustomColumnList() {
      return customColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getCustomColumnOrBuilderList() {
      return customColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getCustomColumnCount() {
      return customColumn_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getCustomColumn(int index) {
      return customColumn_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getCustomColumnOrBuilder(
        int index) {
      return customColumn_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 6;
    private com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs timeColumn_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     * @return Whether the timeColumn field is set.
     */
    @java.lang.Override
    public boolean hasTimeColumn() {
      return timeColumn_ != null;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     * @return The timeColumn.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getTimeColumn() {
      return timeColumn_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance() : timeColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"time_column" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getTimeColumnOrBuilder() {
      return getTimeColumn();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTableIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tableId_);
      }
      if (!getTableAsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tableAs_);
      }
      if (!getDistinctBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, distinct_);
      }
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(4, column_.get(i));
      }
      for (int i = 0; i < customColumn_.size(); i++) {
        output.writeMessage(5, customColumn_.get(i));
      }
      if (timeColumn_ != null) {
        output.writeMessage(6, getTimeColumn());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTableIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tableId_);
      }
      if (!getTableAsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tableAs_);
      }
      if (!getDistinctBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, distinct_);
      }
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, column_.get(i));
      }
      for (int i = 0; i < customColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, customColumn_.get(i));
      }
      if (timeColumn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getTimeColumn());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator) obj;

      if (!getTableId()
          .equals(other.getTableId())) return false;
      if (!getTableAs()
          .equals(other.getTableAs())) return false;
      if (!getDistinct()
          .equals(other.getDistinct())) return false;
      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!getCustomColumnList()
          .equals(other.getCustomColumnList())) return false;
      if (hasTimeColumn() != other.hasTimeColumn()) return false;
      if (hasTimeColumn()) {
        if (!getTimeColumn()
            .equals(other.getTimeColumn())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TABLE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTableId().hashCode();
      hash = (37 * hash) + TABLE_AS_FIELD_NUMBER;
      hash = (53 * hash) + getTableAs().hashCode();
      hash = (37 * hash) + DISTINCT_FIELD_NUMBER;
      hash = (53 * hash) + getDistinct().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      if (getCustomColumnCount() > 0) {
        hash = (37 * hash) + CUSTOM_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getCustomColumnList().hashCode();
      }
      if (hasTimeColumn()) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumn().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * DimensionOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.DimensionOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.DimensionOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DimensionOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DimensionOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
          getCustomColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        tableId_ = "";

        tableAs_ = "";

        distinct_ = "";

        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        if (customColumnBuilder_ == null) {
          customColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          customColumnBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = null;
        } else {
          timeColumn_ = null;
          timeColumnBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_DimensionOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator(this);
        int from_bitField0_ = bitField0_;
        result.tableId_ = tableId_;
        result.tableAs_ = tableAs_;
        result.distinct_ = distinct_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        if (customColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            customColumn_ = java.util.Collections.unmodifiableList(customColumn_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.customColumn_ = customColumn_;
        } else {
          result.customColumn_ = customColumnBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.getDefaultInstance()) return this;
        if (!other.getTableId().isEmpty()) {
          tableId_ = other.tableId_;
          onChanged();
        }
        if (!other.getTableAs().isEmpty()) {
          tableAs_ = other.tableAs_;
          onChanged();
        }
        if (!other.getDistinct().isEmpty()) {
          distinct_ = other.distinct_;
          onChanged();
        }
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        if (customColumnBuilder_ == null) {
          if (!other.customColumn_.isEmpty()) {
            if (customColumn_.isEmpty()) {
              customColumn_ = other.customColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCustomColumnIsMutable();
              customColumn_.addAll(other.customColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.customColumn_.isEmpty()) {
            if (customColumnBuilder_.isEmpty()) {
              customColumnBuilder_.dispose();
              customColumnBuilder_ = null;
              customColumn_ = other.customColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
              customColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCustomColumnFieldBuilder() : null;
            } else {
              customColumnBuilder_.addAllMessages(other.customColumn_);
            }
          }
        }
        if (other.hasTimeColumn()) {
          mergeTimeColumn(other.getTimeColumn());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object tableId_ = "";
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @return The tableId.
       */
      public java.lang.String getTableId() {
        java.lang.Object ref = tableId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for tableId.
       */
      public com.google.protobuf.ByteString
          getTableIdBytes() {
        java.lang.Object ref = tableId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @param value The tableId to set.
       * @return This builder for chaining.
       */
      public Builder setTableId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableId() {
        
        tableId_ = getDefaultInstance().getTableId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * tableid
       * &#64;inject_tag: json:"table_id" default:"" binding:"len=20" required:"false" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string table_id = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableId to set.
       * @return This builder for chaining.
       */
      public Builder setTableIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tableAs_ = "";
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @return The tableAs.
       */
      public java.lang.String getTableAs() {
        java.lang.Object ref = tableAs_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableAs_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for tableAs.
       */
      public com.google.protobuf.ByteString
          getTableAsBytes() {
        java.lang.Object ref = tableAs_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableAs_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @param value The tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableAs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableAs() {
        
        tableAs_ = getDefaultInstance().getTableAs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableAs_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object distinct_ = "";
      /**
       * <pre>
       * distinct or all, oneof 'all' 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @return The distinct.
       */
      public java.lang.String getDistinct() {
        java.lang.Object ref = distinct_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          distinct_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * distinct or all, oneof 'all' 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for distinct.
       */
      public com.google.protobuf.ByteString
          getDistinctBytes() {
        java.lang.Object ref = distinct_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          distinct_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * distinct or all, oneof 'all' 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @param value The distinct to set.
       * @return This builder for chaining.
       */
      public Builder setDistinct(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        distinct_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * distinct or all, oneof 'all' 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearDistinct() {
        
        distinct_ = getDefaultInstance().getDistinct();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * distinct or all, oneof 'all' 'distinct'
       * &#64;inject_tag: json:"distinct" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string distinct = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for distinct to set.
       * @return This builder for chaining.
       */
      public Builder setDistinctBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        distinct_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> columnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> customColumn_ =
        java.util.Collections.emptyList();
      private void ensureCustomColumnIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          customColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(customColumn_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> customColumnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getCustomColumnList() {
        if (customColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(customColumn_);
        } else {
          return customColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getCustomColumnCount() {
        if (customColumnBuilder_ == null) {
          return customColumn_.size();
        } else {
          return customColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getCustomColumn(int index) {
        if (customColumnBuilder_ == null) {
          return customColumn_.get(index);
        } else {
          return customColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (customColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomColumnIsMutable();
          customColumn_.set(index, value);
          onChanged();
        } else {
          customColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          customColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (customColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomColumnIsMutable();
          customColumn_.add(value);
          onChanged();
        } else {
          customColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (customColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomColumnIsMutable();
          customColumn_.add(index, value);
          onChanged();
        } else {
          customColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.add(builderForValue.build());
          onChanged();
        } else {
          customColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addCustomColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          customColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllCustomColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, customColumn_);
          onChanged();
        } else {
          customColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearCustomColumn() {
        if (customColumnBuilder_ == null) {
          customColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          customColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeCustomColumn(int index) {
        if (customColumnBuilder_ == null) {
          ensureCustomColumnIsMutable();
          customColumn_.remove(index);
          onChanged();
        } else {
          customColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getCustomColumnBuilder(
          int index) {
        return getCustomColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getCustomColumnOrBuilder(
          int index) {
        if (customColumnBuilder_ == null) {
          return customColumn_.get(index);  } else {
          return customColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getCustomColumnOrBuilderList() {
        if (customColumnBuilder_ != null) {
          return customColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(customColumn_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addCustomColumnBuilder() {
        return getCustomColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addCustomColumnBuilder(
          int index) {
        return getCustomColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"custom_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs custom_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getCustomColumnBuilderList() {
        return getCustomColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getCustomColumnFieldBuilder() {
        if (customColumnBuilder_ == null) {
          customColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  customColumn_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          customColumn_ = null;
        }
        return customColumnBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs timeColumn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> timeColumnBuilder_;
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       * @return Whether the timeColumn field is set.
       */
      public boolean hasTimeColumn() {
        return timeColumnBuilder_ != null || timeColumn_ != null;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       * @return The timeColumn.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getTimeColumn() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance() : timeColumn_;
        } else {
          return timeColumnBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timeColumn_ = value;
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = builderForValue.build();
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder mergeTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (timeColumnBuilder_ == null) {
          if (timeColumn_ != null) {
            timeColumn_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.newBuilder(timeColumn_).mergeFrom(value).buildPartial();
          } else {
            timeColumn_ = value;
          }
          onChanged();
        } else {
          timeColumnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = null;
          onChanged();
        } else {
          timeColumn_ = null;
          timeColumnBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getTimeColumnBuilder() {
        
        onChanged();
        return getTimeColumnFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getTimeColumnOrBuilder() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilder();
        } else {
          return timeColumn_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance() : timeColumn_;
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"time_column" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ColumnAs time_column = 6 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  getTimeColumn(),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.DimensionOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.DimensionOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DimensionOperator>
        PARSER = new com.google.protobuf.AbstractParser<DimensionOperator>() {
      @java.lang.Override
      public DimensionOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DimensionOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DimensionOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DimensionOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExceptOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ExceptOperator)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * ExceptOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.ExceptOperator}
   */
  public static final class ExceptOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ExceptOperator)
      ExceptOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExceptOperator.newBuilder() to construct.
    private ExceptOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExceptOperator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExceptOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExceptOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ExceptOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ExceptOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExceptOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.ExceptOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ExceptOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ExceptOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ExceptOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ExceptOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ExceptOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.ExceptOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExceptOperator>
        PARSER = new com.google.protobuf.AbstractParser<ExceptOperator>() {
      @java.lang.Override
      public ExceptOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExceptOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExceptOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExceptOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IntersectOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.IntersectOperator)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * IntersectOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.IntersectOperator}
   */
  public static final class IntersectOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.IntersectOperator)
      IntersectOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntersectOperator.newBuilder() to construct.
    private IntersectOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntersectOperator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntersectOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntersectOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_IntersectOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_IntersectOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IntersectOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.IntersectOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.IntersectOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_IntersectOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_IntersectOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_IntersectOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.IntersectOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.IntersectOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntersectOperator>
        PARSER = new com.google.protobuf.AbstractParser<IntersectOperator>() {
      @java.lang.Override
      public IntersectOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntersectOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntersectOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntersectOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FilterOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FilterOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Where eg: a.id = 10
     * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string where = 1 [(.validator.field) = { ... }</code>
     * @return The where.
     */
    java.lang.String getWhere();
    /**
     * <pre>
     * Where eg: a.id = 10
     * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string where = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for where.
     */
    com.google.protobuf.ByteString
        getWhereBytes();

    /**
     * <pre>
     * in: this is columnname
     * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string in = 2 [(.validator.field) = { ... }</code>
     * @return The in.
     */
    java.lang.String getIn();
    /**
     * <pre>
     * in: this is columnname
     * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string in = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for in.
     */
    com.google.protobuf.ByteString
        getInBytes();

    /**
     * <pre>
     * Exists: this is columnname
     * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string exists = 3 [(.validator.field) = { ... }</code>
     * @return The exists.
     */
    java.lang.String getExists();
    /**
     * <pre>
     * Exists: this is columnname
     * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string exists = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for exists.
     */
    com.google.protobuf.ByteString
        getExistsBytes();

    /**
     * <pre>
     * expression: if upstreamright is null.  eg: "1, 2, 3"
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 4 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <pre>
     * expression: if upstreamright is null.  eg: "1, 2, 3"
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();
  }
  /**
   * <pre>
   * FilterOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.FilterOperator}
   */
  public static final class FilterOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FilterOperator)
      FilterOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FilterOperator.newBuilder() to construct.
    private FilterOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FilterOperator() {
      where_ = "";
      in_ = "";
      exists_ = "";
      expression_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FilterOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FilterOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              where_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              in_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              exists_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              expression_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FilterOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FilterOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder.class);
    }

    public static final int WHERE_FIELD_NUMBER = 1;
    private volatile java.lang.Object where_;
    /**
     * <pre>
     * Where eg: a.id = 10
     * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string where = 1 [(.validator.field) = { ... }</code>
     * @return The where.
     */
    @java.lang.Override
    public java.lang.String getWhere() {
      java.lang.Object ref = where_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        where_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Where eg: a.id = 10
     * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string where = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for where.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getWhereBytes() {
      java.lang.Object ref = where_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        where_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IN_FIELD_NUMBER = 2;
    private volatile java.lang.Object in_;
    /**
     * <pre>
     * in: this is columnname
     * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string in = 2 [(.validator.field) = { ... }</code>
     * @return The in.
     */
    @java.lang.Override
    public java.lang.String getIn() {
      java.lang.Object ref = in_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        in_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * in: this is columnname
     * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string in = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for in.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInBytes() {
      java.lang.Object ref = in_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        in_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXISTS_FIELD_NUMBER = 3;
    private volatile java.lang.Object exists_;
    /**
     * <pre>
     * Exists: this is columnname
     * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string exists = 3 [(.validator.field) = { ... }</code>
     * @return The exists.
     */
    @java.lang.Override
    public java.lang.String getExists() {
      java.lang.Object ref = exists_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        exists_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Exists: this is columnname
     * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string exists = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for exists.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExistsBytes() {
      java.lang.Object ref = exists_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        exists_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 4;
    private volatile java.lang.Object expression_;
    /**
     * <pre>
     * expression: if upstreamright is null.  eg: "1, 2, 3"
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 4 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * expression: if upstreamright is null.  eg: "1, 2, 3"
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getWhereBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, where_);
      }
      if (!getInBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, in_);
      }
      if (!getExistsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, exists_);
      }
      if (!getExpressionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, expression_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getWhereBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, where_);
      }
      if (!getInBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, in_);
      }
      if (!getExistsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, exists_);
      }
      if (!getExpressionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, expression_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator) obj;

      if (!getWhere()
          .equals(other.getWhere())) return false;
      if (!getIn()
          .equals(other.getIn())) return false;
      if (!getExists()
          .equals(other.getExists())) return false;
      if (!getExpression()
          .equals(other.getExpression())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WHERE_FIELD_NUMBER;
      hash = (53 * hash) + getWhere().hashCode();
      hash = (37 * hash) + IN_FIELD_NUMBER;
      hash = (53 * hash) + getIn().hashCode();
      hash = (37 * hash) + EXISTS_FIELD_NUMBER;
      hash = (53 * hash) + getExists().hashCode();
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FilterOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.FilterOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FilterOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FilterOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FilterOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        where_ = "";

        in_ = "";

        exists_ = "";

        expression_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FilterOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator(this);
        result.where_ = where_;
        result.in_ = in_;
        result.exists_ = exists_;
        result.expression_ = expression_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.getDefaultInstance()) return this;
        if (!other.getWhere().isEmpty()) {
          where_ = other.where_;
          onChanged();
        }
        if (!other.getIn().isEmpty()) {
          in_ = other.in_;
          onChanged();
        }
        if (!other.getExists().isEmpty()) {
          exists_ = other.exists_;
          onChanged();
        }
        if (!other.getExpression().isEmpty()) {
          expression_ = other.expression_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object where_ = "";
      /**
       * <pre>
       * Where eg: a.id = 10
       * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string where = 1 [(.validator.field) = { ... }</code>
       * @return The where.
       */
      public java.lang.String getWhere() {
        java.lang.Object ref = where_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          where_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Where eg: a.id = 10
       * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string where = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for where.
       */
      public com.google.protobuf.ByteString
          getWhereBytes() {
        java.lang.Object ref = where_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          where_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Where eg: a.id = 10
       * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string where = 1 [(.validator.field) = { ... }</code>
       * @param value The where to set.
       * @return This builder for chaining.
       */
      public Builder setWhere(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        where_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where eg: a.id = 10
       * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string where = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearWhere() {
        
        where_ = getDefaultInstance().getWhere();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where eg: a.id = 10
       * &#64;inject_tag: json:"where" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string where = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for where to set.
       * @return This builder for chaining.
       */
      public Builder setWhereBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        where_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object in_ = "";
      /**
       * <pre>
       * in: this is columnname
       * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string in = 2 [(.validator.field) = { ... }</code>
       * @return The in.
       */
      public java.lang.String getIn() {
        java.lang.Object ref = in_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          in_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * in: this is columnname
       * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string in = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for in.
       */
      public com.google.protobuf.ByteString
          getInBytes() {
        java.lang.Object ref = in_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          in_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * in: this is columnname
       * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string in = 2 [(.validator.field) = { ... }</code>
       * @param value The in to set.
       * @return This builder for chaining.
       */
      public Builder setIn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        in_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * in: this is columnname
       * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string in = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearIn() {
        
        in_ = getDefaultInstance().getIn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * in: this is columnname
       * &#64;inject_tag: json:"in" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string in = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for in to set.
       * @return This builder for chaining.
       */
      public Builder setInBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        in_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object exists_ = "";
      /**
       * <pre>
       * Exists: this is columnname
       * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string exists = 3 [(.validator.field) = { ... }</code>
       * @return The exists.
       */
      public java.lang.String getExists() {
        java.lang.Object ref = exists_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          exists_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Exists: this is columnname
       * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string exists = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for exists.
       */
      public com.google.protobuf.ByteString
          getExistsBytes() {
        java.lang.Object ref = exists_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          exists_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Exists: this is columnname
       * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string exists = 3 [(.validator.field) = { ... }</code>
       * @param value The exists to set.
       * @return This builder for chaining.
       */
      public Builder setExists(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        exists_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exists: this is columnname
       * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string exists = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExists() {
        
        exists_ = getDefaultInstance().getExists();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exists: this is columnname
       * &#64;inject_tag: json:"exists" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string exists = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for exists to set.
       * @return This builder for chaining.
       */
      public Builder setExistsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        exists_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object expression_ = "";
      /**
       * <pre>
       * expression: if upstreamright is null.  eg: "1, 2, 3"
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 4 [(.validator.field) = { ... }</code>
       * @return The expression.
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * expression: if upstreamright is null.  eg: "1, 2, 3"
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 4 [(.validator.field) = { ... }</code>
       * @return The bytes for expression.
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * expression: if upstreamright is null.  eg: "1, 2, 3"
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 4 [(.validator.field) = { ... }</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * expression: if upstreamright is null.  eg: "1, 2, 3"
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 4 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * expression: if upstreamright is null.  eg: "1, 2, 3"
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 4 [(.validator.field) = { ... }</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        expression_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FilterOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.FilterOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FilterOperator>
        PARSER = new com.google.protobuf.AbstractParser<FilterOperator>() {
      @java.lang.Override
      public FilterOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FilterOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FilterOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FilterOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JoinOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.JoinOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
     * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string join = 1 [(.validator.field) = { ... }</code>
     * @return The join.
     */
    java.lang.String getJoin();
    /**
     * <pre>
     * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
     * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string join = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for join.
     */
    com.google.protobuf.ByteString
        getJoinBytes();

    /**
     * <pre>
     * Expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 2 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <pre>
     * Expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();

    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    java.lang.String getTableAs();
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    com.google.protobuf.ByteString
        getTableAsBytes();

    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
     * @return The tableAsRight.
     */
    java.lang.String getTableAsRight();
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAsRight.
     */
    com.google.protobuf.ByteString
        getTableAsRightBytes();

    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 5 [(.validator.field) = { ... }</code>
     * @return The args.
     */
    java.lang.String getArgs();
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for args.
     */
    com.google.protobuf.ByteString
        getArgsBytes();

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index);

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getGenerateColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getGenerateColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    int getGenerateColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getGenerateColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getGenerateColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * JoinOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.JoinOperator}
   */
  public static final class JoinOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.JoinOperator)
      JoinOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use JoinOperator.newBuilder() to construct.
    private JoinOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private JoinOperator() {
      join_ = "";
      expression_ = "";
      tableAs_ = "";
      tableAsRight_ = "";
      args_ = "";
      column_ = java.util.Collections.emptyList();
      generateColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new JoinOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private JoinOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              join_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              expression_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              tableAs_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              tableAsRight_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              args_ = s;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                generateColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000002;
              }
              generateColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          generateColumn_ = java.util.Collections.unmodifiableList(generateColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_JoinOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_JoinOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder.class);
    }

    public static final int JOIN_FIELD_NUMBER = 1;
    private volatile java.lang.Object join_;
    /**
     * <pre>
     * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
     * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string join = 1 [(.validator.field) = { ... }</code>
     * @return The join.
     */
    @java.lang.Override
    public java.lang.String getJoin() {
      java.lang.Object ref = join_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        join_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
     * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string join = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for join.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getJoinBytes() {
      java.lang.Object ref = join_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        join_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    private volatile java.lang.Object expression_;
    /**
     * <pre>
     * Expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 2 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TABLE_AS_FIELD_NUMBER = 3;
    private volatile java.lang.Object tableAs_;
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    @java.lang.Override
    public java.lang.String getTableAs() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableAs_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableAsBytes() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableAs_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TABLE_AS_RIGHT_FIELD_NUMBER = 4;
    private volatile java.lang.Object tableAsRight_;
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
     * @return The tableAsRight.
     */
    @java.lang.Override
    public java.lang.String getTableAsRight() {
      java.lang.Object ref = tableAsRight_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableAsRight_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAsRight.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableAsRightBytes() {
      java.lang.Object ref = tableAsRight_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableAsRight_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGS_FIELD_NUMBER = 5;
    private volatile java.lang.Object args_;
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 5 [(.validator.field) = { ... }</code>
     * @return The args.
     */
    @java.lang.Override
    public java.lang.String getArgs() {
      java.lang.Object ref = args_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        args_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for args.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getArgsBytes() {
      java.lang.Object ref = args_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        args_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMN_FIELD_NUMBER = 6;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    public static final int GENERATE_COLUMN_FIELD_NUMBER = 7;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> generateColumn_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getGenerateColumnList() {
      return generateColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getGenerateColumnOrBuilderList() {
      return generateColumn_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getGenerateColumnCount() {
      return generateColumn_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getGenerateColumn(int index) {
      return generateColumn_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getGenerateColumnOrBuilder(
        int index) {
      return generateColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getJoinBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, join_);
      }
      if (!getExpressionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, expression_);
      }
      if (!getTableAsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, tableAs_);
      }
      if (!getTableAsRightBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, tableAsRight_);
      }
      if (!getArgsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, args_);
      }
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(6, column_.get(i));
      }
      for (int i = 0; i < generateColumn_.size(); i++) {
        output.writeMessage(7, generateColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getJoinBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, join_);
      }
      if (!getExpressionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, expression_);
      }
      if (!getTableAsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, tableAs_);
      }
      if (!getTableAsRightBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, tableAsRight_);
      }
      if (!getArgsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, args_);
      }
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, column_.get(i));
      }
      for (int i = 0; i < generateColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, generateColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator) obj;

      if (!getJoin()
          .equals(other.getJoin())) return false;
      if (!getExpression()
          .equals(other.getExpression())) return false;
      if (!getTableAs()
          .equals(other.getTableAs())) return false;
      if (!getTableAsRight()
          .equals(other.getTableAsRight())) return false;
      if (!getArgs()
          .equals(other.getArgs())) return false;
      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!getGenerateColumnList()
          .equals(other.getGenerateColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + JOIN_FIELD_NUMBER;
      hash = (53 * hash) + getJoin().hashCode();
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
      hash = (37 * hash) + TABLE_AS_FIELD_NUMBER;
      hash = (53 * hash) + getTableAs().hashCode();
      hash = (37 * hash) + TABLE_AS_RIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getTableAsRight().hashCode();
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgs().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      if (getGenerateColumnCount() > 0) {
        hash = (37 * hash) + GENERATE_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getGenerateColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * JoinOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.JoinOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.JoinOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_JoinOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_JoinOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
          getGenerateColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        join_ = "";

        expression_ = "";

        tableAs_ = "";

        tableAsRight_ = "";

        args_ = "";

        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        if (generateColumnBuilder_ == null) {
          generateColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          generateColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_JoinOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator(this);
        int from_bitField0_ = bitField0_;
        result.join_ = join_;
        result.expression_ = expression_;
        result.tableAs_ = tableAs_;
        result.tableAsRight_ = tableAsRight_;
        result.args_ = args_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        if (generateColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            generateColumn_ = java.util.Collections.unmodifiableList(generateColumn_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.generateColumn_ = generateColumn_;
        } else {
          result.generateColumn_ = generateColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.getDefaultInstance()) return this;
        if (!other.getJoin().isEmpty()) {
          join_ = other.join_;
          onChanged();
        }
        if (!other.getExpression().isEmpty()) {
          expression_ = other.expression_;
          onChanged();
        }
        if (!other.getTableAs().isEmpty()) {
          tableAs_ = other.tableAs_;
          onChanged();
        }
        if (!other.getTableAsRight().isEmpty()) {
          tableAsRight_ = other.tableAsRight_;
          onChanged();
        }
        if (!other.getArgs().isEmpty()) {
          args_ = other.args_;
          onChanged();
        }
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        if (generateColumnBuilder_ == null) {
          if (!other.generateColumn_.isEmpty()) {
            if (generateColumn_.isEmpty()) {
              generateColumn_ = other.generateColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureGenerateColumnIsMutable();
              generateColumn_.addAll(other.generateColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.generateColumn_.isEmpty()) {
            if (generateColumnBuilder_.isEmpty()) {
              generateColumnBuilder_.dispose();
              generateColumnBuilder_ = null;
              generateColumn_ = other.generateColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
              generateColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getGenerateColumnFieldBuilder() : null;
            } else {
              generateColumnBuilder_.addAllMessages(other.generateColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object join_ = "";
      /**
       * <pre>
       * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
       * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string join = 1 [(.validator.field) = { ... }</code>
       * @return The join.
       */
      public java.lang.String getJoin() {
        java.lang.Object ref = join_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          join_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
       * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string join = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for join.
       */
      public com.google.protobuf.ByteString
          getJoinBytes() {
        java.lang.Object ref = join_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          join_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
       * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string join = 1 [(.validator.field) = { ... }</code>
       * @param value The join to set.
       * @return This builder for chaining.
       */
      public Builder setJoin(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        join_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
       * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string join = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearJoin() {
        
        join_ = getDefaultInstance().getJoin();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Join oneof "JOIN" "LEFT JOIN" "RIGHT JOIN" "FULL OUTER JOIN" "CROSS JOIN" "INTERVAL JOIN"
       * &#64;inject_tag: json:"join" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string join = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for join to set.
       * @return This builder for chaining.
       */
      public Builder setJoinBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        join_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object expression_ = "";
      /**
       * <pre>
       * Expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 2 [(.validator.field) = { ... }</code>
       * @return The expression.
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for expression.
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 2 [(.validator.field) = { ... }</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        expression_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tableAs_ = "";
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @return The tableAs.
       */
      public java.lang.String getTableAs() {
        java.lang.Object ref = tableAs_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableAs_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for tableAs.
       */
      public com.google.protobuf.ByteString
          getTableAsBytes() {
        java.lang.Object ref = tableAs_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableAs_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @param value The tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableAs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableAs() {
        
        tableAs_ = getDefaultInstance().getTableAs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableAs_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tableAsRight_ = "";
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
       * @return The tableAsRight.
       */
      public java.lang.String getTableAsRight() {
        java.lang.Object ref = tableAsRight_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableAsRight_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
       * @return The bytes for tableAsRight.
       */
      public com.google.protobuf.ByteString
          getTableAsRightBytes() {
        java.lang.Object ref = tableAsRight_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableAsRight_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
       * @param value The tableAsRight to set.
       * @return This builder for chaining.
       */
      public Builder setTableAsRight(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableAsRight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableAsRight() {
        
        tableAsRight_ = getDefaultInstance().getTableAsRight();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as_right" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as_right = 4 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableAsRight to set.
       * @return This builder for chaining.
       */
      public Builder setTableAsRightBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableAsRight_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object args_ = "";
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 5 [(.validator.field) = { ... }</code>
       * @return The args.
       */
      public java.lang.String getArgs() {
        java.lang.Object ref = args_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          args_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 5 [(.validator.field) = { ... }</code>
       * @return The bytes for args.
       */
      public com.google.protobuf.ByteString
          getArgsBytes() {
        java.lang.Object ref = args_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          args_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 5 [(.validator.field) = { ... }</code>
       * @param value The args to set.
       * @return This builder for chaining.
       */
      public Builder setArgs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        args_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 5 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearArgs() {
        
        args_ = getDefaultInstance().getArgs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 5 [(.validator.field) = { ... }</code>
       * @param value The bytes for args to set.
       * @return This builder for chaining.
       */
      public Builder setArgsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        args_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> columnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 6 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> generateColumn_ =
        java.util.Collections.emptyList();
      private void ensureGenerateColumnIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          generateColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(generateColumn_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> generateColumnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getGenerateColumnList() {
        if (generateColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(generateColumn_);
        } else {
          return generateColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public int getGenerateColumnCount() {
        if (generateColumnBuilder_ == null) {
          return generateColumn_.size();
        } else {
          return generateColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getGenerateColumn(int index) {
        if (generateColumnBuilder_ == null) {
          return generateColumn_.get(index);
        } else {
          return generateColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder setGenerateColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (generateColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenerateColumnIsMutable();
          generateColumn_.set(index, value);
          onChanged();
        } else {
          generateColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder setGenerateColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (generateColumnBuilder_ == null) {
          ensureGenerateColumnIsMutable();
          generateColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          generateColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder addGenerateColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (generateColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenerateColumnIsMutable();
          generateColumn_.add(value);
          onChanged();
        } else {
          generateColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder addGenerateColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (generateColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenerateColumnIsMutable();
          generateColumn_.add(index, value);
          onChanged();
        } else {
          generateColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder addGenerateColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (generateColumnBuilder_ == null) {
          ensureGenerateColumnIsMutable();
          generateColumn_.add(builderForValue.build());
          onChanged();
        } else {
          generateColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder addGenerateColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (generateColumnBuilder_ == null) {
          ensureGenerateColumnIsMutable();
          generateColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          generateColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder addAllGenerateColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (generateColumnBuilder_ == null) {
          ensureGenerateColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, generateColumn_);
          onChanged();
        } else {
          generateColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder clearGenerateColumn() {
        if (generateColumnBuilder_ == null) {
          generateColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          generateColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public Builder removeGenerateColumn(int index) {
        if (generateColumnBuilder_ == null) {
          ensureGenerateColumnIsMutable();
          generateColumn_.remove(index);
          onChanged();
        } else {
          generateColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getGenerateColumnBuilder(
          int index) {
        return getGenerateColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getGenerateColumnOrBuilder(
          int index) {
        if (generateColumnBuilder_ == null) {
          return generateColumn_.get(index);  } else {
          return generateColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getGenerateColumnOrBuilderList() {
        if (generateColumnBuilder_ != null) {
          return generateColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(generateColumn_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addGenerateColumnBuilder() {
        return getGenerateColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addGenerateColumnBuilder(
          int index) {
        return getGenerateColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"generate_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs generate_column = 7 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getGenerateColumnBuilderList() {
        return getGenerateColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getGenerateColumnFieldBuilder() {
        if (generateColumnBuilder_ == null) {
          generateColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  generateColumn_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          generateColumn_ = null;
        }
        return generateColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.JoinOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.JoinOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<JoinOperator>
        PARSER = new com.google.protobuf.AbstractParser<JoinOperator>() {
      @java.lang.Override
      public JoinOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JoinOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<JoinOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<JoinOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UDTFOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.UDTFOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The udfId.
     */
    java.lang.String getUdfId();
    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for udfId.
     */
    com.google.protobuf.ByteString
        getUdfIdBytes();

    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The args.
     */
    java.lang.String getArgs();
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for args.
     */
    com.google.protobuf.ByteString
        getArgsBytes();

    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    java.lang.String getTableAs();
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    com.google.protobuf.ByteString
        getTableAsBytes();

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index);

    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getSelectColumnList();
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getSelectColumn(int index);
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    int getSelectColumnCount();
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getSelectColumnOrBuilderList();
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getSelectColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * UDTFOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.UDTFOperator}
   */
  public static final class UDTFOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.UDTFOperator)
      UDTFOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UDTFOperator.newBuilder() to construct.
    private UDTFOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UDTFOperator() {
      udfId_ = "";
      args_ = "";
      tableAs_ = "";
      column_ = java.util.Collections.emptyList();
      selectColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UDTFOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UDTFOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              udfId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              args_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              tableAs_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                selectColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000002;
              }
              selectColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          selectColumn_ = java.util.Collections.unmodifiableList(selectColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTFOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTFOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder.class);
    }

    public static final int UDF_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object udfId_;
    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The udfId.
     */
    @java.lang.Override
    public java.lang.String getUdfId() {
      java.lang.Object ref = udfId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        udfId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for udfId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUdfIdBytes() {
      java.lang.Object ref = udfId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        udfId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGS_FIELD_NUMBER = 2;
    private volatile java.lang.Object args_;
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The args.
     */
    @java.lang.Override
    public java.lang.String getArgs() {
      java.lang.Object ref = args_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        args_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for args.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getArgsBytes() {
      java.lang.Object ref = args_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        args_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TABLE_AS_FIELD_NUMBER = 3;
    private volatile java.lang.Object tableAs_;
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The tableAs.
     */
    @java.lang.Override
    public java.lang.String getTableAs() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableAs_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * table name
     * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string table_as = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for tableAs.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableAsBytes() {
      java.lang.Object ref = tableAs_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableAs_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    public static final int SELECT_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> selectColumn_;
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getSelectColumnList() {
      return selectColumn_;
    }
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getSelectColumnOrBuilderList() {
      return selectColumn_;
    }
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSelectColumnCount() {
      return selectColumn_.size();
    }
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getSelectColumn(int index) {
      return selectColumn_.get(index);
    }
    /**
     * <pre>
     * selectcolumn define.
     * &#64;inject_tag: json:"select_column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getSelectColumnOrBuilder(
        int index) {
      return selectColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getUdfIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, udfId_);
      }
      if (!getArgsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, args_);
      }
      if (!getTableAsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, tableAs_);
      }
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(4, column_.get(i));
      }
      for (int i = 0; i < selectColumn_.size(); i++) {
        output.writeMessage(5, selectColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getUdfIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, udfId_);
      }
      if (!getArgsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, args_);
      }
      if (!getTableAsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, tableAs_);
      }
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, column_.get(i));
      }
      for (int i = 0; i < selectColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, selectColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator) obj;

      if (!getUdfId()
          .equals(other.getUdfId())) return false;
      if (!getArgs()
          .equals(other.getArgs())) return false;
      if (!getTableAs()
          .equals(other.getTableAs())) return false;
      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!getSelectColumnList()
          .equals(other.getSelectColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UDF_ID_FIELD_NUMBER;
      hash = (53 * hash) + getUdfId().hashCode();
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgs().hashCode();
      hash = (37 * hash) + TABLE_AS_FIELD_NUMBER;
      hash = (53 * hash) + getTableAs().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      if (getSelectColumnCount() > 0) {
        hash = (37 * hash) + SELECT_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSelectColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * UDTFOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.UDTFOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.UDTFOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTFOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTFOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
          getSelectColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        udfId_ = "";

        args_ = "";

        tableAs_ = "";

        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        if (selectColumnBuilder_ == null) {
          selectColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          selectColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTFOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator(this);
        int from_bitField0_ = bitField0_;
        result.udfId_ = udfId_;
        result.args_ = args_;
        result.tableAs_ = tableAs_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        if (selectColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            selectColumn_ = java.util.Collections.unmodifiableList(selectColumn_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.selectColumn_ = selectColumn_;
        } else {
          result.selectColumn_ = selectColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.getDefaultInstance()) return this;
        if (!other.getUdfId().isEmpty()) {
          udfId_ = other.udfId_;
          onChanged();
        }
        if (!other.getArgs().isEmpty()) {
          args_ = other.args_;
          onChanged();
        }
        if (!other.getTableAs().isEmpty()) {
          tableAs_ = other.tableAs_;
          onChanged();
        }
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        if (selectColumnBuilder_ == null) {
          if (!other.selectColumn_.isEmpty()) {
            if (selectColumn_.isEmpty()) {
              selectColumn_ = other.selectColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSelectColumnIsMutable();
              selectColumn_.addAll(other.selectColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.selectColumn_.isEmpty()) {
            if (selectColumnBuilder_.isEmpty()) {
              selectColumnBuilder_.dispose();
              selectColumnBuilder_ = null;
              selectColumn_ = other.selectColumn_;
              bitField0_ = (bitField0_ & ~0x00000002);
              selectColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSelectColumnFieldBuilder() : null;
            } else {
              selectColumnBuilder_.addAllMessages(other.selectColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object udfId_ = "";
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @return The udfId.
       */
      public java.lang.String getUdfId() {
        java.lang.Object ref = udfId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          udfId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for udfId.
       */
      public com.google.protobuf.ByteString
          getUdfIdBytes() {
        java.lang.Object ref = udfId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          udfId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @param value The udfId to set.
       * @return This builder for chaining.
       */
      public Builder setUdfId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        udfId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearUdfId() {
        
        udfId_ = getDefaultInstance().getUdfId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for udfId to set.
       * @return This builder for chaining.
       */
      public Builder setUdfIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        udfId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object args_ = "";
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @return The args.
       */
      public java.lang.String getArgs() {
        java.lang.Object ref = args_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          args_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for args.
       */
      public com.google.protobuf.ByteString
          getArgsBytes() {
        java.lang.Object ref = args_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          args_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @param value The args to set.
       * @return This builder for chaining.
       */
      public Builder setArgs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        args_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearArgs() {
        
        args_ = getDefaultInstance().getArgs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for args to set.
       * @return This builder for chaining.
       */
      public Builder setArgsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        args_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tableAs_ = "";
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @return The tableAs.
       */
      public java.lang.String getTableAs() {
        java.lang.Object ref = tableAs_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableAs_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for tableAs.
       */
      public com.google.protobuf.ByteString
          getTableAsBytes() {
        java.lang.Object ref = tableAs_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableAs_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @param value The tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tableAs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTableAs() {
        
        tableAs_ = getDefaultInstance().getTableAs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * table name
       * &#64;inject_tag: json:"table_as" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string table_as = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for tableAs to set.
       * @return This builder for chaining.
       */
      public Builder setTableAsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tableAs_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> columnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> selectColumn_ =
        java.util.Collections.emptyList();
      private void ensureSelectColumnIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          selectColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(selectColumn_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> selectColumnBuilder_;

      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getSelectColumnList() {
        if (selectColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(selectColumn_);
        } else {
          return selectColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getSelectColumnCount() {
        if (selectColumnBuilder_ == null) {
          return selectColumn_.size();
        } else {
          return selectColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getSelectColumn(int index) {
        if (selectColumnBuilder_ == null) {
          return selectColumn_.get(index);
        } else {
          return selectColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setSelectColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (selectColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectColumnIsMutable();
          selectColumn_.set(index, value);
          onChanged();
        } else {
          selectColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setSelectColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (selectColumnBuilder_ == null) {
          ensureSelectColumnIsMutable();
          selectColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          selectColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addSelectColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (selectColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectColumnIsMutable();
          selectColumn_.add(value);
          onChanged();
        } else {
          selectColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addSelectColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (selectColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectColumnIsMutable();
          selectColumn_.add(index, value);
          onChanged();
        } else {
          selectColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addSelectColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (selectColumnBuilder_ == null) {
          ensureSelectColumnIsMutable();
          selectColumn_.add(builderForValue.build());
          onChanged();
        } else {
          selectColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addSelectColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (selectColumnBuilder_ == null) {
          ensureSelectColumnIsMutable();
          selectColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          selectColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSelectColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (selectColumnBuilder_ == null) {
          ensureSelectColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, selectColumn_);
          onChanged();
        } else {
          selectColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearSelectColumn() {
        if (selectColumnBuilder_ == null) {
          selectColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          selectColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeSelectColumn(int index) {
        if (selectColumnBuilder_ == null) {
          ensureSelectColumnIsMutable();
          selectColumn_.remove(index);
          onChanged();
        } else {
          selectColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getSelectColumnBuilder(
          int index) {
        return getSelectColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getSelectColumnOrBuilder(
          int index) {
        if (selectColumnBuilder_ == null) {
          return selectColumn_.get(index);  } else {
          return selectColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getSelectColumnOrBuilderList() {
        if (selectColumnBuilder_ != null) {
          return selectColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(selectColumn_);
        }
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addSelectColumnBuilder() {
        return getSelectColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addSelectColumnBuilder(
          int index) {
        return getSelectColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * selectcolumn define.
       * &#64;inject_tag: json:"select_column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs select_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getSelectColumnBuilderList() {
        return getSelectColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getSelectColumnFieldBuilder() {
        if (selectColumnBuilder_ == null) {
          selectColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  selectColumn_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          selectColumn_ = null;
        }
        return selectColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.UDTFOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.UDTFOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UDTFOperator>
        PARSER = new com.google.protobuf.AbstractParser<UDTFOperator>() {
      @java.lang.Override
      public UDTFOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UDTFOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UDTFOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UDTFOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UDTTFOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.UDTTFOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The udfId.
     */
    java.lang.String getUdfId();
    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for udfId.
     */
    com.google.protobuf.ByteString
        getUdfIdBytes();

    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The args.
     */
    java.lang.String getArgs();
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for args.
     */
    com.google.protobuf.ByteString
        getArgsBytes();

    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> 
        getColumnList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index);
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    int getColumnCount();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList();
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * UDTTFOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.UDTTFOperator}
   */
  public static final class UDTTFOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.UDTTFOperator)
      UDTTFOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UDTTFOperator.newBuilder() to construct.
    private UDTTFOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UDTTFOperator() {
      udfId_ = "";
      args_ = "";
      column_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UDTTFOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UDTTFOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              udfId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              args_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>();
                mutable_bitField0_ |= 0x00000001;
              }
              column_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          column_ = java.util.Collections.unmodifiableList(column_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTTFOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTTFOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder.class);
    }

    public static final int UDF_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object udfId_;
    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The udfId.
     */
    @java.lang.Override
    public java.lang.String getUdfId() {
      java.lang.Object ref = udfId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        udfId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * udfid in udfmanager
     * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for udfId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUdfIdBytes() {
      java.lang.Object ref = udfId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        udfId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGS_FIELD_NUMBER = 2;
    private volatile java.lang.Object args_;
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The args.
     */
    @java.lang.Override
    public java.lang.String getArgs() {
      java.lang.Object ref = args_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        args_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Args
     * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string args = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for args.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getArgsBytes() {
      java.lang.Object ref = args_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        args_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMN_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_;
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
        getColumnOrBuilderList() {
      return column_;
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getColumnCount() {
      return column_.size();
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
      return column_.get(index);
    }
    /**
     * <pre>
     * column define.
     * &#64;inject_tag: json:"column" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
        int index) {
      return column_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getUdfIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, udfId_);
      }
      if (!getArgsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, args_);
      }
      for (int i = 0; i < column_.size(); i++) {
        output.writeMessage(3, column_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getUdfIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, udfId_);
      }
      if (!getArgsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, args_);
      }
      for (int i = 0; i < column_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, column_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator) obj;

      if (!getUdfId()
          .equals(other.getUdfId())) return false;
      if (!getArgs()
          .equals(other.getArgs())) return false;
      if (!getColumnList()
          .equals(other.getColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UDF_ID_FIELD_NUMBER;
      hash = (53 * hash) + getUdfId().hashCode();
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgs().hashCode();
      if (getColumnCount() > 0) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * UDTTFOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.UDTTFOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.UDTTFOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTTFOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTTFOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        udfId_ = "";

        args_ = "";

        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          columnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_UDTTFOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator(this);
        int from_bitField0_ = bitField0_;
        result.udfId_ = udfId_;
        result.args_ = args_;
        if (columnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            column_ = java.util.Collections.unmodifiableList(column_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.getDefaultInstance()) return this;
        if (!other.getUdfId().isEmpty()) {
          udfId_ = other.udfId_;
          onChanged();
        }
        if (!other.getArgs().isEmpty()) {
          args_ = other.args_;
          onChanged();
        }
        if (columnBuilder_ == null) {
          if (!other.column_.isEmpty()) {
            if (column_.isEmpty()) {
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColumnIsMutable();
              column_.addAll(other.column_);
            }
            onChanged();
          }
        } else {
          if (!other.column_.isEmpty()) {
            if (columnBuilder_.isEmpty()) {
              columnBuilder_.dispose();
              columnBuilder_ = null;
              column_ = other.column_;
              bitField0_ = (bitField0_ & ~0x00000001);
              columnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnFieldBuilder() : null;
            } else {
              columnBuilder_.addAllMessages(other.column_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object udfId_ = "";
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @return The udfId.
       */
      public java.lang.String getUdfId() {
        java.lang.Object ref = udfId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          udfId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for udfId.
       */
      public com.google.protobuf.ByteString
          getUdfIdBytes() {
        java.lang.Object ref = udfId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          udfId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @param value The udfId to set.
       * @return This builder for chaining.
       */
      public Builder setUdfId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        udfId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearUdfId() {
        
        udfId_ = getDefaultInstance().getUdfId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * udfid in udfmanager
       * &#64;inject_tag: json:"udf_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string udf_id = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for udfId to set.
       * @return This builder for chaining.
       */
      public Builder setUdfIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        udfId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object args_ = "";
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @return The args.
       */
      public java.lang.String getArgs() {
        java.lang.Object ref = args_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          args_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for args.
       */
      public com.google.protobuf.ByteString
          getArgsBytes() {
        java.lang.Object ref = args_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          args_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @param value The args to set.
       * @return This builder for chaining.
       */
      public Builder setArgs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        args_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearArgs() {
        
        args_ = getDefaultInstance().getArgs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Args
       * &#64;inject_tag: json:"args" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string args = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for args to set.
       * @return This builder for chaining.
       */
      public Builder setArgsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        args_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> column_ =
        java.util.Collections.emptyList();
      private void ensureColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          column_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs>(column_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> columnBuilder_;

      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> getColumnList() {
        if (columnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(column_);
        } else {
          return columnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public int getColumnCount() {
        if (columnBuilder_ == null) {
          return column_.size();
        } else {
          return columnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs getColumn(int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);
        } else {
          return columnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.set(index, value);
          onChanged();
        } else {
          columnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(value);
          onChanged();
        } else {
          columnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnIsMutable();
          column_.add(index, value);
          onChanged();
        } else {
          columnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder builderForValue) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs> values) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, column_);
          onChanged();
        } else {
          columnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          columnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeColumn(int index) {
        if (columnBuilder_ == null) {
          ensureColumnIsMutable();
          column_.remove(index);
          onChanged();
        } else {
          columnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder getColumnBuilder(
          int index) {
        return getColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder getColumnOrBuilder(
          int index) {
        if (columnBuilder_ == null) {
          return column_.get(index);  } else {
          return columnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
           getColumnOrBuilderList() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(column_);
        }
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder() {
        return getColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder addColumnBuilder(
          int index) {
        return getColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.getDefaultInstance());
      }
      /**
       * <pre>
       * column define.
       * &#64;inject_tag: json:"column" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.ColumnAs column = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder> 
           getColumnBuilderList() {
        return getColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder> 
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAs.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ColumnAsOrBuilder>(
                  column_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.UDTTFOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.UDTTFOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UDTTFOperator>
        PARSER = new com.google.protobuf.AbstractParser<UDTTFOperator>() {
      @java.lang.Override
      public UDTTFOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UDTTFOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UDTTFOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UDTTFOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OperatorPropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.OperatorProperty)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Source
     * &#64;inject_tag: json:"source" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
     * @return Whether the source field is set.
     */
    boolean hasSource();
    /**
     * <pre>
     * Source
     * &#64;inject_tag: json:"source" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
     * @return The source.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator getSource();
    /**
     * <pre>
     * Source
     * &#64;inject_tag: json:"source" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder getSourceOrBuilder();

    /**
     * <pre>
     * dest node
     * &#64;inject_tag: json:"dest" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
     * @return Whether the dest field is set.
     */
    boolean hasDest();
    /**
     * <pre>
     * dest node
     * &#64;inject_tag: json:"dest" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
     * @return The dest.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator getDest();
    /**
     * <pre>
     * dest node
     * &#64;inject_tag: json:"dest" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder getDestOrBuilder();

    /**
     * <pre>
     * values node
     * &#64;inject_tag: json:"values" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
     * @return Whether the values field is set.
     */
    boolean hasValues();
    /**
     * <pre>
     * values node
     * &#64;inject_tag: json:"values" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
     * @return The values.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator getValues();
    /**
     * <pre>
     * values node
     * &#64;inject_tag: json:"values" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder getValuesOrBuilder();

    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"order_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
     * @return Whether the orderBy field is set.
     */
    boolean hasOrderBy();
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"order_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
     * @return The orderBy.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator getOrderBy();
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"order_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder getOrderByOrBuilder();

    /**
     * <pre>
     * Limit
     * &#64;inject_tag: json:"limit" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
     * @return Whether the limit field is set.
     */
    boolean hasLimit();
    /**
     * <pre>
     * Limit
     * &#64;inject_tag: json:"limit" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
     * @return The limit.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator getLimit();
    /**
     * <pre>
     * Limit
     * &#64;inject_tag: json:"limit" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder getLimitOrBuilder();

    /**
     * <pre>
     * Offset
     * &#64;inject_tag: json:offset" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
     * @return Whether the offset field is set.
     */
    boolean hasOffset();
    /**
     * <pre>
     * Offset
     * &#64;inject_tag: json:offset" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
     * @return The offset.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator getOffset();
    /**
     * <pre>
     * Offset
     * &#64;inject_tag: json:offset" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder getOffsetOrBuilder();

    /**
     * <pre>
     * Fetch
     * &#64;inject_tag: json:"fetch" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
     * @return Whether the fetch field is set.
     */
    boolean hasFetch();
    /**
     * <pre>
     * Fetch
     * &#64;inject_tag: json:"fetch" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
     * @return The fetch.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator getFetch();
    /**
     * <pre>
     * Fetch
     * &#64;inject_tag: json:"fetch" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder getFetchOrBuilder();

    /**
     * <pre>
     * Union
     * &#64;inject_tag: json:"union" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
     * @return Whether the union field is set.
     */
    boolean hasUnion();
    /**
     * <pre>
     * Union
     * &#64;inject_tag: json:"union" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
     * @return The union.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator getUnion();
    /**
     * <pre>
     * Union
     * &#64;inject_tag: json:"union" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder getUnionOrBuilder();

    /**
     * <pre>
     * GroupBy
     * &#64;inject_tag: json:"group_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
     * @return Whether the groupBy field is set.
     */
    boolean hasGroupBy();
    /**
     * <pre>
     * GroupBy
     * &#64;inject_tag: json:"group_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
     * @return The groupBy.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator getGroupBy();
    /**
     * <pre>
     * GroupBy
     * &#64;inject_tag: json:"group_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder getGroupByOrBuilder();

    /**
     * <pre>
     * Having
     * &#64;inject_tag: json:"having" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
     * @return Whether the having field is set.
     */
    boolean hasHaving();
    /**
     * <pre>
     * Having
     * &#64;inject_tag: json:"having" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
     * @return The having.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator getHaving();
    /**
     * <pre>
     * Having
     * &#64;inject_tag: json:"having" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder getHavingOrBuilder();

    /**
     * <pre>
     * Const
     * &#64;inject_tag: json:"const" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
     * @return Whether the const field is set.
     */
    boolean hasConst();
    /**
     * <pre>
     * Const
     * &#64;inject_tag: json:"const" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
     * @return The const.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator getConst();
    /**
     * <pre>
     * Const
     * &#64;inject_tag: json:"const" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder getConstOrBuilder();

    /**
     * <pre>
     * Dimension
     * &#64;inject_tag: json:"dimension" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
     * @return Whether the dimension field is set.
     */
    boolean hasDimension();
    /**
     * <pre>
     * Dimension
     * &#64;inject_tag: json:"dimension" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
     * @return The dimension.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator getDimension();
    /**
     * <pre>
     * Dimension
     * &#64;inject_tag: json:"dimension" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder getDimensionOrBuilder();

    /**
     * <pre>
     * Except
     * &#64;inject_tag: json:"except" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
     * @return Whether the except field is set.
     */
    boolean hasExcept();
    /**
     * <pre>
     * Except
     * &#64;inject_tag: json:"except" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
     * @return The except.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator getExcept();
    /**
     * <pre>
     * Except
     * &#64;inject_tag: json:"except" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder getExceptOrBuilder();

    /**
     * <pre>
     * Intersect
     * &#64;inject_tag: json:"intersect" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
     * @return Whether the intersect field is set.
     */
    boolean hasIntersect();
    /**
     * <pre>
     * Intersect
     * &#64;inject_tag: json:"intersect" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
     * @return The intersect.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator getIntersect();
    /**
     * <pre>
     * Intersect
     * &#64;inject_tag: json:"intersect" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder getIntersectOrBuilder();

    /**
     * <pre>
     * Filter
     * &#64;inject_tag: json:"filter" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
     * @return Whether the filter field is set.
     */
    boolean hasFilter();
    /**
     * <pre>
     * Filter
     * &#64;inject_tag: json:"filter" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
     * @return The filter.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator getFilter();
    /**
     * <pre>
     * Filter
     * &#64;inject_tag: json:"filter" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder getFilterOrBuilder();

    /**
     * <pre>
     * UDTF
     * &#64;inject_tag: json:"udtf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
     * @return Whether the udtf field is set.
     */
    boolean hasUdtf();
    /**
     * <pre>
     * UDTF
     * &#64;inject_tag: json:"udtf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
     * @return The udtf.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator getUdtf();
    /**
     * <pre>
     * UDTF
     * &#64;inject_tag: json:"udtf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder getUdtfOrBuilder();

    /**
     * <pre>
     * UDTTF
     * &#64;inject_tag: json:"udttf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
     * @return Whether the udttf field is set.
     */
    boolean hasUdttf();
    /**
     * <pre>
     * UDTTF
     * &#64;inject_tag: json:"udttf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
     * @return The udttf.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator getUdttf();
    /**
     * <pre>
     * UDTTF
     * &#64;inject_tag: json:"udttf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder getUdttfOrBuilder();

    /**
     * <pre>
     * Join
     * &#64;inject_tag: json:"join" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
     * @return Whether the join field is set.
     */
    boolean hasJoin();
    /**
     * <pre>
     * Join
     * &#64;inject_tag: json:"join" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
     * @return The join.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator getJoin();
    /**
     * <pre>
     * Join
     * &#64;inject_tag: json:"join" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder getJoinOrBuilder();
  }
  /**
   * <pre>
   * FlinkOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.OperatorProperty}
   */
  public static final class OperatorProperty extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.OperatorProperty)
      OperatorPropertyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OperatorProperty.newBuilder() to construct.
    private OperatorProperty(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OperatorProperty() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OperatorProperty();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OperatorProperty(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder subBuilder = null;
              if (source_ != null) {
                subBuilder = source_.toBuilder();
              }
              source_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(source_);
                source_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder subBuilder = null;
              if (dest_ != null) {
                subBuilder = dest_.toBuilder();
              }
              dest_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dest_);
                dest_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder subBuilder = null;
              if (values_ != null) {
                subBuilder = values_.toBuilder();
              }
              values_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(values_);
                values_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder subBuilder = null;
              if (orderBy_ != null) {
                subBuilder = orderBy_.toBuilder();
              }
              orderBy_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(orderBy_);
                orderBy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder subBuilder = null;
              if (limit_ != null) {
                subBuilder = limit_.toBuilder();
              }
              limit_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(limit_);
                limit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder subBuilder = null;
              if (offset_ != null) {
                subBuilder = offset_.toBuilder();
              }
              offset_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(offset_);
                offset_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder subBuilder = null;
              if (fetch_ != null) {
                subBuilder = fetch_.toBuilder();
              }
              fetch_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fetch_);
                fetch_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder subBuilder = null;
              if (union_ != null) {
                subBuilder = union_.toBuilder();
              }
              union_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(union_);
                union_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder subBuilder = null;
              if (groupBy_ != null) {
                subBuilder = groupBy_.toBuilder();
              }
              groupBy_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupBy_);
                groupBy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder subBuilder = null;
              if (having_ != null) {
                subBuilder = having_.toBuilder();
              }
              having_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(having_);
                having_ = subBuilder.buildPartial();
              }

              break;
            }
            case 90: {
              com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder subBuilder = null;
              if (const_ != null) {
                subBuilder = const_.toBuilder();
              }
              const_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(const_);
                const_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder subBuilder = null;
              if (dimension_ != null) {
                subBuilder = dimension_.toBuilder();
              }
              dimension_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dimension_);
                dimension_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder subBuilder = null;
              if (except_ != null) {
                subBuilder = except_.toBuilder();
              }
              except_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(except_);
                except_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder subBuilder = null;
              if (intersect_ != null) {
                subBuilder = intersect_.toBuilder();
              }
              intersect_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(intersect_);
                intersect_ = subBuilder.buildPartial();
              }

              break;
            }
            case 122: {
              com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            case 130: {
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder subBuilder = null;
              if (udtf_ != null) {
                subBuilder = udtf_.toBuilder();
              }
              udtf_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(udtf_);
                udtf_ = subBuilder.buildPartial();
              }

              break;
            }
            case 138: {
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder subBuilder = null;
              if (udttf_ != null) {
                subBuilder = udttf_.toBuilder();
              }
              udttf_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(udttf_);
                udttf_ = subBuilder.buildPartial();
              }

              break;
            }
            case 146: {
              com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder subBuilder = null;
              if (join_ != null) {
                subBuilder = join_.toBuilder();
              }
              join_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(join_);
                join_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OperatorProperty_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OperatorProperty_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.class, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder.class);
    }

    public static final int SOURCE_FIELD_NUMBER = 1;
    private com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator source_;
    /**
     * <pre>
     * Source
     * &#64;inject_tag: json:"source" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
     * @return Whether the source field is set.
     */
    @java.lang.Override
    public boolean hasSource() {
      return source_ != null;
    }
    /**
     * <pre>
     * Source
     * &#64;inject_tag: json:"source" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
     * @return The source.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator getSource() {
      return source_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.getDefaultInstance() : source_;
    }
    /**
     * <pre>
     * Source
     * &#64;inject_tag: json:"source" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder getSourceOrBuilder() {
      return getSource();
    }

    public static final int DEST_FIELD_NUMBER = 2;
    private com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator dest_;
    /**
     * <pre>
     * dest node
     * &#64;inject_tag: json:"dest" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
     * @return Whether the dest field is set.
     */
    @java.lang.Override
    public boolean hasDest() {
      return dest_ != null;
    }
    /**
     * <pre>
     * dest node
     * &#64;inject_tag: json:"dest" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
     * @return The dest.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator getDest() {
      return dest_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.getDefaultInstance() : dest_;
    }
    /**
     * <pre>
     * dest node
     * &#64;inject_tag: json:"dest" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder getDestOrBuilder() {
      return getDest();
    }

    public static final int VALUES_FIELD_NUMBER = 3;
    private com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator values_;
    /**
     * <pre>
     * values node
     * &#64;inject_tag: json:"values" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
     * @return Whether the values field is set.
     */
    @java.lang.Override
    public boolean hasValues() {
      return values_ != null;
    }
    /**
     * <pre>
     * values node
     * &#64;inject_tag: json:"values" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
     * @return The values.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator getValues() {
      return values_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.getDefaultInstance() : values_;
    }
    /**
     * <pre>
     * values node
     * &#64;inject_tag: json:"values" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder getValuesOrBuilder() {
      return getValues();
    }

    public static final int ORDER_BY_FIELD_NUMBER = 4;
    private com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator orderBy_;
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"order_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
     * @return Whether the orderBy field is set.
     */
    @java.lang.Override
    public boolean hasOrderBy() {
      return orderBy_ != null;
    }
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"order_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
     * @return The orderBy.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator getOrderBy() {
      return orderBy_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.getDefaultInstance() : orderBy_;
    }
    /**
     * <pre>
     * OrderBy
     * &#64;inject_tag: json:"order_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder getOrderByOrBuilder() {
      return getOrderBy();
    }

    public static final int LIMIT_FIELD_NUMBER = 5;
    private com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator limit_;
    /**
     * <pre>
     * Limit
     * &#64;inject_tag: json:"limit" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
     * @return Whether the limit field is set.
     */
    @java.lang.Override
    public boolean hasLimit() {
      return limit_ != null;
    }
    /**
     * <pre>
     * Limit
     * &#64;inject_tag: json:"limit" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
     * @return The limit.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator getLimit() {
      return limit_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.getDefaultInstance() : limit_;
    }
    /**
     * <pre>
     * Limit
     * &#64;inject_tag: json:"limit" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder getLimitOrBuilder() {
      return getLimit();
    }

    public static final int OFFSET_FIELD_NUMBER = 6;
    private com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator offset_;
    /**
     * <pre>
     * Offset
     * &#64;inject_tag: json:offset" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
     * @return Whether the offset field is set.
     */
    @java.lang.Override
    public boolean hasOffset() {
      return offset_ != null;
    }
    /**
     * <pre>
     * Offset
     * &#64;inject_tag: json:offset" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
     * @return The offset.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator getOffset() {
      return offset_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.getDefaultInstance() : offset_;
    }
    /**
     * <pre>
     * Offset
     * &#64;inject_tag: json:offset" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder getOffsetOrBuilder() {
      return getOffset();
    }

    public static final int FETCH_FIELD_NUMBER = 7;
    private com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator fetch_;
    /**
     * <pre>
     * Fetch
     * &#64;inject_tag: json:"fetch" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
     * @return Whether the fetch field is set.
     */
    @java.lang.Override
    public boolean hasFetch() {
      return fetch_ != null;
    }
    /**
     * <pre>
     * Fetch
     * &#64;inject_tag: json:"fetch" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
     * @return The fetch.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator getFetch() {
      return fetch_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.getDefaultInstance() : fetch_;
    }
    /**
     * <pre>
     * Fetch
     * &#64;inject_tag: json:"fetch" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder getFetchOrBuilder() {
      return getFetch();
    }

    public static final int UNION_FIELD_NUMBER = 8;
    private com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator union_;
    /**
     * <pre>
     * Union
     * &#64;inject_tag: json:"union" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
     * @return Whether the union field is set.
     */
    @java.lang.Override
    public boolean hasUnion() {
      return union_ != null;
    }
    /**
     * <pre>
     * Union
     * &#64;inject_tag: json:"union" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
     * @return The union.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator getUnion() {
      return union_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.getDefaultInstance() : union_;
    }
    /**
     * <pre>
     * Union
     * &#64;inject_tag: json:"union" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder getUnionOrBuilder() {
      return getUnion();
    }

    public static final int GROUP_BY_FIELD_NUMBER = 9;
    private com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator groupBy_;
    /**
     * <pre>
     * GroupBy
     * &#64;inject_tag: json:"group_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
     * @return Whether the groupBy field is set.
     */
    @java.lang.Override
    public boolean hasGroupBy() {
      return groupBy_ != null;
    }
    /**
     * <pre>
     * GroupBy
     * &#64;inject_tag: json:"group_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
     * @return The groupBy.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator getGroupBy() {
      return groupBy_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.getDefaultInstance() : groupBy_;
    }
    /**
     * <pre>
     * GroupBy
     * &#64;inject_tag: json:"group_by" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder getGroupByOrBuilder() {
      return getGroupBy();
    }

    public static final int HAVING_FIELD_NUMBER = 10;
    private com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator having_;
    /**
     * <pre>
     * Having
     * &#64;inject_tag: json:"having" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
     * @return Whether the having field is set.
     */
    @java.lang.Override
    public boolean hasHaving() {
      return having_ != null;
    }
    /**
     * <pre>
     * Having
     * &#64;inject_tag: json:"having" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
     * @return The having.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator getHaving() {
      return having_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.getDefaultInstance() : having_;
    }
    /**
     * <pre>
     * Having
     * &#64;inject_tag: json:"having" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder getHavingOrBuilder() {
      return getHaving();
    }

    public static final int CONST_FIELD_NUMBER = 11;
    private com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator const_;
    /**
     * <pre>
     * Const
     * &#64;inject_tag: json:"const" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
     * @return Whether the const field is set.
     */
    @java.lang.Override
    public boolean hasConst() {
      return const_ != null;
    }
    /**
     * <pre>
     * Const
     * &#64;inject_tag: json:"const" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
     * @return The const.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator getConst() {
      return const_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.getDefaultInstance() : const_;
    }
    /**
     * <pre>
     * Const
     * &#64;inject_tag: json:"const" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder getConstOrBuilder() {
      return getConst();
    }

    public static final int DIMENSION_FIELD_NUMBER = 12;
    private com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator dimension_;
    /**
     * <pre>
     * Dimension
     * &#64;inject_tag: json:"dimension" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
     * @return Whether the dimension field is set.
     */
    @java.lang.Override
    public boolean hasDimension() {
      return dimension_ != null;
    }
    /**
     * <pre>
     * Dimension
     * &#64;inject_tag: json:"dimension" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
     * @return The dimension.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator getDimension() {
      return dimension_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.getDefaultInstance() : dimension_;
    }
    /**
     * <pre>
     * Dimension
     * &#64;inject_tag: json:"dimension" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder getDimensionOrBuilder() {
      return getDimension();
    }

    public static final int EXCEPT_FIELD_NUMBER = 13;
    private com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator except_;
    /**
     * <pre>
     * Except
     * &#64;inject_tag: json:"except" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
     * @return Whether the except field is set.
     */
    @java.lang.Override
    public boolean hasExcept() {
      return except_ != null;
    }
    /**
     * <pre>
     * Except
     * &#64;inject_tag: json:"except" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
     * @return The except.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator getExcept() {
      return except_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.getDefaultInstance() : except_;
    }
    /**
     * <pre>
     * Except
     * &#64;inject_tag: json:"except" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder getExceptOrBuilder() {
      return getExcept();
    }

    public static final int INTERSECT_FIELD_NUMBER = 14;
    private com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator intersect_;
    /**
     * <pre>
     * Intersect
     * &#64;inject_tag: json:"intersect" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
     * @return Whether the intersect field is set.
     */
    @java.lang.Override
    public boolean hasIntersect() {
      return intersect_ != null;
    }
    /**
     * <pre>
     * Intersect
     * &#64;inject_tag: json:"intersect" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
     * @return The intersect.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator getIntersect() {
      return intersect_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.getDefaultInstance() : intersect_;
    }
    /**
     * <pre>
     * Intersect
     * &#64;inject_tag: json:"intersect" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder getIntersectOrBuilder() {
      return getIntersect();
    }

    public static final int FILTER_FIELD_NUMBER = 15;
    private com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator filter_;
    /**
     * <pre>
     * Filter
     * &#64;inject_tag: json:"filter" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
     * @return Whether the filter field is set.
     */
    @java.lang.Override
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <pre>
     * Filter
     * &#64;inject_tag: json:"filter" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
     * @return The filter.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator getFilter() {
      return filter_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.getDefaultInstance() : filter_;
    }
    /**
     * <pre>
     * Filter
     * &#64;inject_tag: json:"filter" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    public static final int UDTF_FIELD_NUMBER = 16;
    private com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator udtf_;
    /**
     * <pre>
     * UDTF
     * &#64;inject_tag: json:"udtf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
     * @return Whether the udtf field is set.
     */
    @java.lang.Override
    public boolean hasUdtf() {
      return udtf_ != null;
    }
    /**
     * <pre>
     * UDTF
     * &#64;inject_tag: json:"udtf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
     * @return The udtf.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator getUdtf() {
      return udtf_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.getDefaultInstance() : udtf_;
    }
    /**
     * <pre>
     * UDTF
     * &#64;inject_tag: json:"udtf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder getUdtfOrBuilder() {
      return getUdtf();
    }

    public static final int UDTTF_FIELD_NUMBER = 17;
    private com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator udttf_;
    /**
     * <pre>
     * UDTTF
     * &#64;inject_tag: json:"udttf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
     * @return Whether the udttf field is set.
     */
    @java.lang.Override
    public boolean hasUdttf() {
      return udttf_ != null;
    }
    /**
     * <pre>
     * UDTTF
     * &#64;inject_tag: json:"udttf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
     * @return The udttf.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator getUdttf() {
      return udttf_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.getDefaultInstance() : udttf_;
    }
    /**
     * <pre>
     * UDTTF
     * &#64;inject_tag: json:"udttf" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder getUdttfOrBuilder() {
      return getUdttf();
    }

    public static final int JOIN_FIELD_NUMBER = 18;
    private com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator join_;
    /**
     * <pre>
     * Join
     * &#64;inject_tag: json:"join" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
     * @return Whether the join field is set.
     */
    @java.lang.Override
    public boolean hasJoin() {
      return join_ != null;
    }
    /**
     * <pre>
     * Join
     * &#64;inject_tag: json:"join" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
     * @return The join.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator getJoin() {
      return join_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.getDefaultInstance() : join_;
    }
    /**
     * <pre>
     * Join
     * &#64;inject_tag: json:"join" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder getJoinOrBuilder() {
      return getJoin();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (source_ != null) {
        output.writeMessage(1, getSource());
      }
      if (dest_ != null) {
        output.writeMessage(2, getDest());
      }
      if (values_ != null) {
        output.writeMessage(3, getValues());
      }
      if (orderBy_ != null) {
        output.writeMessage(4, getOrderBy());
      }
      if (limit_ != null) {
        output.writeMessage(5, getLimit());
      }
      if (offset_ != null) {
        output.writeMessage(6, getOffset());
      }
      if (fetch_ != null) {
        output.writeMessage(7, getFetch());
      }
      if (union_ != null) {
        output.writeMessage(8, getUnion());
      }
      if (groupBy_ != null) {
        output.writeMessage(9, getGroupBy());
      }
      if (having_ != null) {
        output.writeMessage(10, getHaving());
      }
      if (const_ != null) {
        output.writeMessage(11, getConst());
      }
      if (dimension_ != null) {
        output.writeMessage(12, getDimension());
      }
      if (except_ != null) {
        output.writeMessage(13, getExcept());
      }
      if (intersect_ != null) {
        output.writeMessage(14, getIntersect());
      }
      if (filter_ != null) {
        output.writeMessage(15, getFilter());
      }
      if (udtf_ != null) {
        output.writeMessage(16, getUdtf());
      }
      if (udttf_ != null) {
        output.writeMessage(17, getUdttf());
      }
      if (join_ != null) {
        output.writeMessage(18, getJoin());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (source_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSource());
      }
      if (dest_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDest());
      }
      if (values_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getValues());
      }
      if (orderBy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getOrderBy());
      }
      if (limit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getLimit());
      }
      if (offset_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getOffset());
      }
      if (fetch_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getFetch());
      }
      if (union_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getUnion());
      }
      if (groupBy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getGroupBy());
      }
      if (having_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getHaving());
      }
      if (const_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getConst());
      }
      if (dimension_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getDimension());
      }
      if (except_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getExcept());
      }
      if (intersect_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getIntersect());
      }
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getFilter());
      }
      if (udtf_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getUdtf());
      }
      if (udttf_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getUdttf());
      }
      if (join_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getJoin());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty other = (com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty) obj;

      if (hasSource() != other.hasSource()) return false;
      if (hasSource()) {
        if (!getSource()
            .equals(other.getSource())) return false;
      }
      if (hasDest() != other.hasDest()) return false;
      if (hasDest()) {
        if (!getDest()
            .equals(other.getDest())) return false;
      }
      if (hasValues() != other.hasValues()) return false;
      if (hasValues()) {
        if (!getValues()
            .equals(other.getValues())) return false;
      }
      if (hasOrderBy() != other.hasOrderBy()) return false;
      if (hasOrderBy()) {
        if (!getOrderBy()
            .equals(other.getOrderBy())) return false;
      }
      if (hasLimit() != other.hasLimit()) return false;
      if (hasLimit()) {
        if (!getLimit()
            .equals(other.getLimit())) return false;
      }
      if (hasOffset() != other.hasOffset()) return false;
      if (hasOffset()) {
        if (!getOffset()
            .equals(other.getOffset())) return false;
      }
      if (hasFetch() != other.hasFetch()) return false;
      if (hasFetch()) {
        if (!getFetch()
            .equals(other.getFetch())) return false;
      }
      if (hasUnion() != other.hasUnion()) return false;
      if (hasUnion()) {
        if (!getUnion()
            .equals(other.getUnion())) return false;
      }
      if (hasGroupBy() != other.hasGroupBy()) return false;
      if (hasGroupBy()) {
        if (!getGroupBy()
            .equals(other.getGroupBy())) return false;
      }
      if (hasHaving() != other.hasHaving()) return false;
      if (hasHaving()) {
        if (!getHaving()
            .equals(other.getHaving())) return false;
      }
      if (hasConst() != other.hasConst()) return false;
      if (hasConst()) {
        if (!getConst()
            .equals(other.getConst())) return false;
      }
      if (hasDimension() != other.hasDimension()) return false;
      if (hasDimension()) {
        if (!getDimension()
            .equals(other.getDimension())) return false;
      }
      if (hasExcept() != other.hasExcept()) return false;
      if (hasExcept()) {
        if (!getExcept()
            .equals(other.getExcept())) return false;
      }
      if (hasIntersect() != other.hasIntersect()) return false;
      if (hasIntersect()) {
        if (!getIntersect()
            .equals(other.getIntersect())) return false;
      }
      if (hasFilter() != other.hasFilter()) return false;
      if (hasFilter()) {
        if (!getFilter()
            .equals(other.getFilter())) return false;
      }
      if (hasUdtf() != other.hasUdtf()) return false;
      if (hasUdtf()) {
        if (!getUdtf()
            .equals(other.getUdtf())) return false;
      }
      if (hasUdttf() != other.hasUdttf()) return false;
      if (hasUdttf()) {
        if (!getUdttf()
            .equals(other.getUdttf())) return false;
      }
      if (hasJoin() != other.hasJoin()) return false;
      if (hasJoin()) {
        if (!getJoin()
            .equals(other.getJoin())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSource()) {
        hash = (37 * hash) + SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getSource().hashCode();
      }
      if (hasDest()) {
        hash = (37 * hash) + DEST_FIELD_NUMBER;
        hash = (53 * hash) + getDest().hashCode();
      }
      if (hasValues()) {
        hash = (37 * hash) + VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getValues().hashCode();
      }
      if (hasOrderBy()) {
        hash = (37 * hash) + ORDER_BY_FIELD_NUMBER;
        hash = (53 * hash) + getOrderBy().hashCode();
      }
      if (hasLimit()) {
        hash = (37 * hash) + LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getLimit().hashCode();
      }
      if (hasOffset()) {
        hash = (37 * hash) + OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + getOffset().hashCode();
      }
      if (hasFetch()) {
        hash = (37 * hash) + FETCH_FIELD_NUMBER;
        hash = (53 * hash) + getFetch().hashCode();
      }
      if (hasUnion()) {
        hash = (37 * hash) + UNION_FIELD_NUMBER;
        hash = (53 * hash) + getUnion().hashCode();
      }
      if (hasGroupBy()) {
        hash = (37 * hash) + GROUP_BY_FIELD_NUMBER;
        hash = (53 * hash) + getGroupBy().hashCode();
      }
      if (hasHaving()) {
        hash = (37 * hash) + HAVING_FIELD_NUMBER;
        hash = (53 * hash) + getHaving().hashCode();
      }
      if (hasConst()) {
        hash = (37 * hash) + CONST_FIELD_NUMBER;
        hash = (53 * hash) + getConst().hashCode();
      }
      if (hasDimension()) {
        hash = (37 * hash) + DIMENSION_FIELD_NUMBER;
        hash = (53 * hash) + getDimension().hashCode();
      }
      if (hasExcept()) {
        hash = (37 * hash) + EXCEPT_FIELD_NUMBER;
        hash = (53 * hash) + getExcept().hashCode();
      }
      if (hasIntersect()) {
        hash = (37 * hash) + INTERSECT_FIELD_NUMBER;
        hash = (53 * hash) + getIntersect().hashCode();
      }
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      if (hasUdtf()) {
        hash = (37 * hash) + UDTF_FIELD_NUMBER;
        hash = (53 * hash) + getUdtf().hashCode();
      }
      if (hasUdttf()) {
        hash = (37 * hash) + UDTTF_FIELD_NUMBER;
        hash = (53 * hash) + getUdttf().hashCode();
      }
      if (hasJoin()) {
        hash = (37 * hash) + JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getJoin().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FlinkOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.OperatorProperty}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.OperatorProperty)
        com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OperatorProperty_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OperatorProperty_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.class, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sourceBuilder_ == null) {
          source_ = null;
        } else {
          source_ = null;
          sourceBuilder_ = null;
        }
        if (destBuilder_ == null) {
          dest_ = null;
        } else {
          dest_ = null;
          destBuilder_ = null;
        }
        if (valuesBuilder_ == null) {
          values_ = null;
        } else {
          values_ = null;
          valuesBuilder_ = null;
        }
        if (orderByBuilder_ == null) {
          orderBy_ = null;
        } else {
          orderBy_ = null;
          orderByBuilder_ = null;
        }
        if (limitBuilder_ == null) {
          limit_ = null;
        } else {
          limit_ = null;
          limitBuilder_ = null;
        }
        if (offsetBuilder_ == null) {
          offset_ = null;
        } else {
          offset_ = null;
          offsetBuilder_ = null;
        }
        if (fetchBuilder_ == null) {
          fetch_ = null;
        } else {
          fetch_ = null;
          fetchBuilder_ = null;
        }
        if (unionBuilder_ == null) {
          union_ = null;
        } else {
          union_ = null;
          unionBuilder_ = null;
        }
        if (groupByBuilder_ == null) {
          groupBy_ = null;
        } else {
          groupBy_ = null;
          groupByBuilder_ = null;
        }
        if (havingBuilder_ == null) {
          having_ = null;
        } else {
          having_ = null;
          havingBuilder_ = null;
        }
        if (constBuilder_ == null) {
          const_ = null;
        } else {
          const_ = null;
          constBuilder_ = null;
        }
        if (dimensionBuilder_ == null) {
          dimension_ = null;
        } else {
          dimension_ = null;
          dimensionBuilder_ = null;
        }
        if (exceptBuilder_ == null) {
          except_ = null;
        } else {
          except_ = null;
          exceptBuilder_ = null;
        }
        if (intersectBuilder_ == null) {
          intersect_ = null;
        } else {
          intersect_ = null;
          intersectBuilder_ = null;
        }
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        if (udtfBuilder_ == null) {
          udtf_ = null;
        } else {
          udtf_ = null;
          udtfBuilder_ = null;
        }
        if (udttfBuilder_ == null) {
          udttf_ = null;
        } else {
          udttf_ = null;
          udttfBuilder_ = null;
        }
        if (joinBuilder_ == null) {
          join_ = null;
        } else {
          join_ = null;
          joinBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_OperatorProperty_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty result = new com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty(this);
        if (sourceBuilder_ == null) {
          result.source_ = source_;
        } else {
          result.source_ = sourceBuilder_.build();
        }
        if (destBuilder_ == null) {
          result.dest_ = dest_;
        } else {
          result.dest_ = destBuilder_.build();
        }
        if (valuesBuilder_ == null) {
          result.values_ = values_;
        } else {
          result.values_ = valuesBuilder_.build();
        }
        if (orderByBuilder_ == null) {
          result.orderBy_ = orderBy_;
        } else {
          result.orderBy_ = orderByBuilder_.build();
        }
        if (limitBuilder_ == null) {
          result.limit_ = limit_;
        } else {
          result.limit_ = limitBuilder_.build();
        }
        if (offsetBuilder_ == null) {
          result.offset_ = offset_;
        } else {
          result.offset_ = offsetBuilder_.build();
        }
        if (fetchBuilder_ == null) {
          result.fetch_ = fetch_;
        } else {
          result.fetch_ = fetchBuilder_.build();
        }
        if (unionBuilder_ == null) {
          result.union_ = union_;
        } else {
          result.union_ = unionBuilder_.build();
        }
        if (groupByBuilder_ == null) {
          result.groupBy_ = groupBy_;
        } else {
          result.groupBy_ = groupByBuilder_.build();
        }
        if (havingBuilder_ == null) {
          result.having_ = having_;
        } else {
          result.having_ = havingBuilder_.build();
        }
        if (constBuilder_ == null) {
          result.const_ = const_;
        } else {
          result.const_ = constBuilder_.build();
        }
        if (dimensionBuilder_ == null) {
          result.dimension_ = dimension_;
        } else {
          result.dimension_ = dimensionBuilder_.build();
        }
        if (exceptBuilder_ == null) {
          result.except_ = except_;
        } else {
          result.except_ = exceptBuilder_.build();
        }
        if (intersectBuilder_ == null) {
          result.intersect_ = intersect_;
        } else {
          result.intersect_ = intersectBuilder_.build();
        }
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        if (udtfBuilder_ == null) {
          result.udtf_ = udtf_;
        } else {
          result.udtf_ = udtfBuilder_.build();
        }
        if (udttfBuilder_ == null) {
          result.udttf_ = udttf_;
        } else {
          result.udttf_ = udttfBuilder_.build();
        }
        if (joinBuilder_ == null) {
          result.join_ = join_;
        } else {
          result.join_ = joinBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.getDefaultInstance()) return this;
        if (other.hasSource()) {
          mergeSource(other.getSource());
        }
        if (other.hasDest()) {
          mergeDest(other.getDest());
        }
        if (other.hasValues()) {
          mergeValues(other.getValues());
        }
        if (other.hasOrderBy()) {
          mergeOrderBy(other.getOrderBy());
        }
        if (other.hasLimit()) {
          mergeLimit(other.getLimit());
        }
        if (other.hasOffset()) {
          mergeOffset(other.getOffset());
        }
        if (other.hasFetch()) {
          mergeFetch(other.getFetch());
        }
        if (other.hasUnion()) {
          mergeUnion(other.getUnion());
        }
        if (other.hasGroupBy()) {
          mergeGroupBy(other.getGroupBy());
        }
        if (other.hasHaving()) {
          mergeHaving(other.getHaving());
        }
        if (other.hasConst()) {
          mergeConst(other.getConst());
        }
        if (other.hasDimension()) {
          mergeDimension(other.getDimension());
        }
        if (other.hasExcept()) {
          mergeExcept(other.getExcept());
        }
        if (other.hasIntersect()) {
          mergeIntersect(other.getIntersect());
        }
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        if (other.hasUdtf()) {
          mergeUdtf(other.getUdtf());
        }
        if (other.hasUdttf()) {
          mergeUdttf(other.getUdttf());
        }
        if (other.hasJoin()) {
          mergeJoin(other.getJoin());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator source_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder> sourceBuilder_;
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       * @return Whether the source field is set.
       */
      public boolean hasSource() {
        return sourceBuilder_ != null || source_ != null;
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       * @return The source.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator getSource() {
        if (sourceBuilder_ == null) {
          return source_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.getDefaultInstance() : source_;
        } else {
          return sourceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSource(com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator value) {
        if (sourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          source_ = value;
          onChanged();
        } else {
          sourceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSource(
          com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder builderForValue) {
        if (sourceBuilder_ == null) {
          source_ = builderForValue.build();
          onChanged();
        } else {
          sourceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      public Builder mergeSource(com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator value) {
        if (sourceBuilder_ == null) {
          if (source_ != null) {
            source_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.newBuilder(source_).mergeFrom(value).buildPartial();
          } else {
            source_ = value;
          }
          onChanged();
        } else {
          sourceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSource() {
        if (sourceBuilder_ == null) {
          source_ = null;
          onChanged();
        } else {
          source_ = null;
          sourceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder getSourceBuilder() {
        
        onChanged();
        return getSourceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder getSourceOrBuilder() {
        if (sourceBuilder_ != null) {
          return sourceBuilder_.getMessageOrBuilder();
        } else {
          return source_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.getDefaultInstance() : source_;
        }
      }
      /**
       * <pre>
       * Source
       * &#64;inject_tag: json:"source" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.SourceOperator source = 1 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder> 
          getSourceFieldBuilder() {
        if (sourceBuilder_ == null) {
          sourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SourceOperatorOrBuilder>(
                  getSource(),
                  getParentForChildren(),
                  isClean());
          source_ = null;
        }
        return sourceBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator dest_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder> destBuilder_;
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       * @return Whether the dest field is set.
       */
      public boolean hasDest() {
        return destBuilder_ != null || dest_ != null;
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       * @return The dest.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator getDest() {
        if (destBuilder_ == null) {
          return dest_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.getDefaultInstance() : dest_;
        } else {
          return destBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      public Builder setDest(com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator value) {
        if (destBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dest_ = value;
          onChanged();
        } else {
          destBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      public Builder setDest(
          com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder builderForValue) {
        if (destBuilder_ == null) {
          dest_ = builderForValue.build();
          onChanged();
        } else {
          destBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      public Builder mergeDest(com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator value) {
        if (destBuilder_ == null) {
          if (dest_ != null) {
            dest_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.newBuilder(dest_).mergeFrom(value).buildPartial();
          } else {
            dest_ = value;
          }
          onChanged();
        } else {
          destBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      public Builder clearDest() {
        if (destBuilder_ == null) {
          dest_ = null;
          onChanged();
        } else {
          dest_ = null;
          destBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder getDestBuilder() {
        
        onChanged();
        return getDestFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder getDestOrBuilder() {
        if (destBuilder_ != null) {
          return destBuilder_.getMessageOrBuilder();
        } else {
          return dest_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.getDefaultInstance() : dest_;
        }
      }
      /**
       * <pre>
       * dest node
       * &#64;inject_tag: json:"dest" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DestOperator dest = 2 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder> 
          getDestFieldBuilder() {
        if (destBuilder_ == null) {
          destBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.DestOperatorOrBuilder>(
                  getDest(),
                  getParentForChildren(),
                  isClean());
          dest_ = null;
        }
        return destBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator values_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder> valuesBuilder_;
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       * @return Whether the values field is set.
       */
      public boolean hasValues() {
        return valuesBuilder_ != null || values_ != null;
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       * @return The values.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator getValues() {
        if (valuesBuilder_ == null) {
          return values_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.getDefaultInstance() : values_;
        } else {
          return valuesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setValues(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator value) {
        if (valuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          values_ = value;
          onChanged();
        } else {
          valuesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setValues(
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder builderForValue) {
        if (valuesBuilder_ == null) {
          values_ = builderForValue.build();
          onChanged();
        } else {
          valuesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      public Builder mergeValues(com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator value) {
        if (valuesBuilder_ == null) {
          if (values_ != null) {
            values_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.newBuilder(values_).mergeFrom(value).buildPartial();
          } else {
            values_ = value;
          }
          onChanged();
        } else {
          valuesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearValues() {
        if (valuesBuilder_ == null) {
          values_ = null;
          onChanged();
        } else {
          values_ = null;
          valuesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder getValuesBuilder() {
        
        onChanged();
        return getValuesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder getValuesOrBuilder() {
        if (valuesBuilder_ != null) {
          return valuesBuilder_.getMessageOrBuilder();
        } else {
          return values_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.getDefaultInstance() : values_;
        }
      }
      /**
       * <pre>
       * values node
       * &#64;inject_tag: json:"values" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ValuesOperator values = 3 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder> 
          getValuesFieldBuilder() {
        if (valuesBuilder_ == null) {
          valuesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ValuesOperatorOrBuilder>(
                  getValues(),
                  getParentForChildren(),
                  isClean());
          values_ = null;
        }
        return valuesBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator orderBy_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder> orderByBuilder_;
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       * @return Whether the orderBy field is set.
       */
      public boolean hasOrderBy() {
        return orderByBuilder_ != null || orderBy_ != null;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       * @return The orderBy.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator getOrderBy() {
        if (orderByBuilder_ == null) {
          return orderBy_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.getDefaultInstance() : orderBy_;
        } else {
          return orderByBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setOrderBy(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator value) {
        if (orderByBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          orderBy_ = value;
          onChanged();
        } else {
          orderByBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setOrderBy(
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder builderForValue) {
        if (orderByBuilder_ == null) {
          orderBy_ = builderForValue.build();
          onChanged();
        } else {
          orderByBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      public Builder mergeOrderBy(com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator value) {
        if (orderByBuilder_ == null) {
          if (orderBy_ != null) {
            orderBy_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.newBuilder(orderBy_).mergeFrom(value).buildPartial();
          } else {
            orderBy_ = value;
          }
          onChanged();
        } else {
          orderByBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearOrderBy() {
        if (orderByBuilder_ == null) {
          orderBy_ = null;
          onChanged();
        } else {
          orderBy_ = null;
          orderByBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder getOrderByBuilder() {
        
        onChanged();
        return getOrderByFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder getOrderByOrBuilder() {
        if (orderByBuilder_ != null) {
          return orderByBuilder_.getMessageOrBuilder();
        } else {
          return orderBy_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.getDefaultInstance() : orderBy_;
        }
      }
      /**
       * <pre>
       * OrderBy
       * &#64;inject_tag: json:"order_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OrderByOperator order_by = 4 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder> 
          getOrderByFieldBuilder() {
        if (orderByBuilder_ == null) {
          orderByBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OrderByOperatorOrBuilder>(
                  getOrderBy(),
                  getParentForChildren(),
                  isClean());
          orderBy_ = null;
        }
        return orderByBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator limit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder> limitBuilder_;
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       * @return Whether the limit field is set.
       */
      public boolean hasLimit() {
        return limitBuilder_ != null || limit_ != null;
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       * @return The limit.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator getLimit() {
        if (limitBuilder_ == null) {
          return limit_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.getDefaultInstance() : limit_;
        } else {
          return limitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setLimit(com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator value) {
        if (limitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          limit_ = value;
          onChanged();
        } else {
          limitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setLimit(
          com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder builderForValue) {
        if (limitBuilder_ == null) {
          limit_ = builderForValue.build();
          onChanged();
        } else {
          limitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      public Builder mergeLimit(com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator value) {
        if (limitBuilder_ == null) {
          if (limit_ != null) {
            limit_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.newBuilder(limit_).mergeFrom(value).buildPartial();
          } else {
            limit_ = value;
          }
          onChanged();
        } else {
          limitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearLimit() {
        if (limitBuilder_ == null) {
          limit_ = null;
          onChanged();
        } else {
          limit_ = null;
          limitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder getLimitBuilder() {
        
        onChanged();
        return getLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder getLimitOrBuilder() {
        if (limitBuilder_ != null) {
          return limitBuilder_.getMessageOrBuilder();
        } else {
          return limit_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.getDefaultInstance() : limit_;
        }
      }
      /**
       * <pre>
       * Limit
       * &#64;inject_tag: json:"limit" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.LimitOperator limit = 5 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder> 
          getLimitFieldBuilder() {
        if (limitBuilder_ == null) {
          limitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.LimitOperatorOrBuilder>(
                  getLimit(),
                  getParentForChildren(),
                  isClean());
          limit_ = null;
        }
        return limitBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator offset_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder> offsetBuilder_;
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       * @return Whether the offset field is set.
       */
      public boolean hasOffset() {
        return offsetBuilder_ != null || offset_ != null;
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       * @return The offset.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator getOffset() {
        if (offsetBuilder_ == null) {
          return offset_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.getDefaultInstance() : offset_;
        } else {
          return offsetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setOffset(com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator value) {
        if (offsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          offset_ = value;
          onChanged();
        } else {
          offsetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      public Builder setOffset(
          com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder builderForValue) {
        if (offsetBuilder_ == null) {
          offset_ = builderForValue.build();
          onChanged();
        } else {
          offsetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      public Builder mergeOffset(com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator value) {
        if (offsetBuilder_ == null) {
          if (offset_ != null) {
            offset_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.newBuilder(offset_).mergeFrom(value).buildPartial();
          } else {
            offset_ = value;
          }
          onChanged();
        } else {
          offsetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      public Builder clearOffset() {
        if (offsetBuilder_ == null) {
          offset_ = null;
          onChanged();
        } else {
          offset_ = null;
          offsetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder getOffsetBuilder() {
        
        onChanged();
        return getOffsetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder getOffsetOrBuilder() {
        if (offsetBuilder_ != null) {
          return offsetBuilder_.getMessageOrBuilder();
        } else {
          return offset_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.getDefaultInstance() : offset_;
        }
      }
      /**
       * <pre>
       * Offset
       * &#64;inject_tag: json:offset" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.OffsetOperator offset = 6 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder> 
          getOffsetFieldBuilder() {
        if (offsetBuilder_ == null) {
          offsetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OffsetOperatorOrBuilder>(
                  getOffset(),
                  getParentForChildren(),
                  isClean());
          offset_ = null;
        }
        return offsetBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator fetch_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder> fetchBuilder_;
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       * @return Whether the fetch field is set.
       */
      public boolean hasFetch() {
        return fetchBuilder_ != null || fetch_ != null;
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       * @return The fetch.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator getFetch() {
        if (fetchBuilder_ == null) {
          return fetch_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.getDefaultInstance() : fetch_;
        } else {
          return fetchBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      public Builder setFetch(com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator value) {
        if (fetchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fetch_ = value;
          onChanged();
        } else {
          fetchBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      public Builder setFetch(
          com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder builderForValue) {
        if (fetchBuilder_ == null) {
          fetch_ = builderForValue.build();
          onChanged();
        } else {
          fetchBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      public Builder mergeFetch(com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator value) {
        if (fetchBuilder_ == null) {
          if (fetch_ != null) {
            fetch_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.newBuilder(fetch_).mergeFrom(value).buildPartial();
          } else {
            fetch_ = value;
          }
          onChanged();
        } else {
          fetchBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      public Builder clearFetch() {
        if (fetchBuilder_ == null) {
          fetch_ = null;
          onChanged();
        } else {
          fetch_ = null;
          fetchBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder getFetchBuilder() {
        
        onChanged();
        return getFetchFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder getFetchOrBuilder() {
        if (fetchBuilder_ != null) {
          return fetchBuilder_.getMessageOrBuilder();
        } else {
          return fetch_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.getDefaultInstance() : fetch_;
        }
      }
      /**
       * <pre>
       * Fetch
       * &#64;inject_tag: json:"fetch" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FetchOperator fetch = 7 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder> 
          getFetchFieldBuilder() {
        if (fetchBuilder_ == null) {
          fetchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FetchOperatorOrBuilder>(
                  getFetch(),
                  getParentForChildren(),
                  isClean());
          fetch_ = null;
        }
        return fetchBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator union_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder> unionBuilder_;
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       * @return Whether the union field is set.
       */
      public boolean hasUnion() {
        return unionBuilder_ != null || union_ != null;
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       * @return The union.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator getUnion() {
        if (unionBuilder_ == null) {
          return union_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.getDefaultInstance() : union_;
        } else {
          return unionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      public Builder setUnion(com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator value) {
        if (unionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          union_ = value;
          onChanged();
        } else {
          unionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      public Builder setUnion(
          com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder builderForValue) {
        if (unionBuilder_ == null) {
          union_ = builderForValue.build();
          onChanged();
        } else {
          unionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      public Builder mergeUnion(com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator value) {
        if (unionBuilder_ == null) {
          if (union_ != null) {
            union_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.newBuilder(union_).mergeFrom(value).buildPartial();
          } else {
            union_ = value;
          }
          onChanged();
        } else {
          unionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      public Builder clearUnion() {
        if (unionBuilder_ == null) {
          union_ = null;
          onChanged();
        } else {
          union_ = null;
          unionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder getUnionBuilder() {
        
        onChanged();
        return getUnionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder getUnionOrBuilder() {
        if (unionBuilder_ != null) {
          return unionBuilder_.getMessageOrBuilder();
        } else {
          return union_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.getDefaultInstance() : union_;
        }
      }
      /**
       * <pre>
       * Union
       * &#64;inject_tag: json:"union" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UnionOperator union = 8 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder> 
          getUnionFieldBuilder() {
        if (unionBuilder_ == null) {
          unionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UnionOperatorOrBuilder>(
                  getUnion(),
                  getParentForChildren(),
                  isClean());
          union_ = null;
        }
        return unionBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator groupBy_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder> groupByBuilder_;
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       * @return Whether the groupBy field is set.
       */
      public boolean hasGroupBy() {
        return groupByBuilder_ != null || groupBy_ != null;
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       * @return The groupBy.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator getGroupBy() {
        if (groupByBuilder_ == null) {
          return groupBy_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.getDefaultInstance() : groupBy_;
        } else {
          return groupByBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      public Builder setGroupBy(com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator value) {
        if (groupByBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupBy_ = value;
          onChanged();
        } else {
          groupByBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      public Builder setGroupBy(
          com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder builderForValue) {
        if (groupByBuilder_ == null) {
          groupBy_ = builderForValue.build();
          onChanged();
        } else {
          groupByBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      public Builder mergeGroupBy(com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator value) {
        if (groupByBuilder_ == null) {
          if (groupBy_ != null) {
            groupBy_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.newBuilder(groupBy_).mergeFrom(value).buildPartial();
          } else {
            groupBy_ = value;
          }
          onChanged();
        } else {
          groupByBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      public Builder clearGroupBy() {
        if (groupByBuilder_ == null) {
          groupBy_ = null;
          onChanged();
        } else {
          groupBy_ = null;
          groupByBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder getGroupByBuilder() {
        
        onChanged();
        return getGroupByFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder getGroupByOrBuilder() {
        if (groupByBuilder_ != null) {
          return groupByBuilder_.getMessageOrBuilder();
        } else {
          return groupBy_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.getDefaultInstance() : groupBy_;
        }
      }
      /**
       * <pre>
       * GroupBy
       * &#64;inject_tag: json:"group_by" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.GroupByOperator group_by = 9 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder> 
          getGroupByFieldBuilder() {
        if (groupByBuilder_ == null) {
          groupByBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.GroupByOperatorOrBuilder>(
                  getGroupBy(),
                  getParentForChildren(),
                  isClean());
          groupBy_ = null;
        }
        return groupByBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator having_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder> havingBuilder_;
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       * @return Whether the having field is set.
       */
      public boolean hasHaving() {
        return havingBuilder_ != null || having_ != null;
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       * @return The having.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator getHaving() {
        if (havingBuilder_ == null) {
          return having_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.getDefaultInstance() : having_;
        } else {
          return havingBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      public Builder setHaving(com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator value) {
        if (havingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          having_ = value;
          onChanged();
        } else {
          havingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      public Builder setHaving(
          com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder builderForValue) {
        if (havingBuilder_ == null) {
          having_ = builderForValue.build();
          onChanged();
        } else {
          havingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      public Builder mergeHaving(com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator value) {
        if (havingBuilder_ == null) {
          if (having_ != null) {
            having_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.newBuilder(having_).mergeFrom(value).buildPartial();
          } else {
            having_ = value;
          }
          onChanged();
        } else {
          havingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      public Builder clearHaving() {
        if (havingBuilder_ == null) {
          having_ = null;
          onChanged();
        } else {
          having_ = null;
          havingBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder getHavingBuilder() {
        
        onChanged();
        return getHavingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder getHavingOrBuilder() {
        if (havingBuilder_ != null) {
          return havingBuilder_.getMessageOrBuilder();
        } else {
          return having_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.getDefaultInstance() : having_;
        }
      }
      /**
       * <pre>
       * Having
       * &#64;inject_tag: json:"having" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.HavingOperator having = 10 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder> 
          getHavingFieldBuilder() {
        if (havingBuilder_ == null) {
          havingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HavingOperatorOrBuilder>(
                  getHaving(),
                  getParentForChildren(),
                  isClean());
          having_ = null;
        }
        return havingBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator const_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder> constBuilder_;
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       * @return Whether the const field is set.
       */
      public boolean hasConst() {
        return constBuilder_ != null || const_ != null;
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       * @return The const.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator getConst() {
        if (constBuilder_ == null) {
          return const_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.getDefaultInstance() : const_;
        } else {
          return constBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      public Builder setConst(com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator value) {
        if (constBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          const_ = value;
          onChanged();
        } else {
          constBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      public Builder setConst(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder builderForValue) {
        if (constBuilder_ == null) {
          const_ = builderForValue.build();
          onChanged();
        } else {
          constBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      public Builder mergeConst(com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator value) {
        if (constBuilder_ == null) {
          if (const_ != null) {
            const_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.newBuilder(const_).mergeFrom(value).buildPartial();
          } else {
            const_ = value;
          }
          onChanged();
        } else {
          constBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      public Builder clearConst() {
        if (constBuilder_ == null) {
          const_ = null;
          onChanged();
        } else {
          const_ = null;
          constBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder getConstBuilder() {
        
        onChanged();
        return getConstFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder getConstOrBuilder() {
        if (constBuilder_ != null) {
          return constBuilder_.getMessageOrBuilder();
        } else {
          return const_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.getDefaultInstance() : const_;
        }
      }
      /**
       * <pre>
       * Const
       * &#64;inject_tag: json:"const" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ConstOperator const = 11 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder> 
          getConstFieldBuilder() {
        if (constBuilder_ == null) {
          constBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConstOperatorOrBuilder>(
                  getConst(),
                  getParentForChildren(),
                  isClean());
          const_ = null;
        }
        return constBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator dimension_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder> dimensionBuilder_;
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       * @return Whether the dimension field is set.
       */
      public boolean hasDimension() {
        return dimensionBuilder_ != null || dimension_ != null;
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       * @return The dimension.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator getDimension() {
        if (dimensionBuilder_ == null) {
          return dimension_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.getDefaultInstance() : dimension_;
        } else {
          return dimensionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      public Builder setDimension(com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator value) {
        if (dimensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dimension_ = value;
          onChanged();
        } else {
          dimensionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      public Builder setDimension(
          com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder builderForValue) {
        if (dimensionBuilder_ == null) {
          dimension_ = builderForValue.build();
          onChanged();
        } else {
          dimensionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      public Builder mergeDimension(com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator value) {
        if (dimensionBuilder_ == null) {
          if (dimension_ != null) {
            dimension_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.newBuilder(dimension_).mergeFrom(value).buildPartial();
          } else {
            dimension_ = value;
          }
          onChanged();
        } else {
          dimensionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      public Builder clearDimension() {
        if (dimensionBuilder_ == null) {
          dimension_ = null;
          onChanged();
        } else {
          dimension_ = null;
          dimensionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder getDimensionBuilder() {
        
        onChanged();
        return getDimensionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder getDimensionOrBuilder() {
        if (dimensionBuilder_ != null) {
          return dimensionBuilder_.getMessageOrBuilder();
        } else {
          return dimension_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.getDefaultInstance() : dimension_;
        }
      }
      /**
       * <pre>
       * Dimension
       * &#64;inject_tag: json:"dimension" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.DimensionOperator dimension = 12 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder> 
          getDimensionFieldBuilder() {
        if (dimensionBuilder_ == null) {
          dimensionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.DimensionOperatorOrBuilder>(
                  getDimension(),
                  getParentForChildren(),
                  isClean());
          dimension_ = null;
        }
        return dimensionBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator except_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder> exceptBuilder_;
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       * @return Whether the except field is set.
       */
      public boolean hasExcept() {
        return exceptBuilder_ != null || except_ != null;
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       * @return The except.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator getExcept() {
        if (exceptBuilder_ == null) {
          return except_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.getDefaultInstance() : except_;
        } else {
          return exceptBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      public Builder setExcept(com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator value) {
        if (exceptBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          except_ = value;
          onChanged();
        } else {
          exceptBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      public Builder setExcept(
          com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder builderForValue) {
        if (exceptBuilder_ == null) {
          except_ = builderForValue.build();
          onChanged();
        } else {
          exceptBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      public Builder mergeExcept(com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator value) {
        if (exceptBuilder_ == null) {
          if (except_ != null) {
            except_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.newBuilder(except_).mergeFrom(value).buildPartial();
          } else {
            except_ = value;
          }
          onChanged();
        } else {
          exceptBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      public Builder clearExcept() {
        if (exceptBuilder_ == null) {
          except_ = null;
          onChanged();
        } else {
          except_ = null;
          exceptBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder getExceptBuilder() {
        
        onChanged();
        return getExceptFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder getExceptOrBuilder() {
        if (exceptBuilder_ != null) {
          return exceptBuilder_.getMessageOrBuilder();
        } else {
          return except_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.getDefaultInstance() : except_;
        }
      }
      /**
       * <pre>
       * Except
       * &#64;inject_tag: json:"except" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.ExceptOperator except = 13 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder> 
          getExceptFieldBuilder() {
        if (exceptBuilder_ == null) {
          exceptBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ExceptOperatorOrBuilder>(
                  getExcept(),
                  getParentForChildren(),
                  isClean());
          except_ = null;
        }
        return exceptBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator intersect_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder> intersectBuilder_;
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       * @return Whether the intersect field is set.
       */
      public boolean hasIntersect() {
        return intersectBuilder_ != null || intersect_ != null;
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       * @return The intersect.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator getIntersect() {
        if (intersectBuilder_ == null) {
          return intersect_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.getDefaultInstance() : intersect_;
        } else {
          return intersectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      public Builder setIntersect(com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator value) {
        if (intersectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          intersect_ = value;
          onChanged();
        } else {
          intersectBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      public Builder setIntersect(
          com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder builderForValue) {
        if (intersectBuilder_ == null) {
          intersect_ = builderForValue.build();
          onChanged();
        } else {
          intersectBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      public Builder mergeIntersect(com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator value) {
        if (intersectBuilder_ == null) {
          if (intersect_ != null) {
            intersect_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.newBuilder(intersect_).mergeFrom(value).buildPartial();
          } else {
            intersect_ = value;
          }
          onChanged();
        } else {
          intersectBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      public Builder clearIntersect() {
        if (intersectBuilder_ == null) {
          intersect_ = null;
          onChanged();
        } else {
          intersect_ = null;
          intersectBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder getIntersectBuilder() {
        
        onChanged();
        return getIntersectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder getIntersectOrBuilder() {
        if (intersectBuilder_ != null) {
          return intersectBuilder_.getMessageOrBuilder();
        } else {
          return intersect_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.getDefaultInstance() : intersect_;
        }
      }
      /**
       * <pre>
       * Intersect
       * &#64;inject_tag: json:"intersect" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.IntersectOperator intersect = 14 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder> 
          getIntersectFieldBuilder() {
        if (intersectBuilder_ == null) {
          intersectBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.IntersectOperatorOrBuilder>(
                  getIntersect(),
                  getParentForChildren(),
                  isClean());
          intersect_ = null;
        }
        return intersectBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator filter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder> filterBuilder_;
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       * @return Whether the filter field is set.
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       * @return The filter.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      public Builder setFilter(com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      public Builder setFilter(
          com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      public Builder mergeFilter(com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.getDefaultInstance() : filter_;
        }
      }
      /**
       * <pre>
       * Filter
       * &#64;inject_tag: json:"filter" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FilterOperator filter = 15 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FilterOperatorOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator udtf_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder> udtfBuilder_;
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       * @return Whether the udtf field is set.
       */
      public boolean hasUdtf() {
        return udtfBuilder_ != null || udtf_ != null;
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       * @return The udtf.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator getUdtf() {
        if (udtfBuilder_ == null) {
          return udtf_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.getDefaultInstance() : udtf_;
        } else {
          return udtfBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      public Builder setUdtf(com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator value) {
        if (udtfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          udtf_ = value;
          onChanged();
        } else {
          udtfBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      public Builder setUdtf(
          com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder builderForValue) {
        if (udtfBuilder_ == null) {
          udtf_ = builderForValue.build();
          onChanged();
        } else {
          udtfBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      public Builder mergeUdtf(com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator value) {
        if (udtfBuilder_ == null) {
          if (udtf_ != null) {
            udtf_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.newBuilder(udtf_).mergeFrom(value).buildPartial();
          } else {
            udtf_ = value;
          }
          onChanged();
        } else {
          udtfBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      public Builder clearUdtf() {
        if (udtfBuilder_ == null) {
          udtf_ = null;
          onChanged();
        } else {
          udtf_ = null;
          udtfBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder getUdtfBuilder() {
        
        onChanged();
        return getUdtfFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder getUdtfOrBuilder() {
        if (udtfBuilder_ != null) {
          return udtfBuilder_.getMessageOrBuilder();
        } else {
          return udtf_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.getDefaultInstance() : udtf_;
        }
      }
      /**
       * <pre>
       * UDTF
       * &#64;inject_tag: json:"udtf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTFOperator udtf = 16 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder> 
          getUdtfFieldBuilder() {
        if (udtfBuilder_ == null) {
          udtfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UDTFOperatorOrBuilder>(
                  getUdtf(),
                  getParentForChildren(),
                  isClean());
          udtf_ = null;
        }
        return udtfBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator udttf_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder> udttfBuilder_;
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       * @return Whether the udttf field is set.
       */
      public boolean hasUdttf() {
        return udttfBuilder_ != null || udttf_ != null;
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       * @return The udttf.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator getUdttf() {
        if (udttfBuilder_ == null) {
          return udttf_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.getDefaultInstance() : udttf_;
        } else {
          return udttfBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      public Builder setUdttf(com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator value) {
        if (udttfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          udttf_ = value;
          onChanged();
        } else {
          udttfBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      public Builder setUdttf(
          com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder builderForValue) {
        if (udttfBuilder_ == null) {
          udttf_ = builderForValue.build();
          onChanged();
        } else {
          udttfBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      public Builder mergeUdttf(com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator value) {
        if (udttfBuilder_ == null) {
          if (udttf_ != null) {
            udttf_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.newBuilder(udttf_).mergeFrom(value).buildPartial();
          } else {
            udttf_ = value;
          }
          onChanged();
        } else {
          udttfBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      public Builder clearUdttf() {
        if (udttfBuilder_ == null) {
          udttf_ = null;
          onChanged();
        } else {
          udttf_ = null;
          udttfBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder getUdttfBuilder() {
        
        onChanged();
        return getUdttfFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder getUdttfOrBuilder() {
        if (udttfBuilder_ != null) {
          return udttfBuilder_.getMessageOrBuilder();
        } else {
          return udttf_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.getDefaultInstance() : udttf_;
        }
      }
      /**
       * <pre>
       * UDTTF
       * &#64;inject_tag: json:"udttf" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.UDTTFOperator udttf = 17 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder> 
          getUdttfFieldBuilder() {
        if (udttfBuilder_ == null) {
          udttfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.UDTTFOperatorOrBuilder>(
                  getUdttf(),
                  getParentForChildren(),
                  isClean());
          udttf_ = null;
        }
        return udttfBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator join_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder> joinBuilder_;
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       * @return Whether the join field is set.
       */
      public boolean hasJoin() {
        return joinBuilder_ != null || join_ != null;
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       * @return The join.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator getJoin() {
        if (joinBuilder_ == null) {
          return join_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.getDefaultInstance() : join_;
        } else {
          return joinBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      public Builder setJoin(com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator value) {
        if (joinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          join_ = value;
          onChanged();
        } else {
          joinBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      public Builder setJoin(
          com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder builderForValue) {
        if (joinBuilder_ == null) {
          join_ = builderForValue.build();
          onChanged();
        } else {
          joinBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      public Builder mergeJoin(com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator value) {
        if (joinBuilder_ == null) {
          if (join_ != null) {
            join_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.newBuilder(join_).mergeFrom(value).buildPartial();
          } else {
            join_ = value;
          }
          onChanged();
        } else {
          joinBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      public Builder clearJoin() {
        if (joinBuilder_ == null) {
          join_ = null;
          onChanged();
        } else {
          join_ = null;
          joinBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder getJoinBuilder() {
        
        onChanged();
        return getJoinFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder getJoinOrBuilder() {
        if (joinBuilder_ != null) {
          return joinBuilder_.getMessageOrBuilder();
        } else {
          return join_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.getDefaultInstance() : join_;
        }
      }
      /**
       * <pre>
       * Join
       * &#64;inject_tag: json:"join" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.JoinOperator join = 18 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder> 
          getJoinFieldBuilder() {
        if (joinBuilder_ == null) {
          joinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperator.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.JoinOperatorOrBuilder>(
                  getJoin(),
                  getParentForChildren(),
                  isClean());
          join_ = null;
        }
        return joinBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.OperatorProperty)
    }

    // @@protoc_insertion_point(class_scope:flink.OperatorProperty)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OperatorProperty>
        PARSER = new com.google.protobuf.AbstractParser<OperatorProperty>() {
      @java.lang.Override
      public OperatorProperty parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OperatorProperty(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OperatorProperty> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorProperty> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlinkOperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FlinkOperator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type getType();

    /**
     * <pre>
     * nodeid is unique in this flow.
     * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>string id = 2 [(.validator.field) = { ... }</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * nodeid is unique in this flow.
     * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>string id = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * this node name
     * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string name = 3 [(.validator.field) = { ... }</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * this node name
     * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string name = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * the upstream node id
     * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream = 4 [(.validator.field) = { ... }</code>
     * @return The upstream.
     */
    java.lang.String getUpstream();
    /**
     * <pre>
     * the upstream node id
     * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for upstream.
     */
    com.google.protobuf.ByteString
        getUpstreamBytes();

    /**
     * <pre>
     * the right upstream node id
     * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
     * @return The upstreamRight.
     */
    java.lang.String getUpstreamRight();
    /**
     * <pre>
     * the right upstream node id
     * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for upstreamRight.
     */
    com.google.protobuf.ByteString
        getUpstreamRightBytes();

    /**
     * <pre>
     * the downstream node id
     * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
     * @return The downStream.
     */
    java.lang.String getDownStream();
    /**
     * <pre>
     * the downstream node id
     * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
     * @return The bytes for downStream.
     */
    com.google.protobuf.ByteString
        getDownStreamBytes();

    /**
     * <pre>
     * the PointX
     * &#64;inject_tag: json:"point_x" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
     * </pre>
     *
     * <code>int32 point_x = 7 [(.validator.field) = { ... }</code>
     * @return The pointX.
     */
    int getPointX();

    /**
     * <pre>
     * the PointY
     * &#64;inject_tag: json:"point_y" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
     * </pre>
     *
     * <code>int32 point_y = 8 [(.validator.field) = { ... }</code>
     * @return The pointY.
     */
    int getPointY();

    /**
     * <pre>
     * this operator's property
     * &#64;inject_tag: json:"property" default:""
     * </pre>
     *
     * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
     * @return Whether the property field is set.
     */
    boolean hasProperty();
    /**
     * <pre>
     * this operator's property
     * &#64;inject_tag: json:"property" default:""
     * </pre>
     *
     * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
     * @return The property.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty getProperty();
    /**
     * <pre>
     * this operator's property
     * &#64;inject_tag: json:"property" default:""
     * </pre>
     *
     * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder getPropertyOrBuilder();
  }
  /**
   * <pre>
   * FlinkOperator
   * </pre>
   *
   * Protobuf type {@code flink.FlinkOperator}
   */
  public static final class FlinkOperator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FlinkOperator)
      FlinkOperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkOperator.newBuilder() to construct.
    private FlinkOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkOperator() {
      type_ = 0;
      id_ = "";
      name_ = "";
      upstream_ = "";
      upstreamRight_ = "";
      downStream_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlinkOperator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkOperator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              upstream_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              upstreamRight_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              downStream_ = s;
              break;
            }
            case 56: {

              pointX_ = input.readInt32();
              break;
            }
            case 64: {

              pointY_ = input.readInt32();
              break;
            }
            case 74: {
              com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder subBuilder = null;
              if (property_ != null) {
                subBuilder = property_.toBuilder();
              }
              property_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(property_);
                property_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Builder.class);
    }

    /**
     * Protobuf enum {@code flink.FlinkOperator.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Empty = 0;</code>
       */
      Empty(0),
      /**
       * <code>Values = 1;</code>
       */
      Values(1),
      /**
       * <code>Const = 2;</code>
       */
      Const(2),
      /**
       * <code>Source = 3;</code>
       */
      Source(3),
      /**
       * <code>Dimension = 4;</code>
       */
      Dimension(4),
      /**
       * <code>Dest = 5;</code>
       */
      Dest(5),
      /**
       * <code>OrderBy = 6;</code>
       */
      OrderBy(6),
      /**
       * <code>Limit = 7;</code>
       */
      Limit(7),
      /**
       * <code>Offset = 8;</code>
       */
      Offset(8),
      /**
       * <code>Fetch = 9;</code>
       */
      Fetch(9),
      /**
       * <code>Filter = 10;</code>
       */
      Filter(10),
      /**
       * <code>Union = 11;</code>
       */
      Union(11),
      /**
       * <code>Except = 12;</code>
       */
      Except(12),
      /**
       * <code>Intersect = 13;</code>
       */
      Intersect(13),
      /**
       * <code>GroupBy = 14;</code>
       */
      GroupBy(14),
      /**
       * <code>Having = 15;</code>
       */
      Having(15),
      /**
       * <code>Join = 16;</code>
       */
      Join(16),
      /**
       * <code>UDTF = 17;</code>
       */
      UDTF(17),
      /**
       * <code>UDTTF = 18;</code>
       */
      UDTTF(18),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>Empty = 0;</code>
       */
      public static final int Empty_VALUE = 0;
      /**
       * <code>Values = 1;</code>
       */
      public static final int Values_VALUE = 1;
      /**
       * <code>Const = 2;</code>
       */
      public static final int Const_VALUE = 2;
      /**
       * <code>Source = 3;</code>
       */
      public static final int Source_VALUE = 3;
      /**
       * <code>Dimension = 4;</code>
       */
      public static final int Dimension_VALUE = 4;
      /**
       * <code>Dest = 5;</code>
       */
      public static final int Dest_VALUE = 5;
      /**
       * <code>OrderBy = 6;</code>
       */
      public static final int OrderBy_VALUE = 6;
      /**
       * <code>Limit = 7;</code>
       */
      public static final int Limit_VALUE = 7;
      /**
       * <code>Offset = 8;</code>
       */
      public static final int Offset_VALUE = 8;
      /**
       * <code>Fetch = 9;</code>
       */
      public static final int Fetch_VALUE = 9;
      /**
       * <code>Filter = 10;</code>
       */
      public static final int Filter_VALUE = 10;
      /**
       * <code>Union = 11;</code>
       */
      public static final int Union_VALUE = 11;
      /**
       * <code>Except = 12;</code>
       */
      public static final int Except_VALUE = 12;
      /**
       * <code>Intersect = 13;</code>
       */
      public static final int Intersect_VALUE = 13;
      /**
       * <code>GroupBy = 14;</code>
       */
      public static final int GroupBy_VALUE = 14;
      /**
       * <code>Having = 15;</code>
       */
      public static final int Having_VALUE = 15;
      /**
       * <code>Join = 16;</code>
       */
      public static final int Join_VALUE = 16;
      /**
       * <code>UDTF = 17;</code>
       */
      public static final int UDTF_VALUE = 17;
      /**
       * <code>UDTTF = 18;</code>
       */
      public static final int UDTTF_VALUE = 18;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return Empty;
          case 1: return Values;
          case 2: return Const;
          case 3: return Source;
          case 4: return Dimension;
          case 5: return Dest;
          case 6: return OrderBy;
          case 7: return Limit;
          case 8: return Offset;
          case 9: return Fetch;
          case 10: return Filter;
          case 11: return Union;
          case 12: return Except;
          case 13: return Intersect;
          case 14: return GroupBy;
          case 15: return Having;
          case 16: return Join;
          case 17: return UDTF;
          case 18: return UDTTF;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:flink.FlinkOperator.Type)
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type getType() {
      @SuppressWarnings("deprecation")
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type result = com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type.valueOf(type_);
      return result == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type.UNRECOGNIZED : result;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * nodeid is unique in this flow.
     * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>string id = 2 [(.validator.field) = { ... }</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * nodeid is unique in this flow.
     * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
     * </pre>
     *
     * <code>string id = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * this node name
     * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string name = 3 [(.validator.field) = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * this node name
     * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string name = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UPSTREAM_FIELD_NUMBER = 4;
    private volatile java.lang.Object upstream_;
    /**
     * <pre>
     * the upstream node id
     * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream = 4 [(.validator.field) = { ... }</code>
     * @return The upstream.
     */
    @java.lang.Override
    public java.lang.String getUpstream() {
      java.lang.Object ref = upstream_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        upstream_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the upstream node id
     * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for upstream.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUpstreamBytes() {
      java.lang.Object ref = upstream_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        upstream_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UPSTREAM_RIGHT_FIELD_NUMBER = 5;
    private volatile java.lang.Object upstreamRight_;
    /**
     * <pre>
     * the right upstream node id
     * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
     * @return The upstreamRight.
     */
    @java.lang.Override
    public java.lang.String getUpstreamRight() {
      java.lang.Object ref = upstreamRight_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        upstreamRight_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the right upstream node id
     * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for upstreamRight.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUpstreamRightBytes() {
      java.lang.Object ref = upstreamRight_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        upstreamRight_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DOWN_STREAM_FIELD_NUMBER = 6;
    private volatile java.lang.Object downStream_;
    /**
     * <pre>
     * the downstream node id
     * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
     * @return The downStream.
     */
    @java.lang.Override
    public java.lang.String getDownStream() {
      java.lang.Object ref = downStream_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        downStream_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the downstream node id
     * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
     * </pre>
     *
     * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
     * @return The bytes for downStream.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDownStreamBytes() {
      java.lang.Object ref = downStream_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        downStream_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int POINT_X_FIELD_NUMBER = 7;
    private int pointX_;
    /**
     * <pre>
     * the PointX
     * &#64;inject_tag: json:"point_x" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
     * </pre>
     *
     * <code>int32 point_x = 7 [(.validator.field) = { ... }</code>
     * @return The pointX.
     */
    @java.lang.Override
    public int getPointX() {
      return pointX_;
    }

    public static final int POINT_Y_FIELD_NUMBER = 8;
    private int pointY_;
    /**
     * <pre>
     * the PointY
     * &#64;inject_tag: json:"point_y" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
     * </pre>
     *
     * <code>int32 point_y = 8 [(.validator.field) = { ... }</code>
     * @return The pointY.
     */
    @java.lang.Override
    public int getPointY() {
      return pointY_;
    }

    public static final int PROPERTY_FIELD_NUMBER = 9;
    private com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty property_;
    /**
     * <pre>
     * this operator's property
     * &#64;inject_tag: json:"property" default:""
     * </pre>
     *
     * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
     * @return Whether the property field is set.
     */
    @java.lang.Override
    public boolean hasProperty() {
      return property_ != null;
    }
    /**
     * <pre>
     * this operator's property
     * &#64;inject_tag: json:"property" default:""
     * </pre>
     *
     * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
     * @return The property.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty getProperty() {
      return property_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.getDefaultInstance() : property_;
    }
    /**
     * <pre>
     * this operator's property
     * &#64;inject_tag: json:"property" default:""
     * </pre>
     *
     * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder getPropertyOrBuilder() {
      return getProperty();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type.Empty.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, id_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (!getUpstreamBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, upstream_);
      }
      if (!getUpstreamRightBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, upstreamRight_);
      }
      if (!getDownStreamBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, downStream_);
      }
      if (pointX_ != 0) {
        output.writeInt32(7, pointX_);
      }
      if (pointY_ != 0) {
        output.writeInt32(8, pointY_);
      }
      if (property_ != null) {
        output.writeMessage(9, getProperty());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type.Empty.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, id_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (!getUpstreamBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, upstream_);
      }
      if (!getUpstreamRightBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, upstreamRight_);
      }
      if (!getDownStreamBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, downStream_);
      }
      if (pointX_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, pointX_);
      }
      if (pointY_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, pointY_);
      }
      if (property_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getProperty());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator) obj;

      if (type_ != other.type_) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getUpstream()
          .equals(other.getUpstream())) return false;
      if (!getUpstreamRight()
          .equals(other.getUpstreamRight())) return false;
      if (!getDownStream()
          .equals(other.getDownStream())) return false;
      if (getPointX()
          != other.getPointX()) return false;
      if (getPointY()
          != other.getPointY()) return false;
      if (hasProperty() != other.hasProperty()) return false;
      if (hasProperty()) {
        if (!getProperty()
            .equals(other.getProperty())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + UPSTREAM_FIELD_NUMBER;
      hash = (53 * hash) + getUpstream().hashCode();
      hash = (37 * hash) + UPSTREAM_RIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getUpstreamRight().hashCode();
      hash = (37 * hash) + DOWN_STREAM_FIELD_NUMBER;
      hash = (53 * hash) + getDownStream().hashCode();
      hash = (37 * hash) + POINT_X_FIELD_NUMBER;
      hash = (53 * hash) + getPointX();
      hash = (37 * hash) + POINT_Y_FIELD_NUMBER;
      hash = (53 * hash) + getPointY();
      if (hasProperty()) {
        hash = (37 * hash) + PROPERTY_FIELD_NUMBER;
        hash = (53 * hash) + getProperty().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FlinkOperator
     * </pre>
     *
     * Protobuf type {@code flink.FlinkOperator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FlinkOperator)
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkOperator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        type_ = 0;

        id_ = "";

        name_ = "";

        upstream_ = "";

        upstreamRight_ = "";

        downStream_ = "";

        pointX_ = 0;

        pointY_ = 0;

        if (propertyBuilder_ == null) {
          property_ = null;
        } else {
          property_ = null;
          propertyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkOperator_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator(this);
        result.type_ = type_;
        result.id_ = id_;
        result.name_ = name_;
        result.upstream_ = upstream_;
        result.upstreamRight_ = upstreamRight_;
        result.downStream_ = downStream_;
        result.pointX_ = pointX_;
        result.pointY_ = pointY_;
        if (propertyBuilder_ == null) {
          result.property_ = property_;
        } else {
          result.property_ = propertyBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getUpstream().isEmpty()) {
          upstream_ = other.upstream_;
          onChanged();
        }
        if (!other.getUpstreamRight().isEmpty()) {
          upstreamRight_ = other.upstreamRight_;
          onChanged();
        }
        if (!other.getDownStream().isEmpty()) {
          downStream_ = other.downStream_;
          onChanged();
        }
        if (other.getPointX() != 0) {
          setPointX(other.getPointX());
        }
        if (other.getPointY() != 0) {
          setPointY(other.getPointY());
        }
        if (other.hasProperty()) {
          mergeProperty(other.getProperty());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type getType() {
        @SuppressWarnings("deprecation")
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type result = com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type.valueOf(type_);
        return result == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * OperatorType one of 1/2/3.../18 "1-Values" "2-Const" "3-Source" "4-Dimension" "5-Dest" "6-OrderBy" "7-Limit" "8-Offset" "9-Fetch" "10-Filter" "11-Union" "12-Except" "13-Intersect" "14-GroupBy" "15-Having" "16-Join" "17-UDTF" "18-UDTTF"
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>.flink.FlinkOperator.Type type = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * nodeid is unique in this flow.
       * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>string id = 2 [(.validator.field) = { ... }</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * nodeid is unique in this flow.
       * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>string id = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * nodeid is unique in this flow.
       * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>string id = 2 [(.validator.field) = { ... }</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * nodeid is unique in this flow.
       * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>string id = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * nodeid is unique in this flow.
       * &#64;inject_tag: json:"id" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
       * </pre>
       *
       * <code>string id = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * this node name
       * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string name = 3 [(.validator.field) = { ... }</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * this node name
       * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string name = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * this node name
       * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string name = 3 [(.validator.field) = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * this node name
       * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string name = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * this node name
       * &#64;inject_tag: json:"name" default:"" binding:"gte=0,lte=64" required:"true" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string name = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object upstream_ = "";
      /**
       * <pre>
       * the upstream node id
       * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream = 4 [(.validator.field) = { ... }</code>
       * @return The upstream.
       */
      public java.lang.String getUpstream() {
        java.lang.Object ref = upstream_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          upstream_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the upstream node id
       * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream = 4 [(.validator.field) = { ... }</code>
       * @return The bytes for upstream.
       */
      public com.google.protobuf.ByteString
          getUpstreamBytes() {
        java.lang.Object ref = upstream_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          upstream_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the upstream node id
       * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream = 4 [(.validator.field) = { ... }</code>
       * @param value The upstream to set.
       * @return This builder for chaining.
       */
      public Builder setUpstream(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        upstream_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the upstream node id
       * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream = 4 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearUpstream() {
        
        upstream_ = getDefaultInstance().getUpstream();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the upstream node id
       * &#64;inject_tag: json:"upstream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream = 4 [(.validator.field) = { ... }</code>
       * @param value The bytes for upstream to set.
       * @return This builder for chaining.
       */
      public Builder setUpstreamBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        upstream_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object upstreamRight_ = "";
      /**
       * <pre>
       * the right upstream node id
       * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
       * @return The upstreamRight.
       */
      public java.lang.String getUpstreamRight() {
        java.lang.Object ref = upstreamRight_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          upstreamRight_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the right upstream node id
       * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
       * @return The bytes for upstreamRight.
       */
      public com.google.protobuf.ByteString
          getUpstreamRightBytes() {
        java.lang.Object ref = upstreamRight_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          upstreamRight_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the right upstream node id
       * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
       * @param value The upstreamRight to set.
       * @return This builder for chaining.
       */
      public Builder setUpstreamRight(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        upstreamRight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the right upstream node id
       * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearUpstreamRight() {
        
        upstreamRight_ = getDefaultInstance().getUpstreamRight();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the right upstream node id
       * &#64;inject_tag: json:"upstream_right" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string upstream_right = 5 [(.validator.field) = { ... }</code>
       * @param value The bytes for upstreamRight to set.
       * @return This builder for chaining.
       */
      public Builder setUpstreamRightBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        upstreamRight_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object downStream_ = "";
      /**
       * <pre>
       * the downstream node id
       * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
       * @return The downStream.
       */
      public java.lang.String getDownStream() {
        java.lang.Object ref = downStream_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          downStream_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the downstream node id
       * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
       * @return The bytes for downStream.
       */
      public com.google.protobuf.ByteString
          getDownStreamBytes() {
        java.lang.Object ref = downStream_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          downStream_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the downstream node id
       * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
       * @param value The downStream to set.
       * @return This builder for chaining.
       */
      public Builder setDownStream(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        downStream_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the downstream node id
       * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearDownStream() {
        
        downStream_ = getDefaultInstance().getDownStream();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the downstream node id
       * &#64;inject_tag: json:"down_stream" default:"" binding:"gte=0,lte=20" required:"true" minLength:"0" maxLength:"20"
       * </pre>
       *
       * <code>string down_stream = 6 [(.validator.field) = { ... }</code>
       * @param value The bytes for downStream to set.
       * @return This builder for chaining.
       */
      public Builder setDownStreamBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        downStream_ = value;
        onChanged();
        return this;
      }

      private int pointX_ ;
      /**
       * <pre>
       * the PointX
       * &#64;inject_tag: json:"point_x" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
       * </pre>
       *
       * <code>int32 point_x = 7 [(.validator.field) = { ... }</code>
       * @return The pointX.
       */
      @java.lang.Override
      public int getPointX() {
        return pointX_;
      }
      /**
       * <pre>
       * the PointX
       * &#64;inject_tag: json:"point_x" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
       * </pre>
       *
       * <code>int32 point_x = 7 [(.validator.field) = { ... }</code>
       * @param value The pointX to set.
       * @return This builder for chaining.
       */
      public Builder setPointX(int value) {
        
        pointX_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the PointX
       * &#64;inject_tag: json:"point_x" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
       * </pre>
       *
       * <code>int32 point_x = 7 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPointX() {
        
        pointX_ = 0;
        onChanged();
        return this;
      }

      private int pointY_ ;
      /**
       * <pre>
       * the PointY
       * &#64;inject_tag: json:"point_y" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
       * </pre>
       *
       * <code>int32 point_y = 8 [(.validator.field) = { ... }</code>
       * @return The pointY.
       */
      @java.lang.Override
      public int getPointY() {
        return pointY_;
      }
      /**
       * <pre>
       * the PointY
       * &#64;inject_tag: json:"point_y" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
       * </pre>
       *
       * <code>int32 point_y = 8 [(.validator.field) = { ... }</code>
       * @param value The pointY to set.
       * @return This builder for chaining.
       */
      public Builder setPointY(int value) {
        
        pointY_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the PointY
       * &#64;inject_tag: json:"point_y" default:"" binding:"gte=1,lte=200" required:"true" minLength:"1" maxLength:"200"
       * </pre>
       *
       * <code>int32 point_y = 8 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPointY() {
        
        pointY_ = 0;
        onChanged();
        return this;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty property_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder> propertyBuilder_;
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       * @return Whether the property field is set.
       */
      public boolean hasProperty() {
        return propertyBuilder_ != null || property_ != null;
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       * @return The property.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty getProperty() {
        if (propertyBuilder_ == null) {
          return property_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.getDefaultInstance() : property_;
        } else {
          return propertyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      public Builder setProperty(com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          property_ = value;
          onChanged();
        } else {
          propertyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      public Builder setProperty(
          com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          property_ = builderForValue.build();
          onChanged();
        } else {
          propertyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      public Builder mergeProperty(com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty value) {
        if (propertyBuilder_ == null) {
          if (property_ != null) {
            property_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.newBuilder(property_).mergeFrom(value).buildPartial();
          } else {
            property_ = value;
          }
          onChanged();
        } else {
          propertyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      public Builder clearProperty() {
        if (propertyBuilder_ == null) {
          property_ = null;
          onChanged();
        } else {
          property_ = null;
          propertyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder getPropertyBuilder() {
        
        onChanged();
        return getPropertyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder getPropertyOrBuilder() {
        if (propertyBuilder_ != null) {
          return propertyBuilder_.getMessageOrBuilder();
        } else {
          return property_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.getDefaultInstance() : property_;
        }
      }
      /**
       * <pre>
       * this operator's property
       * &#64;inject_tag: json:"property" default:""
       * </pre>
       *
       * <code>.flink.OperatorProperty property = 9 [(.validator.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder> 
          getPropertyFieldBuilder() {
        if (propertyBuilder_ == null) {
          propertyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorProperty.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.OperatorPropertyOrBuilder>(
                  getProperty(),
                  getParentForChildren(),
                  isClean());
          property_ = null;
        }
        return propertyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FlinkOperator)
    }

    // @@protoc_insertion_point(class_scope:flink.FlinkOperator)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkOperator>
        PARSER = new com.google.protobuf.AbstractParser<FlinkOperator>() {
      @java.lang.Override
      public FlinkOperator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkOperator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkOperator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkOperator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkOperator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlinkJarOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FlinkJar)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * jarid in resource manager. Is resource_id.
     * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
     * @return The resourceId.
     */
    java.lang.String getResourceId();
    /**
     * <pre>
     * jarid in resource manager. Is resource_id.
     * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for resourceId.
     */
    com.google.protobuf.ByteString
        getResourceIdBytes();

    /**
     * <pre>
     * JarArgs
     * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
     * @return The jarArgs.
     */
    java.lang.String getJarArgs();
    /**
     * <pre>
     * JarArgs
     * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for jarArgs.
     */
    com.google.protobuf.ByteString
        getJarArgsBytes();

    /**
     * <pre>
     * JarEntry
     * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
     * @return The jarEntry.
     */
    java.lang.String getJarEntry();
    /**
     * <pre>
     * JarEntry
     * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for jarEntry.
     */
    com.google.protobuf.ByteString
        getJarEntryBytes();
  }
  /**
   * <pre>
   * FlinkJar
   * </pre>
   *
   * Protobuf type {@code flink.FlinkJar}
   */
  public static final class FlinkJar extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FlinkJar)
      FlinkJarOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkJar.newBuilder() to construct.
    private FlinkJar(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkJar() {
      resourceId_ = "";
      jarArgs_ = "";
      jarEntry_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlinkJar();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkJar(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              resourceId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              jarArgs_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              jarEntry_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkJar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkJar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.Builder.class);
    }

    public static final int RESOURCE_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object resourceId_;
    /**
     * <pre>
     * jarid in resource manager. Is resource_id.
     * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
     * @return The resourceId.
     */
    @java.lang.Override
    public java.lang.String getResourceId() {
      java.lang.Object ref = resourceId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        resourceId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * jarid in resource manager. Is resource_id.
     * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
     * </pre>
     *
     * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for resourceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getResourceIdBytes() {
      java.lang.Object ref = resourceId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        resourceId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int JAR_ARGS_FIELD_NUMBER = 2;
    private volatile java.lang.Object jarArgs_;
    /**
     * <pre>
     * JarArgs
     * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
     * @return The jarArgs.
     */
    @java.lang.Override
    public java.lang.String getJarArgs() {
      java.lang.Object ref = jarArgs_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        jarArgs_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * JarArgs
     * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for jarArgs.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getJarArgsBytes() {
      java.lang.Object ref = jarArgs_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        jarArgs_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int JAR_ENTRY_FIELD_NUMBER = 3;
    private volatile java.lang.Object jarEntry_;
    /**
     * <pre>
     * JarEntry
     * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
     * @return The jarEntry.
     */
    @java.lang.Override
    public java.lang.String getJarEntry() {
      java.lang.Object ref = jarEntry_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        jarEntry_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * JarEntry
     * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for jarEntry.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getJarEntryBytes() {
      java.lang.Object ref = jarEntry_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        jarEntry_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getResourceIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, resourceId_);
      }
      if (!getJarArgsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, jarArgs_);
      }
      if (!getJarEntryBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, jarEntry_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getResourceIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, resourceId_);
      }
      if (!getJarArgsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, jarArgs_);
      }
      if (!getJarEntryBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, jarEntry_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar) obj;

      if (!getResourceId()
          .equals(other.getResourceId())) return false;
      if (!getJarArgs()
          .equals(other.getJarArgs())) return false;
      if (!getJarEntry()
          .equals(other.getJarEntry())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RESOURCE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getResourceId().hashCode();
      hash = (37 * hash) + JAR_ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getJarArgs().hashCode();
      hash = (37 * hash) + JAR_ENTRY_FIELD_NUMBER;
      hash = (53 * hash) + getJarEntry().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FlinkJar
     * </pre>
     *
     * Protobuf type {@code flink.FlinkJar}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FlinkJar)
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJarOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkJar_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkJar_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        resourceId_ = "";

        jarArgs_ = "";

        jarEntry_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkJar_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar(this);
        result.resourceId_ = resourceId_;
        result.jarArgs_ = jarArgs_;
        result.jarEntry_ = jarEntry_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar.getDefaultInstance()) return this;
        if (!other.getResourceId().isEmpty()) {
          resourceId_ = other.resourceId_;
          onChanged();
        }
        if (!other.getJarArgs().isEmpty()) {
          jarArgs_ = other.jarArgs_;
          onChanged();
        }
        if (!other.getJarEntry().isEmpty()) {
          jarEntry_ = other.jarEntry_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object resourceId_ = "";
      /**
       * <pre>
       * jarid in resource manager. Is resource_id.
       * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
       * @return The resourceId.
       */
      public java.lang.String getResourceId() {
        java.lang.Object ref = resourceId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          resourceId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * jarid in resource manager. Is resource_id.
       * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for resourceId.
       */
      public com.google.protobuf.ByteString
          getResourceIdBytes() {
        java.lang.Object ref = resourceId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          resourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * jarid in resource manager. Is resource_id.
       * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
       * @param value The resourceId to set.
       * @return This builder for chaining.
       */
      public Builder setResourceId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        resourceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * jarid in resource manager. Is resource_id.
       * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearResourceId() {
        
        resourceId_ = getDefaultInstance().getResourceId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * jarid in resource manager. Is resource_id.
       * &#64;inject_tag: json:"resource_id" default:"" binding:"gte=20,lte=20" minLength:"20" maxLength:"20"
       * </pre>
       *
       * <code>string resource_id = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for resourceId to set.
       * @return This builder for chaining.
       */
      public Builder setResourceIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        resourceId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object jarArgs_ = "";
      /**
       * <pre>
       * JarArgs
       * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
       * @return The jarArgs.
       */
      public java.lang.String getJarArgs() {
        java.lang.Object ref = jarArgs_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          jarArgs_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * JarArgs
       * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for jarArgs.
       */
      public com.google.protobuf.ByteString
          getJarArgsBytes() {
        java.lang.Object ref = jarArgs_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          jarArgs_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * JarArgs
       * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
       * @param value The jarArgs to set.
       * @return This builder for chaining.
       */
      public Builder setJarArgs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        jarArgs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * JarArgs
       * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearJarArgs() {
        
        jarArgs_ = getDefaultInstance().getJarArgs();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * JarArgs
       * &#64;inject_tag: json:"jar_args" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_args = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for jarArgs to set.
       * @return This builder for chaining.
       */
      public Builder setJarArgsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        jarArgs_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object jarEntry_ = "";
      /**
       * <pre>
       * JarEntry
       * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
       * @return The jarEntry.
       */
      public java.lang.String getJarEntry() {
        java.lang.Object ref = jarEntry_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          jarEntry_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * JarEntry
       * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for jarEntry.
       */
      public com.google.protobuf.ByteString
          getJarEntryBytes() {
        java.lang.Object ref = jarEntry_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          jarEntry_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * JarEntry
       * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
       * @param value The jarEntry to set.
       * @return This builder for chaining.
       */
      public Builder setJarEntry(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        jarEntry_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * JarEntry
       * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearJarEntry() {
        
        jarEntry_ = getDefaultInstance().getJarEntry();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * JarEntry
       * &#64;inject_tag: json:"jar_entry" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string jar_entry = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for jarEntry to set.
       * @return This builder for chaining.
       */
      public Builder setJarEntryBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        jarEntry_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FlinkJar)
    }

    // @@protoc_insertion_point(class_scope:flink.FlinkJar)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkJar>
        PARSER = new com.google.protobuf.AbstractParser<FlinkJar>() {
      @java.lang.Override
      public FlinkJar parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkJar(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkJar> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkJar> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkJar getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlinkScalaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FlinkScala)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The code.
     */
    java.lang.String getCode();
    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for code.
     */
    com.google.protobuf.ByteString
        getCodeBytes();
  }
  /**
   * <pre>
   * ScalaOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.FlinkScala}
   */
  public static final class FlinkScala extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FlinkScala)
      FlinkScalaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkScala.newBuilder() to construct.
    private FlinkScala(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkScala() {
      code_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlinkScala();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkScala(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              code_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkScala_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkScala_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.Builder.class);
    }

    public static final int CODE_FIELD_NUMBER = 1;
    private volatile java.lang.Object code_;
    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The code.
     */
    @java.lang.Override
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        code_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for code.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, code_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, code_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala) obj;

      if (!getCode()
          .equals(other.getCode())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ScalaOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.FlinkScala}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FlinkScala)
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScalaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkScala_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkScala_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        code_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkScala_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala(this);
        result.code_ = code_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala.getDefaultInstance()) return this;
        if (!other.getCode().isEmpty()) {
          code_ = other.code_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object code_ = "";
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return The code.
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for code.
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @param value The code to set.
       * @return This builder for chaining.
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCode() {
        
        code_ = getDefaultInstance().getCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for code to set.
       * @return This builder for chaining.
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        code_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FlinkScala)
    }

    // @@protoc_insertion_point(class_scope:flink.FlinkScala)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkScala>
        PARSER = new com.google.protobuf.AbstractParser<FlinkScala>() {
      @java.lang.Override
      public FlinkScala parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkScala(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkScala> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkScala> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkScala getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlinkPythonOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FlinkPython)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The code.
     */
    java.lang.String getCode();
    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for code.
     */
    com.google.protobuf.ByteString
        getCodeBytes();
  }
  /**
   * <pre>
   * PythonOperatorProperty
   * </pre>
   *
   * Protobuf type {@code flink.FlinkPython}
   */
  public static final class FlinkPython extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FlinkPython)
      FlinkPythonOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkPython.newBuilder() to construct.
    private FlinkPython(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkPython() {
      code_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlinkPython();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkPython(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              code_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkPython_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkPython_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.Builder.class);
    }

    public static final int CODE_FIELD_NUMBER = 1;
    private volatile java.lang.Object code_;
    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The code.
     */
    @java.lang.Override
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        code_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for code.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, code_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, code_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython) obj;

      if (!getCode()
          .equals(other.getCode())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * PythonOperatorProperty
     * </pre>
     *
     * Protobuf type {@code flink.FlinkPython}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FlinkPython)
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPythonOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkPython_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkPython_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        code_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkPython_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython(this);
        result.code_ = code_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython.getDefaultInstance()) return this;
        if (!other.getCode().isEmpty()) {
          code_ = other.code_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object code_ = "";
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return The code.
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for code.
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @param value The code to set.
       * @return This builder for chaining.
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCode() {
        
        code_ = getDefaultInstance().getCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for code to set.
       * @return This builder for chaining.
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        code_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FlinkPython)
    }

    // @@protoc_insertion_point(class_scope:flink.FlinkPython)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkPython>
        PARSER = new com.google.protobuf.AbstractParser<FlinkPython>() {
      @java.lang.Override
      public FlinkPython parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkPython(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkPython> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkPython> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkPython getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlinkSQLOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FlinkSQL)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * sql code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The code.
     */
    java.lang.String getCode();
    /**
     * <pre>
     * sql code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for code.
     */
    com.google.protobuf.ByteString
        getCodeBytes();
  }
  /**
   * <pre>
   * FlinkSQL
   * </pre>
   *
   * Protobuf type {@code flink.FlinkSQL}
   */
  public static final class FlinkSQL extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FlinkSQL)
      FlinkSQLOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkSQL.newBuilder() to construct.
    private FlinkSQL(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkSQL() {
      code_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlinkSQL();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkSQL(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              code_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkSQL_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkSQL_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.Builder.class);
    }

    public static final int CODE_FIELD_NUMBER = 1;
    private volatile java.lang.Object code_;
    /**
     * <pre>
     * sql code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The code.
     */
    @java.lang.Override
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        code_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * sql code.
     * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
     * </pre>
     *
     * <code>string code = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for code.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, code_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, code_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL) obj;

      if (!getCode()
          .equals(other.getCode())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FlinkSQL
     * </pre>
     *
     * Protobuf type {@code flink.FlinkSQL}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FlinkSQL)
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQLOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkSQL_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkSQL_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        code_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkSQL_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL(this);
        result.code_ = code_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL.getDefaultInstance()) return this;
        if (!other.getCode().isEmpty()) {
          code_ = other.code_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object code_ = "";
      /**
       * <pre>
       * sql code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return The code.
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * sql code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for code.
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * sql code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @param value The code to set.
       * @return This builder for chaining.
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sql code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCode() {
        
        code_ = getDefaultInstance().getCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sql code.
       * &#64;inject_tag: json:"code" default:"" binding:"gte=0,lte=40000" required:"false" minLength:"0" maxLength:"40000"
       * </pre>
       *
       * <code>string code = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for code to set.
       * @return This builder for chaining.
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        code_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FlinkSQL)
    }

    // @@protoc_insertion_point(class_scope:flink.FlinkSQL)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkSQL>
        PARSER = new com.google.protobuf.AbstractParser<FlinkSQL>() {
      @java.lang.Override
      public FlinkSQL parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkSQL(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkSQL> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkSQL> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkSQL getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SqlColumnTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.SqlColumnType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    java.lang.String getColumn();
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    com.google.protobuf.ByteString
        getColumnBytes();

    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The comment.
     */
    java.lang.String getComment();
    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for comment.
     */
    com.google.protobuf.ByteString
        getCommentBytes();

    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The primaryKey.
     */
    java.lang.String getPrimaryKey();
    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for primaryKey.
     */
    com.google.protobuf.ByteString
        getPrimaryKeyBytes();

    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The length.
     */
    java.lang.String getLength();
    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for length.
     */
    com.google.protobuf.ByteString
        getLengthBytes();
  }
  /**
   * <pre>
   * SqlColumnType used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.SqlColumnType}
   */
  public static final class SqlColumnType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.SqlColumnType)
      SqlColumnTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SqlColumnType.newBuilder() to construct.
    private SqlColumnType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SqlColumnType() {
      column_ = "";
      type_ = "";
      comment_ = "";
      primaryKey_ = "";
      length_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SqlColumnType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SqlColumnType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              column_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              type_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              comment_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              primaryKey_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              length_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlColumnType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlColumnType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.class, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder.class);
    }

    public static final int COLUMN_FIELD_NUMBER = 1;
    private volatile java.lang.Object column_;
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    @java.lang.Override
    public java.lang.String getColumn() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        column_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getColumnBytes() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        column_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        type_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column type
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string type = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMENT_FIELD_NUMBER = 3;
    private volatile java.lang.Object comment_;
    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The comment.
     */
    @java.lang.Override
    public java.lang.String getComment() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        comment_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column comment
     * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
     * </pre>
     *
     * <code>string comment = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for comment.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommentBytes() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        comment_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PRIMARY_KEY_FIELD_NUMBER = 4;
    private volatile java.lang.Object primaryKey_;
    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The primaryKey.
     */
    @java.lang.Override
    public java.lang.String getPrimaryKey() {
      java.lang.Object ref = primaryKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        primaryKey_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * if it is primary key column, one of true/false
     * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
     * </pre>
     *
     * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
     * @return The bytes for primaryKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPrimaryKeyBytes() {
      java.lang.Object ref = primaryKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        primaryKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LENGTH_FIELD_NUMBER = 5;
    private volatile java.lang.Object length_;
    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The length.
     */
    @java.lang.Override
    public java.lang.String getLength() {
      java.lang.Object ref = length_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        length_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the column type length
     * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
     * </pre>
     *
     * <code>string Length = 5 [(.validator.field) = { ... }</code>
     * @return The bytes for length.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLengthBytes() {
      java.lang.Object ref = length_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        length_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getColumnBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, column_);
      }
      if (!getTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
      }
      if (!getCommentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, comment_);
      }
      if (!getPrimaryKeyBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, primaryKey_);
      }
      if (!getLengthBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, length_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getColumnBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, column_);
      }
      if (!getTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
      }
      if (!getCommentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, comment_);
      }
      if (!getPrimaryKeyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, primaryKey_);
      }
      if (!getLengthBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, length_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType other = (com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType) obj;

      if (!getColumn()
          .equals(other.getColumn())) return false;
      if (!getType()
          .equals(other.getType())) return false;
      if (!getComment()
          .equals(other.getComment())) return false;
      if (!getPrimaryKey()
          .equals(other.getPrimaryKey())) return false;
      if (!getLength()
          .equals(other.getLength())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COLUMN_FIELD_NUMBER;
      hash = (53 * hash) + getColumn().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType().hashCode();
      hash = (37 * hash) + COMMENT_FIELD_NUMBER;
      hash = (53 * hash) + getComment().hashCode();
      hash = (37 * hash) + PRIMARY_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getPrimaryKey().hashCode();
      hash = (37 * hash) + LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getLength().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SqlColumnType used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.SqlColumnType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.SqlColumnType)
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlColumnType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlColumnType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.class, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        column_ = "";

        type_ = "";

        comment_ = "";

        primaryKey_ = "";

        length_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlColumnType_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType result = new com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType(this);
        result.column_ = column_;
        result.type_ = type_;
        result.comment_ = comment_;
        result.primaryKey_ = primaryKey_;
        result.length_ = length_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance()) return this;
        if (!other.getColumn().isEmpty()) {
          column_ = other.column_;
          onChanged();
        }
        if (!other.getType().isEmpty()) {
          type_ = other.type_;
          onChanged();
        }
        if (!other.getComment().isEmpty()) {
          comment_ = other.comment_;
          onChanged();
        }
        if (!other.getPrimaryKey().isEmpty()) {
          primaryKey_ = other.primaryKey_;
          onChanged();
        }
        if (!other.getLength().isEmpty()) {
          length_ = other.length_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object column_ = "";
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The column.
       */
      public java.lang.String getColumn() {
        java.lang.Object ref = column_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          column_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for column.
       */
      public com.google.protobuf.ByteString
          getColumnBytes() {
        java.lang.Object ref = column_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          column_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The column to set.
       * @return This builder for chaining.
       */
      public Builder setColumn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        column_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearColumn() {
        
        column_ = getDefaultInstance().getColumn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for column to set.
       * @return This builder for chaining.
       */
      public Builder setColumnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        column_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string type = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        type_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object comment_ = "";
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @return The comment.
       */
      public java.lang.String getComment() {
        java.lang.Object ref = comment_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          comment_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for comment.
       */
      public com.google.protobuf.ByteString
          getCommentBytes() {
        java.lang.Object ref = comment_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          comment_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @param value The comment to set.
       * @return This builder for chaining.
       */
      public Builder setComment(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        comment_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearComment() {
        
        comment_ = getDefaultInstance().getComment();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column comment
       * &#64;inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
       * </pre>
       *
       * <code>string comment = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for comment to set.
       * @return This builder for chaining.
       */
      public Builder setCommentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        comment_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object primaryKey_ = "";
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @return The primaryKey.
       */
      public java.lang.String getPrimaryKey() {
        java.lang.Object ref = primaryKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          primaryKey_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @return The bytes for primaryKey.
       */
      public com.google.protobuf.ByteString
          getPrimaryKeyBytes() {
        java.lang.Object ref = primaryKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          primaryKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @param value The primaryKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrimaryKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        primaryKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPrimaryKey() {
        
        primaryKey_ = getDefaultInstance().getPrimaryKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if it is primary key column, one of true/false
       * &#64;inject_tag: json:"primary_key" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
       * </pre>
       *
       * <code>string primary_key = 4 [(.validator.field) = { ... }</code>
       * @param value The bytes for primaryKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrimaryKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        primaryKey_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object length_ = "";
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @return The length.
       */
      public java.lang.String getLength() {
        java.lang.Object ref = length_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          length_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @return The bytes for length.
       */
      public com.google.protobuf.ByteString
          getLengthBytes() {
        java.lang.Object ref = length_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          length_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        
        length_ = getDefaultInstance().getLength();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the column type length
       * &#64;inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
       * </pre>
       *
       * <code>string Length = 5 [(.validator.field) = { ... }</code>
       * @param value The bytes for length to set.
       * @return This builder for chaining.
       */
      public Builder setLengthBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        length_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.SqlColumnType)
    }

    // @@protoc_insertion_point(class_scope:flink.SqlColumnType)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SqlColumnType>
        PARSER = new com.google.protobuf.AbstractParser<SqlColumnType>() {
      @java.lang.Override
      public SqlColumnType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SqlColumnType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SqlColumnType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SqlColumnType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SqlTimeColumnTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.SqlTimeColumnType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    java.lang.String getColumn();
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    com.google.protobuf.ByteString
        getColumnBytes();

    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type getType();

    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();
  }
  /**
   * <pre>
   * SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.SqlTimeColumnType}
   */
  public static final class SqlTimeColumnType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.SqlTimeColumnType)
      SqlTimeColumnTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SqlTimeColumnType.newBuilder() to construct.
    private SqlTimeColumnType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SqlTimeColumnType() {
      column_ = "";
      type_ = 0;
      expression_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SqlTimeColumnType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SqlTimeColumnType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              column_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              expression_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlTimeColumnType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlTimeColumnType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.class, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder.class);
    }

    /**
     * Protobuf enum {@code flink.SqlTimeColumnType.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TypeUnset = 0;</code>
       */
      TypeUnset(0),
      /**
       * <code>Proctime = 1;</code>
       */
      Proctime(1),
      /**
       * <code>Watermark = 2;</code>
       */
      Watermark(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TypeUnset = 0;</code>
       */
      public static final int TypeUnset_VALUE = 0;
      /**
       * <code>Proctime = 1;</code>
       */
      public static final int Proctime_VALUE = 1;
      /**
       * <code>Watermark = 2;</code>
       */
      public static final int Watermark_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return TypeUnset;
          case 1: return Proctime;
          case 2: return Watermark;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:flink.SqlTimeColumnType.Type)
    }

    public static final int COLUMN_FIELD_NUMBER = 1;
    private volatile java.lang.Object column_;
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The column.
     */
    @java.lang.Override
    public java.lang.String getColumn() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        column_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column name
     * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string column = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for column.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getColumnBytes() {
      java.lang.Object ref = column_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        column_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The column type. oneof proctime/watermark
     * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
     * </pre>
     *
     * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type getType() {
      @SuppressWarnings("deprecation")
      com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type result = com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type.valueOf(type_);
      return result == null ? com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type.UNRECOGNIZED : result;
    }

    public static final int EXPRESSION_FIELD_NUMBER = 3;
    private volatile java.lang.Object expression_;
    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The column expression
     * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
     * </pre>
     *
     * <code>string expression = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for expression.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getColumnBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, column_);
      }
      if (type_ != com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type.TypeUnset.getNumber()) {
        output.writeEnum(2, type_);
      }
      if (!getExpressionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, expression_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getColumnBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, column_);
      }
      if (type_ != com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type.TypeUnset.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (!getExpressionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, expression_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType other = (com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType) obj;

      if (!getColumn()
          .equals(other.getColumn())) return false;
      if (type_ != other.type_) return false;
      if (!getExpression()
          .equals(other.getExpression())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COLUMN_FIELD_NUMBER;
      hash = (53 * hash) + getColumn().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.SqlTimeColumnType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.SqlTimeColumnType)
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlTimeColumnType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlTimeColumnType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.class, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        column_ = "";

        type_ = 0;

        expression_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_SqlTimeColumnType_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType result = new com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType(this);
        result.column_ = column_;
        result.type_ = type_;
        result.expression_ = expression_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance()) return this;
        if (!other.getColumn().isEmpty()) {
          column_ = other.column_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getExpression().isEmpty()) {
          expression_ = other.expression_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object column_ = "";
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The column.
       */
      public java.lang.String getColumn() {
        java.lang.Object ref = column_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          column_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for column.
       */
      public com.google.protobuf.ByteString
          getColumnBytes() {
        java.lang.Object ref = column_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          column_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The column to set.
       * @return This builder for chaining.
       */
      public Builder setColumn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        column_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearColumn() {
        
        column_ = getDefaultInstance().getColumn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column name
       * &#64;inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string column = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for column to set.
       * @return This builder for chaining.
       */
      public Builder setColumnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        column_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type getType() {
        @SuppressWarnings("deprecation")
        com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type result = com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type.valueOf(type_);
        return result == null ? com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column type. oneof proctime/watermark
       * &#64;inject_tag: json:"type" default:"" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
       * </pre>
       *
       * <code>.flink.SqlTimeColumnType.Type type = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object expression_ = "";
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @return The expression.
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for expression.
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column expression
       * &#64;inject_tag: json:"expression" default:"" binding:"gte=0,lte=1024" required:"false" minLength:"0" maxLength:"1024"
       * </pre>
       *
       * <code>string expression = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        expression_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.SqlTimeColumnType)
    }

    // @@protoc_insertion_point(class_scope:flink.SqlTimeColumnType)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SqlTimeColumnType>
        PARSER = new com.google.protobuf.AbstractParser<SqlTimeColumnType>() {
      @java.lang.Override
      public SqlTimeColumnType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SqlTimeColumnType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SqlTimeColumnType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SqlTimeColumnType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConnectorOptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ConnectorOption)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * ConnectorOption used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.ConnectorOption}
   */
  public static final class ConnectorOption extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ConnectorOption)
      ConnectorOptionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConnectorOption.newBuilder() to construct.
    private ConnectorOption(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConnectorOption() {
      name_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConnectorOption();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConnectorOption(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConnectorOption_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConnectorOption_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.class, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The config name.
     * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
     * </pre>
     *
     * <code>string name = 1 [(.validator.field) = { ... }</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The config value.
     * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
     * </pre>
     *
     * <code>string value = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!getValueBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!getValueBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption other = (com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ConnectorOption used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.ConnectorOption}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ConnectorOption)
        com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConnectorOption_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConnectorOption_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.class, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ConnectorOption_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption result = new com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption(this);
        result.name_ = name_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config name.
       * &#64;inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
       * </pre>
       *
       * <code>string name = 1 [(.validator.field) = { ... }</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The config value.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ConnectorOption)
    }

    // @@protoc_insertion_point(class_scope:flink.ConnectorOption)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConnectorOption>
        PARSER = new com.google.protobuf.AbstractParser<ConnectorOption>() {
      @java.lang.Override
      public ConnectorOption parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnectorOption(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConnectorOption> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConnectorOption> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MySQLTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.MySQLTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.MySQLTable}
   */
  public static final class MySQLTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.MySQLTable)
      MySQLTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MySQLTable.newBuilder() to construct.
    private MySQLTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MySQLTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MySQLTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MySQLTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_MySQLTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_MySQLTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPING_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPING_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.MySQLTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.MySQLTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_MySQLTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_MySQLTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_MySQLTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.MySQLTable)
    }

    // @@protoc_insertion_point(class_scope:flink.MySQLTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MySQLTable>
        PARSER = new com.google.protobuf.AbstractParser<MySQLTable>() {
      @java.lang.Override
      public MySQLTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MySQLTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MySQLTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MySQLTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PostgreSQLTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.PostgreSQLTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.PostgreSQLTable}
   */
  public static final class PostgreSQLTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.PostgreSQLTable)
      PostgreSQLTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PostgreSQLTable.newBuilder() to construct.
    private PostgreSQLTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PostgreSQLTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PostgreSQLTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PostgreSQLTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_PostgreSQLTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_PostgreSQLTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPING_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPING_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.PostgreSQLTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.PostgreSQLTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_PostgreSQLTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_PostgreSQLTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_PostgreSQLTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.PostgreSQLTable)
    }

    // @@protoc_insertion_point(class_scope:flink.PostgreSQLTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PostgreSQLTable>
        PARSER = new com.google.protobuf.AbstractParser<PostgreSQLTable>() {
      @java.lang.Override
      public PostgreSQLTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PostgreSQLTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PostgreSQLTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PostgreSQLTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClickHouseTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.ClickHouseTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.ClickHouseTable}
   */
  public static final class ClickHouseTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.ClickHouseTable)
      ClickHouseTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClickHouseTable.newBuilder() to construct.
    private ClickHouseTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClickHouseTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ClickHouseTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClickHouseTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ClickHouseTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ClickHouseTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPINGNAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPINGNAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.ClickHouseTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.ClickHouseTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ClickHouseTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ClickHouseTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_ClickHouseTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string MappingName = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.ClickHouseTable)
    }

    // @@protoc_insertion_point(class_scope:flink.ClickHouseTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClickHouseTable>
        PARSER = new com.google.protobuf.AbstractParser<ClickHouseTable>() {
      @java.lang.Override
      public ClickHouseTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClickHouseTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClickHouseTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClickHouseTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HBaseTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.HBaseTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    java.lang.String getMappingName();
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    com.google.protobuf.ByteString
        getMappingNameBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.HBaseTable}
   */
  public static final class HBaseTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.HBaseTable)
      HBaseTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HBaseTable.newBuilder() to construct.
    private HBaseTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HBaseTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      mappingName_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HBaseTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HBaseTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mappingName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HBaseTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HBaseTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int MAPPING_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mappingName_;
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The mappingName.
     */
    @java.lang.Override
    public java.lang.String getMappingName() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mappingName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the table name in origin upstream node.
     * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
     * </pre>
     *
     * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for mappingName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMappingNameBytes() {
      java.lang.Object ref = mappingName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mappingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 3;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(4, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getMappingNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mappingName_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getMappingName()
          .equals(other.getMappingName())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + MAPPING_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMappingName().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.HBaseTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.HBaseTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HBaseTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HBaseTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        mappingName_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HBaseTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.mappingName_ = mappingName_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getMappingName().isEmpty()) {
          mappingName_ = other.mappingName_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object mappingName_ = "";
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The mappingName.
       */
      public java.lang.String getMappingName() {
        java.lang.Object ref = mappingName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mappingName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for mappingName.
       */
      public com.google.protobuf.ByteString
          getMappingNameBytes() {
        java.lang.Object ref = mappingName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mappingName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mappingName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingName() {
        
        mappingName_ = getDefaultInstance().getMappingName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the table name in origin upstream node.
       * &#64;inject_tag: json:"mapping_name" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
       * </pre>
       *
       * <code>string mapping_name = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for mappingName to set.
       * @return This builder for chaining.
       */
      public Builder setMappingNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mappingName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 3 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.HBaseTable)
    }

    // @@protoc_insertion_point(class_scope:flink.HBaseTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HBaseTable>
        PARSER = new com.google.protobuf.AbstractParser<HBaseTable>() {
      @java.lang.Override
      public HBaseTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HBaseTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HBaseTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HBaseTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HDFSTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.HDFSTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.HDFSTable}
   */
  public static final class HDFSTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.HDFSTable)
      HDFSTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HDFSTable.newBuilder() to construct.
    private HDFSTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HDFSTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      path_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HDFSTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HDFSTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HDFSTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HDFSTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!getPathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!getPathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.HDFSTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.HDFSTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HDFSTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HDFSTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        path_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_HDFSTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.path_ = path_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.HDFSTable)
    }

    // @@protoc_insertion_point(class_scope:flink.HDFSTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HDFSTable>
        PARSER = new com.google.protobuf.AbstractParser<HDFSTable>() {
      @java.lang.Override
      public HDFSTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HDFSTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HDFSTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HDFSTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface S3TableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.S3Table)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * S3TableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.S3Table}
   */
  public static final class S3Table extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.S3Table)
      S3TableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use S3Table.newBuilder() to construct.
    private S3Table(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private S3Table() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      path_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new S3Table();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private S3Table(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_S3Table_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_S3Table_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.class, com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!getPathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!getPathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.S3Table)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.S3Table other = (com.dataomnis.gproto.flinkpb.FlinkPB.S3Table) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.S3Table prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * S3TableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.S3Table}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.S3Table)
        com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_S3Table_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_S3Table_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.class, com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        path_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_S3Table_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.S3Table result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.S3Table result = new com.dataomnis.gproto.flinkpb.FlinkPB.S3Table(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.path_ = path_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.S3Table) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.S3Table)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.S3Table other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.S3Table parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.S3Table) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.S3Table)
    }

    // @@protoc_insertion_point(class_scope:flink.S3Table)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.S3Table DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.S3Table();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.S3Table getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<S3Table>
        PARSER = new com.google.protobuf.AbstractParser<S3Table>() {
      @java.lang.Override
      public S3Table parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new S3Table(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<S3Table> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<S3Table> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FtpTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FtpTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.FtpTable}
   */
  public static final class FtpTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FtpTable)
      FtpTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FtpTable.newBuilder() to construct.
    private FtpTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FtpTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      path_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FtpTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FtpTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FtpTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FtpTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string path = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!getPathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!getPathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.FtpTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FtpTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FtpTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FtpTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        path_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FtpTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.path_ = path_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string path = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FtpTable)
    }

    // @@protoc_insertion_point(class_scope:flink.FtpTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FtpTable>
        PARSER = new com.google.protobuf.AbstractParser<FtpTable>() {
      @java.lang.Override
      public FtpTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FtpTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FtpTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FtpTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface KafkaTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.KafkaTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> 
        getSqlColumnList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index);
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    int getSqlColumnCount();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList();
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index);

    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The topic.
     */
    java.lang.String getTopic();
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for topic.
     */
    com.google.protobuf.ByteString
        getTopicBytes();

    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> 
        getConnectorOptionsList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index);
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    int getConnectorOptionsCount();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList();
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> 
        getTimeColumnList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index);
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    int getTimeColumnCount();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList();
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index);
  }
  /**
   * <pre>
   * KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
   * </pre>
   *
   * Protobuf type {@code flink.KafkaTable}
   */
  public static final class KafkaTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.KafkaTable)
      KafkaTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use KafkaTable.newBuilder() to construct.
    private KafkaTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private KafkaTable() {
      sqlColumn_ = java.util.Collections.emptyList();
      format_ = "";
      topic_ = "";
      connectorOptions_ = java.util.Collections.emptyList();
      timeColumn_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new KafkaTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private KafkaTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              topic_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>();
                mutable_bitField0_ |= 0x00000002;
              }
              connectorOptions_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>();
                mutable_bitField0_ |= 0x00000004;
              }
              timeColumn_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_KafkaTable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_KafkaTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder.class);
    }

    public static final int SQL_COLUMN_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_;
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
        getSqlColumnOrBuilderList() {
      return sqlColumn_;
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getSqlColumnCount() {
      return sqlColumn_.size();
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
      return sqlColumn_.get(index);
    }
    /**
     * <pre>
     * columns info.
     * &#64;inject_tag: json:"sql_column"
     * </pre>
     *
     * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
        int index) {
      return sqlColumn_.get(index);
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
     * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
     * </pre>
     *
     * <code>string format = 2 [(.validator.field) = { ... }</code>
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOPIC_FIELD_NUMBER = 3;
    private volatile java.lang.Object topic_;
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The topic.
     */
    @java.lang.Override
    public java.lang.String getTopic() {
      java.lang.Object ref = topic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        topic_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the data path
     * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
     * </pre>
     *
     * <code>string topic = 3 [(.validator.field) = { ... }</code>
     * @return The bytes for topic.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTopicBytes() {
      java.lang.Object ref = topic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        topic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONNECTOR_OPTIONS_FIELD_NUMBER = 4;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_;
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
        getConnectorOptionsOrBuilderList() {
      return connectorOptions_;
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getConnectorOptionsCount() {
      return connectorOptions_.size();
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
      return connectorOptions_.get(index);
    }
    /**
     * <pre>
     * connection config values.
     * &#64;inject_tag: json:"connector_options"
     * </pre>
     *
     * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
        int index) {
      return connectorOptions_.get(index);
    }

    public static final int TIME_COLUMN_FIELD_NUMBER = 5;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_;
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
        getTimeColumnOrBuilderList() {
      return timeColumn_;
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getTimeColumnCount() {
      return timeColumn_.size();
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
      return timeColumn_.get(index);
    }
    /**
     * <pre>
     * timecolumns info.
     * &#64;inject_tag: json:"time_column"
     * </pre>
     *
     * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
        int index) {
      return timeColumn_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sqlColumn_.size(); i++) {
        output.writeMessage(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
      }
      if (!getTopicBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, topic_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        output.writeMessage(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        output.writeMessage(5, timeColumn_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sqlColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sqlColumn_.get(i));
      }
      if (!getFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
      }
      if (!getTopicBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, topic_);
      }
      for (int i = 0; i < connectorOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, connectorOptions_.get(i));
      }
      for (int i = 0; i < timeColumn_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeColumn_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable other = (com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable) obj;

      if (!getSqlColumnList()
          .equals(other.getSqlColumnList())) return false;
      if (!getFormat()
          .equals(other.getFormat())) return false;
      if (!getTopic()
          .equals(other.getTopic())) return false;
      if (!getConnectorOptionsList()
          .equals(other.getConnectorOptionsList())) return false;
      if (!getTimeColumnList()
          .equals(other.getTimeColumnList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSqlColumnCount() > 0) {
        hash = (37 * hash) + SQL_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getSqlColumnList().hashCode();
      }
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + TOPIC_FIELD_NUMBER;
      hash = (53 * hash) + getTopic().hashCode();
      if (getConnectorOptionsCount() > 0) {
        hash = (37 * hash) + CONNECTOR_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnectorOptionsList().hashCode();
      }
      if (getTimeColumnCount() > 0) {
        hash = (37 * hash) + TIME_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getTimeColumnList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
     * </pre>
     *
     * Protobuf type {@code flink.KafkaTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.KafkaTable)
        com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_KafkaTable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_KafkaTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.class, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSqlColumnFieldBuilder();
          getConnectorOptionsFieldBuilder();
          getTimeColumnFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sqlColumnBuilder_.clear();
        }
        format_ = "";

        topic_ = "";

        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          connectorOptionsBuilder_.clear();
        }
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_KafkaTable_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable result = new com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable(this);
        int from_bitField0_ = bitField0_;
        if (sqlColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sqlColumn_ = java.util.Collections.unmodifiableList(sqlColumn_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sqlColumn_ = sqlColumn_;
        } else {
          result.sqlColumn_ = sqlColumnBuilder_.build();
        }
        result.format_ = format_;
        result.topic_ = topic_;
        if (connectorOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            connectorOptions_ = java.util.Collections.unmodifiableList(connectorOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.connectorOptions_ = connectorOptions_;
        } else {
          result.connectorOptions_ = connectorOptionsBuilder_.build();
        }
        if (timeColumnBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeColumn_ = java.util.Collections.unmodifiableList(timeColumn_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeColumn_ = timeColumn_;
        } else {
          result.timeColumn_ = timeColumnBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.getDefaultInstance()) return this;
        if (sqlColumnBuilder_ == null) {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumn_.isEmpty()) {
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSqlColumnIsMutable();
              sqlColumn_.addAll(other.sqlColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.sqlColumn_.isEmpty()) {
            if (sqlColumnBuilder_.isEmpty()) {
              sqlColumnBuilder_.dispose();
              sqlColumnBuilder_ = null;
              sqlColumn_ = other.sqlColumn_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sqlColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSqlColumnFieldBuilder() : null;
            } else {
              sqlColumnBuilder_.addAllMessages(other.sqlColumn_);
            }
          }
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getTopic().isEmpty()) {
          topic_ = other.topic_;
          onChanged();
        }
        if (connectorOptionsBuilder_ == null) {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptions_.isEmpty()) {
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureConnectorOptionsIsMutable();
              connectorOptions_.addAll(other.connectorOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.connectorOptions_.isEmpty()) {
            if (connectorOptionsBuilder_.isEmpty()) {
              connectorOptionsBuilder_.dispose();
              connectorOptionsBuilder_ = null;
              connectorOptions_ = other.connectorOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              connectorOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConnectorOptionsFieldBuilder() : null;
            } else {
              connectorOptionsBuilder_.addAllMessages(other.connectorOptions_);
            }
          }
        }
        if (timeColumnBuilder_ == null) {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumn_.isEmpty()) {
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeColumnIsMutable();
              timeColumn_.addAll(other.timeColumn_);
            }
            onChanged();
          }
        } else {
          if (!other.timeColumn_.isEmpty()) {
            if (timeColumnBuilder_.isEmpty()) {
              timeColumnBuilder_.dispose();
              timeColumnBuilder_ = null;
              timeColumn_ = other.timeColumn_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeColumnBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeColumnFieldBuilder() : null;
            } else {
              timeColumnBuilder_.addAllMessages(other.timeColumn_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> sqlColumn_ =
        java.util.Collections.emptyList();
      private void ensureSqlColumnIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType>(sqlColumn_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> sqlColumnBuilder_;

      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> getSqlColumnList() {
        if (sqlColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        } else {
          return sqlColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public int getSqlColumnCount() {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.size();
        } else {
          return sqlColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType getSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);
        } else {
          return sqlColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType value) {
        if (sqlColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, value);
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addSqlColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder builderForValue) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          sqlColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllSqlColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType> values) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sqlColumn_);
          onChanged();
        } else {
          sqlColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearSqlColumn() {
        if (sqlColumnBuilder_ == null) {
          sqlColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sqlColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeSqlColumn(int index) {
        if (sqlColumnBuilder_ == null) {
          ensureSqlColumnIsMutable();
          sqlColumn_.remove(index);
          onChanged();
        } else {
          sqlColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder getSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder getSqlColumnOrBuilder(
          int index) {
        if (sqlColumnBuilder_ == null) {
          return sqlColumn_.get(index);  } else {
          return sqlColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
           getSqlColumnOrBuilderList() {
        if (sqlColumnBuilder_ != null) {
          return sqlColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sqlColumn_);
        }
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder() {
        return getSqlColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder addSqlColumnBuilder(
          int index) {
        return getSqlColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * columns info.
       * &#64;inject_tag: json:"sql_column"
       * </pre>
       *
       * <code>repeated .flink.SqlColumnType sql_column = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder> 
           getSqlColumnBuilderList() {
        return getSqlColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder> 
          getSqlColumnFieldBuilder() {
        if (sqlColumnBuilder_ == null) {
          sqlColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlColumnTypeOrBuilder>(
                  sqlColumn_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sqlColumn_ = null;
        }
        return sqlColumnBuilder_;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
       * &#64;inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
       * </pre>
       *
       * <code>string format = 2 [(.validator.field) = { ... }</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object topic_ = "";
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @return The topic.
       */
      public java.lang.String getTopic() {
        java.lang.Object ref = topic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          topic_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @return The bytes for topic.
       */
      public com.google.protobuf.ByteString
          getTopicBytes() {
        java.lang.Object ref = topic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          topic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @param value The topic to set.
       * @return This builder for chaining.
       */
      public Builder setTopic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        topic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTopic() {
        
        topic_ = getDefaultInstance().getTopic();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the data path
       * &#64;inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string topic = 3 [(.validator.field) = { ... }</code>
       * @param value The bytes for topic to set.
       * @return This builder for chaining.
       */
      public Builder setTopicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        topic_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> connectorOptions_ =
        java.util.Collections.emptyList();
      private void ensureConnectorOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          connectorOptions_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption>(connectorOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> connectorOptionsBuilder_;

      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> getConnectorOptionsList() {
        if (connectorOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        } else {
          return connectorOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public int getConnectorOptionsCount() {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.size();
        } else {
          return connectorOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption getConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);
        } else {
          return connectorOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder setConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption value) {
        if (connectorOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, value);
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addConnectorOptions(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder builderForValue) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          connectorOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder addAllConnectorOptions(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption> values) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, connectorOptions_);
          onChanged();
        } else {
          connectorOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder clearConnectorOptions() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          connectorOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public Builder removeConnectorOptions(int index) {
        if (connectorOptionsBuilder_ == null) {
          ensureConnectorOptionsIsMutable();
          connectorOptions_.remove(index);
          onChanged();
        } else {
          connectorOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder getConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder getConnectorOptionsOrBuilder(
          int index) {
        if (connectorOptionsBuilder_ == null) {
          return connectorOptions_.get(index);  } else {
          return connectorOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
           getConnectorOptionsOrBuilderList() {
        if (connectorOptionsBuilder_ != null) {
          return connectorOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(connectorOptions_);
        }
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder() {
        return getConnectorOptionsFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder addConnectorOptionsBuilder(
          int index) {
        return getConnectorOptionsFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.getDefaultInstance());
      }
      /**
       * <pre>
       * connection config values.
       * &#64;inject_tag: json:"connector_options"
       * </pre>
       *
       * <code>repeated .flink.ConnectorOption connector_options = 4 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder> 
           getConnectorOptionsBuilderList() {
        return getConnectorOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder> 
          getConnectorOptionsFieldBuilder() {
        if (connectorOptionsBuilder_ == null) {
          connectorOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOption.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ConnectorOptionOrBuilder>(
                  connectorOptions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          connectorOptions_ = null;
        }
        return connectorOptionsBuilder_;
      }

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> timeColumn_ =
        java.util.Collections.emptyList();
      private void ensureTimeColumnIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeColumn_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType>(timeColumn_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> timeColumnBuilder_;

      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> getTimeColumnList() {
        if (timeColumnBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeColumn_);
        } else {
          return timeColumnBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public int getTimeColumnCount() {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.size();
        } else {
          return timeColumnBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType getTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);
        } else {
          return timeColumnBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder setTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType value) {
        if (timeColumnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, value);
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addTimeColumn(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder builderForValue) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeColumnBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder addAllTimeColumn(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType> values) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeColumn_);
          onChanged();
        } else {
          timeColumnBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder clearTimeColumn() {
        if (timeColumnBuilder_ == null) {
          timeColumn_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeColumnBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public Builder removeTimeColumn(int index) {
        if (timeColumnBuilder_ == null) {
          ensureTimeColumnIsMutable();
          timeColumn_.remove(index);
          onChanged();
        } else {
          timeColumnBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder getTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder getTimeColumnOrBuilder(
          int index) {
        if (timeColumnBuilder_ == null) {
          return timeColumn_.get(index);  } else {
          return timeColumnBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
           getTimeColumnOrBuilderList() {
        if (timeColumnBuilder_ != null) {
          return timeColumnBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeColumn_);
        }
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder() {
        return getTimeColumnFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder addTimeColumnBuilder(
          int index) {
        return getTimeColumnFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.getDefaultInstance());
      }
      /**
       * <pre>
       * timecolumns info.
       * &#64;inject_tag: json:"time_column"
       * </pre>
       *
       * <code>repeated .flink.SqlTimeColumnType time_column = 5 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder> 
           getTimeColumnBuilderList() {
        return getTimeColumnFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder> 
          getTimeColumnFieldBuilder() {
        if (timeColumnBuilder_ == null) {
          timeColumnBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnType.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.SqlTimeColumnTypeOrBuilder>(
                  timeColumn_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeColumn_ = null;
        }
        return timeColumnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.KafkaTable)
    }

    // @@protoc_insertion_point(class_scope:flink.KafkaTable)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<KafkaTable>
        PARSER = new com.google.protobuf.AbstractParser<KafkaTable>() {
      @java.lang.Override
      public KafkaTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KafkaTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<KafkaTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<KafkaTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TableSchemaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.TableSchema)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return Whether the mysql field is set.
     */
    boolean hasMysql();
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return The mysql.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable getMysql();
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder getMysqlOrBuilder();

    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return Whether the postgresql field is set.
     */
    boolean hasPostgresql();
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return The postgresql.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable getPostgresql();
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder getPostgresqlOrBuilder();

    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return Whether the clickhouse field is set.
     */
    boolean hasClickhouse();
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return The clickhouse.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable getClickhouse();
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder getClickhouseOrBuilder();

    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return Whether the hbase field is set.
     */
    boolean hasHbase();
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return The hbase.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable getHbase();
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder getHbaseOrBuilder();

    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return Whether the kafka field is set.
     */
    boolean hasKafka();
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return The kafka.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable getKafka();
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder getKafkaOrBuilder();

    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return Whether the s3 field is set.
     */
    boolean hasS3();
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return The s3.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.S3Table getS3();
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder getS3OrBuilder();

    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return Whether the ftp field is set.
     */
    boolean hasFtp();
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return The ftp.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable getFtp();
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder getFtpOrBuilder();

    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return Whether the hdfs field is set.
     */
    boolean hasHdfs();
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return The hdfs.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable getHdfs();
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder getHdfsOrBuilder();
  }
  /**
   * Protobuf type {@code flink.TableSchema}
   */
  public static final class TableSchema extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.TableSchema)
      TableSchemaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TableSchema.newBuilder() to construct.
    private TableSchema(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TableSchema() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TableSchema();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TableSchema(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder subBuilder = null;
              if (mysql_ != null) {
                subBuilder = mysql_.toBuilder();
              }
              mysql_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mysql_);
                mysql_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder subBuilder = null;
              if (postgresql_ != null) {
                subBuilder = postgresql_.toBuilder();
              }
              postgresql_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(postgresql_);
                postgresql_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder subBuilder = null;
              if (clickhouse_ != null) {
                subBuilder = clickhouse_.toBuilder();
              }
              clickhouse_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(clickhouse_);
                clickhouse_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder subBuilder = null;
              if (hbase_ != null) {
                subBuilder = hbase_.toBuilder();
              }
              hbase_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hbase_);
                hbase_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder subBuilder = null;
              if (kafka_ != null) {
                subBuilder = kafka_.toBuilder();
              }
              kafka_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(kafka_);
                kafka_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder subBuilder = null;
              if (s3_ != null) {
                subBuilder = s3_.toBuilder();
              }
              s3_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(s3_);
                s3_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder subBuilder = null;
              if (ftp_ != null) {
                subBuilder = ftp_.toBuilder();
              }
              ftp_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ftp_);
                ftp_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder subBuilder = null;
              if (hdfs_ != null) {
                subBuilder = hdfs_.toBuilder();
              }
              hdfs_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdfs_);
                hdfs_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_TableSchema_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_TableSchema_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.class, com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.Builder.class);
    }

    public static final int MYSQL_FIELD_NUMBER = 1;
    private com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable mysql_;
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return Whether the mysql field is set.
     */
    @java.lang.Override
    public boolean hasMysql() {
      return mysql_ != null;
    }
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     * @return The mysql.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable getMysql() {
      return mysql_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.getDefaultInstance() : mysql_;
    }
    /**
     * <pre>
     * MySQL Table Info.
     * &#64;inject_tag: json:"mysql"
     * </pre>
     *
     * <code>.flink.MySQLTable mysql = 1;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder getMysqlOrBuilder() {
      return getMysql();
    }

    public static final int POSTGRESQL_FIELD_NUMBER = 2;
    private com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable postgresql_;
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return Whether the postgresql field is set.
     */
    @java.lang.Override
    public boolean hasPostgresql() {
      return postgresql_ != null;
    }
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     * @return The postgresql.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable getPostgresql() {
      return postgresql_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.getDefaultInstance() : postgresql_;
    }
    /**
     * <pre>
     * PostgreSQL Table Info.
     * &#64;inject_tag: json:"postgresql"
     * </pre>
     *
     * <code>.flink.PostgreSQLTable postgresql = 2;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder getPostgresqlOrBuilder() {
      return getPostgresql();
    }

    public static final int CLICKHOUSE_FIELD_NUMBER = 3;
    private com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable clickhouse_;
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return Whether the clickhouse field is set.
     */
    @java.lang.Override
    public boolean hasClickhouse() {
      return clickhouse_ != null;
    }
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     * @return The clickhouse.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable getClickhouse() {
      return clickhouse_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.getDefaultInstance() : clickhouse_;
    }
    /**
     * <pre>
     * ClickHouse Table Info.
     * &#64;inject_tag: json:"clickhouse"
     * </pre>
     *
     * <code>.flink.ClickHouseTable clickhouse = 3;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder getClickhouseOrBuilder() {
      return getClickhouse();
    }

    public static final int HBASE_FIELD_NUMBER = 4;
    private com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable hbase_;
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return Whether the hbase field is set.
     */
    @java.lang.Override
    public boolean hasHbase() {
      return hbase_ != null;
    }
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     * @return The hbase.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable getHbase() {
      return hbase_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.getDefaultInstance() : hbase_;
    }
    /**
     * <pre>
     * Hbase Table Info.
     * &#64;inject_tag: json:"hbase"
     * </pre>
     *
     * <code>.flink.HBaseTable Hbase = 4;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder getHbaseOrBuilder() {
      return getHbase();
    }

    public static final int KAFKA_FIELD_NUMBER = 5;
    private com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable kafka_;
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return Whether the kafka field is set.
     */
    @java.lang.Override
    public boolean hasKafka() {
      return kafka_ != null;
    }
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     * @return The kafka.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable getKafka() {
      return kafka_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.getDefaultInstance() : kafka_;
    }
    /**
     * <pre>
     * Kafka Table Info.
     * &#64;inject_tag: json:"kafka"
     * </pre>
     *
     * <code>.flink.KafkaTable kafka = 5;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder getKafkaOrBuilder() {
      return getKafka();
    }

    public static final int S3_FIELD_NUMBER = 6;
    private com.dataomnis.gproto.flinkpb.FlinkPB.S3Table s3_;
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return Whether the s3 field is set.
     */
    @java.lang.Override
    public boolean hasS3() {
      return s3_ != null;
    }
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     * @return The s3.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table getS3() {
      return s3_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.getDefaultInstance() : s3_;
    }
    /**
     * <pre>
     * S3 Table Info.
     * &#64;inject_tag: json:"s3"
     * </pre>
     *
     * <code>.flink.S3Table s3 = 6;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder getS3OrBuilder() {
      return getS3();
    }

    public static final int FTP_FIELD_NUMBER = 7;
    private com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable ftp_;
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return Whether the ftp field is set.
     */
    @java.lang.Override
    public boolean hasFtp() {
      return ftp_ != null;
    }
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     * @return The ftp.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable getFtp() {
      return ftp_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.getDefaultInstance() : ftp_;
    }
    /**
     * <pre>
     * Ftp Table Info.
     * &#64;inject_tag: json:"ftp"
     * </pre>
     *
     * <code>.flink.FtpTable ftp = 7;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder getFtpOrBuilder() {
      return getFtp();
    }

    public static final int HDFS_FIELD_NUMBER = 8;
    private com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable hdfs_;
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return Whether the hdfs field is set.
     */
    @java.lang.Override
    public boolean hasHdfs() {
      return hdfs_ != null;
    }
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     * @return The hdfs.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable getHdfs() {
      return hdfs_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.getDefaultInstance() : hdfs_;
    }
    /**
     * <pre>
     * HDFS Table Info.
     * &#64;inject_tag: json:"hdfs"
     * </pre>
     *
     * <code>.flink.HDFSTable hdfs = 8;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder getHdfsOrBuilder() {
      return getHdfs();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mysql_ != null) {
        output.writeMessage(1, getMysql());
      }
      if (postgresql_ != null) {
        output.writeMessage(2, getPostgresql());
      }
      if (clickhouse_ != null) {
        output.writeMessage(3, getClickhouse());
      }
      if (hbase_ != null) {
        output.writeMessage(4, getHbase());
      }
      if (kafka_ != null) {
        output.writeMessage(5, getKafka());
      }
      if (s3_ != null) {
        output.writeMessage(6, getS3());
      }
      if (ftp_ != null) {
        output.writeMessage(7, getFtp());
      }
      if (hdfs_ != null) {
        output.writeMessage(8, getHdfs());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mysql_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMysql());
      }
      if (postgresql_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPostgresql());
      }
      if (clickhouse_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getClickhouse());
      }
      if (hbase_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getHbase());
      }
      if (kafka_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKafka());
      }
      if (s3_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getS3());
      }
      if (ftp_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getFtp());
      }
      if (hdfs_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getHdfs());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema other = (com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema) obj;

      if (hasMysql() != other.hasMysql()) return false;
      if (hasMysql()) {
        if (!getMysql()
            .equals(other.getMysql())) return false;
      }
      if (hasPostgresql() != other.hasPostgresql()) return false;
      if (hasPostgresql()) {
        if (!getPostgresql()
            .equals(other.getPostgresql())) return false;
      }
      if (hasClickhouse() != other.hasClickhouse()) return false;
      if (hasClickhouse()) {
        if (!getClickhouse()
            .equals(other.getClickhouse())) return false;
      }
      if (hasHbase() != other.hasHbase()) return false;
      if (hasHbase()) {
        if (!getHbase()
            .equals(other.getHbase())) return false;
      }
      if (hasKafka() != other.hasKafka()) return false;
      if (hasKafka()) {
        if (!getKafka()
            .equals(other.getKafka())) return false;
      }
      if (hasS3() != other.hasS3()) return false;
      if (hasS3()) {
        if (!getS3()
            .equals(other.getS3())) return false;
      }
      if (hasFtp() != other.hasFtp()) return false;
      if (hasFtp()) {
        if (!getFtp()
            .equals(other.getFtp())) return false;
      }
      if (hasHdfs() != other.hasHdfs()) return false;
      if (hasHdfs()) {
        if (!getHdfs()
            .equals(other.getHdfs())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMysql()) {
        hash = (37 * hash) + MYSQL_FIELD_NUMBER;
        hash = (53 * hash) + getMysql().hashCode();
      }
      if (hasPostgresql()) {
        hash = (37 * hash) + POSTGRESQL_FIELD_NUMBER;
        hash = (53 * hash) + getPostgresql().hashCode();
      }
      if (hasClickhouse()) {
        hash = (37 * hash) + CLICKHOUSE_FIELD_NUMBER;
        hash = (53 * hash) + getClickhouse().hashCode();
      }
      if (hasHbase()) {
        hash = (37 * hash) + HBASE_FIELD_NUMBER;
        hash = (53 * hash) + getHbase().hashCode();
      }
      if (hasKafka()) {
        hash = (37 * hash) + KAFKA_FIELD_NUMBER;
        hash = (53 * hash) + getKafka().hashCode();
      }
      if (hasS3()) {
        hash = (37 * hash) + S3_FIELD_NUMBER;
        hash = (53 * hash) + getS3().hashCode();
      }
      if (hasFtp()) {
        hash = (37 * hash) + FTP_FIELD_NUMBER;
        hash = (53 * hash) + getFtp().hashCode();
      }
      if (hasHdfs()) {
        hash = (37 * hash) + HDFS_FIELD_NUMBER;
        hash = (53 * hash) + getHdfs().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code flink.TableSchema}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.TableSchema)
        com.dataomnis.gproto.flinkpb.FlinkPB.TableSchemaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_TableSchema_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_TableSchema_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.class, com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (mysqlBuilder_ == null) {
          mysql_ = null;
        } else {
          mysql_ = null;
          mysqlBuilder_ = null;
        }
        if (postgresqlBuilder_ == null) {
          postgresql_ = null;
        } else {
          postgresql_ = null;
          postgresqlBuilder_ = null;
        }
        if (clickhouseBuilder_ == null) {
          clickhouse_ = null;
        } else {
          clickhouse_ = null;
          clickhouseBuilder_ = null;
        }
        if (hbaseBuilder_ == null) {
          hbase_ = null;
        } else {
          hbase_ = null;
          hbaseBuilder_ = null;
        }
        if (kafkaBuilder_ == null) {
          kafka_ = null;
        } else {
          kafka_ = null;
          kafkaBuilder_ = null;
        }
        if (s3Builder_ == null) {
          s3_ = null;
        } else {
          s3_ = null;
          s3Builder_ = null;
        }
        if (ftpBuilder_ == null) {
          ftp_ = null;
        } else {
          ftp_ = null;
          ftpBuilder_ = null;
        }
        if (hdfsBuilder_ == null) {
          hdfs_ = null;
        } else {
          hdfs_ = null;
          hdfsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_TableSchema_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema result = new com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema(this);
        if (mysqlBuilder_ == null) {
          result.mysql_ = mysql_;
        } else {
          result.mysql_ = mysqlBuilder_.build();
        }
        if (postgresqlBuilder_ == null) {
          result.postgresql_ = postgresql_;
        } else {
          result.postgresql_ = postgresqlBuilder_.build();
        }
        if (clickhouseBuilder_ == null) {
          result.clickhouse_ = clickhouse_;
        } else {
          result.clickhouse_ = clickhouseBuilder_.build();
        }
        if (hbaseBuilder_ == null) {
          result.hbase_ = hbase_;
        } else {
          result.hbase_ = hbaseBuilder_.build();
        }
        if (kafkaBuilder_ == null) {
          result.kafka_ = kafka_;
        } else {
          result.kafka_ = kafkaBuilder_.build();
        }
        if (s3Builder_ == null) {
          result.s3_ = s3_;
        } else {
          result.s3_ = s3Builder_.build();
        }
        if (ftpBuilder_ == null) {
          result.ftp_ = ftp_;
        } else {
          result.ftp_ = ftpBuilder_.build();
        }
        if (hdfsBuilder_ == null) {
          result.hdfs_ = hdfs_;
        } else {
          result.hdfs_ = hdfsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema.getDefaultInstance()) return this;
        if (other.hasMysql()) {
          mergeMysql(other.getMysql());
        }
        if (other.hasPostgresql()) {
          mergePostgresql(other.getPostgresql());
        }
        if (other.hasClickhouse()) {
          mergeClickhouse(other.getClickhouse());
        }
        if (other.hasHbase()) {
          mergeHbase(other.getHbase());
        }
        if (other.hasKafka()) {
          mergeKafka(other.getKafka());
        }
        if (other.hasS3()) {
          mergeS3(other.getS3());
        }
        if (other.hasFtp()) {
          mergeFtp(other.getFtp());
        }
        if (other.hasHdfs()) {
          mergeHdfs(other.getHdfs());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable mysql_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder> mysqlBuilder_;
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       * @return Whether the mysql field is set.
       */
      public boolean hasMysql() {
        return mysqlBuilder_ != null || mysql_ != null;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       * @return The mysql.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable getMysql() {
        if (mysqlBuilder_ == null) {
          return mysql_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.getDefaultInstance() : mysql_;
        } else {
          return mysqlBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder setMysql(com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable value) {
        if (mysqlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mysql_ = value;
          onChanged();
        } else {
          mysqlBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder setMysql(
          com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder builderForValue) {
        if (mysqlBuilder_ == null) {
          mysql_ = builderForValue.build();
          onChanged();
        } else {
          mysqlBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder mergeMysql(com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable value) {
        if (mysqlBuilder_ == null) {
          if (mysql_ != null) {
            mysql_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.newBuilder(mysql_).mergeFrom(value).buildPartial();
          } else {
            mysql_ = value;
          }
          onChanged();
        } else {
          mysqlBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public Builder clearMysql() {
        if (mysqlBuilder_ == null) {
          mysql_ = null;
          onChanged();
        } else {
          mysql_ = null;
          mysqlBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder getMysqlBuilder() {
        
        onChanged();
        return getMysqlFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder getMysqlOrBuilder() {
        if (mysqlBuilder_ != null) {
          return mysqlBuilder_.getMessageOrBuilder();
        } else {
          return mysql_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.getDefaultInstance() : mysql_;
        }
      }
      /**
       * <pre>
       * MySQL Table Info.
       * &#64;inject_tag: json:"mysql"
       * </pre>
       *
       * <code>.flink.MySQLTable mysql = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder> 
          getMysqlFieldBuilder() {
        if (mysqlBuilder_ == null) {
          mysqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.MySQLTableOrBuilder>(
                  getMysql(),
                  getParentForChildren(),
                  isClean());
          mysql_ = null;
        }
        return mysqlBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable postgresql_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder> postgresqlBuilder_;
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       * @return Whether the postgresql field is set.
       */
      public boolean hasPostgresql() {
        return postgresqlBuilder_ != null || postgresql_ != null;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       * @return The postgresql.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable getPostgresql() {
        if (postgresqlBuilder_ == null) {
          return postgresql_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.getDefaultInstance() : postgresql_;
        } else {
          return postgresqlBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder setPostgresql(com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable value) {
        if (postgresqlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          postgresql_ = value;
          onChanged();
        } else {
          postgresqlBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder setPostgresql(
          com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder builderForValue) {
        if (postgresqlBuilder_ == null) {
          postgresql_ = builderForValue.build();
          onChanged();
        } else {
          postgresqlBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder mergePostgresql(com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable value) {
        if (postgresqlBuilder_ == null) {
          if (postgresql_ != null) {
            postgresql_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.newBuilder(postgresql_).mergeFrom(value).buildPartial();
          } else {
            postgresql_ = value;
          }
          onChanged();
        } else {
          postgresqlBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public Builder clearPostgresql() {
        if (postgresqlBuilder_ == null) {
          postgresql_ = null;
          onChanged();
        } else {
          postgresql_ = null;
          postgresqlBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder getPostgresqlBuilder() {
        
        onChanged();
        return getPostgresqlFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder getPostgresqlOrBuilder() {
        if (postgresqlBuilder_ != null) {
          return postgresqlBuilder_.getMessageOrBuilder();
        } else {
          return postgresql_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.getDefaultInstance() : postgresql_;
        }
      }
      /**
       * <pre>
       * PostgreSQL Table Info.
       * &#64;inject_tag: json:"postgresql"
       * </pre>
       *
       * <code>.flink.PostgreSQLTable postgresql = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder> 
          getPostgresqlFieldBuilder() {
        if (postgresqlBuilder_ == null) {
          postgresqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.PostgreSQLTableOrBuilder>(
                  getPostgresql(),
                  getParentForChildren(),
                  isClean());
          postgresql_ = null;
        }
        return postgresqlBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable clickhouse_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder> clickhouseBuilder_;
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       * @return Whether the clickhouse field is set.
       */
      public boolean hasClickhouse() {
        return clickhouseBuilder_ != null || clickhouse_ != null;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       * @return The clickhouse.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable getClickhouse() {
        if (clickhouseBuilder_ == null) {
          return clickhouse_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.getDefaultInstance() : clickhouse_;
        } else {
          return clickhouseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder setClickhouse(com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable value) {
        if (clickhouseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          clickhouse_ = value;
          onChanged();
        } else {
          clickhouseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder setClickhouse(
          com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder builderForValue) {
        if (clickhouseBuilder_ == null) {
          clickhouse_ = builderForValue.build();
          onChanged();
        } else {
          clickhouseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder mergeClickhouse(com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable value) {
        if (clickhouseBuilder_ == null) {
          if (clickhouse_ != null) {
            clickhouse_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.newBuilder(clickhouse_).mergeFrom(value).buildPartial();
          } else {
            clickhouse_ = value;
          }
          onChanged();
        } else {
          clickhouseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public Builder clearClickhouse() {
        if (clickhouseBuilder_ == null) {
          clickhouse_ = null;
          onChanged();
        } else {
          clickhouse_ = null;
          clickhouseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder getClickhouseBuilder() {
        
        onChanged();
        return getClickhouseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder getClickhouseOrBuilder() {
        if (clickhouseBuilder_ != null) {
          return clickhouseBuilder_.getMessageOrBuilder();
        } else {
          return clickhouse_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.getDefaultInstance() : clickhouse_;
        }
      }
      /**
       * <pre>
       * ClickHouse Table Info.
       * &#64;inject_tag: json:"clickhouse"
       * </pre>
       *
       * <code>.flink.ClickHouseTable clickhouse = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder> 
          getClickhouseFieldBuilder() {
        if (clickhouseBuilder_ == null) {
          clickhouseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.ClickHouseTableOrBuilder>(
                  getClickhouse(),
                  getParentForChildren(),
                  isClean());
          clickhouse_ = null;
        }
        return clickhouseBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable hbase_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder> hbaseBuilder_;
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       * @return Whether the hbase field is set.
       */
      public boolean hasHbase() {
        return hbaseBuilder_ != null || hbase_ != null;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       * @return The hbase.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable getHbase() {
        if (hbaseBuilder_ == null) {
          return hbase_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.getDefaultInstance() : hbase_;
        } else {
          return hbaseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder setHbase(com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable value) {
        if (hbaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hbase_ = value;
          onChanged();
        } else {
          hbaseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder setHbase(
          com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder builderForValue) {
        if (hbaseBuilder_ == null) {
          hbase_ = builderForValue.build();
          onChanged();
        } else {
          hbaseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder mergeHbase(com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable value) {
        if (hbaseBuilder_ == null) {
          if (hbase_ != null) {
            hbase_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.newBuilder(hbase_).mergeFrom(value).buildPartial();
          } else {
            hbase_ = value;
          }
          onChanged();
        } else {
          hbaseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public Builder clearHbase() {
        if (hbaseBuilder_ == null) {
          hbase_ = null;
          onChanged();
        } else {
          hbase_ = null;
          hbaseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder getHbaseBuilder() {
        
        onChanged();
        return getHbaseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder getHbaseOrBuilder() {
        if (hbaseBuilder_ != null) {
          return hbaseBuilder_.getMessageOrBuilder();
        } else {
          return hbase_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.getDefaultInstance() : hbase_;
        }
      }
      /**
       * <pre>
       * Hbase Table Info.
       * &#64;inject_tag: json:"hbase"
       * </pre>
       *
       * <code>.flink.HBaseTable Hbase = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder> 
          getHbaseFieldBuilder() {
        if (hbaseBuilder_ == null) {
          hbaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HBaseTableOrBuilder>(
                  getHbase(),
                  getParentForChildren(),
                  isClean());
          hbase_ = null;
        }
        return hbaseBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable kafka_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder> kafkaBuilder_;
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       * @return Whether the kafka field is set.
       */
      public boolean hasKafka() {
        return kafkaBuilder_ != null || kafka_ != null;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       * @return The kafka.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable getKafka() {
        if (kafkaBuilder_ == null) {
          return kafka_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.getDefaultInstance() : kafka_;
        } else {
          return kafkaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder setKafka(com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable value) {
        if (kafkaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kafka_ = value;
          onChanged();
        } else {
          kafkaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder setKafka(
          com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder builderForValue) {
        if (kafkaBuilder_ == null) {
          kafka_ = builderForValue.build();
          onChanged();
        } else {
          kafkaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder mergeKafka(com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable value) {
        if (kafkaBuilder_ == null) {
          if (kafka_ != null) {
            kafka_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.newBuilder(kafka_).mergeFrom(value).buildPartial();
          } else {
            kafka_ = value;
          }
          onChanged();
        } else {
          kafkaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public Builder clearKafka() {
        if (kafkaBuilder_ == null) {
          kafka_ = null;
          onChanged();
        } else {
          kafka_ = null;
          kafkaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder getKafkaBuilder() {
        
        onChanged();
        return getKafkaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder getKafkaOrBuilder() {
        if (kafkaBuilder_ != null) {
          return kafkaBuilder_.getMessageOrBuilder();
        } else {
          return kafka_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.getDefaultInstance() : kafka_;
        }
      }
      /**
       * <pre>
       * Kafka Table Info.
       * &#64;inject_tag: json:"kafka"
       * </pre>
       *
       * <code>.flink.KafkaTable kafka = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder> 
          getKafkaFieldBuilder() {
        if (kafkaBuilder_ == null) {
          kafkaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.KafkaTableOrBuilder>(
                  getKafka(),
                  getParentForChildren(),
                  isClean());
          kafka_ = null;
        }
        return kafkaBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.S3Table s3_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.S3Table, com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder> s3Builder_;
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       * @return Whether the s3 field is set.
       */
      public boolean hasS3() {
        return s3Builder_ != null || s3_ != null;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       * @return The s3.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table getS3() {
        if (s3Builder_ == null) {
          return s3_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.getDefaultInstance() : s3_;
        } else {
          return s3Builder_.getMessage();
        }
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder setS3(com.dataomnis.gproto.flinkpb.FlinkPB.S3Table value) {
        if (s3Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          s3_ = value;
          onChanged();
        } else {
          s3Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder setS3(
          com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder builderForValue) {
        if (s3Builder_ == null) {
          s3_ = builderForValue.build();
          onChanged();
        } else {
          s3Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder mergeS3(com.dataomnis.gproto.flinkpb.FlinkPB.S3Table value) {
        if (s3Builder_ == null) {
          if (s3_ != null) {
            s3_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.newBuilder(s3_).mergeFrom(value).buildPartial();
          } else {
            s3_ = value;
          }
          onChanged();
        } else {
          s3Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public Builder clearS3() {
        if (s3Builder_ == null) {
          s3_ = null;
          onChanged();
        } else {
          s3_ = null;
          s3Builder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder getS3Builder() {
        
        onChanged();
        return getS3FieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder getS3OrBuilder() {
        if (s3Builder_ != null) {
          return s3Builder_.getMessageOrBuilder();
        } else {
          return s3_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.getDefaultInstance() : s3_;
        }
      }
      /**
       * <pre>
       * S3 Table Info.
       * &#64;inject_tag: json:"s3"
       * </pre>
       *
       * <code>.flink.S3Table s3 = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.S3Table, com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder> 
          getS3FieldBuilder() {
        if (s3Builder_ == null) {
          s3Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.S3Table, com.dataomnis.gproto.flinkpb.FlinkPB.S3Table.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.S3TableOrBuilder>(
                  getS3(),
                  getParentForChildren(),
                  isClean());
          s3_ = null;
        }
        return s3Builder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable ftp_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder> ftpBuilder_;
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       * @return Whether the ftp field is set.
       */
      public boolean hasFtp() {
        return ftpBuilder_ != null || ftp_ != null;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       * @return The ftp.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable getFtp() {
        if (ftpBuilder_ == null) {
          return ftp_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.getDefaultInstance() : ftp_;
        } else {
          return ftpBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder setFtp(com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable value) {
        if (ftpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ftp_ = value;
          onChanged();
        } else {
          ftpBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder setFtp(
          com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder builderForValue) {
        if (ftpBuilder_ == null) {
          ftp_ = builderForValue.build();
          onChanged();
        } else {
          ftpBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder mergeFtp(com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable value) {
        if (ftpBuilder_ == null) {
          if (ftp_ != null) {
            ftp_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.newBuilder(ftp_).mergeFrom(value).buildPartial();
          } else {
            ftp_ = value;
          }
          onChanged();
        } else {
          ftpBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public Builder clearFtp() {
        if (ftpBuilder_ == null) {
          ftp_ = null;
          onChanged();
        } else {
          ftp_ = null;
          ftpBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder getFtpBuilder() {
        
        onChanged();
        return getFtpFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder getFtpOrBuilder() {
        if (ftpBuilder_ != null) {
          return ftpBuilder_.getMessageOrBuilder();
        } else {
          return ftp_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.getDefaultInstance() : ftp_;
        }
      }
      /**
       * <pre>
       * Ftp Table Info.
       * &#64;inject_tag: json:"ftp"
       * </pre>
       *
       * <code>.flink.FtpTable ftp = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder> 
          getFtpFieldBuilder() {
        if (ftpBuilder_ == null) {
          ftpBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FtpTableOrBuilder>(
                  getFtp(),
                  getParentForChildren(),
                  isClean());
          ftp_ = null;
        }
        return ftpBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable hdfs_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder> hdfsBuilder_;
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       * @return Whether the hdfs field is set.
       */
      public boolean hasHdfs() {
        return hdfsBuilder_ != null || hdfs_ != null;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       * @return The hdfs.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable getHdfs() {
        if (hdfsBuilder_ == null) {
          return hdfs_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.getDefaultInstance() : hdfs_;
        } else {
          return hdfsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder setHdfs(com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable value) {
        if (hdfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdfs_ = value;
          onChanged();
        } else {
          hdfsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder setHdfs(
          com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder builderForValue) {
        if (hdfsBuilder_ == null) {
          hdfs_ = builderForValue.build();
          onChanged();
        } else {
          hdfsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder mergeHdfs(com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable value) {
        if (hdfsBuilder_ == null) {
          if (hdfs_ != null) {
            hdfs_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.newBuilder(hdfs_).mergeFrom(value).buildPartial();
          } else {
            hdfs_ = value;
          }
          onChanged();
        } else {
          hdfsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public Builder clearHdfs() {
        if (hdfsBuilder_ == null) {
          hdfs_ = null;
          onChanged();
        } else {
          hdfs_ = null;
          hdfsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder getHdfsBuilder() {
        
        onChanged();
        return getHdfsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder getHdfsOrBuilder() {
        if (hdfsBuilder_ != null) {
          return hdfsBuilder_.getMessageOrBuilder();
        } else {
          return hdfs_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.getDefaultInstance() : hdfs_;
        }
      }
      /**
       * <pre>
       * HDFS Table Info.
       * &#64;inject_tag: json:"hdfs"
       * </pre>
       *
       * <code>.flink.HDFSTable hdfs = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder> 
          getHdfsFieldBuilder() {
        if (hdfsBuilder_ == null) {
          hdfsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTable.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.HDFSTableOrBuilder>(
                  getHdfs(),
                  getParentForChildren(),
                  isClean());
          hdfs_ = null;
        }
        return hdfsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.TableSchema)
    }

    // @@protoc_insertion_point(class_scope:flink.TableSchema)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TableSchema>
        PARSER = new com.google.protobuf.AbstractParser<TableSchema>() {
      @java.lang.Override
      public TableSchema parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableSchema(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TableSchema> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TableSchema> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.TableSchema getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlinkConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flink.FlinkConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item> 
        getCustomList();
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item getCustom(int index);
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    int getCustomCount();
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder> 
        getCustomOrBuilderList();
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder getCustomOrBuilder(
        int index);

    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
     * @return Whether the restartStrategy field is set.
     */
    boolean hasRestartStrategy();
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
     * @return The restartStrategy.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy getRestartStrategy();
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder getRestartStrategyOrBuilder();

    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"logger" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.Logger logger = 3;</code>
     * @return Whether the logger field is set.
     */
    boolean hasLogger();
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"logger" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.Logger logger = 3;</code>
     * @return The logger.
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger getLogger();
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"logger" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.Logger logger = 3;</code>
     */
    com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder getLoggerOrBuilder();
  }
  /**
   * <pre>
   * FlinkConfig
   * </pre>
   *
   * Protobuf type {@code flink.FlinkConfig}
   */
  public static final class FlinkConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flink.FlinkConfig)
      FlinkConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkConfig.newBuilder() to construct.
    private FlinkConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkConfig() {
      custom_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlinkConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                custom_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item>();
                mutable_bitField0_ |= 0x00000001;
              }
              custom_.add(
                  input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.parser(), extensionRegistry));
              break;
            }
            case 18: {
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder subBuilder = null;
              if (restartStrategy_ != null) {
                subBuilder = restartStrategy_.toBuilder();
              }
              restartStrategy_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(restartStrategy_);
                restartStrategy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder subBuilder = null;
              if (logger_ != null) {
                subBuilder = logger_.toBuilder();
              }
              logger_ = input.readMessage(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(logger_);
                logger_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          custom_ = java.util.Collections.unmodifiableList(custom_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Builder.class);
    }

    public interface ItemOrBuilder extends
        // @@protoc_insertion_point(interface_extends:flink.FlinkConfig.Item)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The key in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string key = 1 [(.validator.field) = { ... }</code>
       * @return The key.
       */
      java.lang.String getKey();
      /**
       * <pre>
       * The key in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string key = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for key.
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      /**
       * <pre>
       * The value in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The value.
       */
      java.lang.String getValue();
      /**
       * <pre>
       * The value in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for value.
       */
      com.google.protobuf.ByteString
          getValueBytes();
    }
    /**
     * <pre>
     * Item for uses-defined config.
     * </pre>
     *
     * Protobuf type {@code flink.FlinkConfig.Item}
     */
    public static final class Item extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:flink.FlinkConfig.Item)
        ItemOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Item.newBuilder() to construct.
      private Item(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Item() {
        key_ = "";
        value_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Item();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Item(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                key_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                value_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Item_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Item_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder.class);
      }

      public static final int KEY_FIELD_NUMBER = 1;
      private volatile java.lang.Object key_;
      /**
       * <pre>
       * The key in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string key = 1 [(.validator.field) = { ... }</code>
       * @return The key.
       */
      @java.lang.Override
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * The key in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string key = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private volatile java.lang.Object value_;
      /**
       * <pre>
       * The value in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The value.
       */
      @java.lang.Override
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * The value in key/value item, Is required, Min: 1, Max: 1024.
       * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
       * </pre>
       *
       * <code>string value = 2 [(.validator.field) = { ... }</code>
       * @return The bytes for value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getKeyBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
        }
        if (!getValueBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getKeyBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
        }
        if (!getValueBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item)) {
          return super.equals(obj);
        }
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item) obj;

        if (!getKey()
            .equals(other.getKey())) return false;
        if (!getValue()
            .equals(other.getValue())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Item for uses-defined config.
       * </pre>
       *
       * Protobuf type {@code flink.FlinkConfig.Item}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:flink.FlinkConfig.Item)
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Item_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Item_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder.class);
        }

        // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          key_ = "";

          value_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Item_descriptor;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item getDefaultInstanceForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.getDefaultInstance();
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item build() {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item buildPartial() {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item(this);
          result.key_ = key_;
          result.value_ = value_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item) {
            return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item other) {
          if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.getDefaultInstance()) return this;
          if (!other.getKey().isEmpty()) {
            key_ = other.key_;
            onChanged();
          }
          if (!other.getValue().isEmpty()) {
            value_ = other.value_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object key_ = "";
        /**
         * <pre>
         * The key in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string key = 1 [(.validator.field) = { ... }</code>
         * @return The key.
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The key in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string key = 1 [(.validator.field) = { ... }</code>
         * @return The bytes for key.
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The key in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string key = 1 [(.validator.field) = { ... }</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The key in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string key = 1 [(.validator.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The key in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string key = 1 [(.validator.field) = { ... }</code>
         * @param value The bytes for key to set.
         * @return This builder for chaining.
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          key_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object value_ = "";
        /**
         * <pre>
         * The value in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string value = 2 [(.validator.field) = { ... }</code>
         * @return The value.
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The value in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string value = 2 [(.validator.field) = { ... }</code>
         * @return The bytes for value.
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The value in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string value = 2 [(.validator.field) = { ... }</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The value in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string value = 2 [(.validator.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = getDefaultInstance().getValue();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The value in key/value item, Is required, Min: 1, Max: 1024.
         * &#64;inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
         * </pre>
         *
         * <code>string value = 2 [(.validator.field) = { ... }</code>
         * @param value The bytes for value to set.
         * @return This builder for chaining.
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          value_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:flink.FlinkConfig.Item)
      }

      // @@protoc_insertion_point(class_scope:flink.FlinkConfig.Item)
      private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item();
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Item>
          PARSER = new com.google.protobuf.AbstractParser<Item>() {
        @java.lang.Override
        public Item parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Item(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Item> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Item> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RestartStrategyOrBuilder extends
        // @@protoc_insertion_point(interface_extends:flink.FlinkConfig.RestartStrategy)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
       * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
       * </pre>
       *
       * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
       * @return The restartStrategy.
       */
      java.lang.String getRestartStrategy();
      /**
       * <pre>
       * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
       * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
       * </pre>
       *
       * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for restartStrategy.
       */
      com.google.protobuf.ByteString
          getRestartStrategyBytes();

      /**
       * <pre>
       * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 1000. Default 1.
       * &#64;inject_tag: json:"fixed_delay_attempts" binding:"gte=1, lte=1000"
       * </pre>
       *
       * <code>int32 fixed_delay_attempts = 2 [(.defaults.field) = { ... }</code>
       * @return The fixedDelayAttempts.
       */
      int getFixedDelayAttempts();

      /**
       * <pre>
       * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 86400. Default 1, unit is second.
       * &#64;inject_tag: json:"fixed_delay_delay binding:"gte=1, lte=86400"
       * </pre>
       *
       * <code>int32 fixed_delay_delay = 3 [(.defaults.field) = { ... }</code>
       * @return The fixedDelayDelay.
       */
      int getFixedDelayDelay();

      /**
       * <pre>
       * Affect when restart_strategy == "failure-rate". Min: 1, Max: 1000. Default 1.
       * &#64;inject_tag: json:"failure_rate_max_failures_per_interval" binding:"gte=1, lte=1000"
       * </pre>
       *
       * <code>int32 failure_rate_max_failures_per_interval = 4 [(.defaults.field) = { ... }</code>
       * @return The failureRateMaxFailuresPerInterval.
       */
      int getFailureRateMaxFailuresPerInterval();

      /**
       * <pre>
       * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 1. unit is second.
       * &#64;inject_tag: json:"failure_rate_delay" binding:"gte=1, lte=86400"
       * </pre>
       *
       * <code>int32 failure_rate_delay = 5 [(.defaults.field) = { ... }</code>
       * @return The failureRateDelay.
       */
      int getFailureRateDelay();

      /**
       * <pre>
       * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 60, unit is second.
       * &#64;inject_tag: json:"failure_rate_failure_rate_interval" binding:"gte=1, lte=86400"
       * </pre>
       *
       * <code>int32 failure_rate_failure_rate_interval = 6 [(.defaults.field) = { ... }</code>
       * @return The failureRateFailureRateInterval.
       */
      int getFailureRateFailureRateInterval();
    }
    /**
     * <pre>
     * Config for flink restart strategy.
     * </pre>
     *
     * Protobuf type {@code flink.FlinkConfig.RestartStrategy}
     */
    public static final class RestartStrategy extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:flink.FlinkConfig.RestartStrategy)
        RestartStrategyOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RestartStrategy.newBuilder() to construct.
      private RestartStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RestartStrategy() {
        restartStrategy_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RestartStrategy();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RestartStrategy(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                restartStrategy_ = s;
                break;
              }
              case 16: {

                fixedDelayAttempts_ = input.readInt32();
                break;
              }
              case 24: {

                fixedDelayDelay_ = input.readInt32();
                break;
              }
              case 32: {

                failureRateMaxFailuresPerInterval_ = input.readInt32();
                break;
              }
              case 40: {

                failureRateDelay_ = input.readInt32();
                break;
              }
              case 48: {

                failureRateFailureRateInterval_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_RestartStrategy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_RestartStrategy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder.class);
      }

      public static final int RESTART_STRATEGY_FIELD_NUMBER = 1;
      private volatile java.lang.Object restartStrategy_;
      /**
       * <pre>
       * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
       * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
       * </pre>
       *
       * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
       * @return The restartStrategy.
       */
      @java.lang.Override
      public java.lang.String getRestartStrategy() {
        java.lang.Object ref = restartStrategy_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          restartStrategy_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
       * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
       * </pre>
       *
       * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
       * @return The bytes for restartStrategy.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRestartStrategyBytes() {
        java.lang.Object ref = restartStrategy_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          restartStrategy_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FIXED_DELAY_ATTEMPTS_FIELD_NUMBER = 2;
      private int fixedDelayAttempts_;
      /**
       * <pre>
       * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 1000. Default 1.
       * &#64;inject_tag: json:"fixed_delay_attempts" binding:"gte=1, lte=1000"
       * </pre>
       *
       * <code>int32 fixed_delay_attempts = 2 [(.defaults.field) = { ... }</code>
       * @return The fixedDelayAttempts.
       */
      @java.lang.Override
      public int getFixedDelayAttempts() {
        return fixedDelayAttempts_;
      }

      public static final int FIXED_DELAY_DELAY_FIELD_NUMBER = 3;
      private int fixedDelayDelay_;
      /**
       * <pre>
       * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 86400. Default 1, unit is second.
       * &#64;inject_tag: json:"fixed_delay_delay binding:"gte=1, lte=86400"
       * </pre>
       *
       * <code>int32 fixed_delay_delay = 3 [(.defaults.field) = { ... }</code>
       * @return The fixedDelayDelay.
       */
      @java.lang.Override
      public int getFixedDelayDelay() {
        return fixedDelayDelay_;
      }

      public static final int FAILURE_RATE_MAX_FAILURES_PER_INTERVAL_FIELD_NUMBER = 4;
      private int failureRateMaxFailuresPerInterval_;
      /**
       * <pre>
       * Affect when restart_strategy == "failure-rate". Min: 1, Max: 1000. Default 1.
       * &#64;inject_tag: json:"failure_rate_max_failures_per_interval" binding:"gte=1, lte=1000"
       * </pre>
       *
       * <code>int32 failure_rate_max_failures_per_interval = 4 [(.defaults.field) = { ... }</code>
       * @return The failureRateMaxFailuresPerInterval.
       */
      @java.lang.Override
      public int getFailureRateMaxFailuresPerInterval() {
        return failureRateMaxFailuresPerInterval_;
      }

      public static final int FAILURE_RATE_DELAY_FIELD_NUMBER = 5;
      private int failureRateDelay_;
      /**
       * <pre>
       * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 1. unit is second.
       * &#64;inject_tag: json:"failure_rate_delay" binding:"gte=1, lte=86400"
       * </pre>
       *
       * <code>int32 failure_rate_delay = 5 [(.defaults.field) = { ... }</code>
       * @return The failureRateDelay.
       */
      @java.lang.Override
      public int getFailureRateDelay() {
        return failureRateDelay_;
      }

      public static final int FAILURE_RATE_FAILURE_RATE_INTERVAL_FIELD_NUMBER = 6;
      private int failureRateFailureRateInterval_;
      /**
       * <pre>
       * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 60, unit is second.
       * &#64;inject_tag: json:"failure_rate_failure_rate_interval" binding:"gte=1, lte=86400"
       * </pre>
       *
       * <code>int32 failure_rate_failure_rate_interval = 6 [(.defaults.field) = { ... }</code>
       * @return The failureRateFailureRateInterval.
       */
      @java.lang.Override
      public int getFailureRateFailureRateInterval() {
        return failureRateFailureRateInterval_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getRestartStrategyBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, restartStrategy_);
        }
        if (fixedDelayAttempts_ != 0) {
          output.writeInt32(2, fixedDelayAttempts_);
        }
        if (fixedDelayDelay_ != 0) {
          output.writeInt32(3, fixedDelayDelay_);
        }
        if (failureRateMaxFailuresPerInterval_ != 0) {
          output.writeInt32(4, failureRateMaxFailuresPerInterval_);
        }
        if (failureRateDelay_ != 0) {
          output.writeInt32(5, failureRateDelay_);
        }
        if (failureRateFailureRateInterval_ != 0) {
          output.writeInt32(6, failureRateFailureRateInterval_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getRestartStrategyBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, restartStrategy_);
        }
        if (fixedDelayAttempts_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, fixedDelayAttempts_);
        }
        if (fixedDelayDelay_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, fixedDelayDelay_);
        }
        if (failureRateMaxFailuresPerInterval_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, failureRateMaxFailuresPerInterval_);
        }
        if (failureRateDelay_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, failureRateDelay_);
        }
        if (failureRateFailureRateInterval_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, failureRateFailureRateInterval_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy)) {
          return super.equals(obj);
        }
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy) obj;

        if (!getRestartStrategy()
            .equals(other.getRestartStrategy())) return false;
        if (getFixedDelayAttempts()
            != other.getFixedDelayAttempts()) return false;
        if (getFixedDelayDelay()
            != other.getFixedDelayDelay()) return false;
        if (getFailureRateMaxFailuresPerInterval()
            != other.getFailureRateMaxFailuresPerInterval()) return false;
        if (getFailureRateDelay()
            != other.getFailureRateDelay()) return false;
        if (getFailureRateFailureRateInterval()
            != other.getFailureRateFailureRateInterval()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + RESTART_STRATEGY_FIELD_NUMBER;
        hash = (53 * hash) + getRestartStrategy().hashCode();
        hash = (37 * hash) + FIXED_DELAY_ATTEMPTS_FIELD_NUMBER;
        hash = (53 * hash) + getFixedDelayAttempts();
        hash = (37 * hash) + FIXED_DELAY_DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getFixedDelayDelay();
        hash = (37 * hash) + FAILURE_RATE_MAX_FAILURES_PER_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getFailureRateMaxFailuresPerInterval();
        hash = (37 * hash) + FAILURE_RATE_DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getFailureRateDelay();
        hash = (37 * hash) + FAILURE_RATE_FAILURE_RATE_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getFailureRateFailureRateInterval();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Config for flink restart strategy.
       * </pre>
       *
       * Protobuf type {@code flink.FlinkConfig.RestartStrategy}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:flink.FlinkConfig.RestartStrategy)
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_RestartStrategy_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_RestartStrategy_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder.class);
        }

        // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          restartStrategy_ = "";

          fixedDelayAttempts_ = 0;

          fixedDelayDelay_ = 0;

          failureRateMaxFailuresPerInterval_ = 0;

          failureRateDelay_ = 0;

          failureRateFailureRateInterval_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_RestartStrategy_descriptor;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy getDefaultInstanceForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.getDefaultInstance();
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy build() {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy buildPartial() {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy(this);
          result.restartStrategy_ = restartStrategy_;
          result.fixedDelayAttempts_ = fixedDelayAttempts_;
          result.fixedDelayDelay_ = fixedDelayDelay_;
          result.failureRateMaxFailuresPerInterval_ = failureRateMaxFailuresPerInterval_;
          result.failureRateDelay_ = failureRateDelay_;
          result.failureRateFailureRateInterval_ = failureRateFailureRateInterval_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy) {
            return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy other) {
          if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.getDefaultInstance()) return this;
          if (!other.getRestartStrategy().isEmpty()) {
            restartStrategy_ = other.restartStrategy_;
            onChanged();
          }
          if (other.getFixedDelayAttempts() != 0) {
            setFixedDelayAttempts(other.getFixedDelayAttempts());
          }
          if (other.getFixedDelayDelay() != 0) {
            setFixedDelayDelay(other.getFixedDelayDelay());
          }
          if (other.getFailureRateMaxFailuresPerInterval() != 0) {
            setFailureRateMaxFailuresPerInterval(other.getFailureRateMaxFailuresPerInterval());
          }
          if (other.getFailureRateDelay() != 0) {
            setFailureRateDelay(other.getFailureRateDelay());
          }
          if (other.getFailureRateFailureRateInterval() != 0) {
            setFailureRateFailureRateInterval(other.getFailureRateFailureRateInterval());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object restartStrategy_ = "";
        /**
         * <pre>
         * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
         * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
         * </pre>
         *
         * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
         * @return The restartStrategy.
         */
        public java.lang.String getRestartStrategy() {
          java.lang.Object ref = restartStrategy_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            restartStrategy_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
         * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
         * </pre>
         *
         * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
         * @return The bytes for restartStrategy.
         */
        public com.google.protobuf.ByteString
            getRestartStrategyBytes() {
          java.lang.Object ref = restartStrategy_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            restartStrategy_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
         * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
         * </pre>
         *
         * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
         * @param value The restartStrategy to set.
         * @return This builder for chaining.
         */
        public Builder setRestartStrategy(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          restartStrategy_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
         * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
         * </pre>
         *
         * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearRestartStrategy() {
          
          restartStrategy_ = getDefaultInstance().getRestartStrategy();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Flink restart_strategy, Optional value: "none | fixed-delay | failure-rate"
         * &#64;inject_tag: json:"restart_strategy" binding:"oneof=none fixed-delay failure-rate"
         * </pre>
         *
         * <code>string restart_strategy = 1 [(.validator.field) = { ... }</code>
         * @param value The bytes for restartStrategy to set.
         * @return This builder for chaining.
         */
        public Builder setRestartStrategyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          restartStrategy_ = value;
          onChanged();
          return this;
        }

        private int fixedDelayAttempts_ ;
        /**
         * <pre>
         * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 1000. Default 1.
         * &#64;inject_tag: json:"fixed_delay_attempts" binding:"gte=1, lte=1000"
         * </pre>
         *
         * <code>int32 fixed_delay_attempts = 2 [(.defaults.field) = { ... }</code>
         * @return The fixedDelayAttempts.
         */
        @java.lang.Override
        public int getFixedDelayAttempts() {
          return fixedDelayAttempts_;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 1000. Default 1.
         * &#64;inject_tag: json:"fixed_delay_attempts" binding:"gte=1, lte=1000"
         * </pre>
         *
         * <code>int32 fixed_delay_attempts = 2 [(.defaults.field) = { ... }</code>
         * @param value The fixedDelayAttempts to set.
         * @return This builder for chaining.
         */
        public Builder setFixedDelayAttempts(int value) {
          
          fixedDelayAttempts_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 1000. Default 1.
         * &#64;inject_tag: json:"fixed_delay_attempts" binding:"gte=1, lte=1000"
         * </pre>
         *
         * <code>int32 fixed_delay_attempts = 2 [(.defaults.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearFixedDelayAttempts() {
          
          fixedDelayAttempts_ = 0;
          onChanged();
          return this;
        }

        private int fixedDelayDelay_ ;
        /**
         * <pre>
         * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 86400. Default 1, unit is second.
         * &#64;inject_tag: json:"fixed_delay_delay binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 fixed_delay_delay = 3 [(.defaults.field) = { ... }</code>
         * @return The fixedDelayDelay.
         */
        @java.lang.Override
        public int getFixedDelayDelay() {
          return fixedDelayDelay_;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 86400. Default 1, unit is second.
         * &#64;inject_tag: json:"fixed_delay_delay binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 fixed_delay_delay = 3 [(.defaults.field) = { ... }</code>
         * @param value The fixedDelayDelay to set.
         * @return This builder for chaining.
         */
        public Builder setFixedDelayDelay(int value) {
          
          fixedDelayDelay_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "fixed-delay". Min: 1, Max: 86400. Default 1, unit is second.
         * &#64;inject_tag: json:"fixed_delay_delay binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 fixed_delay_delay = 3 [(.defaults.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearFixedDelayDelay() {
          
          fixedDelayDelay_ = 0;
          onChanged();
          return this;
        }

        private int failureRateMaxFailuresPerInterval_ ;
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 1000. Default 1.
         * &#64;inject_tag: json:"failure_rate_max_failures_per_interval" binding:"gte=1, lte=1000"
         * </pre>
         *
         * <code>int32 failure_rate_max_failures_per_interval = 4 [(.defaults.field) = { ... }</code>
         * @return The failureRateMaxFailuresPerInterval.
         */
        @java.lang.Override
        public int getFailureRateMaxFailuresPerInterval() {
          return failureRateMaxFailuresPerInterval_;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 1000. Default 1.
         * &#64;inject_tag: json:"failure_rate_max_failures_per_interval" binding:"gte=1, lte=1000"
         * </pre>
         *
         * <code>int32 failure_rate_max_failures_per_interval = 4 [(.defaults.field) = { ... }</code>
         * @param value The failureRateMaxFailuresPerInterval to set.
         * @return This builder for chaining.
         */
        public Builder setFailureRateMaxFailuresPerInterval(int value) {
          
          failureRateMaxFailuresPerInterval_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 1000. Default 1.
         * &#64;inject_tag: json:"failure_rate_max_failures_per_interval" binding:"gte=1, lte=1000"
         * </pre>
         *
         * <code>int32 failure_rate_max_failures_per_interval = 4 [(.defaults.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearFailureRateMaxFailuresPerInterval() {
          
          failureRateMaxFailuresPerInterval_ = 0;
          onChanged();
          return this;
        }

        private int failureRateDelay_ ;
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 1. unit is second.
         * &#64;inject_tag: json:"failure_rate_delay" binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 failure_rate_delay = 5 [(.defaults.field) = { ... }</code>
         * @return The failureRateDelay.
         */
        @java.lang.Override
        public int getFailureRateDelay() {
          return failureRateDelay_;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 1. unit is second.
         * &#64;inject_tag: json:"failure_rate_delay" binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 failure_rate_delay = 5 [(.defaults.field) = { ... }</code>
         * @param value The failureRateDelay to set.
         * @return This builder for chaining.
         */
        public Builder setFailureRateDelay(int value) {
          
          failureRateDelay_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 1. unit is second.
         * &#64;inject_tag: json:"failure_rate_delay" binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 failure_rate_delay = 5 [(.defaults.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearFailureRateDelay() {
          
          failureRateDelay_ = 0;
          onChanged();
          return this;
        }

        private int failureRateFailureRateInterval_ ;
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 60, unit is second.
         * &#64;inject_tag: json:"failure_rate_failure_rate_interval" binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 failure_rate_failure_rate_interval = 6 [(.defaults.field) = { ... }</code>
         * @return The failureRateFailureRateInterval.
         */
        @java.lang.Override
        public int getFailureRateFailureRateInterval() {
          return failureRateFailureRateInterval_;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 60, unit is second.
         * &#64;inject_tag: json:"failure_rate_failure_rate_interval" binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 failure_rate_failure_rate_interval = 6 [(.defaults.field) = { ... }</code>
         * @param value The failureRateFailureRateInterval to set.
         * @return This builder for chaining.
         */
        public Builder setFailureRateFailureRateInterval(int value) {
          
          failureRateFailureRateInterval_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Affect when restart_strategy == "failure-rate". Min: 1, Max: 86400. Default 60, unit is second.
         * &#64;inject_tag: json:"failure_rate_failure_rate_interval" binding:"gte=1, lte=86400"
         * </pre>
         *
         * <code>int32 failure_rate_failure_rate_interval = 6 [(.defaults.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearFailureRateFailureRateInterval() {
          
          failureRateFailureRateInterval_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:flink.FlinkConfig.RestartStrategy)
      }

      // @@protoc_insertion_point(class_scope:flink.FlinkConfig.RestartStrategy)
      private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy();
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RestartStrategy>
          PARSER = new com.google.protobuf.AbstractParser<RestartStrategy>() {
        @java.lang.Override
        public RestartStrategy parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RestartStrategy(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RestartStrategy> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RestartStrategy> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LoggerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:flink.FlinkConfig.Logger)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
       * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
       * </pre>
       *
       * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
       * @return The rootLogLevel.
       */
      java.lang.String getRootLogLevel();
      /**
       * <pre>
       * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
       * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
       * </pre>
       *
       * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
       * @return The bytes for rootLogLevel.
       */
      com.google.protobuf.ByteString
          getRootLogLevelBytes();
    }
    /**
     * <pre>
     * Log config.
     * </pre>
     *
     * Protobuf type {@code flink.FlinkConfig.Logger}
     */
    public static final class Logger extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:flink.FlinkConfig.Logger)
        LoggerOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Logger.newBuilder() to construct.
      private Logger(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Logger() {
        rootLogLevel_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Logger();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Logger(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                rootLogLevel_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Logger_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Logger_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder.class);
      }

      public static final int ROOT_LOG_LEVEL_FIELD_NUMBER = 1;
      private volatile java.lang.Object rootLogLevel_;
      /**
       * <pre>
       * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
       * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
       * </pre>
       *
       * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
       * @return The rootLogLevel.
       */
      @java.lang.Override
      public java.lang.String getRootLogLevel() {
        java.lang.Object ref = rootLogLevel_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rootLogLevel_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
       * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
       * </pre>
       *
       * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
       * @return The bytes for rootLogLevel.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRootLogLevelBytes() {
        java.lang.Object ref = rootLogLevel_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rootLogLevel_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getRootLogLevelBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, rootLogLevel_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getRootLogLevelBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, rootLogLevel_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger)) {
          return super.equals(obj);
        }
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger) obj;

        if (!getRootLogLevel()
            .equals(other.getRootLogLevel())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ROOT_LOG_LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + getRootLogLevel().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Log config.
       * </pre>
       *
       * Protobuf type {@code flink.FlinkConfig.Logger}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:flink.FlinkConfig.Logger)
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Logger_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Logger_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder.class);
        }

        // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          rootLogLevel_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_Logger_descriptor;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger getDefaultInstanceForType() {
          return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.getDefaultInstance();
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger build() {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger buildPartial() {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger(this);
          result.rootLogLevel_ = rootLogLevel_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger) {
            return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger other) {
          if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.getDefaultInstance()) return this;
          if (!other.getRootLogLevel().isEmpty()) {
            rootLogLevel_ = other.rootLogLevel_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object rootLogLevel_ = "";
        /**
         * <pre>
         * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
         * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
         * </pre>
         *
         * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
         * @return The rootLogLevel.
         */
        public java.lang.String getRootLogLevel() {
          java.lang.Object ref = rootLogLevel_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            rootLogLevel_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
         * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
         * </pre>
         *
         * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
         * @return The bytes for rootLogLevel.
         */
        public com.google.protobuf.ByteString
            getRootLogLevelBytes() {
          java.lang.Object ref = rootLogLevel_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            rootLogLevel_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
         * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
         * </pre>
         *
         * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
         * @param value The rootLogLevel to set.
         * @return This builder for chaining.
         */
        public Builder setRootLogLevel(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          rootLogLevel_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
         * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
         * </pre>
         *
         * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearRootLogLevel() {
          
          rootLogLevel_ = getDefaultInstance().getRootLogLevel();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Root log level. Optional Value: "TRACE | DEBUG | INFO | WARN | ERROR", Default is "INFO".
         * &#64;inject_tag: json:"root_log_level" binding:"TRACE DEBUG INFO WARN ERROR"
         * </pre>
         *
         * <code>string root_log_level = 1 [(.defaults.field) = { ... }</code>
         * @param value The bytes for rootLogLevel to set.
         * @return This builder for chaining.
         */
        public Builder setRootLogLevelBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          rootLogLevel_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:flink.FlinkConfig.Logger)
      }

      // @@protoc_insertion_point(class_scope:flink.FlinkConfig.Logger)
      private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger();
      }

      public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Logger>
          PARSER = new com.google.protobuf.AbstractParser<Logger>() {
        @java.lang.Override
        public Logger parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Logger(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Logger> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Logger> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int CUSTOM_FIELD_NUMBER = 1;
    private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item> custom_;
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item> getCustomList() {
      return custom_;
    }
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder> 
        getCustomOrBuilderList() {
      return custom_;
    }
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public int getCustomCount() {
      return custom_.size();
    }
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item getCustom(int index) {
      return custom_.get(index);
    }
    /**
     * <pre>
     * Use-defined config. Not required.
     * &#64;inject_tag: json:"custom" default:"" binding:"-"
     * </pre>
     *
     * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder getCustomOrBuilder(
        int index) {
      return custom_.get(index);
    }

    public static final int RESTART_STRATEGY_FIELD_NUMBER = 2;
    private com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy restartStrategy_;
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
     * @return Whether the restartStrategy field is set.
     */
    @java.lang.Override
    public boolean hasRestartStrategy() {
      return restartStrategy_ != null;
    }
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
     * @return The restartStrategy.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy getRestartStrategy() {
      return restartStrategy_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.getDefaultInstance() : restartStrategy_;
    }
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder getRestartStrategyOrBuilder() {
      return getRestartStrategy();
    }

    public static final int LOGGER_FIELD_NUMBER = 3;
    private com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger logger_;
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"logger" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.Logger logger = 3;</code>
     * @return Whether the logger field is set.
     */
    @java.lang.Override
    public boolean hasLogger() {
      return logger_ != null;
    }
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"logger" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.Logger logger = 3;</code>
     * @return The logger.
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger getLogger() {
      return logger_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.getDefaultInstance() : logger_;
    }
    /**
     * <pre>
     * Is required.
     * &#64;inject_tag: json:"logger" default:"" binding:"-"
     * </pre>
     *
     * <code>.flink.FlinkConfig.Logger logger = 3;</code>
     */
    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder getLoggerOrBuilder() {
      return getLogger();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < custom_.size(); i++) {
        output.writeMessage(1, custom_.get(i));
      }
      if (restartStrategy_ != null) {
        output.writeMessage(2, getRestartStrategy());
      }
      if (logger_ != null) {
        output.writeMessage(3, getLogger());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < custom_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, custom_.get(i));
      }
      if (restartStrategy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRestartStrategy());
      }
      if (logger_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLogger());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig)) {
        return super.equals(obj);
      }
      com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig other = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig) obj;

      if (!getCustomList()
          .equals(other.getCustomList())) return false;
      if (hasRestartStrategy() != other.hasRestartStrategy()) return false;
      if (hasRestartStrategy()) {
        if (!getRestartStrategy()
            .equals(other.getRestartStrategy())) return false;
      }
      if (hasLogger() != other.hasLogger()) return false;
      if (hasLogger()) {
        if (!getLogger()
            .equals(other.getLogger())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCustomCount() > 0) {
        hash = (37 * hash) + CUSTOM_FIELD_NUMBER;
        hash = (53 * hash) + getCustomList().hashCode();
      }
      if (hasRestartStrategy()) {
        hash = (37 * hash) + RESTART_STRATEGY_FIELD_NUMBER;
        hash = (53 * hash) + getRestartStrategy().hashCode();
      }
      if (hasLogger()) {
        hash = (37 * hash) + LOGGER_FIELD_NUMBER;
        hash = (53 * hash) + getLogger().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FlinkConfig
     * </pre>
     *
     * Protobuf type {@code flink.FlinkConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flink.FlinkConfig)
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.class, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Builder.class);
      }

      // Construct using com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCustomFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (customBuilder_ == null) {
          custom_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          customBuilder_.clear();
        }
        if (restartStrategyBuilder_ == null) {
          restartStrategy_ = null;
        } else {
          restartStrategy_ = null;
          restartStrategyBuilder_ = null;
        }
        if (loggerBuilder_ == null) {
          logger_ = null;
        } else {
          logger_ = null;
          loggerBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.internal_static_flink_FlinkConfig_descriptor;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig getDefaultInstanceForType() {
        return com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.getDefaultInstance();
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig build() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig buildPartial() {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig result = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig(this);
        int from_bitField0_ = bitField0_;
        if (customBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            custom_ = java.util.Collections.unmodifiableList(custom_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.custom_ = custom_;
        } else {
          result.custom_ = customBuilder_.build();
        }
        if (restartStrategyBuilder_ == null) {
          result.restartStrategy_ = restartStrategy_;
        } else {
          result.restartStrategy_ = restartStrategyBuilder_.build();
        }
        if (loggerBuilder_ == null) {
          result.logger_ = logger_;
        } else {
          result.logger_ = loggerBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig) {
          return mergeFrom((com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig other) {
        if (other == com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.getDefaultInstance()) return this;
        if (customBuilder_ == null) {
          if (!other.custom_.isEmpty()) {
            if (custom_.isEmpty()) {
              custom_ = other.custom_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCustomIsMutable();
              custom_.addAll(other.custom_);
            }
            onChanged();
          }
        } else {
          if (!other.custom_.isEmpty()) {
            if (customBuilder_.isEmpty()) {
              customBuilder_.dispose();
              customBuilder_ = null;
              custom_ = other.custom_;
              bitField0_ = (bitField0_ & ~0x00000001);
              customBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCustomFieldBuilder() : null;
            } else {
              customBuilder_.addAllMessages(other.custom_);
            }
          }
        }
        if (other.hasRestartStrategy()) {
          mergeRestartStrategy(other.getRestartStrategy());
        }
        if (other.hasLogger()) {
          mergeLogger(other.getLogger());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item> custom_ =
        java.util.Collections.emptyList();
      private void ensureCustomIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          custom_ = new java.util.ArrayList<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item>(custom_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder> customBuilder_;

      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item> getCustomList() {
        if (customBuilder_ == null) {
          return java.util.Collections.unmodifiableList(custom_);
        } else {
          return customBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public int getCustomCount() {
        if (customBuilder_ == null) {
          return custom_.size();
        } else {
          return customBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item getCustom(int index) {
        if (customBuilder_ == null) {
          return custom_.get(index);
        } else {
          return customBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setCustom(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item value) {
        if (customBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomIsMutable();
          custom_.set(index, value);
          onChanged();
        } else {
          customBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder setCustom(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder builderForValue) {
        if (customBuilder_ == null) {
          ensureCustomIsMutable();
          custom_.set(index, builderForValue.build());
          onChanged();
        } else {
          customBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addCustom(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item value) {
        if (customBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomIsMutable();
          custom_.add(value);
          onChanged();
        } else {
          customBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addCustom(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item value) {
        if (customBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCustomIsMutable();
          custom_.add(index, value);
          onChanged();
        } else {
          customBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addCustom(
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder builderForValue) {
        if (customBuilder_ == null) {
          ensureCustomIsMutable();
          custom_.add(builderForValue.build());
          onChanged();
        } else {
          customBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addCustom(
          int index, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder builderForValue) {
        if (customBuilder_ == null) {
          ensureCustomIsMutable();
          custom_.add(index, builderForValue.build());
          onChanged();
        } else {
          customBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder addAllCustom(
          java.lang.Iterable<? extends com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item> values) {
        if (customBuilder_ == null) {
          ensureCustomIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, custom_);
          onChanged();
        } else {
          customBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder clearCustom() {
        if (customBuilder_ == null) {
          custom_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          customBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public Builder removeCustom(int index) {
        if (customBuilder_ == null) {
          ensureCustomIsMutable();
          custom_.remove(index);
          onChanged();
        } else {
          customBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder getCustomBuilder(
          int index) {
        return getCustomFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder getCustomOrBuilder(
          int index) {
        if (customBuilder_ == null) {
          return custom_.get(index);  } else {
          return customBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<? extends com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder> 
           getCustomOrBuilderList() {
        if (customBuilder_ != null) {
          return customBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(custom_);
        }
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder addCustomBuilder() {
        return getCustomFieldBuilder().addBuilder(
            com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.getDefaultInstance());
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder addCustomBuilder(
          int index) {
        return getCustomFieldBuilder().addBuilder(
            index, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.getDefaultInstance());
      }
      /**
       * <pre>
       * Use-defined config. Not required.
       * &#64;inject_tag: json:"custom" default:"" binding:"-"
       * </pre>
       *
       * <code>repeated .flink.FlinkConfig.Item custom = 1 [(.validator.field) = { ... }</code>
       */
      public java.util.List<com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder> 
           getCustomBuilderList() {
        return getCustomFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder> 
          getCustomFieldBuilder() {
        if (customBuilder_ == null) {
          customBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Item.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.ItemOrBuilder>(
                  custom_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          custom_ = null;
        }
        return customBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy restartStrategy_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder> restartStrategyBuilder_;
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       * @return Whether the restartStrategy field is set.
       */
      public boolean hasRestartStrategy() {
        return restartStrategyBuilder_ != null || restartStrategy_ != null;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       * @return The restartStrategy.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy getRestartStrategy() {
        if (restartStrategyBuilder_ == null) {
          return restartStrategy_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.getDefaultInstance() : restartStrategy_;
        } else {
          return restartStrategyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      public Builder setRestartStrategy(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy value) {
        if (restartStrategyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          restartStrategy_ = value;
          onChanged();
        } else {
          restartStrategyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      public Builder setRestartStrategy(
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder builderForValue) {
        if (restartStrategyBuilder_ == null) {
          restartStrategy_ = builderForValue.build();
          onChanged();
        } else {
          restartStrategyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      public Builder mergeRestartStrategy(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy value) {
        if (restartStrategyBuilder_ == null) {
          if (restartStrategy_ != null) {
            restartStrategy_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.newBuilder(restartStrategy_).mergeFrom(value).buildPartial();
          } else {
            restartStrategy_ = value;
          }
          onChanged();
        } else {
          restartStrategyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      public Builder clearRestartStrategy() {
        if (restartStrategyBuilder_ == null) {
          restartStrategy_ = null;
          onChanged();
        } else {
          restartStrategy_ = null;
          restartStrategyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder getRestartStrategyBuilder() {
        
        onChanged();
        return getRestartStrategyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder getRestartStrategyOrBuilder() {
        if (restartStrategyBuilder_ != null) {
          return restartStrategyBuilder_.getMessageOrBuilder();
        } else {
          return restartStrategy_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.getDefaultInstance() : restartStrategy_;
        }
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"restart_strategy" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.RestartStrategy restart_strategy = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder> 
          getRestartStrategyFieldBuilder() {
        if (restartStrategyBuilder_ == null) {
          restartStrategyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategy.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.RestartStrategyOrBuilder>(
                  getRestartStrategy(),
                  getParentForChildren(),
                  isClean());
          restartStrategy_ = null;
        }
        return restartStrategyBuilder_;
      }

      private com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger logger_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder> loggerBuilder_;
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       * @return Whether the logger field is set.
       */
      public boolean hasLogger() {
        return loggerBuilder_ != null || logger_ != null;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       * @return The logger.
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger getLogger() {
        if (loggerBuilder_ == null) {
          return logger_ == null ? com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.getDefaultInstance() : logger_;
        } else {
          return loggerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      public Builder setLogger(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger value) {
        if (loggerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logger_ = value;
          onChanged();
        } else {
          loggerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      public Builder setLogger(
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder builderForValue) {
        if (loggerBuilder_ == null) {
          logger_ = builderForValue.build();
          onChanged();
        } else {
          loggerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      public Builder mergeLogger(com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger value) {
        if (loggerBuilder_ == null) {
          if (logger_ != null) {
            logger_ =
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.newBuilder(logger_).mergeFrom(value).buildPartial();
          } else {
            logger_ = value;
          }
          onChanged();
        } else {
          loggerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      public Builder clearLogger() {
        if (loggerBuilder_ == null) {
          logger_ = null;
          onChanged();
        } else {
          logger_ = null;
          loggerBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder getLoggerBuilder() {
        
        onChanged();
        return getLoggerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder getLoggerOrBuilder() {
        if (loggerBuilder_ != null) {
          return loggerBuilder_.getMessageOrBuilder();
        } else {
          return logger_ == null ?
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.getDefaultInstance() : logger_;
        }
      }
      /**
       * <pre>
       * Is required.
       * &#64;inject_tag: json:"logger" default:"" binding:"-"
       * </pre>
       *
       * <code>.flink.FlinkConfig.Logger logger = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder> 
          getLoggerFieldBuilder() {
        if (loggerBuilder_ == null) {
          loggerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.Logger.Builder, com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig.LoggerOrBuilder>(
                  getLogger(),
                  getParentForChildren(),
                  isClean());
          logger_ = null;
        }
        return loggerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flink.FlinkConfig)
    }

    // @@protoc_insertion_point(class_scope:flink.FlinkConfig)
    private static final com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig();
    }

    public static com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkConfig>
        PARSER = new com.google.protobuf.AbstractParser<FlinkConfig>() {
      @java.lang.Override
      public FlinkConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.dataomnis.gproto.flinkpb.FlinkPB.FlinkConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ColumnAs_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ColumnAs_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_DestOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_DestOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ValuesOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ValuesOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ValuesOperator_ValuesType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ValuesOperator_ValuesType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_OrderByOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_OrderByOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_OrderByOperator_OrderByColumn_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_OrderByOperator_OrderByColumn_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_LimitOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_LimitOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_OffsetOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_OffsetOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FetchOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FetchOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_UnionOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_UnionOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_GroupByOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_GroupByOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_HavingOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_HavingOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ConstOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ConstOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_SourceOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_SourceOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_DimensionOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_DimensionOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ExceptOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ExceptOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_IntersectOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_IntersectOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FilterOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FilterOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_JoinOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_JoinOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_UDTFOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_UDTFOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_UDTTFOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_UDTTFOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_OperatorProperty_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_OperatorProperty_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkJar_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkJar_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkScala_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkScala_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkPython_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkPython_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkSQL_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkSQL_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_SqlColumnType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_SqlColumnType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_SqlTimeColumnType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_SqlTimeColumnType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ConnectorOption_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ConnectorOption_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_MySQLTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_MySQLTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_PostgreSQLTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_PostgreSQLTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_ClickHouseTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_ClickHouseTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_HBaseTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_HBaseTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_HDFSTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_HDFSTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_S3Table_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_S3Table_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FtpTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FtpTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_KafkaTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_KafkaTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_TableSchema_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_TableSchema_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkConfig_Item_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkConfig_Item_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkConfig_RestartStrategy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkConfig_RestartStrategy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flink_FlinkConfig_Logger_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flink_FlinkConfig_Logger_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021proto/flink.proto\022\005flink\0321github.com/y" +
      "u31/proto-go-plugin/proto/gosql.proto\0325g" +
      "ithub.com/yu31/proto-go-plugin/proto/val" +
      "idator.proto\0324github.com/yu31/proto-go-p" +
      "lugin/proto/defaults.proto\"\206\001\n\010ColumnAs\022" +
      "\036\n\005field\030\001 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\022\035\n\004func\030" +
      "\002 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\022\036\n\004type\030\004 \001(\tB\020\342\337" +
      "\037\014\022\n\302\001\007\220\002\000\230\002\200\002\022\033\n\002as\030\005 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000" +
      "\230\002@\"P\n\014DestOperator\022 \n\007columns\030\001 \003(\tB\017\342\337" +
      "\037\013\022\t\352\001\0060\0008\240\234\001\022\036\n\010table_id\030\002 \001(\tB\014\342\337\037\010\022\006\302" +
      "\001\003\360\001\024\"x\n\016ValuesOperator\022;\n\004rows\030\001 \003(\0132 ." +
      "flink.ValuesOperator.ValuesTypeB\013\342\337\037\007\022\005\352" +
      "\001\0020\000\032)\n\nValuesType\022\033\n\006values\030\001 \003(\tB\013\342\337\037\007" +
      "\022\005\352\001\0020\000\"\250\001\n\017OrderByOperator\022D\n\006column\030\001 " +
      "\003(\0132$.flink.OrderByOperator.OrderByColum" +
      "nB\016\342\337\037\n\022\010\352\001\0050\0008\201\010\032O\n\rOrderByColumn\022\036\n\005fi" +
      "eld\030\001 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\022\036\n\005order\030\002 \001(" +
      "\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\"-\n\rLimitOperator\022\034\n\005l" +
      "imit\030\001 \001(\005B\r\342\337\037\t\022\007\262\001\0040\0008d\"/\n\016OffsetOpera" +
      "tor\022\035\n\006offset\030\001 \001(\005B\r\342\337\037\t\022\007\262\001\0040\0008d\"-\n\rFe" +
      "tchOperator\022\034\n\005fetch\030\001 \001(\005B\r\342\337\037\t\022\007\262\001\0040\0008" +
      "d\"\"\n\rUnionOperator\022\021\n\003all\030\001 \001(\010B\004\342\337\037\000\"3\n" +
      "\017GroupByOperator\022 \n\010group_by\030\001 \003(\tB\016\342\337\037\n" +
      "\022\010\352\001\0050\0008\200\010\"2\n\016HavingOperator\022 \n\006having\030\001" +
      " \001(\tB\020\342\337\037\014\022\n\302\001\007\200\002\000\210\002\200\010\"V\n\rConstOperator\022" +
      "\036\n\005table\030\001 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\022%\n\006colum" +
      "n\030\002 \003(\0132\017.flink.ColumnAsB\004\342\337\037\000\"\367\001\n\016Sourc" +
      "eOperator\022\036\n\010table_id\030\001 \001(\tB\014\342\337\037\010\022\006\302\001\003\360\001" +
      "\024\022!\n\010table_as\030\002 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\022!\n\010" +
      "distinct\030\003 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002@\022%\n\006colum" +
      "n\030\004 \003(\0132\017.flink.ColumnAsB\004\342\337\037\000\022,\n\rcustom" +
      "_column\030\005 \003(\0132\017.flink.ColumnAsB\004\342\337\037\000\022*\n\013" +
      "time_column\030\006 \003(\0132\017.flink.ColumnAsB\004\342\337\037\000" +
      "\"\372\001\n\021DimensionOperator\022\036\n\010table_id\030\001 \001(\t" +
      "B\014\342\337\037\010\022\006\302\001\003\360\001\024\022!\n\010table_as\030\002 \001(\tB\017\342\337\037\013\022\t" +
      "\302\001\006\220\002\000\230\002@\022!\n\010distinct\030\003 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002" +
      "\000\230\002@\022%\n\006column\030\004 \003(\0132\017.flink.ColumnAsB\004\342" +
      "\337\037\000\022,\n\rcustom_column\030\005 \003(\0132\017.flink.Colum" +
      "nAsB\004\342\337\037\000\022*\n\013time_column\030\006 \001(\0132\017.flink.C" +
      "olumnAsB\004\342\337\037\000\"\020\n\016ExceptOperator\"\023\n\021Inter" +
      "sectOperator\"\227\001\n\016FilterOperator\022\037\n\005where" +
      "\030\001 \001(\tB\020\342\337\037\014\022\n\302\001\007\220\002\000\230\002\200\010\022\034\n\002in\030\002 \001(\tB\020\342\337" +
      "\037\014\022\n\302\001\007\220\002\000\230\002\200\010\022 \n\006exists\030\003 \001(\tB\020\342\337\037\014\022\n\302\001" +
      "\007\220\002\000\230\002\200\010\022$\n\nexpression\030\004 \001(\tB\020\342\337\037\014\022\n\302\001\007\220" +
      "\002\000\230\002\200\010\"\226\002\n\014JoinOperator\022\035\n\004join\030\001 \001(\tB\017\342" +
      "\337\037\013\022\t\302\001\006\220\002\000\230\002@\022$\n\nexpression\030\002 \001(\tB\020\342\337\037\014" +
      "\022\n\302\001\007\220\002\000\230\002\200\010\022!\n\010table_as\030\003 \001(\tB\017\342\337\037\013\022\t\302\001" +
      "\006\220\002\000\230\002@\022\'\n\016table_as_right\030\004 \001(\tB\017\342\337\037\013\022\t\302" +
      "\001\006\220\002\000\230\002@\022\036\n\004args\030\005 \001(\tB\020\342\337\037\014\022\n\302\001\007\220\002\000\230\002\200\010" +
      "\022%\n\006column\030\006 \003(\0132\017.flink.ColumnAsB\004\342\337\037\000\022" +
      ".\n\017generate_column\030\007 \003(\0132\017.flink.ColumnA" +
      "sB\004\342\337\037\000\"\304\001\n\014UDTFOperator\022\034\n\006udf_id\030\001 \001(\t" +
      "B\014\342\337\037\010\022\006\302\001\003\360\001\024\022\036\n\004args\030\002 \001(\tB\020\342\337\037\014\022\n\302\001\007\220" +
      "\002\000\230\002\200\010\022!\n\010table_as\030\003 \001(\tB\017\342\337\037\013\022\t\302\001\006\220\002\000\230\002" +
      "@\022%\n\006column\030\004 \003(\0132\017.flink.ColumnAsB\004\342\337\037\000" +
      "\022,\n\rselect_column\030\005 \003(\0132\017.flink.ColumnAs" +
      "B\004\342\337\037\000\"t\n\rUDTTFOperator\022\034\n\006udf_id\030\001 \001(\tB" +
      "\014\342\337\037\010\022\006\302\001\003\360\001\024\022\036\n\004args\030\002 \001(\tB\020\342\337\037\014\022\n\302\001\007\220\002" +
      "\000\230\002\200\010\022%\n\006column\030\003 \003(\0132\017.flink.ColumnAsB\004" +
      "\342\337\037\000\"\270\006\n\020OperatorProperty\022+\n\006source\030\001 \001(" +
      "\0132\025.flink.SourceOperatorB\004\342\337\037\000\022\'\n\004dest\030\002" +
      " \001(\0132\023.flink.DestOperatorB\004\342\337\037\000\022+\n\006value" +
      "s\030\003 \001(\0132\025.flink.ValuesOperatorB\004\342\337\037\000\022.\n\010" +
      "order_by\030\004 \001(\0132\026.flink.OrderByOperatorB\004" +
      "\342\337\037\000\022)\n\005limit\030\005 \001(\0132\024.flink.LimitOperato" +
      "rB\004\342\337\037\000\022+\n\006offset\030\006 \001(\0132\025.flink.OffsetOp" +
      "eratorB\004\342\337\037\000\022)\n\005fetch\030\007 \001(\0132\024.flink.Fetc" +
      "hOperatorB\004\342\337\037\000\022)\n\005union\030\010 \001(\0132\024.flink.U" +
      "nionOperatorB\004\342\337\037\000\022.\n\010group_by\030\t \001(\0132\026.f" +
      "link.GroupByOperatorB\004\342\337\037\000\022+\n\006having\030\n \001" +
      "(\0132\025.flink.HavingOperatorB\004\342\337\037\000\022)\n\005const" +
      "\030\013 \001(\0132\024.flink.ConstOperatorB\004\342\337\037\000\0221\n\tdi" +
      "mension\030\014 \001(\0132\030.flink.DimensionOperatorB" +
      "\004\342\337\037\000\022+\n\006except\030\r \001(\0132\025.flink.ExceptOper" +
      "atorB\004\342\337\037\000\0221\n\tintersect\030\016 \001(\0132\030.flink.In" +
      "tersectOperatorB\004\342\337\037\000\022+\n\006filter\030\017 \001(\0132\025." +
      "flink.FilterOperatorB\004\342\337\037\000\022\'\n\004udtf\030\020 \001(\013" +
      "2\023.flink.UDTFOperatorB\004\342\337\037\000\022)\n\005udttf\030\021 \001" +
      "(\0132\024.flink.UDTTFOperatorB\004\342\337\037\000\022\'\n\004join\030\022" +
      " \001(\0132\023.flink.JoinOperatorB\004\342\337\037\000\"\302\004\n\rFlin" +
      "kOperator\0226\n\004type\030\001 \001(\0162\031.flink.FlinkOpe" +
      "rator.TypeB\r\342\337\037\t\022\007\332\001\0040\000X\001\022\030\n\002id\030\002 \001(\tB\014\342" +
      "\337\037\010\022\006\302\001\003\210\002\025\022\032\n\004name\030\003 \001(\tB\014\342\337\037\010\022\006\302\001\003\210\002A\022" +
      "\036\n\010upstream\030\004 \001(\tB\014\342\337\037\010\022\006\302\001\003\210\002\025\022$\n\016upstr" +
      "eam_right\030\005 \001(\tB\014\342\337\037\010\022\006\302\001\003\210\002\025\022!\n\013down_st" +
      "ream\030\006 \001(\tB\014\342\337\037\010\022\006\302\001\003\210\002\025\022\037\n\007point_x\030\007 \001(" +
      "\005B\016\342\337\037\n\022\010\262\001\0058\310\001@\001\022\037\n\007point_y\030\010 \001(\005B\016\342\337\037\n" +
      "\022\010\262\001\0058\310\001@\001\022/\n\010property\030\t \001(\0132\027.flink.Ope" +
      "ratorPropertyB\004\342\337\037\000\"\346\001\n\004Type\022\t\n\005Empty\020\000\022" +
      "\n\n\006Values\020\001\022\t\n\005Const\020\002\022\n\n\006Source\020\003\022\r\n\tDi" +
      "mension\020\004\022\010\n\004Dest\020\005\022\013\n\007OrderBy\020\006\022\t\n\005Limi" +
      "t\020\007\022\n\n\006Offset\020\010\022\t\n\005Fetch\020\t\022\n\n\006Filter\020\n\022\t" +
      "\n\005Union\020\013\022\n\n\006Except\020\014\022\r\n\tIntersect\020\r\022\013\n\007" +
      "GroupBy\020\016\022\n\n\006Having\020\017\022\010\n\004Join\020\020\022\010\n\004UDTF\020" +
      "\021\022\t\n\005UDTTF\020\022\"h\n\010FlinkJar\022\031\n\013resource_id\030" +
      "\001 \001(\tB\004\342\337\037\000\022\037\n\010jar_args\030\002 \001(\tB\r\342\337\037\t\022\007\302\001\004" +
      "\230\002\200\010\022 \n\tjar_entry\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\"*" +
      "\n\nFlinkScala\022\034\n\004code\030\001 \001(\tB\016\342\337\037\n\022\010\302\001\005\230\002\300" +
      "\270\002\"+\n\013FlinkPython\022\034\n\004code\030\001 \001(\tB\016\342\337\037\n\022\010\302" +
      "\001\005\230\002\300\270\002\"(\n\010FlinkSQL\022\034\n\004code\030\001 \001(\tB\016\342\337\037\n\022" +
      "\010\302\001\005\230\002\300\270\002\"\252\001\n\rSqlColumnType\022\034\n\006column\030\001 " +
      "\001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022\032\n\004type\030\002 \001(\tB\014\342\337\037\010\022\006\302" +
      "\001\003\230\002@\022\036\n\007comment\030\003 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\002\022!\n" +
      "\013primary_key\030\004 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002\010\022\034\n\006Leng" +
      "th\030\005 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002\n\"\304\001\n\021SqlTimeColumn" +
      "Type\022\034\n\006column\030\001 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022:\n\004ty" +
      "pe\030\002 \001(\0162\035.flink.SqlTimeColumnType.TypeB" +
      "\r\342\337\037\t\022\007\332\001\004@\001X\001\022!\n\nexpression\030\003 \001(\tB\r\342\337\037\t" +
      "\022\007\302\001\004\230\002\200\010\"2\n\004Type\022\r\n\tTypeUnset\020\000\022\014\n\010Proc" +
      "time\020\001\022\r\n\tWatermark\020\002\"L\n\017ConnectorOption" +
      "\022\033\n\004name\030\001 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\002\022\034\n\005value\030\002" +
      " \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200 \"\326\001\n\nMySQLTable\022.\n\nsq" +
      "l_column\030\001 \003(\0132\024.flink.SqlColumnTypeB\004\342\337" +
      "\037\000\022\"\n\014mapping_name\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\0227" +
      "\n\021connector_options\030\003 \003(\0132\026.flink.Connec" +
      "torOptionB\004\342\337\037\000\0223\n\013time_column\030\004 \003(\0132\030.f" +
      "link.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\333\001\n" +
      "\017PostgreSQLTable\022.\n\nsql_column\030\001 \003(\0132\024.f" +
      "link.SqlColumnTypeB\004\342\337\037\000\022\"\n\014mapping_name" +
      "\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\0227\n\021connector_option" +
      "s\030\003 \003(\0132\026.flink.ConnectorOptionB\004\342\337\037\000\0223\n" +
      "\013time_column\030\004 \003(\0132\030.flink.SqlTimeColumn" +
      "TypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"\332\001\n\017ClickHouseTable\022." +
      "\n\nsql_column\030\001 \003(\0132\024.flink.SqlColumnType" +
      "B\004\342\337\037\000\022!\n\013MappingName\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002" +
      "@\0227\n\021connector_options\030\003 \003(\0132\026.flink.Con" +
      "nectorOptionB\004\342\337\037\000\0223\n\013time_column\030\004 \003(\0132" +
      "\030.flink.SqlTimeColumnTypeB\004\342\337\037\000:\006\312\262\004\002\n\000\"" +
      "\326\001\n\nHBaseTable\022.\n\nsql_column\030\001 \003(\0132\024.fli" +
      "nk.SqlColumnTypeB\004\342\337\037\000\022\"\n\014mapping_name\030\002" +
      " \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\0227\n\021connector_options\030" +
      "\003 \003(\0132\026.flink.ConnectorOptionB\004\342\337\037\000\0223\n\013t" +
      "ime_column\030\004 \003(\0132\030.flink.SqlTimeColumnTy" +
      "peB\004\342\337\037\000:\006\312\262\004\002\n\000\"\354\001\n\tHDFSTable\022.\n\nsql_co" +
      "lumn\030\001 \003(\0132\024.flink.SqlColumnTypeB\004\342\337\037\000\022\034" +
      "\n\006format\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022\033\n\004path\030\003 \001" +
      "(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\0227\n\021connector_options\030\004" +
      " \003(\0132\026.flink.ConnectorOptionB\004\342\337\037\000\0223\n\013ti" +
      "me_column\030\005 \003(\0132\030.flink.SqlTimeColumnTyp" +
      "eB\004\342\337\037\000:\006\312\262\004\002\n\000\"\352\001\n\007S3Table\022.\n\nsql_colum" +
      "n\030\001 \003(\0132\024.flink.SqlColumnTypeB\004\342\337\037\000\022\034\n\006f" +
      "ormat\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022\033\n\004path\030\003 \001(\tB" +
      "\r\342\337\037\t\022\007\302\001\004\230\002\200\010\0227\n\021connector_options\030\004 \003(" +
      "\0132\026.flink.ConnectorOptionB\004\342\337\037\000\0223\n\013time_" +
      "column\030\005 \003(\0132\030.flink.SqlTimeColumnTypeB\004" +
      "\342\337\037\000:\006\312\262\004\002\n\000\"\353\001\n\010FtpTable\022.\n\nsql_column\030" +
      "\001 \003(\0132\024.flink.SqlColumnTypeB\004\342\337\037\000\022\034\n\006for" +
      "mat\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022\033\n\004path\030\003 \001(\tB\r\342" +
      "\337\037\t\022\007\302\001\004\230\002\200\010\0227\n\021connector_options\030\004 \003(\0132" +
      "\026.flink.ConnectorOptionB\004\342\337\037\000\0223\n\013time_co" +
      "lumn\030\005 \003(\0132\030.flink.SqlTimeColumnTypeB\004\342\337" +
      "\037\000:\006\312\262\004\002\n\000\"\356\001\n\nKafkaTable\022.\n\nsql_column\030" +
      "\001 \003(\0132\024.flink.SqlColumnTypeB\004\342\337\037\000\022\034\n\006for" +
      "mat\030\002 \001(\tB\014\342\337\037\010\022\006\302\001\003\230\002@\022\034\n\005topic\030\003 \001(\tB\r" +
      "\342\337\037\t\022\007\302\001\004\230\002\200\010\0227\n\021connector_options\030\004 \003(\013" +
      "2\026.flink.ConnectorOptionB\004\342\337\037\000\0223\n\013time_c" +
      "olumn\030\005 \003(\0132\030.flink.SqlTimeColumnTypeB\004\342" +
      "\337\037\000:\006\312\262\004\002\n\000\"\255\002\n\013TableSchema\022 \n\005mysql\030\001 \001" +
      "(\0132\021.flink.MySQLTable\022*\n\npostgresql\030\002 \001(" +
      "\0132\026.flink.PostgreSQLTable\022*\n\nclickhouse\030" +
      "\003 \001(\0132\026.flink.ClickHouseTable\022 \n\005Hbase\030\004" +
      " \001(\0132\021.flink.HBaseTable\022 \n\005kafka\030\005 \001(\0132\021" +
      ".flink.KafkaTable\022\032\n\002s3\030\006 \001(\0132\016.flink.S3" +
      "Table\022\034\n\003ftp\030\007 \001(\0132\017.flink.FtpTable\022\036\n\004h" +
      "dfs\030\010 \001(\0132\020.flink.HDFSTable:\006\312\262\004\002\n\000\"\261\005\n\013" +
      "FlinkConfig\022-\n\006custom\030\001 \003(\0132\027.flink.Flin" +
      "kConfig.ItemB\004\342\337\037\000\022<\n\020restart_strategy\030\002" +
      " \001(\0132\".flink.FlinkConfig.RestartStrategy" +
      "\022)\n\006logger\030\003 \001(\0132\031.flink.FlinkConfig.Log" +
      "ger\032@\n\004Item\022\032\n\003key\030\001 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\022" +
      "\034\n\005value\030\002 \001(\tB\r\342\337\037\t\022\007\302\001\004\230\002\200\010\032\346\002\n\017Restar" +
      "tStrategy\022D\n\020restart_strategy\030\001 \001(\tB*\342\337\037" +
      "&\022$\302\001!J\004noneJ\013fixed-delayJ\014failure-rate\022" +
      "4\n\024fixed_delay_attempts\030\002 \001(\005B\026\242\241\037\004\252\006\0011\342" +
      "\337\037\n\022\010\262\001\0058\350\007@\001\022#\n\021fixed_delay_delay\030\003 \001(\005" +
      "B\010\242\241\037\004\252\006\0011\0228\n&failure_rate_max_failures_" +
      "per_interval\030\004 \001(\005B\010\242\241\037\004\252\006\0011\0223\n\022failure_" +
      "rate_delay\030\005 \001(\005B\027\242\241\037\004\252\006\0011\342\337\037\013\022\t\262\001\0068\200\243\005@" +
      "\001\022C\n\"failure_rate_failure_rate_interval\030" +
      "\006 \001(\005B\027\242\241\037\004\252\006\0013\342\337\037\013\022\t\262\001\0068\200\243\005@\001\032W\n\006Logger" +
      "\022M\n\016root_log_level\030\001 \001(\tB5\242\241\037\007\252\006\004INFO\342\337\037" +
      "&\022$\302\001!J\005TRACEJ\005DEBUGJ\004INFOJ\004WARNJ\005ERROR:" +
      "\006\312\262\004\002\n\000BV\n\034com.dataomnis.gproto.flinkpbB" +
      "\007FlinkPBP\000Z+github.com/DataWorkbench/gpr" +
      "oto/pkg/flinkpbb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.github.yu31.gosqlpb.GoSQLPB.getDescriptor(),
          com.github.yu31.validatorpb.ValidatorPB.getDescriptor(),
          com.github.yu31.defaultspb.DefaultsPB.getDescriptor(),
        });
    internal_static_flink_ColumnAs_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flink_ColumnAs_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ColumnAs_descriptor,
        new java.lang.String[] { "Field", "Func", "Type", "As", });
    internal_static_flink_DestOperator_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flink_DestOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_DestOperator_descriptor,
        new java.lang.String[] { "Columns", "TableId", });
    internal_static_flink_ValuesOperator_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flink_ValuesOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ValuesOperator_descriptor,
        new java.lang.String[] { "Rows", });
    internal_static_flink_ValuesOperator_ValuesType_descriptor =
      internal_static_flink_ValuesOperator_descriptor.getNestedTypes().get(0);
    internal_static_flink_ValuesOperator_ValuesType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ValuesOperator_ValuesType_descriptor,
        new java.lang.String[] { "Values", });
    internal_static_flink_OrderByOperator_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_flink_OrderByOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_OrderByOperator_descriptor,
        new java.lang.String[] { "Column", });
    internal_static_flink_OrderByOperator_OrderByColumn_descriptor =
      internal_static_flink_OrderByOperator_descriptor.getNestedTypes().get(0);
    internal_static_flink_OrderByOperator_OrderByColumn_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_OrderByOperator_OrderByColumn_descriptor,
        new java.lang.String[] { "Field", "Order", });
    internal_static_flink_LimitOperator_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_flink_LimitOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_LimitOperator_descriptor,
        new java.lang.String[] { "Limit", });
    internal_static_flink_OffsetOperator_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_flink_OffsetOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_OffsetOperator_descriptor,
        new java.lang.String[] { "Offset", });
    internal_static_flink_FetchOperator_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_flink_FetchOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FetchOperator_descriptor,
        new java.lang.String[] { "Fetch", });
    internal_static_flink_UnionOperator_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_flink_UnionOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_UnionOperator_descriptor,
        new java.lang.String[] { "All", });
    internal_static_flink_GroupByOperator_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_flink_GroupByOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_GroupByOperator_descriptor,
        new java.lang.String[] { "GroupBy", });
    internal_static_flink_HavingOperator_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_flink_HavingOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_HavingOperator_descriptor,
        new java.lang.String[] { "Having", });
    internal_static_flink_ConstOperator_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_flink_ConstOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ConstOperator_descriptor,
        new java.lang.String[] { "Table", "Column", });
    internal_static_flink_SourceOperator_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_flink_SourceOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_SourceOperator_descriptor,
        new java.lang.String[] { "TableId", "TableAs", "Distinct", "Column", "CustomColumn", "TimeColumn", });
    internal_static_flink_DimensionOperator_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_flink_DimensionOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_DimensionOperator_descriptor,
        new java.lang.String[] { "TableId", "TableAs", "Distinct", "Column", "CustomColumn", "TimeColumn", });
    internal_static_flink_ExceptOperator_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_flink_ExceptOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ExceptOperator_descriptor,
        new java.lang.String[] { });
    internal_static_flink_IntersectOperator_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_flink_IntersectOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_IntersectOperator_descriptor,
        new java.lang.String[] { });
    internal_static_flink_FilterOperator_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_flink_FilterOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FilterOperator_descriptor,
        new java.lang.String[] { "Where", "In", "Exists", "Expression", });
    internal_static_flink_JoinOperator_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_flink_JoinOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_JoinOperator_descriptor,
        new java.lang.String[] { "Join", "Expression", "TableAs", "TableAsRight", "Args", "Column", "GenerateColumn", });
    internal_static_flink_UDTFOperator_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_flink_UDTFOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_UDTFOperator_descriptor,
        new java.lang.String[] { "UdfId", "Args", "TableAs", "Column", "SelectColumn", });
    internal_static_flink_UDTTFOperator_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_flink_UDTTFOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_UDTTFOperator_descriptor,
        new java.lang.String[] { "UdfId", "Args", "Column", });
    internal_static_flink_OperatorProperty_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_flink_OperatorProperty_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_OperatorProperty_descriptor,
        new java.lang.String[] { "Source", "Dest", "Values", "OrderBy", "Limit", "Offset", "Fetch", "Union", "GroupBy", "Having", "Const", "Dimension", "Except", "Intersect", "Filter", "Udtf", "Udttf", "Join", });
    internal_static_flink_FlinkOperator_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_flink_FlinkOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkOperator_descriptor,
        new java.lang.String[] { "Type", "Id", "Name", "Upstream", "UpstreamRight", "DownStream", "PointX", "PointY", "Property", });
    internal_static_flink_FlinkJar_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_flink_FlinkJar_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkJar_descriptor,
        new java.lang.String[] { "ResourceId", "JarArgs", "JarEntry", });
    internal_static_flink_FlinkScala_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_flink_FlinkScala_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkScala_descriptor,
        new java.lang.String[] { "Code", });
    internal_static_flink_FlinkPython_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_flink_FlinkPython_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkPython_descriptor,
        new java.lang.String[] { "Code", });
    internal_static_flink_FlinkSQL_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_flink_FlinkSQL_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkSQL_descriptor,
        new java.lang.String[] { "Code", });
    internal_static_flink_SqlColumnType_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_flink_SqlColumnType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_SqlColumnType_descriptor,
        new java.lang.String[] { "Column", "Type", "Comment", "PrimaryKey", "Length", });
    internal_static_flink_SqlTimeColumnType_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_flink_SqlTimeColumnType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_SqlTimeColumnType_descriptor,
        new java.lang.String[] { "Column", "Type", "Expression", });
    internal_static_flink_ConnectorOption_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_flink_ConnectorOption_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ConnectorOption_descriptor,
        new java.lang.String[] { "Name", "Value", });
    internal_static_flink_MySQLTable_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_flink_MySQLTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_MySQLTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_PostgreSQLTable_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_flink_PostgreSQLTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_PostgreSQLTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_ClickHouseTable_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_flink_ClickHouseTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_ClickHouseTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_HBaseTable_descriptor =
      getDescriptor().getMessageTypes().get(31);
    internal_static_flink_HBaseTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_HBaseTable_descriptor,
        new java.lang.String[] { "SqlColumn", "MappingName", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_HDFSTable_descriptor =
      getDescriptor().getMessageTypes().get(32);
    internal_static_flink_HDFSTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_HDFSTable_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Path", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_S3Table_descriptor =
      getDescriptor().getMessageTypes().get(33);
    internal_static_flink_S3Table_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_S3Table_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Path", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_FtpTable_descriptor =
      getDescriptor().getMessageTypes().get(34);
    internal_static_flink_FtpTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FtpTable_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Path", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_KafkaTable_descriptor =
      getDescriptor().getMessageTypes().get(35);
    internal_static_flink_KafkaTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_KafkaTable_descriptor,
        new java.lang.String[] { "SqlColumn", "Format", "Topic", "ConnectorOptions", "TimeColumn", });
    internal_static_flink_TableSchema_descriptor =
      getDescriptor().getMessageTypes().get(36);
    internal_static_flink_TableSchema_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_TableSchema_descriptor,
        new java.lang.String[] { "Mysql", "Postgresql", "Clickhouse", "Hbase", "Kafka", "S3", "Ftp", "Hdfs", });
    internal_static_flink_FlinkConfig_descriptor =
      getDescriptor().getMessageTypes().get(37);
    internal_static_flink_FlinkConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkConfig_descriptor,
        new java.lang.String[] { "Custom", "RestartStrategy", "Logger", });
    internal_static_flink_FlinkConfig_Item_descriptor =
      internal_static_flink_FlinkConfig_descriptor.getNestedTypes().get(0);
    internal_static_flink_FlinkConfig_Item_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkConfig_Item_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_flink_FlinkConfig_RestartStrategy_descriptor =
      internal_static_flink_FlinkConfig_descriptor.getNestedTypes().get(1);
    internal_static_flink_FlinkConfig_RestartStrategy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkConfig_RestartStrategy_descriptor,
        new java.lang.String[] { "RestartStrategy", "FixedDelayAttempts", "FixedDelayDelay", "FailureRateMaxFailuresPerInterval", "FailureRateDelay", "FailureRateFailureRateInterval", });
    internal_static_flink_FlinkConfig_Logger_descriptor =
      internal_static_flink_FlinkConfig_descriptor.getNestedTypes().get(2);
    internal_static_flink_FlinkConfig_Logger_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flink_FlinkConfig_Logger_descriptor,
        new java.lang.String[] { "RootLogLevel", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.github.yu31.defaultspb.DefaultsPB.field);
    registry.add(com.github.yu31.gosqlpb.GoSQLPB.serialize);
    registry.add(com.github.yu31.validatorpb.ValidatorPB.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.github.yu31.gosqlpb.GoSQLPB.getDescriptor();
    com.github.yu31.validatorpb.ValidatorPB.getDescriptor();
    com.github.yu31.defaultspb.DefaultsPB.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
