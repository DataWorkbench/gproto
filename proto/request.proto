syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/request";

package request;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "model.proto";

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
message ListWorkspaces {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="id,name,updated".
	// Not required, default: id.
	// @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"
	string sort_by = 3 [ (validator.field) = {} ];
	
	// Reverse order results. Not required, default: false.
	// @inject_tag: json:"reverse" form:"reverse" default:"" binding:"-"
	bool reverse = 4 [ (validator.field) = { } ];
	
	// Search with workspace name; Not required.
	// @inject_tag: json:"search" form:"search" default:"" binding:"-"
	string search = 5 [ (validator.field) = { } ];
	
	// The used_id fixed to request user id.
	// @inject_tag: json:"user_id" form:"-" default:"" binding:"-" swaggerignore:"true"
	string user_id = 6 [ (validator.field) = { length_lt: 65 } ];
	
	// Filter by workspace status;  Not required.
	// Valid optional: 1 => "enabled", 2 => "disabled".
	// @inject_tag: json:"status" form:"status" default:"" binding:"oneof=0 1 2"
	model.Workspace.Status status = 7 [ (validator.field) = { } ];
	
	// Filter by workspace name; valid if `search` is empty; Not required.
	// @inject_tag: json:"name" form:"name" default:"" binding:"-"
	string name = 8 [ (validator.field) = { } ];
}

// DeleteWorkspaces used as a request parameters for RPC and HTTP(based on Body).
message DeleteWorkspaces {
	// The list of workspace id. Is required, Min 1, Max 100.
	// @inject_tag: json:"space_ids" default:"" binding:"gte=1,lte=100"
	repeated string space_ids = 1 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// DisableWorkspaces used as a request parameters for RPC and HTTP(based on Body).
message DisableWorkspaces {
	// The list of workspace id. Is required, Contains at least one.
	// Disable workspace will suspend all release workflow and stop all running instances.
	// @inject_tag: json:"space_ids" default:"" binding:"gte=1,lte=100"
	repeated string space_ids = 1 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// EnableWorkspaces used as a request parameters for RPC and HTTP(based on Body).
message EnableWorkspaces {
	// The list of workspace id. Is required, Contains at least one.
	// @inject_tag: json:"space_ids" default:"" binding:"gte=1,lte=100"
	repeated string space_ids = 1 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
	
	// Whether resume all suspended workflow. Not required, default false.
	// @inject_tag: `json:"resume_workflow" default:"false" binding:"-"`
	bool resume_workflow = 2 [ (validator.field) = { } ];
}

// CreateWorkspace used as a request parameters for RPC and HTTP(based on Body)
message CreateWorkspace {
	// The owner fixed to request user id.
	// @inject_tag: json:"owner" default:"" binding:"-" swaggerignore:"true"
	string owner = 1 [ (validator.field) = { length_gt: 10, length_lt: 65 } ];
	
	// The space name of each account in each region is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	//@inject_tag: json:"name" default:"" binding:"gte=2,lte=128" minLength:"2" maxLength:"128"
	string name = 2 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max 1024 char.
	//@inject_tag: json:"desc" default:"" binding:"lte=1024"
	string desc = 3  [ (validator.field) = { length_lt: 1025 } ];
}

// UpdateWorkspace used as a request parameters for RPC and HTTP(based on Body)
message UpdateWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The space name of each account in each region is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	//@inject_tag: json:"name" default:"" binding:"gte=2,lte=128" minLength:"2" maxLength:"128"
	string name = 2 [ (validator.field) = { length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max length 1024.
	//@inject_tag: json:"desc" default:"" binding:"lte=1024"
	string desc = 3 [ (validator.field) = { length_lt: 1025 } ];
}

// DescribeWorkspace used as a request parameters for RPC.
message DescribeWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// AddAudit used as a request parameters for RPC.
message AddAudit {
	model.OpAudit info = 1 [ (validator.field) = { msg_exists: true } ];
}

// ListAudits used as a request parameters for RPC and HTTP(based on URL-Query)
message ListAudits {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit"  form:"limit"  default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The field list used to sorted query results.
	// Optional values: {id, created}.
	// Multiple fields are separated by commas(","), eg: sort_by="created".
	// Not required, default: id.
	// @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"
	string sort_by = 3 [ (validator.field) = {} ];
	
	// Reverse order results. Not required, default: false.
	// @inject_tag: json:"reverse" form:"reverse" default:"" binding:"-"
	bool reverse = 4 [ (validator.field) = { } ];
	
	// The used_id fixed to request user id.
	// @inject_tag: json:"user_id" form:"-" default:"" binding:"-" swaggerignore:"true"
	string user_id = 5 [ (validator.field) = { length_lt: 65 } ];
	
	// Querying conditions. Not required.
	// @inject_tag: json:"space_id" form:"space_id" default:"" binding:"-"
	string space_id = 6 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// @inject_tag: json:"type" form:"type" default:"" binding:"-"
	model.OpType type = 7 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// @inject_tag: json:"action" form:"action" default:"" binding:"-"
	string action = 8 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// @inject_tag: json:"state" form:"state" default:"" binding:"-"
	model.OpAudit.State state = 9 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// Desc: Timestamp of start time.
	// @inject_tag: json:"started" form:"started" default:"" binding:"-"
	int64 started = 10 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// Desc: Timestamp of end time.
	// @inject_tag: json:"ended" form:"ended" default:"" binding:"-"
	int64 ended = 11 [ (validator.field) = { } ];
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListSystemRoles {
//	// Limit the maximum number of entries returned this time.
//	// Not required, Max 100, default 100.
//	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
//	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
//
//	// The offset position. Not required, default 0.
//	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
//	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
//
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// ListMembers used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMembers {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// UpsertMembers used as a request parameters for RPC and HTTP(based on Body).
message UpsertMembers {
	message Pair {
		// The account user_id. Is Required.
		// @inject_tag: json:"user_id" default:"" binding:"required"
		string user_id = 2 [ (validator.field) = { length_lt: 65 } ];
		
		// The lists of role_id. Multiple 'role_id' are separated by ','. Is Required, Min 1, Max 100.
		// @inject_tag: json:"role_ids" default:"" binding:"gte=1,lte=100"
		string role_ids = 3 [ (validator.field) = { length_lt: 101 } ];
	}
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The list of pair to user_id => role_ids. Min: 1, Max: 100
	// @inject_tag: json:"users" default:"" binding:"gte=1,lte=100""
	repeated Pair users = 2 [ (validator.field) = { length_lt: 101 } ];
}

// DeleteMembers used as a request parameters for RPC and HTTP(based on Body).
message DeleteMembers {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The user(member) id. Is required, Min: 1, Max 100.
	// @inject_tag: json:"user_ids" default:"" binding:"-""
	repeated string user_ids = 2 [ (validator.field) = { length_lt: 100 } ];
}

// CheckPermission used as a request parameters for RPC.
message CheckPermission {
	string req_user_id      = 1 [ (validator.field) = { length_lt: 65 } ];
	string space_id         = 2 [ (validator.field) = { length_eq: 20 } ];
	string module           = 3 [ (validator.field) = { length_gt: 0  } ];
	model.OpType op_type    = 4 [ (validator.field) = { int_gt: 1, int_lt: 4 } ];
	string op_name          = 5 [ (validator.field) = { length_gt: 0  } ];
	map<string, bool> roles = 6 [ (validator.field) = { length_gt: 0  } ];
}

// ListStreamFlows used as a request parameters for RPC and HTTP(based on URL-Query)
message ListStreamFlows {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The field list used to sorted query results.
	// Optional values: {id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="name,crated".
	// Not required, default: id.
	// @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"
	string sort_by = 3 [ (validator.field) = {} ];
	
	// Reverse order results. Not required, default: false.
	// @inject_tag: json:"reverse" form:"reverse" default:"" binding:"-"
	bool reverse = 4 [ (validator.field) = { } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 5 [ (validator.field) = { length_eq: 20 } ];
	
	// Search with workflow name; Not required.
	// @inject_tag: json:"search" form:"search" default:"" binding:"-"
	string search = 6 [ (validator.field) = { } ];
}

// CreateStreamFlow used as a request parameters for RPC and HTTP(based on Body)
message CreateStreamFlow {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	// @inject_tag: json:"name" default:"" binding:"gte=2,lte=128"
	string name = 2 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max length 1024.
	// @inject_tag: json:"desc" default:"" binding:"lte=1024"
	string desc = 3 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow Type. Is Required, Optional Value: 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator".
	// Desc: Cannot be modified after creation.
	// @inject_tag: json:"type" default:"" binding:"gte=1,lte=3"
	model.StreamFlow.Type  type = 4  [ (validator.field) = { int_gt: 0 } ];
}

// DeleteStreamFlows used as a request parameters for RPC and HTTP(based on Body)
message DeleteStreamFlows {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	// The list of workflow id. Is required, Min 1, Max 100.
	// @inject_tag: json:"flow_ids" default:"" binding:"gte=1,lte=100"
	repeated string flow_ids = 2 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// UpdateStreamFlow used as a request parameters for RPC and HTTP(based on Body).
message UpdateStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20} ];
	
	// The workflow name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	// @inject_tag: json:"name" default:"" binding:"gte=2,lte=128"
	string name = 2     [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max length 1024.
	// @inject_tag: json:"desc" default:"" binding:"lte=1024"
	string desc = 3     [ (validator.field) = { length_lt: 1025 } ];
}

// DescribeStreamFlow used as a request parameters for RPC.
message DescribeStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = {length_eq: 20} ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: json:"version" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64 version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// SetStreamFlowNode used as a request parameters for RPC.
message SetStreamFlowNode {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID it belongs to.
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];

	// The node info of JSON format.
	model.FlinkJobNodes nodes = 3 [ (validator.field) = { msg_exists: false } ];
}

// SetStreamFlowSchedule used as a request parameters for RPC.
message SetStreamFlowSchedule {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID it belongs to.
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	model.StreamFlowSchedule info = 3 [ (validator.field) = { msg_exists: false } ];
}

// SetStreamFlowEnv used as a request parameters for RPC.
message SetStreamFlowEnv {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID it belongs to.
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	model.StreamFlowEnv info = 3 [ (validator.field) = { msg_exists: false } ];
}

// GetStreamFlowNode used as a request parameters for RPC.
message GetStreamFlowNode {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: json:"version" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64  version = 2 [ (validator.field) = { } ];
}

// GetStreamFlowSchedule used as a request parameters for RPC.
message GetStreamFlowSchedule {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: json:"version" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64  version = 2 [ (validator.field) = { } ];
}

// GetStreamFlowEnv used as a request parameters for RPC.
message GetStreamFlowEnv {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: json:"version" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64 version = 2 [ (validator.field) = { } ];
}

// ExecuteStreamFlow used as a request parameters for RPC.
message ExecuteStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Only used for flowmanager -> scheduler.
	// FIXME: review it.
	model.StreamFlowProperty property = 2 [ (validator.field) = { } ];
}

// ListReleaseStreamFlows used as a request parameters for RPC and HTTP(based on URL-Query).
message ListReleaseStreamFlows {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The field list used to sorted query results.
	// Optional values: {flow_id, name, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="name,crated".
	// Not required, default: flow_id.
	// @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"
	string sort_by = 3 [ (validator.field) = {} ];
	
	// Reverse order results. Not required, default: false.
	// @inject_tag: json:"reverse" form:"reverse" default:"" binding:"-"
	bool reverse = 4 [ (validator.field) = { } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 5 [ (validator.field) = { length_eq: 20 } ];
	
	// Search with workflow name; Not required.
	// @inject_tag: json:"search" form:"search" default:"" binding:"-"
	string search = 6 [ (validator.field) = { } ];
}

// ReleaseStreamFlow used as a request parameters for RPC and HTTP(based on Body.)
message ReleaseStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Description for this releases. Not required, Max length 1024.
	// @inject_tag: json:"desc" default:"" binding:"lte=1024"
	string desc = 2 [ (validator.field) = { length_lt: 1025 } ];
	
	// @inject_tag: json:"stop_running" default:"" binding:"-"
	bool stop_running = 3 [ (validator.field) = { } ];
}

// SuspendReleaseStreamFlows used as a request parameters for RPC and HTTP(based on Body).
message SuspendReleaseStreamFlows {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The list of workflow id. Is Required. Min: 1, Max: 100
	// @inject_tag: json:"flow_ids" default:"" binding:"gte=1,lte=100"
	repeated string flow_ids = 2 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
	
	// @inject_tag: json:"stop_running" default:"" binding:"-"
	bool stop_running = 3 [ (validator.field) = { } ];
}

// ResumeReleaseStreamFlows used as a request parameters for RPC.
message ResumeReleaseStreamFlows {
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The list of workflow id. Is Required. Min: 1, Max: 100
	// @inject_tag: json:"flow_ids" default:"" binding:"gte=1,lte=100"
	repeated string flow_ids = 2 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// ListStreamFlowVersions used as a request parameters for RPC and HTTP(based on URL-Query)
message ListStreamFlowVersions {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The field list used to sorted query results.
	// Optional values: {version, created, updated}.
	// Multiple fields are separated by commas(","), eg: sort_by="version,updated".
	// Not required, default: version.
	// @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"
	string sort_by = 3 [ (validator.field) = {} ];
	
	// Reverse order results. Not required, default: false.
	// @inject_tag: json:"reverse" form:"reverse" default:"" binding:"-"
	bool reverse = 4 [ (validator.field) = { } ];
	
	// The workflow id in HTTP Request-URI
	// @inject_tag: json:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 5 [ (validator.field) = { length_eq: 20 } ];
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMonitorRules {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// CreateMonitorRule used as a request parameters for RPC and HTTP(based on Body).
message CreateMonitorRule {
	model.MonitorRule info = 1 [ (validator.field) = { msg_exists: true } ];
}

// DeleteMonitorRules used as a request parameters for RPC and HTTP(based on Body).
message DeleteMonitorRules {
	// The list of monitor rule id. Is required, Min 1, Max 100.
	// @inject_tag: json:"rule_ids" default:"" binding:"gte=1,lte=100"
	repeated string rule_ids = 1 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// EnableMonitorRules used as a request parameters for RPC and HTTP(based on Body).
message EnableMonitorRules {
	// The list of monitor rule id. Is required, Min 1, Max 100.
	// @inject_tag: json:"rule_ids" default:"" binding:"gte=1,lte=100"
	repeated string rule_ids = 1 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// DisableMonitorRules used as a request parameters for RPC and HTTP(based on Body).
message DisableMonitorRules {
	// The list of monitor rule id. Is required, Min 1, Max 100.
	// @inject_tag: json:"rule_ids" default:"" binding:"gte=1,lte=100"
	repeated string rule_ids = 1 [ (validator.field) = { length_gt: 0, length_lt: 101 } ];
}

// UpdateMonitorRule used as a request parameters for RPC.
message UpdateMonitorRule {
	model.MonitorRule info = 1 [ (validator.field) = { msg_exists: true } ];
}

// DescribeMonitorRule used as a request parameters for RPC.
message DescribeMonitorRule {
	// The monitor rule id in HTTP Request-URI. Is Required.
	// @inject_tag: json:"rule_id" uri:"rule_id" default:"" binding:"len=20" swaggerignore:"true"
	string rule_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

//

// SubmitStreamFlows used as a request parameters for RPC.
// FIXME: review it.
message SubmitStreamFlows {
	repeated model.StreamFlowProperty properties = 1 [ (validator.field) = { } ];
	bool stop_running = 2 [ (validator.field) = { } ];
}

// OfflineStreamFlows used as a request parameters for RPC.
message OfflineStreamFlows {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	repeated string flow_ids = 2 [ (validator.field) = { length_eq: 20 } ];
	bool stop_running = 3 [ (validator.field) = { } ];
}

// ListStreamInsts used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamInsts and ListStreamInsts
message ListStreamInsts {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI. Is Required.
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow id. Not required.
	// @inject_tag: json:"flow_id" form:"flow_id" default:"" binding:"-"
	string flow_id = 4 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id. Not required.
	// @inject_tag: json:"version" form:"ver_id" default:"" binding:"-"
	int64 version = 5 [ (validator.field) = { } ];
}

// FlowInstIdPair is the k/v pair of flowId => instId.
message FlowInstIdPair {
	// The workflow id. Is Required.
	// @inject_tag: json:"flow_id" default:"" binding:"len=20""
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];

	// The instance id. Is Required.
	// @inject_tag: json:"inst_id" default:"" binding:"len=20"
	string inst_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// TerminateStreamInsts used as a request parameters for RPC.
// This struct can used for TerminateStreamCycleInst and TerminateStreamTestInst.
message TerminateStreamInsts {
	// The workspace id in HTTP Request-URI. Is Required.
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// The list of instance id and its workflow id. Is Required. Min: 1, Max: 100
	// @inject_tag: json:"inst_ids" default:"" binding:"gte=1,lte=100"
	repeated FlowInstIdPair inst_ids = 2 [ (validator.field) = { length_gt: 0 , length_lt: 101 } ];
}

// SuspendStreamInsts used as a request parameters for RPC.
// This struct can used for SuspendStreamCycleInst and SuspendStreamTestInst.
message SuspendStreamInsts {
	// The workspace id in HTTP Request-URI. Is Required.
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The list of instance id and its workflow id. Is Required. Min: 1, Max: 100
	// @inject_tag: json:"inst_ids" default:"" binding:"gte=1,lte=100"
	repeated FlowInstIdPair inst_ids = 2 [ (validator.field) = { length_gt: 0 , length_lt: 101 } ];
}

// ResumeStreamInsts used as a request parameters for RPC.
// This struct can used for ResumeStreamCycleInst and SuspendStreamTestInst.
message ResumeStreamInsts {
	// The workspace id in HTTP Request-URI. Is Required.
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The list of instance id and its workflow id. Is Required. Min: 1, Max: 100
	// @inject_tag: json:"inst_ids" default:"" binding:"gte=1,lte=100"
	repeated FlowInstIdPair inst_ids = 2 [ (validator.field) = { length_gt: 0 , length_lt: 101 } ];
}

// CreateSource used as request parameters for RPC and HTTP(based on Body)
message CreateSource {
	// The source id.
	// @inject_tag: json:"sourceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SourceID  = 1 [ (validator.field) = { length_lt: 21 } ];

	// The space id.
	// @inject_tag: json:"spaceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SpaceID  = 2 [ (validator.field) = { length_eq: 20 } ];

	// Source Type one of MySQL/PostgreSQL/Kafka/S3/ClickHouse/Hbase/Ftp/HDFS
	// @inject_tag: json:"sourcetype" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string SourceType = 3  [ (validator.field) = { length_gt: 1, length_lt: 21 } ];

	// Source name unique within a space.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string Name = 4   [ (validator.field) = { length_gt: 1, length_lt: 65 } ];

	// describe this source.
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
    string Comment = 5    [ (validator.field) = {  length_lt: 257 } ];

	// this source connection info
	// @inject_tag: json:"url" default:"" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
    model.SourceUrl Url = 6 [ (validator.field) = { length_gt: 1, length_lt: 8001 } ];
}

// UpdateSource used as request parameters for RPC and HTTP(based on Body)
message UpdateSource {
	// The source id.
	// @inject_tag: json:"sourceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SourceID  = 1 [ (validator.field) = { length_eq: 20 } ];

	// Source Type one of MySQL/PostgreSQL/Kafka/S3/ClickHouse/Hbase/Ftp/HDFS
	// @inject_tag: json:"sourcetype" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string SourceType = 2  [ (validator.field) = { length_gt: 0, length_lt: 21 } ];

	// Source name unique within a space.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string Name = 3   [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// describe this source.
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
    string Comment = 4    [ (validator.field) = {  length_lt: 257 } ];

	// this source connection info
	// @inject_tag: json:"url" default:"" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
    model.SourceUrl Url = 5 [ (validator.field) = { length_gt: 1, length_lt: 8001 } ];
}

// DeleteSource used as request parameters for RPC and HTTP(based on Body)
message DeleteSource {
	// delete these SourceIDs
	// @inject_tag: json:"sourceids" default:"" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"
    repeated string SourceIDs = 1 [ (validator.field) = { length_gt: 1, length_lt: 1100 } ];
}

// DescribeSource used as request parameters for RPC and HTTP(based on Body)
message DescribeSource {
	// SourceID
	// @inject_tag: json:"sourceid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string SourceID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

// EnableSource used as request parameters for RPC and HTTP(based on Body)
message EnableSource {
	// enable these SourceIDs
	// @inject_tag: json:"sourceids" default:"" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"
    repeated string SourceIDs = 1 [ (validator.field) = { length_gt: 1, length_lt: 1100 } ];
}

// DeleteSource used as request parameters for RPC and HTTP(based on Body)
message DisableSource {
	// delete these SourceIDs
	// @inject_tag: json:"sourceids" default:"" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"
    repeated string SourceIDs = 1 [ (validator.field) = { length_gt: 1, length_lt: 1100 } ];
}

// PingSource used as request parameters for RPC and HTTP(based on Body)
message PingSource {
	// Source Type one of MySQL/PostgreSQL/Kafka/S3/ClickHouse/Hbase/Ftp/HDFS
	// @inject_tag: json:"sourcetype" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string SourceType = 1  [ (validator.field) = { length_gt: 0, length_lt: 21 } ];

	// this source connection info
	// @inject_tag: json:"url" default:"" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
    model.SourceUrl Url = 2 [ (validator.field) = { length_gt: 1, length_lt: 8001 } ];
}

// SourceTables used as request parameters for RPC and HTTP(based on Body)
message SourceTables {
	// SourceID
	// @inject_tag: json:"sourceid" default:"" binding:"lte=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"
    string SourceID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

// TableColumns used as request parameters for RPC and HTTP(based on Body)
message TableColumns {
	// tablename
	// @inject_tag: json:"tablename" default:"" binding:"gte=1" required:"true" minLength:"2" maxLength:"64"
    string TableName  = 1 [ (validator.field) = { length_gt: 1, length_lt: 65 } ];

	// tablename
	// @inject_tag: json:"sourceid" default:"" binding:"lte=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"
    string SourceID  = 2 [ (validator.field) = { length_eq: 20 } ];
}

// CreateTable used as request parameters for RPC and HTTP(based on Body)
message CreateTable {
	// The table id.
	// @inject_tag: json:"tableid" default:"" binding:"lte=20" swaggerignore:"true"
    string TableID  = 1 [ (validator.field) = { length_lt: 21 } ];

	// The source id.
	// @inject_tag: json:"sourceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SourceID  = 2 [ (validator.field) = { length_eq: 20 } ];

	// The space id.
	// @inject_tag: json:"spaceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SpaceID  = 3 [ (validator.field) = { length_eq: 20 } ];

	// Source name unique within a space.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string Name = 4   [ (validator.field) = { length_gt: 1, length_lt: 65 } ];

	// describe this source.
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
    string Comment = 5    [ (validator.field) = {  length_lt: 257 } ];

	// this source connection info
	// @inject_tag: json:"url" default:"" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
    model.TableUrl Url = 6 [ (validator.field) = { length_gt: 1, length_lt: 8001 } ];

	// source direction one of source/destination/dimension
	// @inject_tag: json:"direction" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string Direction = 7  [ (validator.field) = { length_gt: 1, length_lt: 21 } ];
}

// UpdateTable used as request parameters for RPC and HTTP(based on Body)
message UpdateTable {
	// The table id.
	// @inject_tag: json:"tableid" default:"" binding:"lte=20" swaggerignore:"true"
    string TableID  = 1 [ (validator.field) = { length_lt: 21 } ];

	// Source name unique within a space.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string Name = 2   [ (validator.field) = { length_gt: 1, length_lt: 65 } ];

	// describe this source.
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
    string Comment = 3    [ (validator.field) = {  length_lt: 257 } ];

	// this source connection info
	// @inject_tag: json:"url" default:"" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
    model.TableUrl Url = 4 [ (validator.field) = { length_gt: 1, length_lt: 8001 } ];

	// source direction one of source/destination/dimension
	// @inject_tag: json:"direction" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string Direction = 5  [ (validator.field) = { length_gt: 1, length_lt: 21 } ];
}

// DeleteTable used as request parameters for RPC and HTTP(based on Body)
message DeleteTable {
	// delete these tableIDs
	// @inject_tag: json:"tableids" default:"" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"
    repeated string TableIDs = 1 [ (validator.field) = { length_gt: 1, length_lt: 1100 } ];
}

// DescribeTable used as request parameters for RPC and HTTP(based on Body)
message DescribeTable {
	// SourceIDs
	// @inject_tag: json:"tableid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string TableID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

// ListSource used as a request parameters for RPC and HTTP(based on URL-Query)
message ListSource {
    // Limit the maximum number of entries returned this time.
    // @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" mininum:"1" maximum:"100"
    int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];

    // The offset position. Not required, default 0.
    // @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0" mininum:"0"
    int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];

    // The field list used to sorted query results.
    // Optional values: {sourceid, name, createtime, updatetime}.
    // Multiple fields are separated by commas(","), eg: sort_by="id,name,updatetime,createtime".
    // Not required, default: updatetime.
    // @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"  minLength:"0" maxLength:"100"
    string sort_by = 3 [ (validator.field) = {} ];

    // Reverse order results. Not required, default: false.
    // @inject_tag: json:"reverse" default:"false" form:"reverse" default:"" binding:"-"
    bool reverse = 4 [ (validator.field) = { } ];

    // Search with name; Not required.
    // @inject_tag: json:"search" form:"search" default:"" binding:"-" minLength:"0" maxLength:"100"
    string search = 5 [ (validator.field) = { } ];

    // SpaceID; required.
    // @inject_tag: json:"spaceid"  default:"" binding:"lte=20" required:"true" minLength:"20" maxLength:"20"  swaggerignore:"true"
    string SpaceID  = 6 [ (validator.field) = { length_eq: 20 } ];
}

// ListTable used as a request parameters for RPC and HTTP(based on URL-Query)
message ListTable {
    // Limit the maximum number of entries returned this time.
    // @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" mininum:"1" maximum:"100"
    int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];

    // The offset position. Not required, default 0.
    // @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0" mininum:"0"
    int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];

    // The field list used to sorted query results.
    // Optional values: {tableid, name, createtime, updatetime}.
    // Multiple fields are separated by commas(","), eg: sort_by="id,name,updatetime,createtime".
    // Not required, default: updatetime.
    // @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"  minLength:"0" maxLength:"100"
    string sort_by = 3 [ (validator.field) = {} ];

    // Reverse order results. Not required, default: false.
    // @inject_tag: json:"reverse" default:"false" form:"reverse" default:"" binding:"-"
    bool reverse = 4 [ (validator.field) = { } ];

    // Search with name; Not required.
    // @inject_tag: json:"search" form:"search" default:"" binding:"-" minLength:"0" maxLength:"100"
    string search = 5 [ (validator.field) = { } ];

    // get this source table
    // @inject_tag: json:"sourceid"  default:"" required:"true" binding:"lte=20" minLength:"20" maxLength:"20"  swaggerignore:"true"
    string SourceID  = 6 [ (validator.field) = { length_eq: 20 } ];
}

// DownloadFile used as a request parameters for RPC and HTTP(based on URL-Query).
message DownloadFile{
	// The resource id in HTTP Request_URI.
	// @inject_tag: params:"resource_id" uri:"resource_id" default:"" swaggerignore:"true"
	string resource_id = 1 [(validator.field) = {length_eq: 20}];
}

// DescribeFile used as a request parameters for RPC and HTTP(based on URL-Query).
message DescribeFile{
	// The resource id in HTTP Request_URI.
	// @inject_tag: params:"resource_id" uri:"resource_id" default:"" binding:"len=20" swaggerignore:"true"
	string resource_id = 1 [(validator.field) = {length_eq: 20}];
}

// ListResources used as a request parameters for RPC and HTTP(based on URL-Query).
message ListResources{
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [(validator.field) = {length_eq: 20}];

	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
	int32  limit = 2    [(validator.field) = {int_gt: 0, int_lt: 101}];

	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0,lte=100"
	int32  offset = 3   [(validator.field) = {int_gt: -1}];

	// The resource type. required.
	// @inject_tag: params:"resource_type" form:"resource_type" default="0" binding:"gt=0,lte=3"
	int32  resource_type = 4 [(validator.field) = {int_gt:-1,int_lt:3}];

	// The field list used to sorted query results.
	// Optional values: {id, created, updated, name, size}.
	// Not required, default: id.
	// @inject_tag: json:"sort_by" form:"sort_by" default:"updated" binding:"-"
	string sort_by = 5 [ (validator.field) = {} ];

	// Reverse order results. Not required, default: false.
	// @inject_tag: json:"reverse" form:"reverse" default:"" binding:"-"
	bool reverse = 6 [ (validator.field) = {} ];
}

// UpdateResource used as a request parameters for RPC and HTTP(based on URL-Query).
message UpdateResource{
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [(validator.field) = {length_eq: 20}];

	// The resource id in HTTP Request_URI.
	// @inject_tag: params:"resource_id" uri:"resource_id" default:"" binding:"len=20" swaggerignore:"true"
	string resource_id = 2 [(validator.field) = {length_eq: 20}];

	// The resource name. required.
	// @inject_tag: params:"resource_name" binding:"required,lte=500"
	string resource_name = 3 [(validator.field) = {msg_exists: true}];

	// The resource description. Not required.
	// @inject_tag: params:"resource_description" binding:"lte=500"
	string resource_description = 4 [(validator.field) = {}];

	// The resource type. Not required.
	// @inject_tag: params:"resource_type" form:"resource_type" default="0" binding:"gte=0,lte=3"
	model.Resource.Type  resource_type = 5 [(validator.field) = {int_gt:-1,int_lt:3}];
}

message DeleteResources{
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [(validator.field) = {length_eq: 20}];

	// The list of resource id. Is required, Min 1 Max 100.
	// @inject_tag: json:"resource_ids" default:"" binding:"gte=1,lte=100"
	repeated string resource_ids = 2 [(validator.field) = {length_gt: 0, length_lt: 101}];
}

message ResourceConditions{
	// The workspace id in HTTP Request-URI
	// @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [(validator.field) = {length_eq: 20}];

	// The resource name. Not required.
	// @inject_tag: params:"resource_name" form:"resource_name" default:"" binding:"lte=500"
	string resource_name = 2 [(validator.field) = {}];

	// The resource type. Not required.
	// @inject_tag: params:"resource_type" form:"resource_type" default="0" binding:"gte=0,lte=3"
	int32  resource_type = 3 [(validator.field) = {int_gt:-1,int_lt:3}];
}

// CreateUDF used as request parameters for RPC and HTTP(based on Body)
message CreateUDF {
	// The udf id.
	// @inject_tag: json:"udfid" default:"" binding:"lte=20" required:"true" swaggerignore:"true"
    string UDFID = 1 [ (validator.field) = { length_lt: 21 } ];

	// The space id.
	// @inject_tag: json:"spaceid" default:"" binding:"lte=20" required:"true" swaggerignore:"true"
    string SpaceID = 2 [ (validator.field) = { length_eq: 20 } ];

	// UDF Type one of ScalaUDF/ScalaUDTF/ScalaUDTTF/JarUDF/JarUDTF/JarUDTTF/PythonUDF/PythonUDTF/Dir
	// @inject_tag: json:"udftype" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string UDFType = 3 [ (validator.field) = {length_gt:0, length_lt: 21 } ];

	// UDF name unique within a space.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=1025" required:"true" minLength:"1" maxLength:"1025"
    string Name = 4 [ (validator.field) = { length_gt: 0, length_lt: 1024 } ];

	// describe this udf.
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
    string Comment = 5 [ (validator.field) = {  length_lt: 257 } ];

	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	// @inject_tag: json:"define" default:"" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"
    string Define = 6 [ (validator.field) = {  length_lt: 20001 } ];

	// usage for this udf
	// @inject_tag: json:"usagesample" default:"" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"
    string UsageSample = 7 [ (validator.field) = {  length_lt: 2001 } ];
}

// UpdateUDF used as request parameters for RPC and HTTP(based on Body)
message UpdateUDF {
	// The udf id.
	// @inject_tag: json:"udfid" default:"" binding:"lte=20" swaggerignore:"true"
    string UDFID = 1 [ (validator.field) = { length_lt: 21 } ];

	// UDF Type one of "ScalaUDF", "ScalaUDTF", "ScalaUDTTF", "JarUDF", "JarUDTF", "JarUDTTF", "PythonUDF", "PythonUDTF" , "Dir"
	// @inject_tag: json:"udftype" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
    string UDFType = 2 [ (validator.field) = {length_gt:0, length_lt: 21 } ];

	// UDF name unique within a space.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=1025" required:"true" minLength:"1" maxLength:"1025"
    string Name = 3 [ (validator.field) = { length_gt: 0, length_lt: 1024 } ];

	// describe this udf.
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
    string Comment = 4 [ (validator.field) = {  length_lt: 257 } ];

	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	// @inject_tag: json:"define" default:"" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"
    string Define = 5 [ (validator.field) = {  length_lt: 20001 } ];

	// usage for this udf
	// @inject_tag: json:"usagesample" default:"" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"
    string UsageSample = 6 [ (validator.field) = {  length_lt: 2001 } ];
}

// DeleteUDF used as request parameters for RPC and HTTP(based on Body)
message DeleteUDF {
	// The space id.
	// @inject_tag: json:"spaceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SpaceID = 1 [ (validator.field) = { length_eq: 20 } ];

	// delete these UDF Name. eg: ['/a/b/c.jar', '/a/c/' ]
	// @inject_tag: json:"names" default:"" binding:"gte=1,lte=1101" required:"true" minLength:"1" maxLength:"1100"
    repeated string Names = 2 [ (validator.field) = { length_gt: 0, length_lt: 1100 } ];
}

// DescribeUDF used as request parameters for RPC and HTTP(based on Body)
message DescribeUDF {
	// UDFID
	// @inject_tag: json:"udfid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20" swaggerignore:"true"
    string UDFID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

// ListUDF used as a request parameters for RPC and HTTP(based on URL-Query)
message ListUDF {
    // Limit the maximum number of entries returned this time.
    // @inject_tag: json:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" mininum:"1" maximum:"100"
    int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 1001 } ];

    // The offset position. Not required, default 0.
    // @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0" mininum:"0"
    int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];

    // The field list used to sorted query results.
    // Optional values: {sourceid, name, createtime, updatetime}.
    // Multiple fields are separated by commas(","), eg: sort_by="id,name,updatetime,createtime".
    // Not required, default: updatetime.
    // @inject_tag: json:"sort_by" form:"sort_by" default:"" binding:"-"  minLength:"0" maxLength:"100"
    string sort_by = 3 [ (validator.field) = {} ];

    // Reverse order results. Not required, default: false.
    // @inject_tag: json:"reverse" default:"false" form:"reverse" default:"" binding:"-"
    bool reverse = 4 [ (validator.field) = { } ];

    // Search with name; Not required.
    // @inject_tag: json:"search" form:"search" default:"" binding:"-" minLength:"0" maxLength:"100"
    string search = 5 [ (validator.field) = { } ];

    // SpaceID; required.
    // @inject_tag: json:"spaceid"  default:"" binding:"lte=20" required:"true" minLength:"20" maxLength:"20"  swaggerignore:"true"
    string SpaceID  = 6 [ (validator.field) = { length_eq: 20 } ];
}

// UDFCommonFunc used as request parameters for RPC and HTTP(based on Body)
message UDFCommonFunc {
	// The space id.
	// @inject_tag: json:"spaceid" default:"" binding:"lte=20" swaggerignore:"true"
    string SpaceID = 1 [ (validator.field) = { length_eq: 20 } ];
}

// JobInfo
message JobInfo {
	// JobID
	// @inject_tag: json:"jobid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string JobID  = 1 [ (validator.field) = { length_eq: 20 } ];

	// workspace id
	// @inject_tag: json:"spaceid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string SpaceID = 2  [ (validator.field) = { length_eq: 20 } ];

	// ENV
	// @inject_tag: json:"env" default:"" binding:"-"
	model.StreamFlowEnv Env = 3  [ (validator.field) = { } ];

	// Nodes
	// @inject_tag: json:"nodes" default:"" binding:"-"
	model.FlinkJobNodes Nodes = 4  [ (validator.field) = { } ];
}


// JobGetState
message JobGetState {
	// JobID
	// @inject_tag: json:"jobid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string JobID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

// JobCancel
message JobCancel {
	// JobID
	// @inject_tag: json:"jobid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string JobID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

// JobClean
message JobClean {
	// JobID
	// @inject_tag: json:"jobid" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
    string JobID  = 1 [ (validator.field) = { length_eq: 20 } ];
}

message JobParser {
	// command oneof 'run' 'syntax' 'preview' 'explain'
	// @inject_tag: json:"command" default:"" binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
	string Command = 1  [ (validator.field) = { length_gt: 0 ,length_lt: 21} ];

	// jobinfo
	// @inject_tag: json:"job" default:"" binding:"-"
	JobInfo Job = 2 [ (validator.field) = { } ];
}

message PTasksStatusStat {
  // @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
  string space_id = 1 [ (validator.field) = { string_not_empty: true } ];
  // @inject_tag: params:"start_time" form:"start_time" default="0" binding:"gte=0"
  int64 start_time = 2 [ (validator.field) = { int_gt: -1 } ];
  // @inject_tag: params:"end_time" form:"end_time" default="0" binding:"gte=0"
  int64 end_time = 3 [ (validator.field) = { int_gt: -1 } ];
}

message PTasksExecStat {
  // @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
  string space_id = 1 [ (validator.field) = { string_not_empty: true } ];
  // @inject_tag: params:"state" form:"state"
  int32 state = 2 [ (validator.field) = { int_gt: -1 } ];
}

message PTaskRuntimeRanking {
  // @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
  string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
  // @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
  int32  limit = 2    [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
  // @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0,lte=100"
  int32  offset = 3   [ (validator.field) = { int_gt: -1 } ];
}

message PTaskErrorRanking {
  // @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
  string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
  // @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100"
  int32  limit = 2    [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
  // @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0,lte=100"
  int32  offset = 3   [ (validator.field) = { int_gt: -1 } ];
}

message PTaskDispatchCount {
  // @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
  string space_id = 1 [(validator.field) = { string_not_empty: true } ];
  // @inject_tag: params:"start_time" form:"start_time" default="0" binding:"gte=0"
  int64 start_time = 2 [ (validator.field) = { int_gt: -1 } ];
  // @inject_tag: params:"end_time" form:"end_time" default="0" binding:"gte=0"
  int64 end_time = 3 [ (validator.field) = { int_gt: -1 } ];
}

message JobFree {
    // JobResources
    // @inject_tag: json:"resources" binding:"-"
    model.JobResources Resources = 1 [ (validator.field) = { } ];
}
