syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/request";

package request;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "model.proto";

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
message ListWorkspaces {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The used_id fixed to request user id.
	// @inject_tag: params:"-" form:"-" default:"" binding:"-" swaggerignore:"true"
	string user_id = 3 [ (validator.field) = { length_lt: 65 } ];
}

// CreateWorkspace used as a request parameters for RPC and HTTP(based on Body)
message CreateWorkspace {
	// The owner fixed to request user id.
	// @inject_tag: params:"-" default:"" binding:"-" swaggerignore:"true"
	string owner = 1 [ (validator.field) = { length_gt: 10, length_lt: 65 } ];
	
	// The space name of each account in each region is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	//@inject_tag: params:"name" default:"" binding:"gte=2,lte=128" minLength:"2" maxLength:"128"
	string name = 2 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max 1024 char.
	//@inject_tag: params:"desc" default:"" binding:"lte=1024"
	string desc = 3  [ (validator.field) = { length_lt: 1025 } ];
}

// DeleteWorkspace used as a request parameters for RPC.
message DeleteWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// UpdateWorkspace used as a request parameters for RPC and HTTP(based on Body)
message UpdateWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The space name of each account in each region is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	//@inject_tag: params:"name" default:"" binding:"gte=2,lte=128" minLength:"2" maxLength:"128"
	string name = 2 [ (validator.field) = { length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max length 1024.
	//@inject_tag: params:"desc" default:"" binding:"lte=1024"
	string desc = 3 [ (validator.field) = { length_lt: 1025 } ];
}

// DescribeWorkspace used as a request parameters for RPC.
message DescribeWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// DisableWorkspace used as a request parameters for RPC.
message DisableWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// EnableWorkspace used as a request parameters for RPC.
message EnableWorkspace {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Whether resume all suspended workflow.
	// @inject_tag: `params:"resume_workflow" default:"false" binding:"-"`
	bool resume_workflow = 2 [ (validator.field) = { } ];
}

// AddAudit used as a request parameters for RPC.
message AddAudit {
	model.OpAudit info = 1 [ (validator.field) = { msg_exists: true } ];
}

// ListAudits used as a request parameters for RPC and HTTP(based on URL-Query)
message ListAudits {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit"  form:"limit"  default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The used_id fixed to request user id.
	// @inject_tag: params:"-" form:"-" default:"" binding:"-" swaggerignore:"true"
	string user_id = 3 [ (validator.field) = { length_lt: 65 } ];
	
	// Querying conditions. Not required.
	// @inject_tag: params:"space_id" form:"space_id" default:"" binding:"-"
	string space_id = 4 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// @inject_tag: params:"type" form:"type" default:"" binding:"-"
	model.OpAudit.Type type = 5 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// @inject_tag: params:"action" form:"action" default:"" binding:"-"
	string action = 6 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// @inject_tag: params:"state" form:"state" default:"" binding:"-"
	model.OpAudit.State state = 7 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// Desc: Timestamp of start time.
	// @inject_tag: params:"started" form:"started" default:"" binding:"-"
	int64 started = 8 [ (validator.field) = { } ];
	
	// Querying conditions. Not required.
	// Desc: Timestamp of end time.
	// @inject_tag: params:"ended" form:"ended" default:"" binding:"-"
	int64 ended = 9 [ (validator.field) = { } ];
}

// ListMembers used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMembers {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// AddMember used as a request parameters for RPC and HTTP(based on Body).
message AddMember {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1  [ (validator.field) = { length_eq: 20 } ];
	
	// The account user_id. Is Required.
	// @inject_tag: params:"user_id" json:"user_id" default:"" binding:"required"
	string user_id = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// The lists of role_id. Multiple 'role_id' are separated by ','. Is Required.
	// @inject_tag: params:"role_ids" default:"" binding:"required"
	string role_ids = 3  [ (validator.field) = { length_lt: 256 } ];
}

// RemoveMember used as a request parameters for RPC and HTTP(based on Body).
message RemoveMember {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1  [ (validator.field) = { length_eq: 20 } ];
	
	// The member(user) id in HTTP Request-URI
	// @inject_tag: params:"member_id" uri:"member_id" default:"" binding:"-" swaggerignore:"true"
	string member_id = 2 [ (validator.field) = { length_lt: 65 } ];
}

// UpdateMember used as a request parameters for RPC and HTTP(based on Body).
message UpdateMember {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1  [ (validator.field) = { length_eq: 20 } ];
	
	// The member(user) id in HTTP Request-URI
	// @inject_tag: params:"member_id" uri:"member_id" default:"" binding:"-" swaggerignore:"true"
	string member_id = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// The lists of role_id. Multiple 'role_id' are separated by ','. Is Required.
	// @inject_tag: params:"role_ids" default:"" binding:"required"
	string role_ids = 3  [ (validator.field) = { length_lt: 256 } ];
}

// CheckPermission used as a request parameters for RPC.
message CheckPermission {
	string req_user_id         = 1 [ (validator.field) = { length_lt: 65 } ];
	string space_id            = 2 [ (validator.field) = { length_eq: 20 } ];
	string resource            = 3 [ (validator.field) = { } ];
	string action              = 4 [ (validator.field) = { } ];
	model.OpAudit.Type op_type = 5 [ (validator.field) = { int_gt: 0, int_lt: 5 } ];
}

// DeleteAllFlows used as a request parameters for RPC.
message DeleteAllFlows {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Only used to flowmanager -> scheduler.
	repeated string stream_flow_ids = 2 [ (validator.field) = { } ];
}

// ListStreamFlows used as a request parameters for RPC and HTTP(based on URL-Query)
message ListStreamFlows {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// CreateStreamFlow used as a request parameters for RPC and HTTP(based on Body)
message CreateStreamFlow {
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	// @inject_tag: params:"name" default:"" binding:"gte=2,lte=128"
	string name = 2     [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max length 1024.
	// @inject_tag: params:"desc" default:"" binding:"lte=1024"
	string desc = 3     [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow Type. Is Required, Optional Value: 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator".
	// Desc: Cannot be modified after creation.
	// @inject_tag: params:"type" default:"" binding:"gte=1,lte=3"
	model.StreamFlow.Type  type = 4     [ (validator.field) = { int_gt: 0 } ];
}

// DeleteStreamFlow used as a request parameters for RPC.
message DeleteStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// UpdateStreamFlow used as a request parameters for RPC and HTTP(based on Body).
message UpdateStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20} ];
	
	// The workflow name in each workspace is unique. Is required, Max Length 128.
	// And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
	// @inject_tag: params:"name" default:"" binding:"gte=2,lte=128"
	string name = 2     [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Description of the workspace, Not required, Max length 1024.
	// @inject_tag: params:"desc" default:"" binding:"lte=1024"
	string desc = 3     [ (validator.field) = { length_lt: 1025 } ];
}

// DescribeStreamFlow used as a request parameters for RPC.
message DescribeStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = {length_eq: 20} ];
}

// SetStreamFlowNode used as a request parameters for RPC.
message SetStreamFlowNode {
	model.StreamFlowNode info = 1 [ (validator.field) = { msg_exists: false } ];
}

// SetStreamFlowSchedule used as a request parameters for RPC.
message SetStreamFlowSchedule {
	model.StreamFlowSchedule info = 1 [ (validator.field) = { msg_exists: false } ];
}

// SetStreamFlowEnv used as a request parameters for RPC.
message SetStreamFlowEnv {
	model.StreamFlowEnv info = 1 [ (validator.field) = { msg_exists: false } ];
}

// GetStreamFlowNode used as a request parameters for RPC.
message GetStreamFlowNode {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// GetStreamFlowSchedule used as a request parameters for RPC.
message GetStreamFlowSchedule {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// GetStreamFlowEnv used as a request parameters for RPC.
message GetStreamFlowEnv {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// ExecuteStreamFlow used as a request parameters for RPC.
message ExecuteStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Only used for flowmanager -> scheduler.
	model.StreamFlowMeta meta = 2 [ (validator.field) = { } ];
}

// ListReleaseStreamFlows used as a request parameters for RPC and HTTP(based on URL-Query).
message ListReleaseStreamFlows {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// ReleaseStreamFlow used as a request parameters for RPC and HTTP(based on Body.)
message ReleaseStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Description for this releases. Not required, Max length 1024.
	// @inject_tag: params:"desc" default:"" binding:"lte=1024"
	string desc = 2 [ (validator.field) = { length_lt: 1025 } ];
	
	// @inject_tag: params:"stop_running" default:"" binding:"-"
	bool stop_running = 3 [ (validator.field) = { int_gt: -1, int_lt: 2 } ];
}

// SuspendReleaseStreamFlow used as a request parameters for RPC and HTTP(based on Body).
message SuspendReleaseStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: params:"stop_running" default:"" binding:"-"
	bool stop_running = 2 [ (validator.field) = { int_gt: -1, int_lt: 2 } ];
}

// ResumeReleaseStreamFlow used as a request parameters for RPC.
message ResumeReleaseStreamFlow {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// ListStreamFlowVersions used as a request parameters for RPC and HTTP(based on URL-Query)
message ListStreamFlowVersions {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// DescribeStreamFlowVersion used as a request parameters for RPC.
message DescribeStreamFlowVersion {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: params:"ver_id" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// GetStreamFlowVersionNode used as a request parameters for RPC.
message GetStreamFlowVersionNode {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: params:"ver_id" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// GetStreamFlowVersionEnv used as a request parameters for RPC.
message GetStreamFlowVersionEnv {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: params:"ver_id" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64 version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// GetStreamFlowVersionSchedule used as a request parameters for RPC.
message GetStreamFlowVersionSchedule {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: params:"ver_id" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64 version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMonitorRules {
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
}

// CreateMonitorRule used as a request parameters for RPC .
message CreateMonitorRule {
	model.MonitorRule info = 1 [ (validator.field) = { msg_exists: true } ];
}

// DeleteMonitorRule used as a request parameters for RPC.
message DeleteMonitorRule {
	string rule_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// UpdateMonitorRule used as a request parameters for RPC.
message UpdateMonitorRule {
	model.MonitorRule info = 1 [ (validator.field) = { msg_exists: true } ];
}

// DescribeMonitorRule used as a request parameters for RPC.
message DescribeMonitorRule {
	string rule_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// EnableMonitorRule used as a request parameters for RPC.
message EnableMonitorRule {
	string rule_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// DisableMonitorRule used as a request parameters for RPC.
message DisableMonitorRule {
	string rule_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

//

// SubmitStreamFlow used as a request parameters for RPC.
message SubmitStreamFlow {
	model.StreamFlowMeta meta = 1 [ (validator.field) = { } ];
	bool stop_running = 2 [ (validator.field) = { int_gt: -1, int_lt: 2 } ];
}

// OfflineStreamFlow used as a request parameters for RPC.
message OfflineStreamFlow {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	bool stop_running = 2 [ (validator.field) = { int_gt: -1, int_lt: 2 } ];
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamTestInst and ListStreamCycleInst
message ListStreamInst{
	// Limit the maximum number of entries returned this time.
	// Not required, Max 100, default 100.
	// @inject_tag: params:"limit" form:"limit" default:"100" binding:"gt=0,lte=100" minimum:"0" maximum:"100"
	int32 limit = 1 [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	
	// The offset position. Not required, default 0.
	// @inject_tag: params:"offset" form:"offset" default:"0" binding:"gte=0"
	int32 offset = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// The workspace id in HTTP Request-URI
	// @inject_tag: params:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
	string space_id = 3 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 4 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id in HTTP Request-URI
	// @inject_tag: params:"ver_id" uri:"ver_id" default:"" binding:"-" swaggerignore:"true"
	int64  version = 5  [ (validator.field) = { } ];
}

// SuspendStreamInst used as a request parameters for RPC.
// This struct can used for SuspendStreamCycleInst and SuspendStreamTestInst.
message SuspendStreamInst {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The instance id in HTTP Request-URI
	// @inject_tag: params:"inst_id" uri:"inst_id" default:"" binding:"len=20" swaggerignore:"true"
	string inst_id = 2 [ (validator.field) = { length_eq: 20 } ];
}

// ResumeStreamInst used as a request parameters for RPC.
// This struct can used for ResumeStreamCycleInst and SuspendStreamTestInst.
message ResumeStreamInst {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The instance id in HTTP Request-URI
	// @inject_tag: params:"inst_id" uri:"inst_id" default:"" binding:"len=20" swaggerignore:"true"
	string inst_id = 2 [ (validator.field) = { length_eq: 20 } ];
}

// TerminateStreamInst used as a request parameters for RPC.
// This struct can used for TerminateStreamCycleInst and TerminateStreamTestInst.
message TerminateStreamInst {
	// The workflow id in HTTP Request-URI
	// @inject_tag: params:"flow_id" uri:"flow_id" default:"" binding:"len=20" swaggerignore:"true"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The instance id in HTTP Request-URI
	// @inject_tag: params:"inst_id" uri:"inst_id" default:"" binding:"len=20" swaggerignore:"true"
	string inst_id = 2 [ (validator.field) = { length_eq: 20 } ];
}
