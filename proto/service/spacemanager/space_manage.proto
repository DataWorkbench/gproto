syntax = "proto3";

package spacemanager;

option go_package = "github.com/DataWorkbench/gproto/xgo/service/pbsvcspace";

// Package name of class.
option java_package = "com.dataomnis.gproto.service.pbsvcspace";
// File name of class.
option java_outer_classname = "PBSvcSpaceManage";
option java_multiple_files = false;

import "proto/types/model/empty.proto";
import "proto/types/request/space_manage.proto";
import "proto/types/response/space_manage.proto";


// SpaceManage declares API for manage workspace.
service SpaceManage {
  // ListWorkspaces get a lists of workspaces.
  rpc ListWorkspaces(request.ListWorkspaces)       returns (response.ListWorkspaces)    {}

  // ListMemberWorkspaces get a lists of workspaces that the specified user has be joined.
  rpc ListMemberWorkspaces(request.ListWorkspaces) returns (response.ListWorkspaces) {}

  // DeleteWorkspaces allowed only invoke by space owner.
  rpc DeleteWorkspaces(request.DeleteWorkspaces)   returns (model.EmptyStruct)          {}

  // DisableWorkspaces allowed only invoke by space owner.
  rpc DisableWorkspaces(request.DisableWorkspaces) returns (model.EmptyStruct)          {}

  // DisableWorkspaces allowed only invoke by space owner.
  rpc EnableWorkspaces(request.EnableWorkspaces)   returns (model.EmptyStruct)          {}

  rpc CreateWorkspace(request.CreateWorkspace)     returns (response.CreateWorkspace)   {}
  rpc UpdateWorkspace(request.UpdateWorkspace)     returns (model.EmptyStruct)          {}
  rpc DescribeWorkspace(request.DescribeWorkspace) returns (response.DescribeWorkspace) {}

  // Permission Check.
  // Notice: cannot check API includes: ListWorkspaces, DeleteWorkspaces, DisableWorkspaces, EnableWorkspaces.
  rpc CheckPermission(request.CheckPermission) returns (response.CheckPermission) {}

  // Get the config of workspace.
  rpc DescribeWorkspaceConfig(request.DescribeWorkspaceConfig) returns (response.DescribeWorkspaceConfig) {}

  // Network config
  rpc DescribeNetworkConfig(request.DescribeNetworkConfig) returns (response.DescribeNetworkConfig) {}

  rpc AttachVPCToWorkspace(request.AttachVPCToWorkspace) returns (model.EmptyStruct)  {}

  rpc DetachVPCFromWorkspace(request.DetachVPCFromWorkspace) returns (model.EmptyStruct)  {}
}
