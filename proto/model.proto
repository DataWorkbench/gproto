syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

package model;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/gosql.proto";

import "flink.proto";
import "datasource.proto";

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// Error transmits customized-error between grpc client and server by status details
message Error {
	// Code is summary information of error.
	string code = 1;
	// Status is http status code.
	int32 status = 2;
	// EnUS is detail information of error with en_us format.
	string en_us = 3;
	// ZhCN is detail information of error with zh_cn format.
	string zh_cn = 4;
}

// The workspace info.
message Workspace {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}
	// Workspace ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primaryKey;"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// User id of workspace owner.
	// @inject_tag: json:"owner" gorm:"column:owner;"
	string owner = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// Workspace Name, unique within a region.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workspace Description.
	// @inject_tag: json:"desc" gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workspace status, 1 => "enabled", 2 => "disabled".
	// @inject_tag: json:"status" gorm:"column:status;"
	Status status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// The stream workflow info
message StreamFlow {
	enum Type {
		_ = 0; // is useless.
		Operator = 1;
		SQL = 2;
		Jar = 3;
		Python = 4;
		Scala = 5;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	// @inject_tag: json:"version" gorm:"column:version;primarykey;"
	int64 version = 3 [ (validator.field) = { } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow Description.
	// @inject_tag: json:"desc" gorm:"column:desc;"
	string desc = 5 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: json:"type" gorm:"column:type;"
	Type type = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// StreamFlowNode represents a workflow node info.
// Not use with gorm.
message StreamFlowNode {
	option (gosql.serialize) = { json: {} };

	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: json:"type"
	StreamFlow.Type type = 1 [ (validator.field) = { } ];
	
	// The flink operator nodes. Is useless on present.
	// @inject_tag: json:"operators" default:""
	repeated flink.FlinkOperator operators = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"sql" default:"" binding:"-"
	flink.FlinkSQL sql = 3  [ (validator.field) = { } ];

	// Jar
	// @inject_tag: json:"jar" default:"" binding:"-"
	flink.FlinkJar jar = 4 [ (validator.field) = { } ];
	
	// Scala
	// @inject_tag: json:"scala" default:"" binding:"-"
	flink.FlinkScala scala = 5  [ (validator.field) = { } ];
	
	// Python
	// @inject_tag: json:"python" default:"" binding:"-"
	flink.FlinkPython python = 6  [ (validator.field) = { } ];
}

// StreamFlowArgs represents a workflow running parameters.
// Not use with gorm.
message StreamFlowArgs {
	option (gosql.serialize) = { json: {} };
	
	// Function represents the function node config for stream workflow.
	message Function {
		// @inject_tag: json:"udf_ids" binding:"-"
		repeated string udf_ids = 1   [ (validator.field) = { } ];
		// @inject_tag: json:"udtf_ids" binding:"-"
		repeated string udtf_ids = 2  [ (validator.field) = { } ];
		// @inject_tag: json:"udttf_ids" binding:"-"
		repeated string udttf_ids = 3 [ (validator.field) = { } ];
	}
	
	// The flink cluster id. Is required.
	// @inject_tag: json:"cluster_id" default:"" binding:"required_if=engine_type 2"
	string cluster_id = 1 [ (validator.field) = { } ];
	
	// Flink parallelism. Is required, Min 0, Max 100. default is 0.
	// @inject_tag: json:"parallelism" default:"" binding:"gte=0,lte=100" mininum:"0" maximum:"10000"
	int32 parallelism = 2 [ (validator.field) = { int_gt: -1, int_lt: 101 } ];
	
	// The config for function. Not required
	// @inject_tag: json:"function" default:"" binding:"-"
	Function function = 3 [ (validator.field) = { } ];
}

// StreamFlowSchedule represents a workflow schedule info.
// Not use with gorm.
message StreamFlowSchedule {
	option (gosql.serialize) = { json: {} };
	
	enum ConcurrencyPolicy {
		_ = 0; // Is useless.
		Allow = 1;
		Forbid = 2;
		Replace = 3;
	}
	
	enum RetryPolicy {
		__ = 0; // Is useless.
		None = 1;
		Auto = 2;
	}
	
	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	// @inject_tag: json:"started" default:"0" binding:"gte=0"
	int64 started = 1 [ (validator.field) = { int_gt: -1  } ];
	
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	// @inject_tag: json:"ended" default:"0" binding:"gte=0"
	int64 ended = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace"
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	// Is required.
	// @inject_tag: json:"concurrency_policy" default:"" binding:"gte=1,lte=3"
	ConcurrencyPolicy concurrency_policy = 3 [ (validator.field) = { int_gt: 0, int_lt: 4 } ];
	
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	// @inject_tag: json:"retry_policy" default:"" binding:"gte=1,lte=2"
	RetryPolicy retry_policy = 4 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// FIXME: test binding.
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	// @inject_tag: json:"retry_limit" default:"" binding:"required_with=retry_policy=2,gte=1,lte=99"
	int32 retry_limit = 5 [ (validator.field) = { int_gt: -1, int_lt: 100 } ];
	
	// Retry interval,  Is required with retry_policy = 2, Min 1, Max 30.
	// @inject_tag: json:"retry_interval" default:"" binding:"required_with=retry_policy=2,gte=1,lte=30"
	int32 retry_interval = 6 [ (validator.field) = { int_gt: -1, int_lt: 31 } ];
	
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 4320min.
	// @inject_tag: json:"timeout" default:"0" binding:"gte=0"
	int32 timeout = 7 [ (validator.field) = { int_gt: -1, int_lt: 100 } ];
	
	// Crontab Express. Is required.
	// FIXME: check binding.
	// @inject_tag: json:"express" default:"" binding:"gte=5,lte=128"
	string express = 8 [ (validator.field) = { msg_exists: true } ];
}

// StreamFlowProperty represents property of workflow.
message StreamFlowProperty {
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: json:"version" gorm:"column:version;primarykey"
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: json:"node" gorm:"column:node;type:json"
	StreamFlowNode node = 4 [ (validator.field) = { } ];
	
	// @inject_tag: json:"args" gorm:"column:args;type:json"
	StreamFlowArgs args = 5 [ (validator.field) = { } ];
	
	// @inject_tag: json:"schedule" gorm:"column:schedule;type:json"
	StreamFlowSchedule schedule = 6 [ (validator.field) = { } ];
}

// The release stream workflow info.
message StreamFlowRelease {
	enum Status {
		_ = 0;
		Active = 1;
		Suspended = 2;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: json:"version" gorm:"column:version;"
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: json:"type" gorm:"column:type;"
	StreamFlow.Type type = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Release status, 1 => "active", 2 => "suspended"
	// @inject_tag: json:"status" gorm:"column:status;"
	Status status = 6 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow release description.
	// @inject_tag: json:"desc" gorm:"column:desc;"
	string desc = 7 [ (validator.field) = { length_lt: 1025 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}

// The instance info of stream workflow.
message StreamFlowInst {
	enum State {
		_ = 0;
		Pending = 1;
		Running = 2;
		Retrying = 3;
		Suspended = 4;
		Terminated = 5;
		Timeout = 6;
		Succeed = 7;
		Failed = 8;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Workflow ID it belongs to.
	// @inject_tag: json:"flow_id" gorm:"column:flow_id;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: json:"version" gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 4 [ (validator.field) = { length_eq: 20 } ];
	
	// The instance state.
	// @inject_tag: json:"state" gorm:"column:state;"
	State state = 5 [ (validator.field) = { int_gt: 0 } ];

	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 7 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace operation audit log record.
message Operation {
	// Type declares the API operation type.
	enum Type {
		_ = 0; // Is useless.
		Write = 1; // Include Operation: create/update/delete.
		Read = 2; // Include Operation: read.
	}
	
	// State declares the API operation result.
	enum State {
		__ = 0;
		Success = 1;
		Failed = 2;
	}
	
	// The user id of who execute this operation.
	// @inject_tag: json:"user_id" gorm:"column:user_id;primaryKey;"
	string user_id = 1 [ (validator.field) = { length_lt: 65 } ];
	
	// @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
	string space_id = 2 [ (validator.field) = {} ];
	
	//	-- The operation of user behavior.
	// @inject_tag: json:"op_name" gorm:"column:op_name;"
	string op_name = 3 [ (validator.field) = { length_gt: 0} ];
	
	// -- The type of operation, 2 => "Write",  3 => "Read".
	// @inject_tag: json:"op_type" gorm:"column:op_type;"
	Type op_type = 4 [ (validator.field) = { int_gt: 0 } ];
	
	// -- The result of operation, 1 => "Success", 2 => "Failed".
	// @inject_tag: json:"state" gorm:"column:state;"
	State state = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of time of when accessed.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
}

// The Role info.
message Role {
	enum Type {
		_ = 0;
		System = 1;
		Custom = 2;
	}
	
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The name of role. unique in a workspace.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_lt: 128 } ];

	// @inject_tag: json:"type" gorm:"column:type;" 1 => "System" 2 => "Custom"
	Type type = 4 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace member info.
message Member {
	// @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The user id in account-server.
	// @inject_tag: json:"user_id" gorm:"column:user_id;primaryKey;"
	string user_id = 3 [ (validator.field) = { length_lt: 65 } ];
	
	// The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	// @inject_tag: json:"role_ids" gorm:"column:role_ids;"
	string role_ids = 4 [ (validator.field) = { length_lt: 256 } ];
	
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}

// The monitor rule info
message MonitorRule {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Rule ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];

	// Rule Name.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];

	// Rule status, 1 => "enabled", 2 => "disabled".
	// @inject_tag: json:"status" gorm:"column:status;"
	Status status = 4 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// The object unit, 1 => "workspace" 2 => "workflow'
	// @inject_tag: json:"unit" gorm:"column:unit;"
	int32 unit = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// The object text.
	// @inject_tag: json:"text" gorm:"column:text;"
	string text = 6 [ (validator.field) = { length_gt: 1, length_lt: 1025 } ];

	// The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
	// @inject_tag: json:"trigger" gorm:"column:trigger;"
	int32 trigger = 7 [ (validator.field) = { int_gt: 0} ];

	// The alarm times. 1 ~ 99
	// @inject_tag: json:"alarm_times" gorm:"column:alarm_times;"
	int32 alarm_times = 8 [ (validator.field) = { int_gt: 0, int_lt: 100 } ];

	// The alarm interval. 1 ~ 30
	// @inject_tag: json:"alarm_interval" gorm:"column:alarm_interval;"
	int32 alarm_interval = 9 [ (validator.field) = { int_gt: 0, int_lt: 31 } ];

	// The alarm type. "sms, email"
	// @inject_tag: json:"alarm_type" gorm:"column:alarm_type;"
	string alarm_type = 10 [ (validator.field) = { length_gt: 1, length_lt: 33 } ];

	// The free time. "00:01,03:00".
	// @inject_tag: json:"free_time" gorm:"column:free_time;"
	string free_time = 11 [ (validator.field) = { length_gt: 1, length_lt: 17 } ];

	// The alarm receiver. "usr-111111,usr-22222".
	// @inject_tag: json:"receiver" gorm:"column:receiver;"
	string receiver = 12 [ (validator.field) = { length_gt: 1, length_lt: 257 } ];
}

// The message in inst queue..
message QueueMessage {
	// The request id of beginning.
	string trace_id = 1 [ (validator.field) = { } ];
	
	// The property of stream workflow.
	StreamFlowProperty property = 2  [ (validator.field) = { } ];
	
	// The operation that you will execute.
	// 1 => "run"  2 => "retry" 3 => "terminate" 4 => "delete"
	int32 operation = 3 [ (validator.field) = { } ];
	
	// The number of times the instance task was executed.
	int32 times  = 4 [ (validator.field) = { } ];
	
	// The start execution time of the task instance.
	int64 started  = 5 [ (validator.field) = { } ];
}

message InstanceStatusStat {
  // instance status
  // @inject_tag: json:"state"
  int32 state = 1 [ (validator.field) = { int_gt: -1 } ];
  // instance count with the status
  // @inject_tag: json:"count"
  int64 count = 2 [ (validator.field) = { int_gt: -1 } ];
}

message InstanceRuntimeRankInfo {
  // instance id
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field) = { } ];
  // flow_id
  // @inject_tag: json:"flow_id"
  string flow_id = 2 [ (validator.field) = { } ];
  // running time
  // @inject_tag: json:"running_time"
  int64 running_time = 3 [ (validator.field) = { int_gt: -1 } ];
  // version
  // @inject_tag: json:"version"
  string version = 4 [ (validator.field) = { } ];
}

message InstanceErrorRankInfo {
  // flow_id
  // @inject_tag: json:"flow_id"
  string flow_id = 1 [ (validator.field) = { } ];
  // version
  // @inject_tag: json:"version"
  string version = 2 [ (validator.field) = { } ];
  // running time
  // @inject_tag: json:"error_count"
  int64 error_count = 3 [ (validator.field) = { int_gt: -1 } ];
}

message DispatchTaskCountInfo {
  // flow_count
  // @inject_tag: json:"flow_count"
  int32 flow_count = 1 [ (validator.field) = { int_gt: -1 } ];
  // instance count
  // @inject_tag: json:"instance_id"
  int32 instance_count = 2 [ (validator.field) = { int_gt: -1 } ];
  // updated time
  // @inject_tag: json:"updated"
  int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}

message InstanceTaskExecStat {
  // hour
  // @inject_tag: json:"hour"
  int32 hour = 1 [ (validator.field) = { int_gt: -1, int_lt: 25 } ];
  // instance success count
  // @inject_tag: json:"instance_count"
  int64 instance_count = 2 [ (validator.field) = { int_gt: -1 } ];
}

// Source Info
message DataSource {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}

	enum ConnectionStatus {
		__ = 0;
		Success = 1;
		PartialSuccess = 2;
		Failed = 3;
	}
	
	enum Type {
		___ = 0;
		MySQL = 1;
		PostgreSQL = 2;
		Kafka = 3;
		S3 = 4;
		ClickHouse = 5;
		HBase = 6;
		Ftp = 7;
		HDFS = 8;
	}
	
	// Source ID, unique within a region.
	// @inject_tag: json:"source_id" gorm:"column:source_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"
	string source_id  = 1 [ (validator.field) = { length_lt: 21 } ];
	
	// Space ID, workspace ID.
	// @inject_tag: json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"
	string space_id  = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// Source Type, one of 1/2/3/4/5/6/7/8 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
	// @inject_tag: json:"source_type" gorm:"column:source_type;" binding:"gte=1,lte=8" required:"true" mininum:"1" maximum:"8"
	Type source_type = 3  [ (validator.field) = { int_gt: 0, int_lt: 9 } ];
	
	// Source Name, unique within a space.
	// @inject_tag: json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string name = 4   [ (validator.field) = { length_gt: 0, length_lt: 65 } ];
	
	// Comment, describe this source.
	// @inject_tag: json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
	string comment = 5    [ (validator.field) = {  length_lt: 257 } ];
	
	// Url, this source connection info.
	// @inject_tag: json:"url" gorm:"column:url;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
	datasource.DataSourceURL url = 6    [ (validator.field) = { length_gt: 0, length_lt: 8001 } ];
	
	// State, one of 1/2 1->enable/2->disable.
	// @inject_tag: json:"status" gorm:"column:status;" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
	Status status = 7 [ (validator.field) = { int_gt:0, int_lt: 3 } ];
	
	// Create Time, this Source create time.
	// @inject_tag: json:"created" gorm:"column:created;"
	int64 created = 8   [ (validator.field) = { length_lt: 0 } ];
	
	// Update Time, this Source last update time.
	// @inject_tag: json:"updated" gorm:"column:updated;"
	int64 updated = 9  [ (validator.field) = { length_lt: 0 } ];
	
	// connection status oneof 1/2/3 1->success/2->partialsuccess/3->failed
	// @inject_tag: json:"connection" gorm:"column:connection;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"
	ConnectionStatus connection = 10  [ (validator.field) = { int_gt: 0, int_lt: 4 } ];
}

// Table Info
message TableInfo {
	enum Kind {
		_ = 0;
		Source = 1;
		Destination = 2;
		Dimension  = 3;
	}
	
	// Table ID, unique within a region.
	// @inject_tag: json:"table_id" gorm:"column:table_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"
	string table_id  = 1 [ (validator.field) = { length_lt: 21 } ];

	// Source ID
	// @inject_tag: json:"source_id" gorm:"column:source_id;" binding:"len=20" minLength:"20" maxLength:"20"
	string source_id  = 2 [ (validator.field) = { length_eq: 20 } ];

	// Space ID, workspace ID.
	// @inject_tag: json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"
	string space_id  = 3 [ (validator.field) = { length_eq: 20 } ];

	// Source Name, unique within a space.
	// @inject_tag: json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string name = 4   [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// Comment, describe this source.
	// @inject_tag: json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
	string comment = 5    [ (validator.field) = {  length_lt: 257 } ];

	// Define this table info.
	// @inject_tag: json:"table_schema" gorm:"column:table_schema;"  binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
	flink.TableSchema table_schema = 6 [ (validator.field) = { length_gt: 0, length_lt: 8001 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];

	// TableKind, one of 1/2/3 1->source/2->destination/3->dimension
	// @inject_tag: json:"table_kind" gorm:"column:table_kind;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"
	Kind table_kind = 9 [ (validator.field) = { int_gt: 0, int_lt: 4 } ];

	// SourceName
	// @inject_tag: json:"source_name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string source_name = 10 [ (validator.field) = { length_gt:0, length_lt: 65 } ];

	// connection status oneof 1/2/3 1->success/2->partialsuccess/3->failed
	// @inject_tag: json:"connection" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"
	DataSource.ConnectionStatus connection = 11  [ (validator.field) = { int_gt: 0, int_lt: 4 } ];
}

message Resource {
	enum Type {
		_ = 0;
		Jar = 1;
		Udf = 2;
		CONNECTOR = 3;
	}

	// Resource ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primaryKey;"
	string id = 1;

	// Resource Parent ID, default "".
	// @inject_tag: json:"pid" gorm:"column:pid;"
	string pid = 2;

	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 3;

	// Resource Name, unique within a region of same space_id and pid.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 4;

	// Resource type, default 0,  0 => "directory", 1 => "jar", 2 => "udf".
	// @inject_tag: json:"type" gorm:"column:type;"
	Type type = 5;

	// Resource size, Byte.
	// @inject_tag: json:"size" gorm:"size;"
	int64 size = 6;

	// Resource description
	// @inject_tag: json:"description" gorm:"description;"
	string description = 7;

	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 8;

	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9;
}

// UDF Info
message UDFInfo {
	enum Type {
		_ = 0;
		UDF = 1;
		UDTF = 2;
		UDTTF = 3;
	}
	
	enum Language {
		__ = 0;
		Scala = 1;
		Java = 2;
		Python = 3;
	}
	
	// ID, unique within a region.
	// @inject_tag: json:"udf_id" gorm:"column:udf_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"
	string udf_id  = 1 [ (validator.field) = { length_lt: 21 } ];

	// Space ID, workspace ID.
	// @inject_tag: json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"
	string space_id  = 2 [ (validator.field) = { length_eq: 20 } ];

	// UDF Type one of UDF/UDTF/UDTTF
	// @inject_tag: json:"udf_type" gorm:"column:udf_type;"  binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
	Type udf_type = 3  [ (validator.field) = { length_gt: 0, length_lt: 21 } ];

	// UDF language one of Scala/Java/Python
	// @inject_tag: json:"udf_language" gorm:"column:udf_language;"  binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
	Language udf_language = 4  [ (validator.field) = { length_gt: 0, length_lt: 21 } ];

	// Source Name, unique within a space.
	// @inject_tag: json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string name = 5 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// Comment, describe this source.
	// @inject_tag: json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
	string comment = 6 [ (validator.field) = {  length_lt: 257 } ];

	// define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
	// @inject_tag: json:"define" gorm:"column:define;" default:"" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"
	string define = 7 [ (validator.field) = {  length_lt: 20001 } ];

	// usage for this udf
	// @inject_tag: json:"usage_sample" gorm:"column:usage_sample;" default:"" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"
	string usage_sample = 8 [ (validator.field) = {  length_lt: 2001 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 9 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 10 [ (validator.field) = { int_gt: 0 } ];
}

// JobResources
message JobResources {
	// jobid
    // @inject_tag: json:"job_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
	string job_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Jar
	// @inject_tag: json:"jar" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
	string jar = 2 [ (validator.field) = {length_gt: -1, length_lt: 1025 } ];
}

// HBaseConfig
// FIXME: review it. removed it?
message HBaseConfig {
	option (gosql.serialize) = { json: {} };
	message Host {
		// @inject_tag: json:"domain" default:"" binding:"email"
		string domain = 1 [ (validator.field) = { } ];
		
		// @inject_tag: json:"ip" default:"" binding:"ipv4"
		string ip = 2 [ (validator.field) = { } ];
	}
	// The host lists of HBase.
	// @inject_tag: json:"hosts" default:"" binding:"-"
	repeated Host hosts = 1 [ (validator.field) = { } ];
}

// FlinkConfig
// FIXME: review it. removed it?
message FlinkConfig {
	option (gosql.serialize) = { json: {} };
	
	message Item {
		// The key in key/value item, Is required, Min: 1, Max: 1024.
		// @inject_tag: json:"key" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
		string key = 1 [ (validator.field) = { length_gt: 0, length_lt: 1024 } ];
		
		// The value in key/value item, Is required, Min: 1, Max: 1024.
		// @inject_tag: json:"value" default:"" binding:"gte=1,lte=1024"  minLength:"1" maxLength:"1024"
		string value = 2 [ (validator.field) = { length_gt: 0, length_lt: 1024 } ];
	}
	
	// Config of flink
	// @inject_tag: json:"conf" default:"" binding:"-"
	repeated Item items = 3  [ (validator.field) = { } ];
}

// FlinkCluster is schema for flink (session) cluster.
// FIXME: review it. removed it?
message FlinkCluster {
	enum Status {
		_ = 0;
		Running = 1;
		Stopped = 2;
	}
	
	enum LogLevel {
		__ = 0;
		TRACE = 1;
		DEBUG = 2;
		INFO = 3;
		WARN = 4;
		ERROR = 5;
	}
	
	string id = 1 [ (validator.field) = {  } ];
	
	string name = 2 [ (validator.field) = { } ];
	
	Status statue = 3 [ (validator.field) = { } ];
	
	string version = 4 [ (validator.field) = { } ];
	
	// resource config.
	
	// Flink task number for TaskManager. Is required, Min 1, Max ?
	// @inject_tag: json:"task_num" default:"" binding:"gte=1"
	int32 task_num = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Flink JobManager. 1CU = 1C + 4GB. Is required, Min 1, Max 8
	// @inject_tag: json:"job_cu" default:"" binding:"gte=1"
	int32 job_cu = 6 [ (validator.field) = { int_gt: 0, int_lt: 9 } ];
	
	// Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 1, Max 8
	// @inject_tag: json:"task_cu" default:"" binding:"gte=1"
	int32 task_cu = 7 [ (validator.field) = { int_gt: 0, int_lt: 9 } ];
	
	LogLevel root_log_level = 8 [ (validator.field) = { } ];
	
	// The config for flink. Is required
	// @inject_tag: json:"flink" default:"" binding:"required"
	FlinkConfig flink = 9 [ (validator.field) = { msg_exists: true } ];
	
	// Config of HBase. Not required.
	// @inject_tag: json:"hbase" default:"" binding:"-"
	HBaseConfig hbase = 10 [ (validator.field) = { } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 11 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 12 [ (validator.field) = { int_gt: 0 } ];

	// xxx.xxx.xxx.xxx:8080
	string url = 13;
}

