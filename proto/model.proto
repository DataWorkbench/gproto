syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

package model;

import "github.com/mwitkow/go-proto-validators/validator.proto";

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// The workspace info.
message SpaceInfo {
	// Workspace ID, unique within a region.
	// @inject_tag: gorm:"column:id;primaryKey;"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// User id of workspace owner.
	// @inject_tag: gorm:"column:owner;"
	string owner = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// Workspace Name, unique within a region.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workspace Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workspace status, 0 => "enabled", 1 => "disabled".
	// @inject_tag: gorm:"column:status;"
	int32 status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// The stream workflow info
message StreamFlowInfo {
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 3 [ (validator.field) = { } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 5 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: gorm:"column:type;"
	int32 type = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// StreamFlowEnv represents a workflow environmental parameters info.
message StreamFlowEnv {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = { } ];
	
	// The env content of workflow in json format.
	// @inject_tag: gorm:"column:env;"
	string env = 3 [ (validator.field) = { } ];
}

// StreamFlowNode represents a workflow environmental parameters info.
message StreamFlowNode {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = { } ];
	
	// The env content of workflow in json format.
	// @inject_tag: gorm:"column:nodes;"
	string nodes = 3 [ (validator.field) = { } ];
}

// StreamFlowSchedule represents a workflow schedule info.
message StreamFlowSchedule {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = {} ];
	
	// Timestamp of start time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:started;"
	int64 started = 3 [ (validator.field) = { int_gt: 0 } ];

	// Timestamp of end time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:ended;"
	int64 ended = 4 [ (validator.field) = { int_gt: 0 } ];
	
	// Strategy of dependency. 1 => "none", 2 => "last".
	// @inject_tag: gorm:"column:depend_strategy;"
	int32 depend_strategy = 6 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Express is the standard unix crontab express, used with loop ScheduleStrategy.
	// @inject_tag: gorm:"column:express;"
	string express = 7 [ (validator.field) = { } ];
}

// FlowMeta represents a full workflow metadata where are FlowInfo, FlowNodeInfo, FlowEnvInfo, FlowSchInfo
message StreamFlowMeta {
	StreamFlowInfo     flow =  1    [ (validator.field) = { msg_exists: true } ];
	StreamFlowNode     node =  2    [ (validator.field) = { msg_exists: true } ];
	StreamFlowEnv      env = 3      [ (validator.field) = { msg_exists: true } ];
	StreamFlowSchedule schedule = 4 [ (validator.field) = { msg_exists: true } ];
}

// The stream workflow info of release.
message ReleaseStreamFlowInfo {
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: gorm:"column:type;"
	int32 type = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Release status, 1 => "active", 2 => "suspended"
	// @inject_tag: gorm:"column:status;"
	int32 status = 6 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow release description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 7 [ (validator.field) = { length_lt: 1025 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}

// The instance info of stream workflow.
message StreamFlowInstInfo {
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 4 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:trigger;"
	int32 trigger = 5 [ (validator.field) = { } ];
	
	// Limit count of retries.
	// @inject_tag: gorm:"column:state;"
	int32 state = 6 [ (validator.field) = { int_gt: 0 } ];

	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace operation audit record.
message AuditInfo {
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The user id of who execute this operation.
	// @inject_tag: gorm:"column:user_id;"
	string user_id = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// The operation type, 1 => "unknown", 2 => "read", 3 => "write", 4 => "delete"
	// @inject_tag: gorm:"column:op_type;"
	int32 op_type = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// The operation name (action)
	// @inject_tag: gorm:"column:op_name;"
	string op_name = 4 [ (validator.field) = { } ];
	
	// Timestamp of time of when accessed.
	// @inject_tag: gorm:"column:timed;autoCreateTime;"
	int64 timed = 5 [ (validator.field) = { int_gt: 0 } ];
}

// The Role info.
message RoleInfo {
//	// @inject_tag: gorm:"column:space_id;"
//	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:id;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:code;"
	string code = 3 [ (validator.field) = { length_eq: 64 } ];
	
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_lt: 128 } ];
	
	// @inject_tag: gorm:"column:type;" 1 => "SYSTEM" 2 => "CUSTOM"
	int32 type = 5 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace member info.
message MemberInfo {
	// @inject_tag: gorm:"column:space_id;primaryKey;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Use account user-id as member id.
	// @inject_tag: gorm:"column:member_id;primaryKey;"
	string member_id = 3 [ (validator.field) = { length_lt: 65 } ];
	
	// @inject_tag: gorm:"column:role_ids;" The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	string role_ids = 4 [ (validator.field) = { length_lt: 256 } ];
	
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}
