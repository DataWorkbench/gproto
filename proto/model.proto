syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

// Package name of class.
option java_package = "com.workbench.proto.model";
// File name of class.
option java_outer_classname = "Model";
option java_multiple_files = true;

package model;

//import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/gosql.proto";
import "github.com/yu31/proto-go-plugin/proto/validator.proto";

import "flink.proto";
import "datasource.proto";

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// Error transmits customized-error between grpc client and server by status details
message Error {
  // Code is summary information of error.
  string code = 1;
  // Status is http status code.
  int32 status = 2;
  // EnUS is detail information of error with en_us format.
  string en_us = 3;
  // ZhCN is detail information of error with zh_cn format.
  string zh_cn = 4;
}

// The workspace info.
message Workspace {
  enum Status {
    StatusUnset = 0;
    Enabled = 1;
    Disabled = 2;
    Deleted = 3;
  }
  // Workspace ID, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primaryKey;"
  string id = 1 [(validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // User id of workspace owner.
  // @inject_tag: json:"owner" gorm:"column:owner;"
  string owner = 2 [ (validator.field).tags.string = { byte_len_lte: 64} ];

  // Workspace Name, unique within a region.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 3 [(validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 }];

  // Workspace Description.
  // @inject_tag: json:"desc" gorm:"column:desc;"
  string desc = 4;

  // Workspace status, 1 => "enabled", 2 => "disabled", 3 => "deleted",
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 5 [(validator.field).tags.enum = { gte: 1, in_enums: true }];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 7 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 8 [ (validator.field).tags.int = { gt: 0 } ];
}

// The stream job info
message StreamJob {
  enum Type {
    TypeUnset = 0; // is useless.
    Operator = 1;
    SQL = 2;
    Jar = 3;
    Python = 4;
    Scala = 5;
  }

  enum Status {
    StatusUnset = 0;
    Normal = 1;
    Deleted = 2;
  }

  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Job ID, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The job version id, only used for Published job.
  // Only used in published job.
  // @inject_tag: json:"version" gorm:"column:version;primarykey;"
  string version = 3 [(validator.field) = {}];

  // Job Name, Unique within a workspace.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 4 [(validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 }];

  // Job Description.
  // @inject_tag: json:"desc" gorm:"column:desc;"
  string desc = 5 [(validator.field).tags.string = { char_len_lte: 1024 } ];

  // Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
  // @inject_tag: json:"type" gorm:"column:type;"
  Type type = 6 [(validator.field).tags.enum = { gte: 1, in_enums: true }];

  // Job status, 1 => "Normal", 2 => "Deleted".
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 7 [(validator.field).tags.enum = { gte: 1, in_enums: true }];

  // The user-id of created this job.
  // @inject_tag: json:"created_by" gorm:"column:created_by;"
  string created_by = 8 [(validator.field).tags.string = { byte_len_lte: 64 }];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 9 [(validator.field).tags.int = { gt: 0 }];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 10 [(validator.field).tags.int = { gt: 0 }];
}

// StreamJobProperty represents property of job.
message StreamJobProperty {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Job Id, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The release version.
  // @inject_tag: json:"version" gorm:"column:version;primarykey"
  string version = 3 [(validator.field).tags.string = { ne: "" }];

  // @inject_tag: json:"code" gorm:"column:code;type:json"
  StreamJobCode code = 4 [(validator.field) = {}];

  // @inject_tag: json:"args" gorm:"column:args;type:json"
  StreamJobArgs args = 5 [(validator.field) = {}];

  // @inject_tag: json:"schedule" gorm:"column:schedule;type:json"
  StreamJobSchedule schedule = 6 [(validator.field) = {}];
}

// StreamJobCode represents a job code info.
message StreamJobCode {
  option (gosql.serialize) = {json: {}};

  // Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
  // @inject_tag: json:"type"
  StreamJob.Type type = 1 [(validator.field).tags.enum = { gte: 1, in_enums: true }];

  // The flink operator nodes. Is useless on present.
  // @inject_tag: json:"operators" default:""
  repeated flink.FlinkOperator operators = 2 [(validator.field) = {}];

  // @inject_tag: json:"sql" default:"" binding:"-"
  flink.FlinkSQL sql = 3  [(validator.field) = {}];

  // Jar
  // @inject_tag: json:"jar" default:"" binding:"-"
  flink.FlinkJar jar = 4 [(validator.field) = {}];

  // Scala
  // @inject_tag: json:"scala" default:"" binding:"-"
  flink.FlinkScala scala = 5  [(validator.field) = {}];

  // Python
  // @inject_tag: json:"python" default:"" binding:"-"
  flink.FlinkPython python = 6  [(validator.field) = {}];
}

// StreamJobArgs represents a job running parameters.
// Not use with gorm.
message StreamJobArgs {
  option (gosql.serialize) = {json: {}};

  // The flink cluster id. Is required.
  // @inject_tag: json:"cluster_id" default:"" binding:"required_if=engine_type 2"
  string cluster_id = 1 [(validator.field) = {}];

  // Flink parallelism. Is required, Min 0, Max 100. default is 0.
  // @inject_tag: json:"parallelism" default:"" binding:"gte=0,lte=100" mininum:"0" maximum:"100"
  int32 parallelism = 2 [(validator.field).tags.int = { gte: 0, lte: 100 }];

  // The list of function(udf). Not required
  // @inject_tag: json:"udfs" default:"" binding:"-"
  repeated string udfs = 3 [(validator.field) = {}];

  // The list of connectors dependency package. Not required.
  repeated string connectors = 4 ;

  // The list of built-in connectors. Not required.
  repeated string built_in_connectors = 5;
}

// StreamJobSchedule represents a job schedule info.
// Not use with gorm.
message StreamJobSchedule {
  option (gosql.serialize) = {json: {}};

  enum SchedulePolicy {
    SchedulePolicyUnset = 0;
    Periodicity = 1;
    Once = 2;
  }

  enum ConcurrencyPolicy {
    ConcurrencyPolicyUnset = 0; // Is useless.
    Allow = 1;
    Forbid = 2;
    Replace = 3;
  }

  enum RetryPolicy {
    RetryPolicyUnset = 0; // Is useless.
    None = 1;
    Auto = 2;
  }

  // Schedule Policy, Options Value: 1 => "Periodicity", 2 => "Once".
  // Is Required.
  // @inject_tag: json:"schedule_policy" default:"0" binding:"gte=1,lte=2"
  SchedulePolicy schedule_policy = 1 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // ------ Once Options ------
  //
  // Timestamp of execute time for once. unit in seconds.
  // Not required, default the time of created job.
  // @inject_tag: json:"executed" default:"0" binding:"gte=0"
  int64 executed = 2 [(validator.field).tags.int = { gte: 0 }];

  // Whether execute immediately the job after release.
  // Not required, default False. If immediately is True, the field executed will be ignore.
  // @inject_tag: json:"immediately" binding:"-"
  bool immediately = 3;

  // ------ Period Options ------
  //
  // Timestamp of start time of the validity period, unit in seconds.
  // Not required, default 31507200(1971-01-01 00:00:00), means no limit.
  // @inject_tag: json:"started" default:"0" binding:"gte=0"
  int64 started = 4 [(validator.field).tags.int = { gte: 0 }];

  // Timestamp of end time of the validity period, unit in seconds.
  // Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
  // @inject_tag: json:"ended" default:"0" binding:"gte=0"
  int64 ended = 5 [(validator.field).tags.int = { gte: 0 }];

  // Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace"
  // - allow: Multiple task instances are allowed at the same time.
  // - forbid: No new instances will be created, and this schedule cycle will be skipped,
  // - replace: Force stop the old running instances and create new.
  // Is required with schedule_policy = 1.
  // @inject_tag: json:"concurrency_policy" default:"" binding:"-"
  ConcurrencyPolicy concurrency_policy = 6 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.enum = { gte: 1, in_enums: true }
  ];

  // Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
  // Is required with with schedule_policy = 1.
  // @inject_tag: json:"period_type" default:"" binding:"-"
  string period_type = 7 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.string = { in: ["minute", "hour", "day", "week", "month", "year"] }
  ];

  // Crontab Express. Is required with schedule_policy == 1
  // @inject_tag: json:"express" default:"" binding:"-"
  string express = 8 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.string = { unix_cron: true }
  ];

  // ------ Advanced (Retry) options ------
  //
  // Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 100 min.
  // @inject_tag: json:"timeout" default:"0" binding:"gte=0"
  int32 timeout = 9 [(validator.field).tags.int = {gte: 0, lte: 100}];

  // Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
  // Is required.
  // @inject_tag: json:"retry_policy" default:"" binding:"gte=0,lte=2"
  RetryPolicy retry_policy = 10 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.enum = { gte: 1, in_enums: true }
  ];

  // Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
  // @inject_tag: json:"retry_limit" default:"" binding:"gte=0,lte=99"
  int32 retry_limit = 11 [
    (validator.field).check_if = { field: "retry_policy", tags: { enum: { eq: 2 } } },
    (validator.field).tags.int = { gte: 0, lte: 100}
  ];

  // Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
  // @inject_tag: json:"retry_interval" default:"" binding:"gte=0,lte=30"
  int32 retry_interval = 12 [
    (validator.field).check_if = { field: "retry_policy", tags: { enum: { eq: 2} } },
    (validator.field).tags.int = { gte: 1, lte: 30 }
  ];
}

// The release stream job info.
message StreamJobRelease {
  enum Status {
    StatusUnset = 0;
    Active = 1;
    Suspended = 2;
    Deleted = 3;
  }

  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Job ID, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The release version.
  // @inject_tag: json:"version" gorm:"column:version;"
  string version = 3 [(validator.field).tags.string = { ne: "" }];

  // Job Name, Unique within a workspace.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 4 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128} ];

  // Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
  // @inject_tag: json:"type" gorm:"column:type;"
  StreamJob.Type type = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Release status, 1 => "Active", 2 => "Suspended", 3 => "Deleted",
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 6 ;

  // Job release description.
  // @inject_tag: json:"desc" gorm:"column:desc;"
  string desc = 7 ;

  // The user-id of release this job.
  // @inject_tag: json:"created_by" gorm:"column:created_by;"
  string created_by = 8 [ (validator.field).tags.string = { byte_len_lte: 64} ];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 9 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 10 [ (validator.field).tags.int = { gt: 0 } ];
}

message JobInfo{
  // Job ID it belongs to.
  // @inject_tag: json:"instance_id" gorm:"column:instance_id;"
  string instance_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Session ID
  // @inject_tag: json:"note_id" gorm:"column:note_id;"
  string note_id = 2[(validator.field) = {}];

  // Statement ID
  // @inject_tag: json:"paragraph_id" gorm:"column:paragraph_id;"
  string paragraph_id = 3[(validator.field) = {}];

  // Flink Job ID
  // @inject_tag: json:"flink_id" gorm:"column:flink_id;"
  string flink_id = 4[(validator.field) = {}];

  // Data
  // @inject_tag: json:"message" gorm:"column:message;"
  string message = 5[(validator.field) = {}];

  // Job status
  // @inject_tag: json:"state" gorm:"column:state;"
  model.StreamJobInst.State state = 6 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 7 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 8 [ (validator.field).tags.int = { gt: 0 } ];

}

// The instance info of stream job.
message StreamJobInst {
  enum Status {
    StatusUnset = 0;
    Active = 1;
    Deleted = 2;
  }

  enum State {
    StateUnset = 0;
    Pending = 1;
    Running = 2;
    Retrying = 3;
    Suspended = 4;
    Terminated = 5;
    Succeed = 6;
    Timeout = 7;
    Failed = 8;
  }

  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Job ID it belongs to.
  // @inject_tag: json:"job_id" gorm:"column:job_id;"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The release version.
  // @inject_tag: json:"version" gorm:"column:version;
  string version = 3 [(validator.field).tags.string = { ne: "" }];

  // Job instance ID, unique.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 4 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The instance state.
  // @inject_tag: json:"state" gorm:"column:state;"
  State state = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Release status, 1 => "Normal ", 2 => "Deleted"
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 6 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Message is the error message when task execute failed.
  // @inject_tag: json:"message" gorm:"column:message;"
  string message = 7;

  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 8 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 9 [ (validator.field).tags.int = { gt: 0 } ];
}

// The workspace operation audit log record.
message Operation {
  // Type declares the API operation type.
  enum Type {
    TypeUnset = 0; // Is useless.
    Write = 1; // Include Operation: create/update/delete.
    Read = 2; // Include Operation: read.
  }

  // State declares the API operation result.
  enum State {
    StateUnset = 0;
    Success = 1;
    Failed = 2;
  }

  // The user id of who execute this operation.
  // @inject_tag: json:"user_id" gorm:"column:user_id;primaryKey;"
  string user_id = 1 [(validator.field).tags.string = { ne: "", byte_len_lte: 64 }];

  // @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
  string space_id = 2;
//  string space_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  //	-- The operation of user behavior.
  // @inject_tag: json:"op_name" gorm:"column:op_name;"
  string op_name = 3 [(validator.field).tags.string = { ne: "" }];

  // -- The type of operation, 2 => "Write",  3 => "Read".
  // @inject_tag: json:"op_type" gorm:"column:op_type;"
  Type op_type = 4 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // -- The result of operation, 1 => "Success", 2 => "Failed".
  // @inject_tag: json:"state" gorm:"column:state;"
  State state = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Timestamp of time of when accessed.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 6 [ (validator.field).tags.int = { gt: 0 } ];
}

// The Role info.
message Role {
  enum Type {
    TypeUnset = 0;
    System = 1;
    Custom = 2;
  }

  enum Status {
    StatusUnset = 0;
    Normal = 1;
    Deleted = 2;
  }

  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The name of role. unique in a workspace.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 3 [(validator.field).tags.string = { byte_len_gte: 1, byte_len_lte: 128 }];

  //  1 => "System" 2 => "Custom"
  // @inject_tag: json:"type" gorm:"column:type;"
  Type type = 4 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // 1 => "Normal" 2 => "Deleted"
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];
}

// The workspace member info.
message Member {
  enum Status {
    StatusUnset = 0;
    Normal = 1;
    Deleted = 2;
  }

  // @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
  string space_id = 1[ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // The user id in account-server.
  // @inject_tag: json:"user_id" gorm:"column:user_id;primaryKey;"
  string user_id = 3 [ (validator.field).tags.string = { byte_len_lte: 64} ];

  // The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
  // FIXME: confirm the
  // @inject_tag: json:"role_ids" gorm:"column:role_ids;"
  string role_ids = 4;

  // 1 => "Normal" 2 => "Deleted". Ignore it for client.
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 6 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 7 [ (validator.field).tags.int = { gt: 0 } ];
}

// The monitor rule info
message MonitorRule {
  enum Status {
    StatusUnset = 0;
    Enabled = 1;
    Disabled = 2;
    Deleted = 3;
  }

  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Rule ID, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Rule Name.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 3 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128} ];

  // Rule status, 1 => "enabled", 2 => "disabled", 3 => "Deleted".
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 4 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // The object unit, 1 => "workspace" 2 => "job'
  // FIXME: use enum
  // @inject_tag: json:"unit" gorm:"column:unit;"
  int32 unit = 5 [ (validator.field).tags.int = { gt: 0, lte: 2} ];

  // The object text.
  // @inject_tag: json:"text" gorm:"column:text;"
  string text = 6 [(validator.field).tags.string = { char_len_gte: 1, char_len_lte: 1024 }];

  // The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
  // FIXME: use enum
  // @inject_tag: json:"trigger" gorm:"column:trigger;"
  int32 trigger = 7 [(validator.field) = { }];

  // The alarm times. 1 ~ 99
  // @inject_tag: json:"alarm_times" gorm:"column:alarm_times;"
  int32 alarm_times = 8 [(validator.field) = { }];

  // The alarm interval. 1 ~ 30
  // @inject_tag: json:"alarm_interval" gorm:"column:alarm_interval;"
  int32 alarm_interval = 9 [(validator.field) = { }];

  // The alarm type. "sms, email"
  // @inject_tag: json:"alarm_type" gorm:"column:alarm_type;"
  string alarm_type = 10 [(validator.field) = { }];

  // The free time. "00:01,03:00".
  // @inject_tag: json:"free_time" gorm:"column:free_time;"
  string free_time = 11 [(validator.field) = { }];

  // The alarm receiver. "usr-111111,usr-22222".
  // @inject_tag: json:"receiver" gorm:"column:receiver;"
  string receiver = 12 [(validator.field) = { }];
}

// The message in inst queue..
message QueueMessage {
  enum Action {
    ActionUnset = 0;
    Create = 1;
    Run = 2;
    Retry = 3;
    Check = 4;
  }
  // The property of stream job.
  StreamJobProperty property = 1 [ (validator.field).tags.message = { not_null: true } ];

  // The number of times the instance task was executed.
  int32 retries = 2 [(validator.field) = {}];

  // The start execution time of the task instance.
  int64 started = 3 [(validator.field) = {}];
}

message InstanceStatusStat {
  // instance status
  // @inject_tag: json:"state"
  int32 state = 1 [ (validator.field).tags.int = { gte: 0 } ];
  // instance count with the status
  // @inject_tag: json:"count"
  int64 count = 2 [ (validator.field).tags.int = { gte: 0 } ];
}

message InstanceRuntimeRankInfo {
  // instance id
  // @inject_tag: json:"id"
  string id = 1 [(validator.field) = {}];
  // job_id
  // @inject_tag: json:"job_id"
  string job_id = 2 [(validator.field) = {}];
  // running time
  // @inject_tag: json:"running_time"
  int64 running_time = 3 [ (validator.field).tags.int = { gte: 0 } ];
  // version
  // @inject_tag: json:"version"
  string version = 4 [(validator.field) = {}];
}

message InstanceErrorRankInfo {
  // job_id
  // @inject_tag: json:"job_id"
  string job_id = 1 [(validator.field) = {}];
  // version
  // @inject_tag: json:"version"
  string version = 2 [(validator.field) = {}];
  // running time
  // @inject_tag: json:"error_count"
  int64 error_count = 3 [ (validator.field).tags.int = { gte: 0 } ];
}

message DispatchTaskCountInfo {
  // flow_count
  // @inject_tag: json:"flow_count"
  int32 flow_count = 1 [ (validator.field).tags.int = { gte: 0 } ];
  // instance count
  // @inject_tag: json:"instance_id"
  int32 instance_count = 2 [ (validator.field).tags.int = { gte: 0 } ];
  // updated time
  // @inject_tag: json:"updated"
  int64 updated = 6[ (validator.field).tags.int = { gt: 0 } ];
}

message InstanceTaskExecStat {
  // hour
  // @inject_tag: json:"hour"
  int32 hour = 1 [ (validator.field).tags.int = { gte: 0, lte: 24 } ];
  // instance success count
  // @inject_tag: json:"instance_count"
  int64 instance_count = 2 [ (validator.field).tags.int = { gte: 0 } ];
}

// Source Info
message DataSource {
  enum Status {
    StatusUnset = 0;
    Enabled = 1;
    Disabled = 2;
    Deleted = 3;
  }

  enum ConnectionStatus {
    ConnectionStatusUnset = 0;
    Success = 1;
    PartialSuccess = 2;
    Failed = 3;
  }

  enum Type {
    TypeUnset = 0;
    MySQL = 1;
    PostgreSQL = 2;
    Kafka = 3;
    S3 = 4;
    ClickHouse = 5;
    HBase = 6;
    Ftp = 7;
    HDFS = 8;
  }

  // Source ID, unique within a region.
  // @inject_tag: json:"source_id" gorm:"column:source_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"
  string source_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Space ID, workspace ID.
  // @inject_tag: json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"
  string space_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Source Type, one of 1/2/3/4/5/6/7/8 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
  // @inject_tag: json:"source_type" gorm:"column:source_type;" binding:"gte=1,lte=8" required:"true" mininum:"1" maximum:"8"
  Type source_type = 3  [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Source Name, unique within a space.
  // @inject_tag: json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
  string name = 4  [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 64} ];

  // Comment, describe this source.
  // @inject_tag: json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
  string comment = 5    [(validator.field).tags.string = {char_len_lte: 256}];

  // Url, this source connection info.
  // @inject_tag: json:"url" gorm:"column:url;" binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
  datasource.DataSourceURL url = 6 ;

  // State, one of 1/2 1->enable/2->disable.
  // @inject_tag: json:"status" gorm:"column:status;" binding:"gte=1,lte=2" required:"true" mininum:"1" maximum:"2"
  Status status = 7 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Create Time, this Source create time.
  // @inject_tag: json:"created" gorm:"column:created;"
  int64 created = 8  [ (validator.field).tags.int = { gt: 0 } ];

  // Update Time, this Source last update time.
  // @inject_tag: json:"updated" gorm:"column:updated;"
  int64 updated = 9  [ (validator.field).tags.int = { gt: 0 } ];

  // connection status oneof 1/2/3 1->success/2->partialsuccess/3->failed
  // @inject_tag: json:"connection" gorm:"column:connection;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"
  ConnectionStatus connection = 10 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // internal network name.
  // @inject_tag: json:"network_name" binding:"gte=0,lte=128" mininum:"0" maximum:"128"
  string network_name = 11 [(validator.field).tags.string = { byte_len_gte: 0, byte_len_lte: 129 }];

  // DataSource owner.
  // @inject_tag: json:"create_by" gorm:"column:create_by"
  string create_by = 12 [ (validator.field).tags.string = { byte_len_lte: 64} ];
}

// Table Info
message TableInfo {
  enum Kind {
    KindUnset = 0;
    Source = 1;
    Destination = 2;
    Dimension = 3;
  }

  enum Status {
    StatusUnset = 0;
    Enabled = 1;
    Disabled = 2;
    Deleted = 3;
  }

  // Table ID, unique within a region.
  // @inject_tag: json:"table_id" gorm:"column:table_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"
  string table_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Source ID
  // @inject_tag: json:"source_id" gorm:"column:source_id;" binding:"len=20" minLength:"20" maxLength:"20"
  string source_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Space ID, workspace ID.
  // @inject_tag: json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"
  string space_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Source Name, unique within a space.
  // @inject_tag: json:"name" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
  string name = 4 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 64} ];

  // Comment, describe this source.
  // @inject_tag: json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"false" minLength:"0" maxLength:"256"
  string comment = 5 [ (validator.field).tags.string = { char_len_lte: 256 } ];

  // Define this table info.
  // @inject_tag: json:"table_schema" gorm:"column:table_schema;"  binding:"gte=1,lte=8000" required:"true" minLength:"1" maxLength:"8000"
  flink.TableSchema table_schema = 6 ;

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 7 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 8 [ (validator.field).tags.int = { gt: 0 } ];

  // Table status, 1 => "enabled", 2 => "disabled", 3 => "deleted",
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 9 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // TableKind, one of 1/2/3 1->source/2->destination/3->dimension
  // @inject_tag: json:"table_kind" gorm:"column:table_kind;" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"
  Kind table_kind = 10 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // SourceName
  // @inject_tag: json:"source_name" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
  string source_name = 11 [(validator.field).tags.string = { byte_len_gte: 0, byte_len_lte: 64 }];

  // connection status oneof 1/2/3 1->success/2->partialsuccess/3->failed
  // @inject_tag: json:"connection" binding:"gte=1,lte=3" required:"true" mininum:"1" maximum:"3"
  DataSource.ConnectionStatus connection = 12  [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Table owner.
  // @inject_tag: json:"create_by" gorm:"column:create_by"
  string create_by = 13  [ (validator.field).tags.string = { byte_len_lte: 64} ];
}

message Resource {
  enum Type {
    ResourceUnset = 0;
    Jar = 1;
    Udf = 2;
    CONNECTOR = 3;
  }

  enum Status {
    StatusUnset = 0;
    Enabled = 1;
    Disabled = 2;
    Deleted = 3;
  }

  // Resource ID, unique within a region.
  // @inject_tag: json:"resource_id" gorm:"column:resource_id;primaryKey;"
  string resource_id = 1  [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Resource Parent ID, default "".
  // @inject_tag: json:"pid" gorm:"column:pid;"
  string pid = 2;

  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Resource Name, unique within a region of same space_id and pid.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 4 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128 } ];

  // Resource type, default 0,  0 => "directory", 1 => "jar", 2 => "udf" 3 => "connector".
  // @inject_tag: json:"type" gorm:"column:type;"
  Type type = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Resource size, Byte.
  // @inject_tag: json:"size" gorm:"size;"
  int64 resource_size = 6 [(validator.field).tags.int = { gt: 0 }];

  // Resource description
  // @inject_tag: json:"description" gorm:"description;"
  string description = 7 [(validator.field).tags.string = { char_len_lte: 1024 }];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 8 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 9 [ (validator.field).tags.int = { gt: 0 } ];

  // Resource owner.
  // @inject_tag: json:"create_by" gorm:"column:create_by"
  string create_by = 10 [ (validator.field).tags.string = { byte_len_lte: 64} ];
  // Resource status, 1 => "enabled", 2 => "disabled", 3 => "deleted",
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 11 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];
}

// UDF Info
message UDFInfo {
  enum Type {
    TypeUnset = 0;
    UDF = 1;
    UDTF = 2;
    UDTTF = 3;
  }

  enum Language {
    LanguageUnset = 0;
    Scala = 1;
    Java = 2;
    Python = 3;
  }

  enum Status {
    StatusUnset = 0;
    Enabled = 1;
    Disabled = 2;
    Deleted = 3;
  }

  // ID, unique within a region.
  // @inject_tag: json:"udf_id" gorm:"column:udf_id;primaryKey;" binding:"len=20" minLength:"20" maxLength:"20"
  string udf_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Space ID, workspace ID.
  // @inject_tag: json:"space_id" gorm:"column:space_id;" binding:"len=20" minLength:"20" maxLength:"20"
  string space_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // UDF Type one of UDF/UDTF/UDTTF
  // @inject_tag: json:"udf_type" gorm:"column:udf_type;"  binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
  Type udf_type = 3  [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // UDF language one of Scala/Java/Python
  // @inject_tag: json:"udf_language" gorm:"column:udf_language;"  binding:"gte=1,lte=20" required:"true" minLength:"1" maxLength:"20"
  Language udf_language = 4  [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Source Name, unique within a space.
  // @inject_tag: json:"name" gorm:"column:name;" binding:"gte=1,lte=65" required:"true" minLength:"1" maxLength:"65"
  string name = 5 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 64} ];

  // Comment, describe this source.
  // @inject_tag: json:"comment" gorm:"column:comment;" binding:"gte=0,lte=256" required:"true" minLength:"0" maxLength:"256"
  string comment = 6 [(validator.field).tags.string = { char_len_lte: 256 }];

  // define this udf. jar udf this is resourcemanager jarID, is python/scala this is code.
  // @inject_tag: json:"define" gorm:"column:define;" default:"" binding:"gte=0,lte=20000" required:"false" minLength:"0" maxLength:"20000"
  string define = 7 [ (validator.field).tags.string = { char_len_lte: 20000 }];

  // usage for this udf
  // @inject_tag: json:"usage_sample" gorm:"column:usage_sample;" default:"" binding:"gte=0,lte=2000" required:"false" minLength:"0" maxLength:"2000"
  string usage_sample = 8 [ (validator.field).tags.string = { char_len_lte: 2000 }];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 9 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 10 [ (validator.field).tags.int = { gt: 0 } ];

  // Udf status, 1 => "enabled", 2 => "disabled", 3 => "deleted",
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 11 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Udf owner.
  // @inject_tag: json:"create_by" gorm:"column:create_by"
  string create_by = 12 [ (validator.field).tags.string = { byte_len_lte: 64} ];
}

// JobResources
message JobResources {
  // jobid
  // @inject_tag: json:"job_id" default:"" binding:"len=20" required:"true" minLength:"20" maxLength:"20"
  string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Jar
  // @inject_tag: json:"jar" default:"" binding:"gte=0,lte=1024" required:"true" minLength:"0" maxLength:"1024"
  string jar = 2 [(validator.field).tags.string = { byte_len_gte: 0, byte_len_lte: 1024}];
}

// Network config.
message Network {
  enum Status {
    StatusUnset = 0;
    Deleted = 1;
    Active = 2;
  }
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Network Id, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Network Name.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 3 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128} ];

  // VPC's route id
  // @inject_tag: json:"router_id" gorm:"column:router_id;"
  string router_id = 4 [(validator.field).tags.string = { ne: "" }];

  // vxnet id.
  // @inject_tag: json:"vxnet_id" gorm:"column:vxnet_id;"
  string vxnet_id = 5 [(validator.field).tags.string = { ne: "" }];

  // The user-id of created this network.
  // @inject_tag: json:"created_by" gorm:"column:created_by;"
  string created_by = 6 [ (validator.field).tags.string = { byte_len_lte: 64} ];

  // Network Status. 1 => "deleted" 2 => "active"
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 7 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 8 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 9[ (validator.field).tags.int = { gt: 0 } ];
}

// HostAliases
message HostAliases {
  option (gosql.serialize) = {json: {}};
  message Item {
    // @inject_tag: json:"ip" default:"" binding:"ipv4"
    string ip = 1 [(validator.field) = {}];

    // @inject_tag: json:"hostname" default:"" binding:"hostname"
    string hostname = 2 [(validator.field) = {}];
  }

  // The hostname aliases.
  // @inject_tag: json:"items" default:"" binding:"-"
  repeated Item items = 1 [(validator.field) = {}];
}

// FlinkCluster is schema for flink (session) cluster.
message FlinkCluster {
  enum Status {
    StatusUnset = 0;
    Deleted = 1;
    Running = 2;
    Stopped = 3;
    Starting = 4;
    Exception = 5;
    Arrears = 6;
  }

  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Review it.
  // Cluster ID, unique within a region. generated by server.
  // @inject_tag: json:"id" gorm:"column:id;primarykey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Cluster Name.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 3 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128} ];

  // Flink Version. Optional value: "flink-1.12.3-scala_2.11"
  // @inject_tag: json:"version" gorm:"column:version;"
  string version = 4 [(validator.field).tags.string = { in: ["flink-1.12.3-scala_2.11"] }];

  // Cluster Status. 1 => "deleted" 2 => "running" 3 => "stopped" 4 => "starting" 5 => "exception" 6 => "Arrears"
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 5 [ (validator.field).tags.enum = { gte: 1, in_enums: true } ];

  // resource config.
  //
  // Flink task number for TaskManager. Is required, Min 1, Max ?
  // @inject_tag: json:"task_num" gorm:"column:task_num;"
  int32 task_num = 6 [(validator.field).tags.int = { gt: 0 }];

  // Flink JobManager's cpu and memory. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
  // @inject_tag: json:"job_cu" gorm:"column:job_cu;"
  float job_cu = 7 [(validator.field).tags.float = {gte: 0.5, lte: 8}];

  // Flink TaskManager's cpu and memory. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
  // @inject_tag: json:"task_cu" gorm:"column:task_cu;"
  float task_cu = 8 [(validator.field).tags.float = {gte: 0.5, lte: 8}];

  // Network config.
  // @inject_tag: json:"network_id" gorm:"column:network_id;"
  string network_id = 9 [(validator.field) = {}];

  // Config of host aliases. Not required.
  // @inject_tag: json:"host_aliases" gorm:"column:host_aliases;"
  HostAliases host_aliases = 10 [(validator.field) = {}];

  // Flink config.
  // @inject_tag: json:"config" gorm:"column:config;"
  flink.FlinkConfig config = 11 [(validator.field) = {}];

  // The user-id of created this cluster.
  // @inject_tag: json:"created_by" gorm:"column:created_by;"
  string created_by = 12 [ (validator.field).tags.string = { byte_len_lte: 64} ];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 13 [ (validator.field).tags.int = { gt: 0 } ];

  // Timestamp of update time.
  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 14 [ (validator.field).tags.int = { gt: 0 } ];

  // URL of Flink UI, generated by server.
  // @inject_tag: json:"web_ui" gorm:"column:webui"
  string web_ui = 15;

  // @inject_tag: json:"network_info" gorm:"-"
  Network network_info = 16;
}

