syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

package model;

import "github.com/mwitkow/go-proto-validators/validator.proto";

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// The workspace info.
message SpaceInfo {
	// Workspace ID, unique within a region.
	// @inject_tag: gorm:"column:id;primaryKey;"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// User id of workspace owner.
	// @inject_tag: gorm:"column:owner;"
	string owner = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// Workspace Name, unique within a region.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workspace Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workspace status, 0 => "enabled", 1 => "disabled".
	// @inject_tag: gorm:"column:status;"
	int32 status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow info
message FlowInfo {
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow status, 1 => "offline", 2 => "releasing"; 3 => "online"
	// @inject_tag: gorm:"column:status;"
	int32 status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	int64 updated = 7 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow schedule info.
message SchInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Timestamp of start time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:started;"
	int64 started = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of end time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:ended;"
	int64 ended = 4 [ (validator.field) = { int_gt: 0 } ];
	
	// Schedule priority, 1 => "highest", 2 => "high", 3 => "medium", 4 => "low", 5 => "lowest", default 3.
	// @inject_tag: gorm:"column:priority;"
	int32 priority = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Strategy when node task execute fail.
	// @inject_tag: gorm:"column:failure_strategy;"
	int32 failure_strategy = 6 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Strategy of dependency.
	// @inject_tag: gorm:"column:depend_strategy;"
	int32 depend_strategy = 7 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Strategy of schedule, 1 => "loop".
	// @inject_tag: gorm:"column:schedule_strategy;"
	int32 schedule_strategy = 8 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Limit count of schedule, 0 means no limited.
	// @inject_tag: gorm:"column:schedule_limit;"
	int64 schedule_limit = 9 [ (validator.field) = { int_gt: -1 } ];
	
	// Express is the standard unix crontab express, used with loop ScheduleStrategy.
	// @inject_tag: gorm:"column:express;"
	string express = 10 [ (validator.field) = { } ];
	
	// Notify Strategies, e.g 1|2|3|4.
	// @inject_tag: gorm:"notify_strategies"
	int32 notify_strategies = 11 [ (validator.field) = { } ];
	
	// FIXME: Confirm the length of notify group id
	// Notify group id.
	// @inject_tag: gorm:"notify_group"
	string notify_group = 12 [ (validator.field) = { } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime"
	int64 created = 13 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	int64 updated = 14 [ (validator.field) = { int_gt: 0 } ];
}

// The node info.
message NodeInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Node ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// Node Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Node description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Node status, 1 => "enabled", 2 => "disabled", default 1.
	// @inject_tag: gorm:"column:status;"
	int32 status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Limit count of retries.
	// @inject_tag: gorm:"column:retry_limit"
	int32 retry_limit = 6 [ (validator.field) = { int_gt: -1 } ];
	
	// Interval of Retry, in seconds.
	// @inject_tag: gorm:"column:retry_interval"
	int32 retry_interval = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Seconds of timeout. 0 means never timeout.
	// @inject_tag: gorm:"column:timeout"
	int32 timeout = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Strategy when node task execute fail. 1 => "none", 2 => "ignore".
	// @inject_tag: gorm:"column:failure_strategy;"
	int32 failure_strategy = 9 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Current Node's upstream nodes.
	// @inject_tag: gorm:"column:upstreams;"
	string upstreams = 10 [ (validator.field) = {} ];
	
	// @inject_tag: gorm:"column:type"
	// Node type.
	int32 type = 11 [ (validator.field) = { int_gt: 0 } ];
	
	// Task statements.
	// @inject_tag: gorm:"column:statements"
	string statements = 12 [ (validator.field) = { length_gt: 1} ];
	
	// Timestamp of create time
	// @inject_tag: gorm:"column:created;autoCreateTime"
	int64 created = 13 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	int64 updated = 14 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow version info.
message FlowVerInfo {
	// The release version.
	// @inject_tag: gorm:"column:version;primarykey;
	int64 version = 1000 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: gorm:"embedded"
	FlowInfo info = 1001 [ (validator.field) = { } ];
}

// The workflow schedule version info.
message SchVerInfo {
	// The release version.
	// @inject_tag: gorm:"column:version;primarykey;
	int64 version = 1000 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: gorm:"embedded"
	SchInfo info = 1001 [ (validator.field) = { } ];
}

// The node version info.
message NodeVerInfo {
	// The release version.
	// @inject_tag: gorm:"column:version;primarykey;
	int64 version = 1000 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: gorm:"embedded"
	NodeInfo info = 1001 [ (validator.field) = { } ];
}

// The workflow instance info.
message FlowInstInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 2 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 3 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:trigger;"
	int32 trigger = 4 [ (validator.field) = { } ];
	
	// Limit count of retries.
	// @inject_tag: gorm:"column:state"
	int32 state = 5 [ (validator.field) = { int_gt: 0 } ];

	// @inject_tag: gorm:"column:created;autoCreateTime"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	int64 updated = 7 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow instance info.
message NodeInstInfo {
	// Workflow instance ID it belongs to
	// @inject_tag: gorm:"column:flow_instance_id;"
	string flow_inst_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// Node ID it belongs to.
	// @inject_tag: gorm:"column:node_id;"
	string node_id = 3 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 4 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 5 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:trigger;"
	int32 trigger = 6 [ (validator.field) = { } ];
	
	// Limit count of retries.
	// @inject_tag: gorm:"column:state"
	int32 state = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: gorm:"column:created;autoCreateTime"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}