syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

package model;

import "github.com/mwitkow/go-proto-validators/validator.proto";

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// The workspace info.
message Workspace {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}
	
	// Workspace ID, unique within a region.
	// @inject_tag: gorm:"column:id;primaryKey;"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// User id of workspace owner.
	// @inject_tag: gorm:"column:owner;"
	string owner = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// Workspace Name, unique within a region.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workspace Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workspace status, 1 => "enabled", 2 => "disabled".
	// @inject_tag: gorm:"column:status;"
	Status status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

//enum StreamFlowType {
//	_ = 0;
//	SQL = 1;
//	JAR = 2;
//	Operator = 3;
//}

// The stream workflow info
message StreamFlow {
	enum Type {
		_ = 0;
		SQL = 1;
		JAR = 2;
		Operator = 3;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 3 [ (validator.field) = { } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 5 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: gorm:"column:type;"
	Type type = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// StreamFlowNode represents a workflow environmental parameters info.
message StreamFlowNode {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in released workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = { } ];
	
	// The env content of workflow in json format.
	// @inject_tag: gorm:"column:nodes;"
	string nodes = 3 [ (validator.field) = { } ];
}

// StreamFlowEnv represents a workflow environmental parameters info.
message StreamFlowEnv {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in released workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = { } ];
	
	// The env content of workflow in json format.
	// @inject_tag: gorm:"column:env;"
	string env = 3 [ (validator.field) = { } ];
}

// StreamFlowSchedule represents a workflow schedule info.
message StreamFlowSchedule {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in released workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = {} ];
	
	// The schedule content of workflow in json format.
	// @inject_tag: gorm:"column:schedule;"
	string schedule = 3 [ (validator.field) = { } ];
}

// FlowMeta represents a full workflow metadata where are FlowInfo, FlowNodeInfo, FlowEnvInfo, FlowSchInfo
message StreamFlowMeta {
	StreamFlow        flow =  1    [ (validator.field) = { msg_exists: true } ];
	StreamFlowNode     node =  2    [ (validator.field) = { msg_exists: true } ];
	StreamFlowEnv      env = 3      [ (validator.field) = { msg_exists: true } ];
	StreamFlowSchedule schedule = 4 [ (validator.field) = { msg_exists: true } ];
}

// The release stream workflow info.
message StreamFlowRelease {
	enum Status {
		_ = 0;
		Active = 1;
		Suspended = 2;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: gorm:"column:type;"
	StreamFlow.Type type = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Release status, 1 => "active", 2 => "suspended"
	// @inject_tag: gorm:"column:status;"
	Status status = 6 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow release description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 7 [ (validator.field) = { length_lt: 1025 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}

// The instance info of stream workflow.
message StreamFlowInst {
	enum State {
		_ = 0;
		Pending = 1;
		Running = 2;
		Retrying = 3;
		Suspended = 4;
		Terminated = 5;
		Timeout = 6;
		Succeed = 7;
		Failed = 8;
	}
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 4 [ (validator.field) = { length_eq: 20 } ];
	
	// The instance state.
	// @inject_tag: gorm:"column:state;"
	State state = 5 [ (validator.field) = { int_gt: 0 } ];

	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 7 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace operation audit log record.
message OpAudit {
	enum Type {
		_ = 0;
		Unknown = 1;
		Create = 2;
		Delete = 3;
		Update = 4;
		Read = 5;
	}
	
	enum State {
		__ = 0;
		Success = 1;
		Failed = 2;
	}
	
	// The user id of who execute this operation.
	// @inject_tag: gorm:"column:user_id;primaryKey;"
	string user_id = 1 [ (validator.field) = { length_lt: 65 } ];
	
	// @inject_tag: gorm:"column:space_id;primaryKey;"
	string space_id = 2 [ (validator.field) = {} ];
	
	// -- The type of operation, 2 => "Create",  3 => "Delete", 4 => "Update"
	// @inject_tag: gorm:"column:type;"
	Type type = 3 [ (validator.field) = { int_gt: 0 } ];
	
	//	-- The operation of user behavior.
	// @inject_tag: gorm:"column:action;"
	string action = 4 [ (validator.field) = { length_gt: 0} ];
	
	// -- The result of operation, 1 => "Success", 2 => "Failed".
	// @inject_tag: gorm:"column:state;"
	State state = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of time of when accessed.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
}

// The Role info.
message Role {
	enum Type {
		_ = 0;
		System = 1;
		Custom = 2;
	}
//	// @inject_tag: gorm:"column:space_id;"
//	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:id;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:code;"
	string code = 3 [ (validator.field) = { length_lt: 64 } ];
	
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_lt: 128 } ];
	
	// @inject_tag: gorm:"column:type;" 1 => "System" 2 => "Custom"
	Type type = 5 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace member info.
message Member {
	// @inject_tag: gorm:"column:space_id;primaryKey;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Use account user-id as member id.
	// @inject_tag: gorm:"column:member_id;primaryKey;"
	string member_id = 3 [ (validator.field) = { length_lt: 65 } ];
	
	// @inject_tag: gorm:"column:role_ids;" The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	string role_ids = 4 [ (validator.field) = { length_lt: 256 } ];
	
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}

// The monitor rule info
message MonitorRule {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Rule ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];

	// Rule Name.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];

	// Rule status, 1 => "enabled", 2 => "disabled".
	// @inject_tag: gorm:"column:status;"
	Status status = 4 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// The object unit, 1 => "workspace" 2 => "workflow'
	// @inject_tag: gorm:"column:uint;"
	int32 uint = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// The object text.
	// @inject_tag: gorm:"column:text;"
	string text = 6 [ (validator.field) = { length_gt: 1, length_lt: 1025 } ];

	// The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
	// @inject_tag: gorm:"column:trigger;"
	int32 trigger = 7 [ (validator.field) = { int_gt: 0} ];

	// The alarm times. 1 ~ 99
	// @inject_tag: gorm:"column:alarm_times;"
	int32 alarm_times = 8 [ (validator.field) = { int_gt: 0, int_lt: 100 } ];

	// The alarm interval. 1 ~ 30
	// @inject_tag: gorm:"column:alarm_interval;"
	int32 alarm_interval = 9 [ (validator.field) = { int_gt: 0, int_lt: 31 } ];

	// The alarm type. "sms, email"
	// @inject_tag: gorm:"column:alarm_type;"
	string alarm_type = 10 [ (validator.field) = { length_gt: 1, length_lt: 33 } ];

	// The free time. "00:01,03:00".
	// @inject_tag: gorm:"column:free_time;"
	string free_time = 11 [ (validator.field) = { length_gt: 1, length_lt: 17 } ];

	// The alarm receiver. "usr-111111,usr-22222".
	// @inject_tag: gorm:"column:receiver;"
	string receiver = 12 [ (validator.field) = { length_gt: 1, length_lt: 257 } ];
}

// The message in inst queue..
message QueueMessage {
	// The request id of beginning.
	string req_id = 1 [ (validator.field) = { } ];
	
	// The meta of stream workflow.
	StreamFlowMeta meta = 2  [ (validator.field) = { } ];
	
	// The operation that you will execute.
	// 1 => "run"  2 => "retry" 3 => "terminate" 4 => "delete"
	int32 operation = 3 [ (validator.field) = { } ];
	
	// The number of times the instance task was executed.
	int32 times  = 4 [ (validator.field) = { } ];
	
	// The start execution time of the task instance.
	int64 started  = 5 [ (validator.field) = { } ];
}

message InstanceStatusStat {
  // instance status
  int32 state = 1 [ (validator.field) = { int_gt: -1 } ];
  // instance count with the status
  int64 count = 2 [ (validator.field) = { int_gt: -1 } ];
}

message InstanceRuntimeRankInfo {
  // instance id
  string id = 1 [ (validator.field) = { } ];
  // flow_id
  string flow_id = 2 [ (validator.field) = { } ];
  // running time
  int64 running_time = 3 [ (validator.field) = { int_gt: -1 } ];
  // version
  string version = 4 [ (validator.field) = { } ];
}

message InstanceErrorRankInfo {
  // flow_id
  string flow_id = 1 [ (validator.field) = { } ];
  // version
  string version = 2 [ (validator.field) = { } ];
  // running time
  int64 error_count = 3 [ (validator.field) = { int_gt: -1 } ];
}

message DispatchTaskCountInfo {
  // flow_count
  int32 flow_count = 1 [ (validator.field) = { int_gt: -1 } ];
  // instance count
  int32 instance_count = 2 [ (validator.field) = { int_gt: -1 } ];
  // updated time
  int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}

message InstanceTaskExecStat {
  // hour
  int32 hour = 1 [ (validator.field) = { int_gt: -1, int_lt: 25 } ];
  // success count
  int64 instance_count = 2 [ (validator.field) = { int_gt: -1 } ];
}
