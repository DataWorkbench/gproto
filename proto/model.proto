syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

package model;

import "github.com/mwitkow/go-proto-validators/validator.proto";

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// The workspace info.
message SpaceInfo {
	// Workspace ID, unique within a region.
	// @inject_tag: gorm:"column:id;primaryKey;"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// User id of workspace owner.
	// @inject_tag: gorm:"column:owner;"
	string owner = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// Workspace Name, unique within a region.
	// @inject_tag: gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workspace Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workspace status, 0 => "enabled", 1 => "disabled".
	// @inject_tag: gorm:"column:status;"
	int32 status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow info
message FlowInfo {
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 3 [ (validator.field) = { } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow Description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 5 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: gorm:"column:type;"
	int32 type = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// FlowEnvInfo represents a workflow environmental parameters info.
message FlowEnvInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = { } ];
	
	// The env content of workflow in json format.
	// @inject_tag: gorm:"column:env;"
	string env = 3 [ (validator.field) = { } ];
}

// FlowEnvInfo represents a workflow environmental parameters info.
message FlowNodeInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = { } ];
	
	// The env content of workflow in json format.
	// @inject_tag: gorm:"column:nodes;"
	string nodes = 3 [ (validator.field) = { } ];
}

// SchInfo represents a workflow schedule info.
message FlowSchInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;primarykey;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// Only used in published workflow.
	// @inject_tag: gorm:"column:version;primarykey;"
	int64 version = 2 [ (validator.field) = {} ];
	
	// Timestamp of start time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:started;"
	int64 started = 3 [ (validator.field) = { int_gt: 0 } ];

	// Timestamp of end time of the validity period, unit in seconds.
	// @inject_tag: gorm:"column:ended;"
	int64 ended = 4 [ (validator.field) = { int_gt: 0 } ];

	// Schedule priority, 1 => "highest", 2 => "high", 3 => "medium", 4 => "low", 5 => "lowest", default 3.
	// @inject_tag: gorm:"column:priority;"
	int32 priority = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// Strategy when node task execute fail.
	// @inject_tag: gorm:"column:failure_strategy;"
	int32 failure_strategy = 6 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// Strategy of dependency.
	// @inject_tag: gorm:"column:depend_strategy;"
	int32 depend_strategy = 7 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// Strategy of schedule, 1 => "loop".
	// @inject_tag: gorm:"column:schedule_strategy;"
	int32 schedule_strategy = 8 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// Limit count of schedule, 0 means no limited.
	// @inject_tag: gorm:"column:schedule_limit;"
	int64 schedule_limit = 9 [ (validator.field) = { int_gt: -1 } ];

	// Express is the standard unix crontab express, used with loop ScheduleStrategy.
	// @inject_tag: gorm:"column:express;"
	string express = 10 [ (validator.field) = { } ];
	
}

// FlowMeta represents a full workflow metadata where are FlowInfo, FlowNodeInfo, FlowEnvInfo, FlowSchInfo
message FlowMeta {
	FlowInfo     flow =  1    [ (validator.field) = { msg_exists: true } ];
	FlowNodeInfo node =  2    [ (validator.field) = { msg_exists: true } ];
	FlowEnvInfo  env = 3      [ (validator.field) = { msg_exists: true } ];
	FlowSchInfo  schedule = 4 [ (validator.field) = { msg_exists: true } ];
}

// The latest release workflow info.
message ReleaseLatestInfo {
	// Workspace ID it belongs to.
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: gorm:"column:id;primarykey;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: gorm:"column:type;"
	int32 type = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Release status, 1 => "active", 2 => "suspended"
	// @inject_tag: gorm:"column:status;"
	int32 status = 6 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow release description.
	// @inject_tag: gorm:"column:desc;"
	string desc = 7 [ (validator.field) = { length_lt: 1025 } ];
	
	// Timestamp of create time.
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow instance info.
message FlowInstInfo {
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;
	int64 version = 2 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 3 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:trigger;"
	int32 trigger = 4 [ (validator.field) = { } ];
	
	// Limit count of retries.
	// @inject_tag: gorm:"column:state;"
	int32 state = 5 [ (validator.field) = { int_gt: 0 } ];

	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 7 [ (validator.field) = { int_gt: 0 } ];
}

// The workflow instance info.
message NodeInstInfo {
	// Workflow instance ID it belongs to
	// @inject_tag: gorm:"column:flow_instance_id;"
	string flow_inst_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID it belongs to.
	// @inject_tag: gorm:"column:flow_id;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// Node ID it belongs to.
	// @inject_tag: gorm:"column:node_id;"
	string node_id = 3 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: gorm:"column:version;"
	int64 version = 4 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: gorm:"column:id;primarykey;"
	string id = 5 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: gorm:"column:trigger;"
	int32 trigger = 6 [ (validator.field) = { } ];
	
	// The running state.
	// @inject_tag: gorm:"column:state;"
	int32 state = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: gorm:"column:created;autoCreateTime;"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace operation audit record.
message AuditInfo {
	// @inject_tag: gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The user id of who execute this operation.
	// @inject_tag: gorm:"column:user_id;"
	string user_id = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// The operation type, 1 => "unknown", 2 => "read", 3 => "write", 4 => "delete"
	// @inject_tag: gorm:"column:op_type;"
	int32 op_type = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// The operation name (action)
	// @inject_tag: gorm:"column:op_name;"
	string op_name = 4 [ (validator.field) = { } ];
	
	// Timestamp of time of when accessed.
	// @inject_tag: gorm:"column:timed;autoCreateTime;"
	int64 timed = 5 [ (validator.field) = { int_gt: 0 } ];
}
