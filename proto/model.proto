syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/model";

package model;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/gosql.proto";


//
// --------- Declares enum ---------
//

enum EngineType {
	_EngineType = 0; // Is useless.
	BuildIn = 1;
	External = 2;
}

enum ScheduleConcurrencyPolicy {
	_ScheduleConcurrencyPolicy = 0; // Is useless.
	Allow = 1;
	Forbid = 2;
	Replace = 3;
}

enum ScheduleRetryPolicy {
	_ScheduleRetryPolicy = 0; // Is useless.
	None = 1;
	Auto = 2;
}

// OpType declares the API operation type.
enum OpType {
	_OpType = 0; // Is useless.
	Unknown = 1;
	Write = 2; // Include Operation: create/update/delete.
	Read = 3; // Include Operation: read.
}

//
// --------- Declares message ---------
//

// EmptyStruct represents no value with a message.
message EmptyStruct {}

// Error transmits customized-error between grpc client and server by status details
message Error {
	// Code is summary information of error.
	string code = 1;
	// Status is http status code.
	int32 status = 2;
	// EnUS is detail information of error with en_us format.
	string en_us = 3;
	// ZhCN is detail information of error with zh_cn format.
	string zh_cn = 4;
}

// The workspace info.
message Workspace {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}
	
	// Workspace ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primaryKey;"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// User id of workspace owner.
	// @inject_tag: json:"owner" gorm:"column:owner;"
	string owner = 2 [ (validator.field) = { length_lt: 65 } ];
	
	// Workspace Name, unique within a region.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workspace Description.
	// @inject_tag: json:"desc" gorm:"column:desc;"
	string desc = 4 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workspace status, 1 => "enabled", 2 => "disabled".
	// @inject_tag: json:"status" gorm:"column:status;"
	Status status = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// The stream workflow info
message StreamFlow {
	enum Type {
		_ = 0;
		SQL = 1;
		JAR = 2;
		Operator = 3;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The workflow version id, only used for Published workflows.
	// Only used in published workflow.
	// @inject_tag: json:"version" gorm:"column:version;primarykey;"
	int64 version = 3 [ (validator.field) = { } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow Description.
	// @inject_tag: json:"desc" gorm:"column:desc;"
	string desc = 5 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: json:"type" gorm:"column:type;"
	Type type = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 7 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 8 [ (validator.field) = { int_gt: 0 } ];
}

// StreamFlowNode represents a workflow environmental parameters info.
// TODO: Defines the struct of node.
//message StreamFlowNode {
//}

// HBaseConfig
message HBaseConfig {
	message Host {
		// @inject_tag: json:"domain" default:"" binding:"email"
		string domain = 1 [ (validator.field) = { } ];
		
		// @inject_tag: json:"ip_address" default:"" binding:"ipv4"
		string ip_address = 2 [ (validator.field) = { } ];
	}
	// The host lists of HBase.
	// @inject_tag: json:"hosts" default:"" binding:"-"
	repeated Host hosts = 1 [ (validator.field) = { } ];
}

// S3Config
message S3Config {
	// S3 endpoints, eg: "http://s3.gd2.qingstor.com".
	// @inject_tag: json:"endpoint" default:"" binding:"url"
	string endpoint = 1 [ (validator.field) = { } ];
	
	// User's access key.
	// @inject_tag: json:"access_key" default:"" binding:"-"
	string access_key = 2 [ (validator.field) = { } ];
	
	// User's secret key.
	// @inject_tag: json:"secret_key" default:"" binding:"-"
	string secret_key = 3 [ (validator.field) = { } ];
}

// FlinkConfig
message FlinkConfig {
	// Flink parallelism. Is required, Min 1, Max ?
	// @inject_tag: json:"parallelism" default:"" binding:"gte=1"
	uint32 parallelism = 1 [ (validator.field) = { int_gt: 0 } ];
	
	// Config of s3. Not required.
	// @inject_tag: json:"s3" default:"" binding:"-"
	S3Config s3 = 2 [ (validator.field) = { int_gt: 0 } ];
}

// StreamFlowEnv represents a workflow environmental parameters info.
// Not use with gorm.
message StreamFlowEnv {
	option (gosql.serialize) = { json: {} };
	
	// The engine type. 1 => "BuildIn" 2 => "External". Is Required.
	// Notice: Only support 1 on present.
	// @inject_tag: json:"engine_type" default:"" binding:"gte=1,lte=1"
	EngineType engine_type = 1 [ (validator.field) = { int_gt: 0, int_lt: 2 } ];
	
	// The engine id. Is required if engine_type == 2.
	// @inject_tag: json:"engine_id" default:"" binding:"required_if=engine_type 2"
	string engine_id = 2 [ (validator.field) = { } ];
	
	// Flink JobManager.  1CU = 1C + 2GB. Is required, Min 1, Max ?
	// @inject_tag: json:"job_cu" default:"" binding:"gte=1"
	uint32 job_cu = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Flink TaskManager. 1CU = 1C + 2GB. Is required, Min 1, Max ?
	// @inject_tag: json:"task_cu" default:"" binding:"gte=1"
	uint32 task_cu = 4 [ (validator.field) = { int_gt: 0 } ];
	
	// Flink task number for TaskManager. Is required, Min 1, Max ?
	// @inject_tag: json:"task_num" default:"" binding:"gte=1"
	uint32 task_num = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Config of HBase. Not required.
	// @inject_tag: json:"hbase" default:"" binding:"-"
	HBaseConfig hbase = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// The config for flink. Is required
	// @inject_tag: json:"flink" default:"" binding:"required"
	FlinkConfig flink = 7 [ (validator.field) = { msg_exists: true } ];
}

// StreamFlowSchedule represents a workflow schedule info.
message StreamFlowSchedule {
	option (gosql.serialize) = { json: {} };
	
	// Timestamp of start time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	// @inject_tag: json:"started" default:"0" binding:"gte=0"
	int64 started = 1 [ (validator.field) = { int_gt: -1  } ];
	
	// Timestamp of end time of the validity period, unit in seconds.
	// Not required, default 0, means no limit.
	// @inject_tag: json:"ended" default:"0" binding:"gte=0"
	int64 ended = 2 [ (validator.field) = { int_gt: -1 } ];
	
	// Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace"
	// - allow: Multiple task instances are allowed at the same time.
	// - forbid: No new instances will be created, and this schedule cycle will be skipped,
	// - replace: Force stop the old running instances and create new.
	// Is required.
	// @inject_tag: json:"concurrency_policy" default:"" binding:"gte=1,lte=3"
	ScheduleConcurrencyPolicy concurrency_policy = 3 [ (validator.field) = { int_gt: 0, int_lt: 4 } ];
	
	// Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
	// Is required.
	// @inject_tag: json:"retry_policy" default:"" binding:"gte=1,lte=2"
	ScheduleRetryPolicy retry_policy = 4 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];
	
	// FIXME: test binding.
	// Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
	// @inject_tag: json:"retry_limit" default:"" binding:"required_with=retry_policy=2,gte=1,lte=99"
	int32 retry_limit = 5 [ (validator.field) = { int_gt: -1, int_lt: 100 } ];
	
	// Retry interval,  Is required with retry_policy = 2, Min 1, Max 30.
	// @inject_tag: json:"retry_interval" default:"" binding:"required_with=retry_policy=2,gte=1,lte=30"
	int32 retry_interval = 6 [ (validator.field) = { int_gt: -1, int_lt: 31 } ];
	
	// Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 4320min.
	// @inject_tag: json:"timeout" default:"0" binding:"gte=0"
	int32 timeout = 7 [ (validator.field) = { int_gt: -1, int_lt: 100 } ];
	
	// Crontab Express. Is required.
	// FIXME: check binding.
	// @inject_tag: json:"express" default:"" binding:"gte=5,lte=128"
	string express = 8 [ (validator.field) = { msg_exists: true } ];
}

// StreamFlowProperty represents property of workflow.
message StreamFlowProperty {
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: json:"version" gorm:"column:version;primarykey"
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// @inject_tag: json:"nodes" gorm:"column:nodes;type:json"
	string nodes = 4 [ (validator.field) = { } ];
	
	// @inject_tag: json:"env" gorm:"column:env;type:json"
	StreamFlowEnv env = 5 [ (validator.field) = { } ];
	
	// @inject_tag: json:"schedule" gorm:"column:schedule;type:json"
	StreamFlowSchedule schedule = 6 [ (validator.field) = { } ];
}

// The release stream workflow info.
message StreamFlowRelease {
	enum Status {
		_ = 0;
		Active = 1;
		Suspended = 2;
	}
	
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// Workflow ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: json:"version" gorm:"column:version;"
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow Name, Unique within a workspace.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 4 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	
	// Workflow type. 1 => "StreamSQL" 2 => "StreamJAR" 3 => "StreamOperator"
	// @inject_tag: json:"type" gorm:"column:type;"
	StreamFlow.Type type = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Release status, 1 => "active", 2 => "suspended"
	// @inject_tag: json:"status" gorm:"column:status;"
	Status status = 6 [ (validator.field) = { length_lt: 1025 } ];
	
	// Workflow release description.
	// @inject_tag: json:"desc" gorm:"column:desc;"
	string desc = 7 [ (validator.field) = { length_lt: 1025 } ];
	
	// Timestamp of create time.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 8 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time.
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 9 [ (validator.field) = { int_gt: 0 } ];
}

// The instance info of stream workflow.
message StreamFlowInst {
	enum State {
		_ = 0;
		Pending = 1;
		Running = 2;
		Retrying = 3;
		Suspended = 4;
		Terminated = 5;
		Timeout = 6;
		Succeed = 7;
		Failed = 8;
	}
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Workflow ID it belongs to.
	// @inject_tag: json:"flow_id" gorm:"column:flow_id;"
	string flow_id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The release version.
	// @inject_tag: json:"version" gorm:"column:version;
	int64 version = 3 [ (validator.field) = { int_gt: 0 } ];
	
	// Workflow instance ID, unique.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 4 [ (validator.field) = { length_eq: 20 } ];
	
	// The instance state.
	// @inject_tag: json:"state" gorm:"column:state;"
	State state = 5 [ (validator.field) = { int_gt: 0 } ];

	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 7 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace operation audit log record.
message OpAudit {
	enum State {
		__ = 0;
		Success = 1;
		Failed = 2;
	}
	
	// The user id of who execute this operation.
	// @inject_tag: json:"user_id" gorm:"column:user_id;primaryKey;"
	string user_id = 1 [ (validator.field) = { length_lt: 65 } ];
	
	// @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
	string space_id = 2 [ (validator.field) = {} ];
	
	// -- The type of operation, 2 => "Write",  3 => "Read".
	// @inject_tag: json:"op_type" gorm:"column:op_type;"
	OpType op_type = 3 [ (validator.field) = { int_gt: 0 } ];
	
	//	-- The operation of user behavior.
	// @inject_tag: json:"op_name" gorm:"column:op_name;"
	string op_name = 4 [ (validator.field) = { length_gt: 0} ];
	
	// -- The result of operation, 1 => "Success", 2 => "Failed".
	// @inject_tag: json:"state" gorm:"column:state;"
	State state = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of time of when accessed.
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 6 [ (validator.field) = { int_gt: 0 } ];
}

// The Role info.
message Role {
	enum Type {
		_ = 0;
		System = 1;
		Custom = 2;
	}

	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];
	
	// The name of role. unique in a workspace.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_lt: 128 } ];

	// @inject_tag: json:"type" gorm:"column:type;" 1 => "System" 2 => "Custom"
	Type type = 4 [ (validator.field) = { int_gt: 0 } ];
}

// The workspace member info.
message Member {
	// @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	
	// The user id in account-server.
	// @inject_tag: json:"user_id" gorm:"column:user_id;primaryKey;"
	string user_id = 3 [ (validator.field) = { length_lt: 65 } ];
	
	// The list of role id that separated by commas. eg: 'rs-1001,rs-1002'
	// @inject_tag: json:"role_ids" gorm:"column:role_ids;"
	string role_ids = 4 [ (validator.field) = { length_lt: 256 } ];
	
	// @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
	int64 created = 5 [ (validator.field) = { int_gt: 0 } ];
	
	// Timestamp of update time
	// @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
	int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}

// The monitor rule info
message MonitorRule {
	enum Status {
		_ = 0;
		Enabled = 1;
		Disabled = 2;
	}
	// Workspace ID it belongs to.
	// @inject_tag: json:"space_id" gorm:"column:space_id;"
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];

	// Rule ID, unique within a region.
	// @inject_tag: json:"id" gorm:"column:id;primarykey;"
	string id = 2 [ (validator.field) = { length_eq: 20 } ];

	// Rule Name.
	// @inject_tag: json:"name" gorm:"column:name;"
	string name = 3 [ (validator.field) = { length_gt: 1, length_lt: 129 } ];

	// Rule status, 1 => "enabled", 2 => "disabled".
	// @inject_tag: json:"status" gorm:"column:status;"
	Status status = 4 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// The object unit, 1 => "workspace" 2 => "workflow'
	// @inject_tag: json:"unit" gorm:"column:unit;"
	int32 unit = 5 [ (validator.field) = { int_gt: 0, int_lt: 3 } ];

	// The object text.
	// @inject_tag: json:"text" gorm:"column:text;"
	string text = 6 [ (validator.field) = { length_gt: 1, length_lt: 1025 } ];

	// The trigger conditions. 3 => "retrying" 6 => "timeout"  7 => "succeed", 8 => "failed",
	// @inject_tag: json:"trigger" gorm:"column:trigger;"
	int32 trigger = 7 [ (validator.field) = { int_gt: 0} ];

	// The alarm times. 1 ~ 99
	// @inject_tag: json:"alarm_times" gorm:"column:alarm_times;"
	int32 alarm_times = 8 [ (validator.field) = { int_gt: 0, int_lt: 100 } ];

	// The alarm interval. 1 ~ 30
	// @inject_tag: json:"alarm_interval" gorm:"column:alarm_interval;"
	int32 alarm_interval = 9 [ (validator.field) = { int_gt: 0, int_lt: 31 } ];

	// The alarm type. "sms, email"
	// @inject_tag: json:"alarm_type" gorm:"column:alarm_type;"
	string alarm_type = 10 [ (validator.field) = { length_gt: 1, length_lt: 33 } ];

	// The free time. "00:01,03:00".
	// @inject_tag: json:"free_time" gorm:"column:free_time;"
	string free_time = 11 [ (validator.field) = { length_gt: 1, length_lt: 17 } ];

	// The alarm receiver. "usr-111111,usr-22222".
	// @inject_tag: json:"receiver" gorm:"column:receiver;"
	string receiver = 12 [ (validator.field) = { length_gt: 1, length_lt: 257 } ];
}

// The message in inst queue..
message QueueMessage {
	// The request id of beginning.
	string trace_id = 1 [ (validator.field) = { } ];
	
	// The property of stream workflow.
	StreamFlowProperty property = 2  [ (validator.field) = { } ];
	
	// The operation that you will execute.
	// 1 => "run"  2 => "retry" 3 => "terminate" 4 => "delete"
	int32 operation = 3 [ (validator.field) = { } ];
	
	// The number of times the instance task was executed.
	int32 times  = 4 [ (validator.field) = { } ];
	
	// The start execution time of the task instance.
	int64 started  = 5 [ (validator.field) = { } ];
}

message InstanceStatusStat {
  // instance status
  int32 state = 1 [ (validator.field) = { int_gt: -1 } ];
  // instance count with the status
  int64 count = 2 [ (validator.field) = { int_gt: -1 } ];
}

message InstanceRuntimeRankInfo {
  // instance id
  string id = 1 [ (validator.field) = { } ];
  // flow_id
  string flow_id = 2 [ (validator.field) = { } ];
  // running time
  int64 running_time = 3 [ (validator.field) = { int_gt: -1 } ];
  // version
  string version = 4 [ (validator.field) = { } ];
}

message InstanceErrorRankInfo {
  // flow_id
  string flow_id = 1 [ (validator.field) = { } ];
  // version
  string version = 2 [ (validator.field) = { } ];
  // running time
  int64 error_count = 3 [ (validator.field) = { int_gt: -1 } ];
}

message DispatchTaskCountInfo {
  // flow_count
  int32 flow_count = 1 [ (validator.field) = { int_gt: -1 } ];
  // instance count
  int32 instance_count = 2 [ (validator.field) = { int_gt: -1 } ];
  // updated time
  int64 updated = 6 [ (validator.field) = { int_gt: 0 } ];
}

message InstanceTaskExecStat {
  // hour
  int32 hour = 1 [ (validator.field) = { int_gt: -1, int_lt: 25 } ];
  // success count
  int64 instance_count = 2 [ (validator.field) = { int_gt: -1 } ];
}

// Source Info
message SourceInfo {
	// Source ID, unique within a region.
	// @inject_tag: json:"sourceid" gorm:"column:sourceid;primaryKey;"
    string SourceID  = 1 [ (validator.field) = { length_lt: 21 } ];

	// Space ID, workspace ID.
	// @inject_tag: json:"spaceid" gorm:"column:spaceid;"
    string SpaceID  = 2 [ (validator.field) = { length_eq: 20 } ];

	// Source Type, one of MySQL/PostgreSQL/Kafka/S3/ClickHouse/Hbase/Ftp/HDFS
	// @inject_tag: json:"sourcetype" gorm:"column:sourcetype;"
    string SourceType = 3  [ (validator.field) = { length_gt: 0, length_lt: 21 } ];

	// Source Name, unique within a space.
	// @inject_tag: json:"name" gorm:"column:name;"
    string Name = 4   [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// Comment, describe this source.
	// @inject_tag: json:"comment" gorm:"column:comment;"
    string Comment = 5    [ (validator.field) = {  length_lt: 257 } ];

	// Url, this source connection info.
	// @inject_tag: json:"url" gorm:"column:url;"
    SourceUrl Url = 6    [ (validator.field) = { length_gt: 0, length_lt: 8001 } ];

	// State, one of enable/disable.
	// @inject_tag: json:"state" gorm:"column:state;"
    string State = 7 [ (validator.field) = { length_lt: 17 } ];

	// Create Time, this Source create time.
	// @inject_tag: json:"createtime" gorm:"column:createtime;"
    string CreateTime = 8   [ (validator.field) = { length_lt: 65 } ];

	// Update Time, this Source last update time.
	// @inject_tag: json:"updatetime" gorm:"column:updatetime;"
    string UpdateTime = 9  [ (validator.field) = { length_lt: 65 } ];
}

// Table Info
message TableInfo {
	// Table ID, unique within a region.
	// @inject_tag: json:"tableid" gorm:"column:tableid;primaryKey;"
    string TableID  = 1 [ (validator.field) = { length_lt: 21 } ];

	// Source ID
	// @inject_tag: json:"sourceid" gorm:"column:sourceid;"
    string SourceID  = 2 [ (validator.field) = { length_eq: 20 } ];

	// Space ID, workspace ID.
	// @inject_tag: json:"spaceid" gorm:"column:spaceid;"
    string SpaceID  = 3 [ (validator.field) = { length_eq: 20 } ];

	// Source Name, unique within a space.
	// @inject_tag: json:"name" gorm:"column:name;"
    string Name = 4   [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// Comment, describe this source.
	// @inject_tag: json:"comment" gorm:"column:comment;"
    string Comment = 5    [ (validator.field) = {  length_lt: 257 } ];

	// Url, this source connection info.
	// @inject_tag: json:"url" gorm:"column:url;"
    TableUrl Url = 6    [ (validator.field) = { length_gt: 0, length_lt: 8001 } ];

	// Create Time, this Source create time.
	// @inject_tag: json:"createtime" gorm:"column:createtime;"
    string CreateTime = 7   [ (validator.field) = { length_lt: 65 } ];

	// Update Time, this Source last update time.
	// @inject_tag: json:"updatetime" gorm:"column:updatetime;"
    string UpdateTime = 8  [ (validator.field) = { length_lt: 65 } ];

	// Direction, one of source/destination/dimension
	// @inject_tag: json:"direction" gorm:"column:direction;"
    string Direction = 9 [ (validator.field) = { length_lt: 17 } ];
}

// SqlColumnType used as request parameters for RPC and HTTP(based on Body)
message SqlColumnType {
	// The column name
	// @inject_tag: json:"column" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Column = 1 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The column type
	// @inject_tag: json:"type" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Type = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The column comment
	// @inject_tag: json:"comment" default:"" binding:"gte=0,lte=256" required:"false" minLength:"1" maxLength:"256"
	string Comment = 3 [ (validator.field) = { length_gt: -1, length_lt: 257 } ];

	// if it is primary key column, one of true/false
	// @inject_tag: json:"primarykey" default:"" binding:"gte=1,lte=8" required:"true" minLength:"1" maxLength:"8"
	string PrimaryKey = 4 [ (validator.field) = { length_gt: 0, length_lt: 9 } ];

	// the column type length
	// @inject_tag: json:"length" default:"" binding:"gte=0,lte=10" required:"false" minLength:"0" maxLength:"10"
	string Length = 5 [ (validator.field) = { length_gt: -1, length_lt: 11 } ];
}

// ConnectorOption used as request parameters for RPC and HTTP(based on Body)
message ConnectorOption {
	// The config name.
	// @inject_tag: json:"name" default:"" binding:"gte=1,lte=256" required:"true" minLength:"1" maxLength:"256"
	string Name = 1 [ (validator.field) = { length_gt: 0, length_lt: 257 } ];

	// The config value.
	// @inject_tag: json:"value" default:"" binding:"gte=1,lte=4096" required:"true" minLength:"1" maxLength:"4096"
	string Value = 2 [ (validator.field) = { length_gt: 0, length_lt: 4097 } ];
}

// MySQLUrl used as request parameters for RPC and HTTP(based on Body)
message MySQLUrl {
	// The username
	// @inject_tag: json:"user" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string User = 1 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The password
	// @inject_tag: json:"password" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Password = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The host
	// @inject_tag: json:"host" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Host = 3 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The database
	// @inject_tag: json:"database" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Database = 4 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The port
	// @inject_tag: json:"port" default:"" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"
	int32 Port = 5 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];
}

// PostgreSQLUrl used as request parameters for RPC and HTTP(based on Body)
message PostgreSQLUrl {
	// The username
	// @inject_tag: json:"user" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string User = 1 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The password
	// @inject_tag: json:"password" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Password = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The host
	// @inject_tag: json:"host" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Host = 3 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The database
	// @inject_tag: json:"database" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Database = 4 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The port
	// @inject_tag: json:"port" default:"" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"
	int32 Port = 5 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];
}

// ClickHouseUrl used as request parameters for RPC and HTTP(based on Body)
message ClickHouseUrl {
	// The username
	// @inject_tag: json:"user" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string User = 1 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The password
	// @inject_tag: json:"password" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Password = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The host
	// @inject_tag: json:"host" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Host = 3 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The database
	// @inject_tag: json:"database" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Database = 4 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The port
	// @inject_tag: json:"port" default:"" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"
	int32 Port = 5 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];
}

// KafkaUrl used as request parameters for RPC and HTTP(based on Body)
message KafkaUrl {
	// The kafak brokers.
	// @inject_tag: json:"kafkabrokers" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string KafkaBrokers = 1 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];
}

// S3Url used as request parameters for RPC and HTTP(based on Body)
message S3Url {
	// The s3 AccessKey
	// @inject_tag: json:"accesskey" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string AccessKey = 1 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// The s3 SecretKey
	// @inject_tag: json:"secretkey" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string SecretKey = 2 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// The s3 EndPoint
	// @inject_tag: json:"endpoint" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string EndPoint = 3 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];
}

// HbaseUrl used as request parameters for RPC and HTTP(based on Body)
message HbaseUrl {
	// The hbase Zookeeper
	// @inject_tag: json:"zookeeper" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string Zookeeper = 1 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// The hbase Zookeeper Node
	// @inject_tag: json:"znode" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string Znode = 2 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// The hbase Hosts config
	// @inject_tag: json:"hosts" default:""
	HBaseConfig Hosts = 3 [ (validator.field) = { } ];
}

// FtpUrl used as request parameters for RPC and HTTP(based on Body)
message FtpUrl {
	// The host
	// @inject_tag: json:"host" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Host = 1 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The port
	// @inject_tag: json:"port" default:"" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"
	int32 Port = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];
}

// FtpUrl used as request parameters for RPC and HTTP(based on Body)
message HDFSUrl {
	// The host
	// @inject_tag: json:"host" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Host = 1 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// The port
	// @inject_tag: json:"port" default:"" binding:"gt=0" required:"true" mininum:"1" maximum:"65536"
	int32 Port = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];
}

// SourceUrl used as request parameters for RPC and HTTP(based on Body)
message SourceUrl {
	oneof Source {
		// MySQL Source Connection Info.
		// @inject_tag: json:"mysql"
		MySQLUrl MySQL = 1;

		// PostgreSQL Source Connection Info.
		// @inject_tag: json:"postgresql"
		PostgreSQLUrl PostgreSQL = 2;

		// ClickHouse Source Connection Info.
		// @inject_tag: json:"clickhouse"
		ClickHouseUrl ClickHouse = 3;

		// Kafka Source Connection Info.
		// @inject_tag: json:"kafka"
		KafkaUrl Kafka = 4;

		// S3 Source Connection Info.
		// @inject_tag: json:"s3"
		S3Url S3 = 5;

		// Hbase Source Connection Info.
		// @inject_tag: json:"hbase"
		HbaseUrl Hbase = 6;

		// Ftp Source Connection Info.
		// @inject_tag: json:"ftp"
		FtpUrl Ftp = 7;

		// HDFS Source Connection Info.
		// @inject_tag: json:"hdfs"
		HDFSUrl HDFS = 8;
	}
}

// MySQLTableUrl used as request parameters for RPC and HTTP(based on Body)
message MySQLTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the table name in origin upstream node.
	// @inject_tag: json:"mappingname" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
	string MappingName = 2 [ (validator.field) = { length_gt: -1, length_lt: 65 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 3 [ (validator.field) = { } ];
}

// PostgreSQLTableUrl used as request parameters for RPC and HTTP(based on Body)
message PostgreSQLTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the table name in origin upstream node.
	// @inject_tag: json:"mappingname" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
	string MappingName = 2 [ (validator.field) = { length_gt: -1, length_lt: 65 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 3 [ (validator.field) = { } ];
}

// ClickHouseTableUrl used as request parameters for RPC and HTTP(based on Body)
message ClickHouseTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the table name in origin upstream node.
	// @inject_tag: json:"mappingname" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
	string MappingName = 2 [ (validator.field) = { length_gt: -1, length_lt: 65 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 3 [ (validator.field) = { } ];
}

// HbaseTableUrl used as request parameters for RPC and HTTP(based on Body)
message HbaseTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the table name in origin upstream node.
	// @inject_tag: json:"mappingname" default:"" binding:"gte=0,lte=64" required:"false" minLength:"0" maxLength:"64"
	string MappingName = 2 [ (validator.field) = { length_gt: -1, length_lt: 65 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 3 [ (validator.field) = { } ];
}


// HDFSTableUrl used as request parameters for RPC and HTTP(based on Body)
message HDFSTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	// @inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Format = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// the data path
	// @inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string Path = 3 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 4 [ (validator.field) = { } ];
}

// S3TableUrl used as request parameters for RPC and HTTP(based on Body)
message S3TableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	// @inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Format = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// the data path
	// @inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string Path = 3 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 4 [ (validator.field) = { } ];
}

// FtpTableUrl used as request parameters for RPC and HTTP(based on Body)
message FtpTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	// @inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Format = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// the data path
	// @inject_tag: json:"path" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string Path = 3 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 4 [ (validator.field) = { } ];
}

// KafkaTableUrl used as request parameters for RPC and HTTP(based on Body)
message KafkaTableUrl {
	// columns info.
	// @inject_tag: json:"sqlcolumn"
	repeated SqlColumnType SqlColumn = 1 [ (validator.field) = { } ];

	// the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
	// @inject_tag: json:"format" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
	string Format = 2 [ (validator.field) = { length_gt: 0, length_lt: 65 } ];

	// the data path
	// @inject_tag: json:"topic" default:"" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string Topic = 3 [ (validator.field) = { length_gt: 0, length_lt: 1025 } ];

	// connection config values.
	// @inject_tag: json:"connectoroptions"
	repeated ConnectorOption ConnectorOptions = 4 [ (validator.field) = { } ];
}

message TableUrl {
	oneof Table {
		// MySQL Table Info.
		// @inject_tag: json:"mysql"
		MySQLTableUrl MySQL = 1;

		// PostgreSQL Table Info.
		// @inject_tag: json:"postgresql"
		PostgreSQLTableUrl PostgreSQL = 2;

		// ClickHouse Table Info.
		// @inject_tag: json:"clickhouse"
		ClickHouseTableUrl ClickHouse = 3;

		// Hbase Table Info.
		// @inject_tag: json:"hbase"
		HbaseTableUrl Hbase = 4;

		// Kafka Table Info.
		// @inject_tag: json:"kafka"
		KafkaTableUrl Kafka = 5;

		// S3 Table Info.
		// @inject_tag: json:"s3"
		S3TableUrl S3 = 6;

		// Ftp Table Info.
		// @inject_tag: json:"ftp"
		FtpTableUrl Ftp = 7;

		// HDFS Table Info.
		// @inject_tag: json:"hdfs"
		HDFSTableUrl HDFS = 8;
	}
}
