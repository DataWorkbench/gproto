syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/shpb";

package shpb;

import "model.proto";
import "request.proto";
import "response.proto";

// Scheduler Service
service Scheduler {
	// Interface for stream workflow task.
	//
	// DeleteAllFlows delete all workflow instance that specified workspace id.
	// And offline all workflow tasks.
	rpc DeleteAllFlows(request.DeleteAllFlows) returns (model.EmptyStruct) {}
	
	// Execute execute immediately a workflow task. It trigger by user on console.
	rpc ExecuteStreamFlow(request.ExecuteStreamFlow) returns (model.EmptyStruct) {}
	
	// DeleteStreamFlow delete all stream workflow instance by specified workflow id.
	// And offline workflow task from schedule system.
	rpc DeleteStreamFlow(request.DeleteStreamFlow) returns(model.EmptyStruct) {}
	
	// Submit submit a workflow task to scheduler system, It will
	// be cover if old job exists.
	rpc SubmitStreamFlow(request.SubmitStreamFlow) returns (model.EmptyStruct) {}
	
	// Remove remove specific workflow task from scheduler system.
	rpc OfflineStreamFlow(request.OfflineStreamFlow) returns (model.EmptyStruct) {}
	
	// Interface for stream workflow cycle instance.
	//
	rpc ListStreamCycleInst(request.ListStreamInst)           returns (response.ListStreamInst) {}
	rpc SuspendStreamCycleInst(request.SuspendStreamInst)     returns (model.EmptyStruct)       {}
	rpc ResumeStreamCycleInst(request.ResumeStreamInst)       returns (model.EmptyStruct)       {}
	rpc TerminateStreamCycleInst(request.TerminateStreamInst) returns (model.EmptyStruct)       {}
	
	// Interface for stream workflow test instance.
	//
	rpc ListStreamTestInst(request.ListStreamInst)           returns (response.ListStreamInst) {}
	rpc SuspendStreamTestInst(request.SuspendStreamInst)     returns (model.EmptyStruct)       {}
	rpc ResumeStreamTestInst(request.ResumeStreamInst)       returns (model.EmptyStruct)       {}
	rpc TerminateStreamTestInst(request.TerminateStreamInst) returns (model.EmptyStruct)       {}
	
	//
	rpc ListMonitorRules(request.ListMonitorRules)       returns (response.ListMonitorRules)    {}
	rpc CreateMonitorRule(request.CreateMonitorRule)     returns (model.EmptyStruct)            {}
	rpc DeleteMonitorRule(request.DeleteMonitorRule)     returns (model.EmptyStruct)            {}
	rpc UpdateMonitorRule(request.UpdateMonitorRule)     returns (model.EmptyStruct)            {}
	rpc DescribeMonitorRule(request.DescribeMonitorRule) returns (response.DescribeMonitorRule) {}
	rpc EnableMonitorRule(request.EnableMonitorRule)     returns (model.EmptyStruct)            {}
	rpc DisableMonitorRule(request.DisableMonitorRule)   returns (model.EmptyStruct)            {}
}
