syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/plpb";

package plpb;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "model.proto";

service Publisher {
	// Release to publish the specified workflow to schedule system with a new version.
	rpc Release(ReleaseRequest) returns (model.EmptyStruct) {}
	
	// Suspend to suspend the specified workflow in schedule system.
	rpc Suspend(SuspendRequest) returns (model.EmptyStruct) {}
	
	// Resume to resume the suspended workflow in schedule system.
	rpc Resume(ResumeRequest) returns (model.EmptyStruct) {}
	
	// Lists for gets a list of all published workflow in the workspace.
	rpc ListReleases(ListReleasesRequest) returns (ListReleasesReply) {}
	
	// ListVersions for gets a list of all versions of the specified workflow.
	rpc ListVersions(ListVersionsRequest) returns (ListVersionsReply) {}
	
	// DescribeVersion for get the info of the workflow of the specified version.
	rpc DescribeVersion(DescribeVersionRequest) returns (DescribeVersionReply) {}
	
	// GetNode for get the node properties of the workflow of the specified version.
	rpc GetNode(GetNodeRequest) returns (GetNodeReply) {}
	
	// GetEnv for get the environmental parameters of the workflow of the specified version.
	rpc GetEnv(GetEnvRequest) returns (GetEnvReply) {}
	
	// GetSchedule for get the schedule properties of the workflow of the specified version.
	rpc GetSchedule(GetScheduleRequest) returns (GetScheduleReply) {}
}

// Request parameters used to ListReleases.
message ListReleasesRequest {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  limit = 3    [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 4   [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to ListReleases.
message ListReleasesReply {
	repeated model.ReleaseLatestInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to Release
message ReleaseRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	string desc = 2 [ (validator.field) = { length_eq: 1025 } ];
	int32 force_stop = 3 [ (validator.field) = { int_gt: -1, int_lt: 2 } ];
}

// Request parameters used to Suspend.
message SuspendRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32 force_stop = 3 [ (validator.field) = { int_gt: -1, int_lt: 2 } ];
}

// Request parameters used to Resume.
message ResumeRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to ListVersions
message ListVersionsRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  limit = 2   [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 3  [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to ListVersions
message ListVersionsReply {
	repeated model.FlowInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to DescribeVersion
message DescribeVersionRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to DescribeVersion
message DescribeVersionReply {
	model.FlowInfo info = 1;
}

// Request parameters used to GetNode
message GetNodeRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to GetNode
message GetNodeReply {
	model.FlowNodeInfo info = 1;
}

// Request parameters used to GetEnv
message GetEnvRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to GetEnv
message GetEnvReply {
	model.FlowEnvInfo info = 1;
}

// Request parameters used to GetSchedule
message GetScheduleRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to GetSchedule
message GetScheduleReply {
	model.FlowSchInfo info = 1;
}
