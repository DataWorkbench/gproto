syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/wfpb";

package wfpb;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "model.proto";

// Workflow Service
service Workflow {
	// Operation of workflow.
	rpc Lists(ListsRequest)       returns (ListsReply)        {}
	rpc Create(CreateRequest)     returns (model.EmptyStruct) {}
	rpc Delete(DeleteRequest)     returns (model.EmptyStruct) {}
	rpc Update(UpdateRequest)     returns (model.EmptyStruct) {}
	rpc Describe(DescribeRequest) returns (DescribeReply)     {}
	rpc Execute(ExecuteRequest)   returns (model.EmptyStruct) {}
	
	// Operation of schedule.
	rpc UpsertSchedule(UpsertScheduleRequest)     returns (model.EmptyStruct)     {}
	rpc DescribeSchedule(DescribeScheduleRequest) returns (DescribeScheduleReply) {}
	
	// Operation of node.
	rpc ListNodes(ListNodesRequest)       returns (ListNodesReply) {}
	rpc CreateNode(CreateNodeRequest)     returns (model.EmptyStruct) {}
	rpc DeleteNode(DeleteNodeRequest)     returns (model.EmptyStruct) {}
	rpc UpdateNode(UpdateNodeRequest)     returns (model.EmptyStruct) {}
	rpc DescribeNode(DescribeNodeRequest) returns (DescribeNodeReply) {}
	
	// Operation of release version.
	rpc ListReleases(ListReleasesRequest) returns (ListReleasesReply) {}
	rpc Release(ReleaseRequest)           returns (model.EmptyStruct) {}
	rpc Suspend(SuspendRequest)           returns (model.EmptyStruct) {}
	rpc Resume(ResumeRequest)             returns (model.EmptyStruct) {}
	
	rpc ListFlowVersions(ListFlowVersionsRequest)         returns (ListFlowVersionsReply)     {}
	rpc ListScheduleVersions(ListScheduleVersionsRequest) returns (ListScheduleVersionsReply) {}
	rpc ListVersionNodes(ListVersionNodesRequest)         returns (ListVersionNodesReply)     {}
	rpc ListNodeVersions(ListNodeVersionsRequest)         returns (ListNodeVersionsReply)     {}
	
	rpc DescribeVersion(DescribeVersionRequest)                 returns (DescribeVersionReply)         {}
	rpc DescribeScheduleVersion(DescribeScheduleVersionRequest) returns (DescribeScheduleVersionReply) {}
	rpc DescribeNodeVersion(DescribeNodeVersionRequest)         returns (DescribeNodeVersionReply)     {}
}

// Operation of workflow.
//
// Request parameters used to ListWorkflow
message ListsRequest {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  limit = 2   [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 3  [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to ListWorkflow
message ListsReply {
	repeated model.FlowInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to CreateWorkflow
message CreateRequest {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	string name = 2    [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	string desc = 3    [ (validator.field) = { length_lt: 1025 } ];
}

// Request parameters used to DeleteWorkflow
message DeleteRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to UpdateWorkflow
message UpdateRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20} ];
	string name = 2    [ (validator.field) = { length_lt: 129 } ];
	string desc = 3    [ (validator.field) = { length_lt: 1025 } ];
}

// Request parameters used to DescribeWorkflow
message DescribeRequest {
	string flow_id = 1 [ (validator.field) = {length_eq: 20} ];
}

// Reply parameters used to DescribeWorkflow
message DescribeReply {
	model.FlowInfo info = 1;
}

// Request parameters used to Execute
message ExecuteRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Operation of schedule.
//
// Request parameters used to UpsertSchedule
message UpsertScheduleRequest {
	string flow_id = 1     [ (validator.field) = { length_eq: 20 } ];
	model.SchCore core = 2 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to DescribeSchedule
message DescribeScheduleRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Reply parameters used to DescribeSchedule
message DescribeScheduleReply {
	model.SchInfo info = 1;
}

// Operation of node.
//
// Request parameters used to ListVersionNodes
message ListNodesRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Reply parameters used to ListVersionNodes
message ListNodesReply {
	repeated model.NodeInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to CreateNode
message CreateNodeRequest {
	string flow_id = 1      [ (validator.field) = { length_eq: 20 } ];
	model.NodeCore core = 2 [ (validator.field) = { msg_exists: true } ];
}

// Request parameters used to DeleteNode
message DeleteNodeRequest {
	string node_id = 2 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to UpdateNode
message UpdateNodeRequest {
	string node_id = 1      [ (validator.field) = { length_eq: 20} ];
	model.NodeCore core = 2 [ (validator.field) = { msg_exists: true } ];
}

// Request parameters used to DescribeNode
message DescribeNodeRequest {
	string node_id = 1 [ (validator.field) = {length_eq: 20} ];
}

// Reply parameters used to DescribeNode
message DescribeNodeReply {
	model.NodeInfo info = 1;
}

// Operation of release.
//
// Request parameters used to ListReleases.
message ListReleasesRequest {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Reply parameters used to ListReleases.
message ListReleasesReply {
	repeated model.FlowReleaseInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to ReleaseWorkflow
message ReleaseRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to SuspendRelease.
message SuspendRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to ResumeRelease.
message ResumeRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to ListScheduleVersions
message ListScheduleVersionsRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  limit = 2  [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 3 [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to ListScheduleVersions
message ListScheduleVersionsReply {
	repeated model.SchVerInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to ListFlowVersions
message ListFlowVersionsRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  limit = 2   [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 3  [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to ListFlowVersions
message ListFlowVersionsReply {
	repeated model.FlowVerInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to ListVersionNodes
message ListVersionNodesRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to ListVersionNodes
message ListVersionNodesReply {
	repeated model.NodeVerInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to ListNodeVersions
message ListNodeVersionsRequest {
	string node_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  limit = 2   [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 3  [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to ListNodeVersions
message ListNodeVersionsReply {
	repeated model.NodeVerInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to DescribeVersion
message DescribeVersionRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to DescribeVersion
message DescribeVersionReply {
	model.FlowVerInfo info = 1;
}

// Request parameters used to DescribeScheduleVersion
message DescribeScheduleVersionRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to DescribeScheduleVersion
message DescribeScheduleVersionReply {
	model.SchVerInfo info = 1;
}

// Request parameters used to DescribeScheduleVersion
message DescribeNodeVersionRequest {
	string node_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int64  version = 2 [ (validator.field) = { int_gt: 0 } ];
}

// Reply parameters used to DescribeScheduleVersion
message DescribeNodeVersionReply {
	model.NodeVerInfo info = 1;
}
