syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/wfpb";

package wfpb;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "model.proto";

// Workflow Service
service Workflow {
	// Lists for get a list of workflow in the workspace.
	rpc Lists(ListsRequest) returns (ListsReply) {}
	
	// Create wor create a new workflow.
	rpc Create(CreateRequest) returns (model.EmptyStruct) {}
	
	// Delete for delete the specified workflow.
	rpc Delete(DeleteRequest) returns (model.EmptyStruct) {}
	
	// Update for update the info for the specified workflow.
	rpc Update(UpdateRequest) returns (model.EmptyStruct) {}
	
	// Describe for get the info of the specified workflow.
	rpc Describe(DescribeRequest) returns (DescribeReply) {}
	
	// SetNodes for set the node properties of the specified workflow.
	rpc SetNode(SetNodeRequest) returns (model.EmptyStruct)  {}
	
	// GetNodes for get the node properties of the specified workflow.
	rpc GetNode(GetNodeRequest) returns (GetNodeReply) {}
	
	// SetEnv for set the environmental parameters of the specified workflow.
	rpc SetEnv(SetEnvRequest) returns (model.EmptyStruct) {}
	
	// GetEnv for get the environmental parameters of the specified workflow.
	rpc GetEnv(GetEnvRequest) returns (GetEnvReply) {}
	
	// SetSchedule for set the schedule properties of the specified workflow.
	rpc SetSchedule(SetScheduleRequest) returns (model.EmptyStruct) {}
	
	// GetSchedule for get the schedule properties of the specified workflow.
	rpc GetSchedule(GetScheduleRequest) returns (GetScheduleReply) {}
}

// Operation of workflow.
//
// Request parameters used to Lists
message ListsRequest {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	int32  type = 2     [ (validator.field) = { int_gt: 0 } ];
	int32  limit = 3    [ (validator.field) = { int_gt: 0, int_lt: 101 } ];
	int32  offset = 4   [ (validator.field) = { int_gt: -1 } ];
}

// Reply parameters used to Lists
message ListsReply {
	repeated model.FlowInfo infos = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to Create
message CreateRequest {
	string space_id = 1 [ (validator.field) = { length_eq: 20 } ];
	string name = 2     [ (validator.field) = { length_gt: 1, length_lt: 129 } ];
	string desc = 3     [ (validator.field) = { length_lt: 1025 } ];
	int32  type = 4     [ (validator.field) = { int_gt: 0 } ];
}

// Request parameters used to Delete
message DeleteRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to Update
message UpdateRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20} ];
	string name = 2    [ (validator.field) = { length_lt: 129 } ];
	string desc = 3    [ (validator.field) = { length_lt: 1025 } ];
}

// Request parameters used to Describe
message DescribeRequest {
	string flow_id = 1 [ (validator.field) = {length_eq: 20} ];
}

// Reply parameters used to Describe
message DescribeReply {
	model.FlowInfo info = 1;
}

// Request parameters used to SetNode.
message SetNodeRequest {
	model.FlowNodeInfo info = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to GetNode
message GetNodeRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Reply parameters used to GetNodes
message GetNodeReply {
	model.FlowNodeInfo info = 1;
}

// Request parameters used to SetSchedule
message SetScheduleRequest {
	model.FlowSchInfo info = 1 [ (validator.field) = { msg_exists: false } ];
}

// Request parameters used to GetSchedule
message GetScheduleRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Request parameters used to GetEnv
message GetEnvRequest {
	string flow_id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// Reply parameters used to GetEnv
message GetEnvReply {
	model.FlowEnvInfo info = 1;
}

// Reply parameters used to GetSchedule
message GetScheduleReply {
	model.FlowSchInfo info = 1;
}

// Request parameters used to SetEnv
message SetEnvRequest {
	model.FlowEnvInfo info = 1 [ (validator.field) = { msg_exists: false } ];
}
