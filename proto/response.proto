syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/response";

package response;

import "github.com/mwitkow/go-proto-validators/validator.proto";

import "model.proto";

// ListWorkspaces used as reply parameters in RPC or response body in HTTP.
message ListWorkspaces {
  // @inject_tag: json:"infos"
  repeated model.Workspace infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// ListAudits used as reply parameters in RPC or response body in HTTP.
message ListAudits {
  // @inject_tag: json:"infos"
  repeated model.Operation infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];
}

// CreateWorkspace used as reply parameters in RPC or response body in HTTP.
message CreateWorkspace {
  // The workspace id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field) = {length_eq: 20}];
}

// DescribeWorkspace used as reply parameters in RPC, And model.Workspace used as response body in HTTP.
message DescribeWorkspace {
  model.Workspace info = 1;
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListMembers {
  // @inject_tag: json:"infos"
  repeated model.Member infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListSystemRoles {
  // @inject_tag: json:"infos"
  repeated model.Role infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// ListStreamJobs used as reply parameters in RPC or response body in HTTP.
message ListStreamJobs {
  // @inject_tag: json:"infos"
  repeated model.StreamJob infos = 1 [(validator.field) = {msg_exists: false}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// CreateStreamJob used as reply parameters in RPC.
message CreateStreamJob {
  // The stream job id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field) = {length_eq: 20}];
}

// DescribeStreamJob used as reply parameters in RPC.
message DescribeStreamJob {
  model.StreamJob info = 1;
}

// GetStreamJobCode used as reply parameters in RPC.
message GetStreamJobCode {
  model.StreamJobCode code = 1;
}

// GetStreamJobCode used as reply parameters in RPC.
message StreamJobCodeSyntax {
  enum Result {
    ResultUnset = 0;
    Correct = 1;
    Incorrect = 2;
  }

  // Result for check syntax of code. 1 => "Correct" 2 => "Incorrect".
  Result result = 1;

  // Message represents the error message when found syntax Incorrect.
  string message = 2;
}

// GetStreamJobArgs used as reply parameters in RPC.
message GetStreamJobArgs {
  model.StreamJobArgs info = 1;
}

// GetStreamJobSchedule used as reply parameters in RPC.
message GetStreamJobSchedule {
  model.StreamJobSchedule info = 1;
}

// ListReleaseStreamJobs used as reply parameters in RPC or response body in HTTP.
message ListReleaseStreamJobs {
  // @inject_tag: json:"infos"
  repeated model.StreamJobRelease infos = 1 [(validator.field) = {msg_exists: false}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// ListStreamJobVersions used as reply parameters in RPC or response body in HTTP.
message ListStreamJobVersions {
  // @inject_tag: json:"infos"
  repeated model.StreamJob infos = 1 [(validator.field) = {msg_exists: false}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];
}

// ListMonitorRules used as reply parameters in RPC or response body in HTTP.
message ListMonitorRules {
  // @inject_tag: json:"infos"
  repeated model.MonitorRule infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// DescribeMonitorRule used as reply parameters in RPC.
message DescribeMonitorRule {
  // @inject_tag: json:"info"
  model.MonitorRule info = 1 [(validator.field) = {msg_exists: true}];
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamTestInst and ListStreamCycleInst
message ListStreamInstances {
  // @inject_tag: json:"infos"
  repeated model.StreamJobInst infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

// DescribeFlinkUIByInstanceId used as a request parameters for RPC and HTTP(based on URL-Query).
message DescribeFlinkUIByInstanceId {
  // @inject_tag: json:"web_ui"
  string web_ui = 1;
}

// DescribeSource used as reply parameters in RPC or response body in HTTP.
message DescribeSource {
  // this source info
  // @inject_tag: json:"info"
  model.DataSource info = 1 [(validator.field) = {}];
}

// ListSource used as reply parameters in RPC or response body in HTTP.
message ListSource {
  // @inject_tag: json:"infos"
  repeated model.DataSource infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 2 [(validator.field) = {}];
}

// SourceKind used as reply parameters in RPC or response body in HTTP.
message SourceKind {
  message Kind {
    // this kind name
    // @inject_tag: json:"name" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string Name = 1 [(validator.field) = {length_gt: 0, length_lt: 65}];
  }
  // @inject_tag: json:"kinds" required:"true" minLength:"0" maxLength:"10485760"
  repeated Kind Kinds = 1 [(validator.field) = {length_gt: -1, length_lt: 10485761}];
}

// JsonStringList used as reply parameters in RPC or response body in HTTP.
message JsonList {
  // @inject_tag: json:"json_list" required:"true" minLength:"0" maxLength:"10485760"
  repeated string json_list = 1 [(validator.field) = {length_gt: -1, length_lt: 10485761}];
}

// TableColumns used as reply parameters in RPC or response body in HTTP.
// FIXME: Move it to datasource.proto ?
message TableColumns {
  message Column {
    // column name
    // @inject_tag: json:"name" default:"" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string name = 1 [(validator.field) = {length_gt: 0, length_lt: 65}];

    // column type
    // @inject_tag: json:"type" gorm:"column:type;" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string type = 2 [(validator.field) = {length_gt:0,  length_lt: 65}];

    // type length
    // @inject_tag: json:"length" gorm:"column:length;" default:"" required:"true" binding:"gte=0,lte=64" minLength:"0" maxLength:"64"
    string length = 3 [(validator.field) = {length_gt:-1,  length_lt: 65}];

    // primary key, one of true/false
    // @inject_tag: json:"is_primary_key" gorm:"column:isprkey;" default:"" binding:"gte=0,lte=8" required:"true" minLength:"0" maxLength:"8"
    string is_primary_key = 4 [(validator.field) = {length_lt: 8}];
  }

  // columns
  // @inject_tag: json:"columns" minLength:"0" maxLength:"100000"
  repeated Column columns = 1 [(validator.field) = {length_lt: 100001}];
}

// DescribeTable used as reply parameters in RPC or response body in HTTP.
message DescribeTable {
  // this source info
  // @inject_tag: json:"info"
  model.TableInfo info = 1 [(validator.field) = {}];
}

message ListTable {
  // this source info
  // @inject_tag: json:"info"
  repeated model.TableInfo infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 2 [(validator.field) = {}];
}

// ListResources used as a request parameters for RPC and HTTP(based on URL-Query)
message ListResources {
  // @inject_tag: json:"infos"
  repeated model.Resource infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64  total = 3 [(validator.field) = {}];
}

// CreateDir used as reply parameters in RPC.
message CreateDir{
  // The workspace id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field) = {length_eq: 20}];
}

// UploadFile used as reply parameters in RPC.
message UploadFile{
  // The workspace id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field) = {length_eq: 20}];
}

// DownloadFile used as a request parameters for RPC and HTTP(based on URL-Query)
message DownloadFile{
  // The File data.
  // @inject_tag: json:"-"
  bytes data = 1;

  // @inject_tag: json:"size"
  int64 size = 2;

  // @inject_tag: json:"name"
  string name = 3;
}

// ListUDF used as reply parameters in RPC or response body in HTTP.
message ListUDF {
  // @inject_tag: json:"infos"
  repeated model.UDFInfo infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 2 [(validator.field) = {}];
}

// DescribeUDF used as reply parameters in RPC or response body in HTTP.
message DescribeUDF {
  // UDF info
  // @inject_tag: json:"infos"
  model.UDFInfo info = 1 [(validator.field) = {}];
}

// JobState
message JobState {
    // job state, model.StreamJobInst_State
	// @inject_tag: json:"state"
    model.StreamJobInst.State State = 1 [(validator.field) = {}];

    // job Message
	// @inject_tag: json:"message"
    string Message = 2 [(validator.field) = {}];
}

// NodeRelations
message NodeRelations {
	// node relations
    // @inject_tag: json:"relations" binding:"gte=1,lte=20001" required:"true" minLength:"1" maxLength:"20001"
	string Relations  = 1 [ (validator.field) = { length_gt: 0, length_lt: 20000 } ];
}

// JobParser
message JobParser {
	// ZeppelinConf
    // @inject_tag: json:"conf" binding:"gte=0,lte=40001" required:"true" minLength:"0" maxLength:"40001"
	string ZeppelinConf = 1 [ (validator.field) = { length_gt: -1, length_lt: 40000 } ];

	// ZeppelinDepends
    // @inject_tag: json:"depends" binding:"gte=0,lte=40001" required:"true" minLength:"0" maxLength:"40001"
	string ZeppelinDepends = 2 [ (validator.field) = { length_gt: -1, length_lt: 40000 } ];

	// ZeppelinScalaUDF
    // @inject_tag: json:"scalaudf" binding:"gte=0,lte=40001" required:"true" minLength:"0" maxLength:"40001"
	string ZeppelinScalaUDF = 3 [ (validator.field) = { length_gt: -1, length_lt: 40000 } ];

	// ZeppelinPythonUDF
    // @inject_tag: json:"pythonudf" binding:"gte=0,lte=40001" required:"true" minLength:"0" maxLength:"40001"
	string ZeppelinPythonUDF = 4 [ (validator.field) = { length_gt: -1, length_lt: 40000 } ];

	// ZeppelinMainRun
    // @inject_tag: json:"mainrun" binding:"gte=0,lte=40001" required:"true" minLength:"0" maxLength:"40001"
	string ZeppelinMainRun = 5 [ (validator.field) = { length_gt: -1, length_lt: 40000 } ];

	// JobResources
    // @inject_tag: json:"resources" binding:"-"
	model.JobResources Resources = 6 [ (validator.field) = { } ];

	// Hbase
    // @inject_tag: json:"hbase" binding:"-"
//	model.HBaseConfig Hbase = 7 [ (validator.field) = { } ];

	// S3
    // @inject_tag: json:"s3" binding:"-"
//	model.S3Config S3 = 8 [ (validator.field) = { } ];

  // Savepoint
  // @inject_tag: json:"savepoint" binding:"-"
  string savepoint = 7 [(validator.field) = { } ];
}

// JobFree
message JobFree {
	// delete jar.
	// @inject_tag: json:"zeppelindeletejar" binding:"gte=0,lte=20001" required:"true" minLength:"0" maxLength:"20001"
	string ZeppelinDeleteJar = 1 [ (validator.field) = {} ];
}

message PTasksStatusStat {
  // @inject_tag: json:"infos"
  repeated model.InstanceStatusStat infos = 1 [ (validator.field) = { } ];
}

message PTasksExecStat {
  // @inject_tag: json:"today"
  repeated model.InstanceTaskExecStat today = 1 [ (validator.field) = { } ];
  // @inject_tag: json:"yesterday"
  repeated model.InstanceTaskExecStat yesterday = 2 [ (validator.field) = { } ];
  // @inject_tag: json:"history"
  repeated model.InstanceTaskExecStat history = 3 [ (validator.field) = { } ];
}

message PTaskRuntimeRanking {
  // @inject_tag: json:"infos"
  repeated model.InstanceRuntimeRankInfo infos = 1 [ (validator.field) = { } ];
  // @inject_tag: json:"total"
  int64 total = 2 [ (validator.field) = { int_gt: -1 } ];
}

message PTaskErrorRanking {
  // @inject_tag: json:"infos"
  repeated model.InstanceErrorRankInfo infos = 1 [ (validator.field) = { } ];
  // @inject_tag: json:"total"
  int64 total = 2 [ (validator.field) = { int_gt: -1 } ];
}

message PTaskDispatchCount {
  // @inject_tag: json:"infos"
  repeated model.DispatchTaskCountInfo infos = 1 [ (validator.field) = { } ];
}

// ZeppelinAddress
message ZeppelinAddress {
	// serveraddress
	// @inject_tag: json:"serveraddress" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
	string ServerAddress = 1 [ (validator.field) = { length_gt: 0, length_lt: 1025} ];
}

message DescribeFlinkClusterAPI {
  string URL = 1;
  string version = 2;
}

message ListAvailableFlinkVersions {
  // Items store the available flink version lists.
  // @inject_tag: json:"items"
  repeated string items = 1;
}

message ListFlinkClusters {
  // @inject_tag: json:"infos"
  repeated model.FlinkCluster infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

message CreateFlinkCluster {
  // The flink cluster id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

message DescribeFlinkCluster {
  model.FlinkCluster info = 1 ;
}

message ListNetworks {
  // @inject_tag: json:"infos"
  repeated model.Network infos = 1 [(validator.field) = {}];

  // @inject_tag: json:"has_more"
  bool has_more = 2 [(validator.field) = {}];

  // @inject_tag: json:"total"
  int64 total = 3 [(validator.field) = {}];
}

message CreateNetwork {
  // The flink cluster id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

message DescribeNetwork {
  model.Network info = 1 ;
}

message ListBuiltInConnectors {
  // Items store the available flink version lists.
  // @inject_tag: json:"items"
  repeated string items = 1;
}
