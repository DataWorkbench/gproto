syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/response";

package response;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "model.proto";

// ListWorkspaces used as reply parameters in RPC or response body in HTTP.
message ListWorkspaces {
	// @inject_tag: json:"infos"
	repeated model.Workspace infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 3 [ (validator.field) = { } ];
}

// ListAudits used as reply parameters in RPC or response body in HTTP.
message ListAudits {
	// @inject_tag: json:"infos"
	repeated model.OpAudit infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
}

// CreateWorkspace used as reply parameters in RPC or response body in HTTP.
message CreateWorkspace {
	// The workspace id that generated by system.
	// @inject_tag: json:"id"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// DescribeWorkspace used as reply parameters in RPC, And model.Workspace used as response body in HTTP.
message DescribeWorkspace {
	model.Workspace info = 1;
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListMembers {
	// @inject_tag: json:"infos"
	repeated model.Member infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 3 [ (validator.field) = { } ];
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListSystemRoles {
	// @inject_tag: json:"infos"
	repeated model.Role infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 3 [ (validator.field) = { } ];
}

// ListStreamFlows used as reply parameters in RPC or response body in HTTP.
message ListStreamFlows {
	// @inject_tag: json:"infos"
	repeated model.StreamFlow infos = 1 [ (validator.field) = { msg_exists: false } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 3 [ (validator.field) = { } ];
}

// CreateStreamFlow used as reply parameters in RPC.
message CreateStreamFlow {
	// The workflow id that generated by system.
	// @inject_tag: json:"id"
	string id = 1 [ (validator.field) = { length_eq: 20 } ];
}

// DescribeStreamFlow used as reply parameters in RPC.
message DescribeStreamFlow {
	model.StreamFlow info = 1;
}

// GetStreamFlowNode used as reply parameters in RPC.
message GetStreamFlowNode {
	string nodes = 1;
}

// GetStreamFlowEnv used as reply parameters in RPC.
message GetStreamFlowEnv {
	model.StreamFlowEnv info = 1;
}

// GetStreamFlowSchedule used as reply parameters in RPC.
message GetStreamFlowSchedule {
	model.StreamFlowSchedule info = 1;
}

// ListReleaseStreamFlows used as reply parameters in RPC or response body in HTTP.
message ListReleaseStreamFlows {
	// @inject_tag: json:"infos"
	repeated model.StreamFlowRelease infos = 1 [ (validator.field) = { msg_exists: false } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 3 [ (validator.field) = { } ];
}

// ListStreamFlowVersions used as reply parameters in RPC or response body in HTTP.
message ListStreamFlowVersions {
	// @inject_tag: json:"infos"
	repeated model.StreamFlow infos = 1 [ (validator.field) = { msg_exists: false } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
}

// ListMonitorRules used as reply parameters in RPC or response body in HTTP.
message ListMonitorRules {
	// @inject_tag: json:"infos"
	repeated model.MonitorRule infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 3 [ (validator.field) = { } ];
}

// DescribeMonitorRule used as reply parameters in RPC.
message DescribeMonitorRule {
	// @inject_tag: json:"info"
	model.MonitorRule info = 1 [ (validator.field) = { msg_exists: true } ];
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamTestInst and ListStreamCycleInst
message ListStreamInsts {
	// @inject_tag: json:"infos"
	repeated model.StreamFlowInst infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"has_more"
	bool has_more = 2 [ (validator.field) = { } ];
}

// DescribeSource used as reply parameters in RPC or response body in HTTP.
message DescribeSource {
	// this source info
	// @inject_tag: json:"info"
	model.SourceInfo info = 1 [ (validator.field) = { } ];

    // Connected statue, one of successful/failed.
    // @inject_tag: json:"connected"  binding:"gte=1,lte=16" required:"true" minLength:"1" maxLength:"16"
    string Connected = 2 [ (validator.field) = { length_gt: 0, length_lt:17 } ];
}

// ListSource used as reply parameters in RPC or response body in HTTP.
message ListSource {
	// @inject_tag: json:"infos"
	repeated DescribeSource infos = 1 [ (validator.field) = { } ];
	
	// @inject_tag: json:"total"
	int64 total = 2 [ (validator.field) = { } ];
}

// SourceKind used as reply parameters in RPC or response body in HTTP.
message SourceKind {
	message Kind {
        // this kind name
        // @inject_tag: json:"name" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
		string Name = 1 [ (validator.field) = {length_gt: 1, length_lt: 65 } ];

        // this source image
        // @inject_tag: json:"image" default:"" binding:"gte=1,lte=10485760" required:"true" minLength:"1" maxLength:"10485760"
		string Image = 2 [ (validator.field) = {length_gt:1,  length_lt: 10485761 } ];

        // comment
        // @inject_tag: json:"desc" default:"" binding:"gte=1,lte=512" required:"true" minLength:"1" maxLength:"512"
		string Desc = 3 [ (validator.field) = {length_gt:1,  length_lt: 513} ];
	}
	// @inject_tag: json:"kinds" required:"true" minLength:"0" maxLength:"10485760"
	repeated Kind Kinds = 1 [ (validator.field) = { length_gt: -1, length_lt: 10485761} ];
}

// JsonStringList used as reply parameters in RPC or response body in HTTP.
message JsonList {
	// @inject_tag: json:"jsonlist" required:"true" minLength:"0" maxLength:"10485760"
	repeated string JsonList = 1 [ (validator.field) = { length_gt: -1, length_lt: 10485761} ];
}

// TableColumns used as reply parameters in RPC or response body in HTTP.
message TableColumns {
    message Column {
        // column name
        // @inject_tag: json:"name" default:"" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
		string Name = 1 [ (validator.field) = {length_gt: 1, length_lt: 65 } ];

        // column type
        // @inject_tag: json:"type" gorm:"column:type;" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
		string Type = 2 [ (validator.field) = {length_gt:1,  length_lt: 65 } ];

        // type length
        // @inject_tag: json:"length" gorm:"column:length;" default:"" required:"true" binding:"gte=0,lte=64" minLength:"0" maxLength:"64"
		string Length = 3 [ (validator.field) = { length_gt:-1,  length_lt: 65 } ];

        // primary key, one of true/false
        // @inject_tag: json:"isprkey" gorm:"column:isprkey;" default:"" binding:"gte=0,lte=8" required:"true" minLength:"0" maxLength:"8"
		string IsPrkey = 4 [ (validator.field) = { length_lt: 8 } ];
    }

    // columns
    // @inject_tag: json:"columns" minLength:"0" maxLength:"100000"
    repeated Column Columns = 1 [ (validator.field) = { length_lt: 100001 } ];
}

// DescribeTable used as reply parameters in RPC or response body in HTTP.
message DescribeTable {
	// this source info
	// @inject_tag: json:"info"
	model.TableInfo info = 1 [ (validator.field) = { } ];
}

message ListTable {
	// this source info
	// @inject_tag: json:"info"
	repeated model.TableInfo infos = 1 [ (validator.field) = { } ];

	// @inject_tag: json:"total"
	int64 total = 2 [ (validator.field) = { } ];
}
