syntax = "proto3";

option go_package = "github.com/DataWorkbench/gproto/pkg/response";

// Package name of class.
option java_package = "com.dataomnis.gproto.responsepb";
// File name of class.
option java_outer_classname = "ResponsePB";
option java_multiple_files = false;

package response;

//import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/validator.proto";

import "model.proto";
import "datasource.proto";

// ListWorkspaces used as reply parameters in RPC or response body in HTTP.
message ListWorkspaces {
  // @inject_tag: json:"infos"
  repeated model.Workspace infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

// ListOpAudits used as reply parameters in RPC or response body in HTTP.
message ListOpAudits {
  // @inject_tag: json:"infos"
  repeated model.Operation infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;
}

// CreateWorkspace used as reply parameters in RPC or response body in HTTP.
message CreateWorkspace {
  // The workspace id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field).tags.string = {byte_len_eq: 20, prefix: "wks-"}];
}

// DescribeWorkspace used as reply parameters in RPC, And model.Workspace used as response body in HTTP.
message DescribeWorkspace {
  model.Workspace info = 1;
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListMembers {
  // @inject_tag: json:"infos"
  repeated model.Member infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListSystemRoles {
  // @inject_tag: json:"infos"
  repeated model.Role infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

message CheckPermission {
  model.Workspace info = 1;
}

// ListStreamJobs used as reply parameters in RPC or response body in HTTP.
message ListStreamJobs {
  // @inject_tag: json:"infos"
  repeated model.StreamJob infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

// CreateStreamJob used as reply parameters in RPC.
message CreateStreamJob {
  // The stream job id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

// DescribeStreamJob used as reply parameters in RPC.
message DescribeStreamJob {
  model.StreamJob info = 1;
}

// GetStreamJobCode used as reply parameters in RPC.
message GetStreamJobCode {
  model.StreamJobCode code = 1;
}

// GetStreamJobCode used as reply parameters in RPC.
message StreamJobCodeSyntax {
  enum Result {
    ResultUnset = 0;
    Correct = 1;
    Incorrect = 2;
  }

  // Result for check syntax of code. 1 => "Correct" 2 => "Incorrect".
  Result result = 1;

  // Message represents the error message when found syntax Incorrect.
  string message = 2;
}

// GetStreamJobArgs used as reply parameters in RPC.
message GetStreamJobArgs {
  model.StreamJobArgs info = 1;
}

// GetStreamJobSchedule used as reply parameters in RPC.
message GetStreamJobSchedule {
  model.StreamJobSchedule info = 1;
}

// ListReleaseStreamJobs used as reply parameters in RPC or response body in HTTP.
message ListReleaseStreamJobs {
  // @inject_tag: json:"infos"
  repeated model.StreamJobRelease infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

// ListStreamJobVersions used as reply parameters in RPC or response body in HTTP.
message ListStreamJobVersions {
  // @inject_tag: json:"infos"
  repeated model.StreamJob infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;
}

// ListMonitorRules used as reply parameters in RPC or response body in HTTP.
message ListMonitorRules {
  // @inject_tag: json:"infos"
  repeated model.MonitorRule infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

// DescribeMonitorRule used as reply parameters in RPC.
message DescribeMonitorRule {
  // @inject_tag: json:"info"
  model.MonitorRule info = 1;
}

// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamTestInst and ListStreamCycleInst
message ListStreamInstances {
  // @inject_tag: json:"infos"
  repeated model.StreamJobInst infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3 ;
}

// DescribeFlinkUIByInstanceId used as a request parameters for RPC and HTTP(based on URL-Query).
message DescribeFlinkUIByInstanceId {
  // @inject_tag: json:"web_ui"
  string web_ui = 1;
}

message CreateDataSource {
  // The data source job id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

// DescribeDataSource used as reply parameters in RPC or response body in HTTP.
message DescribeDataSource {
  // this source info
  // @inject_tag: json:"info"
  model.DataSource info = 1;
}

// ListDataSources used as reply parameters in RPC or response body in HTTP.
message ListDataSources {
  // @inject_tag: json:"infos"
  repeated model.DataSource infos = 1;

  // @inject_tag: json:"total"
  int64 total = 2;

  // @inject_tag: json:"has_more"
  bool has_more = 3;
}

// SourceKind used as reply parameters in RPC or response body in HTTP.
message DescribeDataSourceKinds {
  // @inject_tag: json:"kinds"
  repeated datasource.SourceKind Kinds = 1;
}

message PingDataSourceConnection {
  // Info is the Connectivity test results info.
  // @inject_tag: json:"info"
  model.DataSourceConnection info = 1 [ (validator.field).tags = { } ];
}

// ListDataSources used as reply parameters in RPC or response body in HTTP.
message ListDataSourceConnections {
  // @inject_tag: json:"infos"
  repeated model.DataSourceConnection infos = 1;

  // @inject_tag: json:"total"
  int64 total = 2;

  // @inject_tag: json:"has_more"
  bool has_more = 3;
}

// JsonStringList used as reply parameters in RPC or response body in HTTP.
message JsonList {
  // @inject_tag: json:"json_list" required:"true" minLength:"0" maxLength:"10485760"
  repeated string json_list = 1;
}

// TableColumns used as reply parameters in RPC or response body in HTTP.
// FIXME: Move it to datasource.proto ?
message TableColumns {
  message Column {
    // column name
    // @inject_tag: json:"name" default:"" gorm:"column:name;" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string name = 1;

    // column type
    // @inject_tag: json:"type" gorm:"column:type;" default:"" binding:"gte=1,lte=64" required:"true" minLength:"1" maxLength:"64"
    string type = 2;

    // type length
    // @inject_tag: json:"length" gorm:"column:length;" default:"" required:"true" binding:"gte=0,lte=64" minLength:"0" maxLength:"64"
    string length = 3;

    // primary key, one of true/false
    // @inject_tag: json:"is_primary_key" gorm:"column:isprkey;" default:"" binding:"gte=0,lte=8" required:"true" minLength:"0" maxLength:"8"
    string is_primary_key = 4;
  }

  // columns
  // @inject_tag: json:"columns" minLength:"0" maxLength:"100000"
  repeated Column columns = 1;
}

// DescribeTable used as reply parameters in RPC or response body in HTTP.
message DescribeTable {
  // this source info
  // @inject_tag: json:"info"
  model.TableInfo info = 1;
}

message ListTable {
  // this source info
  // @inject_tag: json:"info"
  repeated model.TableInfo infos = 1;

  // @inject_tag: json:"total"
  int64 total = 2;
}

// ListResources used as a request parameters for RPC and HTTP(based on URL-Query)
message ListResources {
  // @inject_tag: json:"infos"
  repeated model.Resource infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64  total = 3;
}

// CreateDir used as reply parameters in RPC.
message CreateDir{
  // The workspace id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field).tags.string = {byte_len_eq: 20}];
}

// UploadFile used as reply parameters in RPC.
message UploadFile{
  // The workspace id that generated by system.
  // @inject_tag: json:"id"
  string id = 1 [(validator.field).tags.string = {byte_len_eq: 20}];
}

// DownloadFile used as a request parameters for RPC and HTTP(based on URL-Query)
message DownloadFile{
  // The File data.
  // @inject_tag: json:"-"
  bytes data = 1;

  // @inject_tag: json:"size"
  int64 size = 2;

  // @inject_tag: json:"name"
  string name = 3;
}

// ListUDF used as reply parameters in RPC or response body in HTTP.
message ListUDF {
  // @inject_tag: json:"infos"
  repeated model.UDFInfo infos = 1;

  // @inject_tag: json:"total"
  int64 total = 2;
}

// DescribeUDF used as reply parameters in RPC or response body in HTTP.
message DescribeUDF {
  // UDF info
  // @inject_tag: json:"infos"
  model.UDFInfo info = 1;
}

// JobState
//message JobState {
//  // job state, model.StreamJobInst_State
//  // @inject_tag: json:"state"
//  model.StreamJobInst.State State = 1 [(validator.field) = {}];
//
//  // job Message
//  // @inject_tag: json:"message"
//  string Message = 2 [(validator.field) = {}];
//}

message InitFlinkJob{
  // NoteID
  // @inject_tag: json:"note_id" default:"" binding:"len=9" required:"true"
  string note_id = 1 [(validator.field).tags.string = {byte_len_eq: 9}];

  // ParagraphID
  // @inject_tag: json:"paragraph_id" default:"" binding:"-"
  string paragraph_id = 2 [(validator.field) = {}];
}

message SubmitFlinkJob{
  // job info
  // @inject_tag: json:"state"
  model.StreamJobInst.State State = 1;

  // message
  // @inject_tag: json:"message"
  string message = 2 [(validator.field) = {}];

  // flink job id
  // @inject_tag: json:"flink_id"
  string flink_id = 3 [(validator.field) = {}];
}

message GetFlinkJob{
  // job info
  // @inject_tag: json:"state"
  model.StreamJobInst.State State = 1 [(validator.field) = {}];

  // job message
  // @inject_tag: json:"message"
  string message = 2 [(validator.field) = {}];
}

message PTasksStatusStat {
  // @inject_tag: json:"infos"
  repeated model.InstanceStatusStat infos = 1;
}

message PTasksExecStat {
  // @inject_tag: json:"today"
  repeated model.InstanceTaskExecStat today = 1;
  // @inject_tag: json:"yesterday"
  repeated model.InstanceTaskExecStat yesterday = 2;
  // @inject_tag: json:"history"
  repeated model.InstanceTaskExecStat history = 3;
}

message PTaskRuntimeRanking {
  // @inject_tag: json:"infos"
  repeated model.InstanceRuntimeRankInfo infos = 1;
  // @inject_tag: json:"total"
  int64 total = 2 ;
}

message PTaskErrorRanking {
  // @inject_tag: json:"infos"
  repeated model.InstanceErrorRankInfo infos = 1;
  // @inject_tag: json:"total"
  int64 total = 2;
}

message PTaskDispatchCount {
  // @inject_tag: json:"infos"
  repeated model.DispatchTaskCountInfo infos = 1;
}

// ZeppelinAddress
message ZeppelinAddress {
  // serveraddress
  // @inject_tag: json:"serveraddress" binding:"gte=1,lte=1024" required:"true" minLength:"1" maxLength:"1024"
  string ServerAddress = 1 [(validator.field).tags.string = {byte_len_gt: 0, byte_len_lte: 1024}];
}

message DescribeFlinkClusterAPI {
  string URL = 1;
  string version = 2;
}

message ListAvailableFlinkVersions {
  // Items store the available flink version lists.
  // @inject_tag: json:"items"
  repeated string items = 1;
}

message ListFlinkClusters {
  // @inject_tag: json:"infos"
  repeated model.FlinkCluster infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

message CreateFlinkCluster {
  // The flink cluster id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

message DescribeFlinkCluster {
  model.FlinkCluster info = 1 ;
}

message ListNetworks {
  // @inject_tag: json:"infos"
  repeated model.Network infos = 1;

  // @inject_tag: json:"has_more"
  bool has_more = 2;

  // @inject_tag: json:"total"
  int64 total = 3;
}

message CreateNetwork {
  // The flink cluster id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

message DescribeNetwork {
  model.Network info = 1 ;
}

message ListBuiltInConnectors {
  // Items store the available flink version lists.
  // @inject_tag: json:"items"
  repeated string items = 1;
}

// Reply parameters used to GetPriceComponents
message GetPriceComponents {
  double hour_price = 1;
  double month_price = 2;
}


message CreateBillingInstance {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" default:"" binding:"len=20" swaggerignore:"true"
  string instance_id = 1 [ (validator.field).tags.string = { byte_len_eq: 30 } ];
}

message StopBillingInstance {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"message" uri:"message" default:"" binding:"len=20" swaggerignore:"true"
  string message = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];
}

message RecoveryBillingInstance {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"message" uri:"message" default:"" binding:"len=20" swaggerignore:"true"
  string message = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];
}