syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestDataSourceManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/datasource.proto";

// ListDataSources used as a request parameters for RPC and HTTP(based on URL-Query)
message ListDataSources {
  // SpaceID; required.
  // @inject_tag: json:"space_id" swaggerignore:"true"
  string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Limit the maximum number of entries returned this time.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {"id", "name", "created", "updated"}.
  // Multiple fields are separated by commas(","), eg: sort_by="created".
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "name", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" default:"false" form:"reverse"
  bool reverse = 5;

  //  Search with name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6;

  // Filter by data source name; valid if `search` is empty; Not required.
  // @inject_tag: json:"name" form:"name"
  string name = 7;

  // Verbose indicates the verbosity level.
  // If the value greater than 1, The details of the associated information will be returned.
  // @inject_tag: json:"verbose" form:"verbose"
  int32 verbose = 8;

  // The source type
  // @inject_tag: json:"type" form:"type"
  model.DataSource.Type type = 9;
}

// CreateDataSource used as request parameters for RPC and HTTP(based on Body)
message CreateDataSource {
  // The space id.
  // @inject_tag: json:"space_id" swaggerignore:"true"
  string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Source owner.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2 [(validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 }];

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 3 [(validator.field).tags.string = { ne: "" } ];

  // Source name unique within a space.
  // @inject_tag: json:"name"
  string name = 4 [ (validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 64 } ];

  // describe this source.
  // @inject_tag: json:"desc"
  string desc = 5 [ (validator.field).tags.string = { char_len_lte: 256 } ];

  // Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
  // @inject_tag: json:"type"
  model.DataSource.Type type = 6  [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

  // this source connection info
  // @inject_tag: json:"url"
  model.DataSource.URL url = 7 [ (validator.field).tags.message = { not_null: true, skip: true } ];

  // The last connection record. The value is nil if never tested for usability.
  // @inject_tag: json:"last_connection"
  model.DataSourceConnection last_connection = 8;
}

// UpdateDataSource used as request parameters for RPC and HTTP(based on Body)
message UpdateDataSource {
  // The space id.
  // @inject_tag: json:"space_id" swaggerignore:"true"
  string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The source id.
  // @inject_tag: json:"source_id" swaggerignore:"true"
  string source_id  = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "som-" } ];

  // Source name unique within a space.
  // @inject_tag: json:"name"
  string name = 3  [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 64 } ];

  // describe this source.
  // @inject_tag: json:"desc"
  string desc = 4  [ (validator.field).tags.string = {  char_len_lte: 256 } ];

  // Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
  // @inject_tag: json:"type"
  model.DataSource.Type type = 5  [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

  // this source connection info
  // @inject_tag: json:"url"
  model.DataSource.URL url = 6 [ (validator.field).tags.message = { not_null: true, skip: true } ];
}

// DeleteDataSources used as request parameters for RPC and HTTP(based on Body)
message DeleteDataSources {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // delete these SourceIDs
  // @inject_tag: json:"source_ids"
  repeated string source_ids = 2 [ (validator.field).tags.repeated = { len_gte: 1, len_lte: 100, item: { string: { prefix: "som-" } } } ];
}

// DescribeDataSource used as request parameters for RPC and HTTP(based on Body)
message DescribeDataSource {
  // SourceID
  // @inject_tag: json:"source_id"
  string source_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "som-" } ];
}

// EnableDataSources used as request parameters for RPC and HTTP(based on Body)
message EnableDataSources {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // enable these SourceIDs
  // @inject_tag: json:"source_ids"
  repeated string source_ids = 2 [ (validator.field).tags.repeated = { len_gte: 1, len_lte: 100, item: { string: { prefix: "som-" } } } ];
}

// DisableDataSources used as request parameters for RPC and HTTP(based on Body)
message DisableDataSources {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // delete these SourceIDs
  // @inject_tag: json:"source_ids"
  repeated string source_ids = 2 [ (validator.field).tags.repeated = { len_gte: 1, len_lte: 100, item: { string: { prefix: "som-" } } } ];
}

// ListDataSourceConnections used as a request parameters for RPC and HTTP(based on URL-Query)
message ListDataSourceConnections {
  // SpaceID; required.
  // @inject_tag: json:"space_id" swaggerignore:"true"
  string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The source id.
  // @inject_tag: json:"source_id" swaggerignore:"true"
  string source_id  = 2 [(validator.field).tags.string = { byte_len_eq: 20 }];

  // Limit the maximum number of entries returned this time.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 3 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 4 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {"source_id", "created"}.
  // Multiple fields are separated by commas(","), eg: sort_by="created".
  // Not required, default: source_id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 5 [ (validator.field).tags.string = { in: ["", "source_id", "created"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" default:"false" form:"reverse"
  bool reverse = 6;

  // Verbose indicates the verbosity level.
  // If the value greater than 1, The details of the associated information will be returned.
  // @inject_tag: json:"verbose" form:"verbose"
  int32 verbose = 7;
}

// PingDataSource used as request parameters for RPC and HTTP(based on Body)
message PingDataSourceConnection {
  enum Stage {
    PhaseUnset = 0;
    BeforeCreate = 1;
    AfterCreate = 2;
  }

  // The space id.
  // @inject_tag: json:"space_id" swaggerignore:"true"
  string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // FIXME: remove in feature.
  // The source id.
  // @inject_tag: json:"network_id"
  string network_id  = 2;

  // Stage At what stage did the user perform the test.
  // @inject_tag: json:"stage"
  Stage stage = 3 [ (validator.field).tags.enum = { gt: 0; in_enums: true }  ];

  // The source id.
  // @inject_tag: json:"source_id"
  string source_id  = 4 [
    (validator.field).check_if = { field: "stage", tags: { enum: { eq: 2 } } },
    (validator.field).tags.string = { byte_len_eq: 20 }
  ];

  // Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
  // @inject_tag: json:"type"
  model.DataSource.Type type = 5 [
    (validator.field).check_if = { field: "stage", tags: { enum: { eq: 1 } } },
    (validator.field).tags.enum = { gt: 0; in_enums: true }
  ];

  // this source connection info
  // @inject_tag: json:"url"
  model.DataSource.URL url = 6 [
    (validator.field).check_if = { field: "stage", tags: { enum: { eq: 1 } } },
    (validator.field).tags.message = { not_null: true, skip: true } ]
  ;
}

// DescribeDataSourceTables
message DescribeDataSourceTables {
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // @inject_tag: json:"source_id"
  string source_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "som-" } ];
}

message DescribeDataSourceTableSchema {
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // @inject_tag: json:"source_id"
  string source_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];

  // @inject_tag: json:"table_name"
  string table_name = 3 [ (validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 256 } ];
}