syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestMemberManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";


message ListAvailableUsers {
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 ;

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 3;
}

// ListMembers used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMembers {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {user_id, created, updated}.
  // Multiple fields are separated by commas(","), eg: sort_by="user_id|created|updated".
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "user_id", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 5;

  // Search with user name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6;

  // Filter by user_id lists.
  // @inject_tag: json:"user_ids" form:"user_ids"
  repeated string user_ids = 7;
}

// DeleteMembers used as a request parameters for RPC and HTTP(based on Body).
message DeleteMembers {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The user(member) id. Is required, Min: 1, Max 100.
  // @inject_tag: json:"user_ids" default:"" binding:"-""
  repeated string user_ids = 2 [ (validator.field).tags.repeated = { len_lte: 100 } ];
}

// UpsertMembers used as a request parameters for RPC and HTTP(based on Body).
message AddMembers {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1[ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The user-id of created this cluster. It fixed to request user id.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2 [ (validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 } ];

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 3 [(validator.field).tags.string = { ne: "" } ];

  // The account user_id. Is Required. Min: 1, Max: 100
  // @inject_tag: json:"user_ids"
  repeated string user_ids = 4 [ (validator.field).tags.repeated = { len_gt:0, len_lte: 100 } ];

  // The is list of system role. Is Required.
  // @inject_tag: json:"system_role_ids"
  repeated string system_role_ids = 5 [ (validator.field).tags.repeated = { len_gt: 0, unique: true, item: { string: { prefix: "ros-" } } } ];

  // Description for this Role. Not required. Max Charset Length: 1024.
  // @inject_tag: json:"desc""
  string desc = 6 [ (validator.field).tags.string = { char_len_lte: 1024 } ];
}

// UpdateMember used as a request parameters for RPC and HTTP(based on Body).
message UpdateMember {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1[ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The account user_id. Is Required.
  // @inject_tag: json:"user_id"
  string user_id = 2 [ (validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 } ];

  // The is list of system role. Is Required.
  // @inject_tag: json:"system_role_ids"
  repeated string system_role_ids = 3 [ (validator.field).tags.repeated = { len_gt: 0, unique: true, item: { string: { prefix: "ros-" } } } ];

  // Description for this Role. Not required. Max Charset Length: 1024.
  // @inject_tag: json:"desc""
  string desc = 4 [ (validator.field).tags.string = { char_len_lte: 1024 } ];
}

// DescribeMember used as a request parameters for RPC and HTTP(based on Body).
message DescribeMember {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1[ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The account user_id. Is Required.
  // @inject_tag: json:"user_id"
  string user_id = 2 [ (validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 } ];
}

