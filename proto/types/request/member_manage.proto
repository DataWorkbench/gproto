syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestMemberManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

// ListSystemRoles used as reply parameters in RPC or response body in HTTP.
message ListSystemRoles {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];
}

// ListMembers used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMembers {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];
}

// UpsertMembers used as a request parameters for RPC and HTTP(based on Body).
message UpsertMembers {
  message Pair {
    // The account user_id. Is Required.
    // @inject_tag: json:"user_id"
    string user_id = 2 [ (validator.field).tags.string = { byte_len_lt: 65 } ];

    // The lists of role_id. Multiple 'role_id' are separated by ','. Is Required, Min 1, Max 100.
    // @inject_tag: json:"role_ids"
    string role_ids = 3;
  }

  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1[ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of pair to user_id => role_ids. Min: 1, Max: 100
  // @inject_tag: json:"users"
  repeated Pair users = 2 [ (validator.field).tags.repeated = { len_lte: 100 } ];
}

// DeleteMembers used as a request parameters for RPC and HTTP(based on Body).
message DeleteMembers {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The user(member) id. Is required, Min: 1, Max 100.
  // @inject_tag: json:"user_ids" default:"" binding:"-""
  repeated string user_ids = 2 [ (validator.field).tags.repeated = { len_lte: 100 } ];
}
