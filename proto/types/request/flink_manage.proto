syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestFlinkManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
//import "github.com/yu31/protoc-plugin/proto/gosql.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/cluster.proto";
import "proto/types/model/flink/flink_config.proto";

message ListAvailableFlinkVersions {
  enum SourceKind {
    _SourceKindUnset = 0;
    StreamJob = 1;
    SyncJob = 2;
  }
  // The kind of source that will used the flink cluster. Not required.
  // Optional values: 1 => "StreamJob" 2 => "SyncJob", default return all.
  // @inject_tag: json:"source_kind" form:"source_kind"
  SourceKind source_kind = 1 [ (validator.field).tags.enum = { in_enums: true } ];
}

message DescribeFlinkClusterAPI {
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];
  string cluster_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];
}

message ListFlinkClusters {
  // The workspace id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {id, name, created, updated}.
  // Multiple fields are separated by commas(","), eg: sort_by="updated".
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "created", "updated", "name"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 5 [ (validator.field) = { } ];

  // Search with flink-cluster name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6 [ (validator.field) = { } ];

  // Filter by Flink cluster status;  Not required.
  // Valid optional: 1 => "deleted" 2 => "running" 3 => "stopped" 4 => "starting" 5 => "exception" 6 => "Arrears"
  // @inject_tag: json:"status" form:"status"
  model.FlinkCluster.Status status = 7 [(validator.field).tags.enum = { in_enums: true }];

  // Filter by Flink cluster name; valid if `search` is empty; Not required.
  // @inject_tag: json:"name" form:"name"
  string name = 8 [(validator.field) = {}];

  // Verbose indicates the verbosity level.
  // If the value greater than 1, The details of the associated information will be returned.
  // @inject_tag: json:"verbose" form:"verbose"
  int32 verbose = 9;
}

message DeleteFlinkClusters {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of flink cluster id. Is required, Min 1, Max 100.
  // @inject_tag: json:"cluster_ids"
  repeated string cluster_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "cfi-" } } } ];
}

message StartFlinkClusters {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of flink cluster id. Is required, Min 1, Max 100.
  // @inject_tag: json:"cluster_ids"
  repeated string cluster_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "cfi-" } } } ];
}

message StopFlinkClusters {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of flink cluster id. Is required, Min 1, Max 100.
  // @inject_tag: json:"cluster_ids"
  repeated string cluster_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "cfi-" } } } ];
}

message CreateFlinkCluster {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The user-id of created this cluster. It fixed to request user id.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2 [ (validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 } ];

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 3 [(validator.field).tags.string = { ne: "" } ];

  // Cluster Name. Is required.
  // @inject_tag: json:"name"
  string name = 4 [ (validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 } ];

  // Flink Version. Is required. Optional value: "flink-1.12.3-scala_2.11" "flink-1.12.3-scala_2.11-q0.9" "flink-1.14.4-scala_2.11"
  // @inject_tag: json:"version"
  string version = 5 [ (validator.field).tags.string = { in: ["flink-1.12.3-scala_2.11", "flink-1.12.3-scala_2.11-q0.9","flink-1.14.4-scala_2.11"] } ];

  // resource config.
  //
  // Flink task number for TaskManager. Is required, Min 1, Max 24
  // @inject_tag: json:"task_num"
  int32 task_num = 6 [ (validator.field).tags.int = { gte: 1, lte: 24 } ];

  // Flink JobManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
  // @inject_tag: json:"job_cu"
  float job_cu = 7 [ (validator.field).tags.float = { gte: 0.5, lte: 8 } ];

  // Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
  // @inject_tag: json:"task_cu"
  float task_cu = 8 [ (validator.field).tags.float = { gte: 0.5, lte: 8 } ];

  // FIXME: remove in feature.
  // Network config. Is required.
  // @inject_tag: json:"network_id"
  string network_id = 9;

  // Config of host aliases. Not required.
  // @inject_tag: json:"host_aliases"
  model.HostAliases host_aliases = 10;

  // Flink config. Not required.
  // @inject_tag: json:"config"
  flink.FlinkConfig config = 11;
}

message UpdateFlinkCluster {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 2 [(validator.field).tags.string = { ne: "" } ];

  // The flink cluster id in HTTP Request-URI
  // @inject_tag: json:"cluster_id" uri:"cluster_id" swaggerignore:"true"
  string cluster_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];

  // Cluster Name. Is required.
  // @inject_tag: json:"name"
  string name = 4 [ (validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 } ];

	// Flink Version. Is required. Optional value: "flink-1.12.3-scala_2.11" "flink-1.12.3-scala_2.11-q0.9"
	// @inject_tag: json:"version"
//  string version = 5 [ (validator.field).tags.string = { in: ["flink-1.12.3-scala_2.11", "flink-1.12.3-scala_2.11-q0.9"] } ];

  // resource config.
  //
  // Flink task number for TaskManager. Is required, Min 1, Max 24
  // @inject_tag: json:"task_num"
  int32 task_num = 6 [ (validator.field).tags.int = { gte: 1, lte: 24 } ];

  // Flink JobManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
  // @inject_tag: json:"job_cu"
  float job_cu = 7 [ (validator.field).tags.float = { gte: 0.5, lte: 8 } ];

  // Flink TaskManager. 1CU = 1C + 4GB. Is required, Min 0.5, Max 8
  // @inject_tag: json:"task_cu"
  float task_cu = 8 [ (validator.field).tags.float = { gte: 0.5, lte: 8 } ];

  // FIXME: remove in feature.
  // Network config. Is required.
  // @inject_tag: json:"network_id"
  string network_id = 9;

  // Config of host aliases. Not required.
  // @inject_tag: json:"host_aliases"
  model.HostAliases host_aliases = 10;

  // Flink config, Is required.
  // @inject_tag: json:"config"
  flink.FlinkConfig config = 11;
}

message DescribeFlinkCluster {
  // The cluster id in HTTP Request-URI
  // @inject_tag: json:"cluster_id" uri:"cluster_id" swaggerignore:"true"
  string cluster_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];
}

message UpdateFlinkClusterStatusByScheduler {
  // The cluster id.
  // @inject_tag: json:"cluster_id"
  string cluster_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];

  // @inject_tag: json:"status"
  model.FlinkCluster.Status status = 2;

  // @inject_tag: json:"pre_status"
  model.FlinkCluster.Status pre_status = 3;
}

message StopFlinkClusterByScheduler {
  // The workspace id in HTTP Request-URI
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The id of flink cluster.
  string cluster_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];
}
