syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestAlertManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";
//import "github.com/yu31/protoc-plugin/proto/gosql.proto";

import "proto/types/model/alert.proto";


// ListAlertPolicies used as a request parameters for RPC and HTTP(based on URL-Query)
message ListAlertPolicies {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The field list used to sorted query results.
  // Optional values: {"id", "name", "created", "updated"}.
  // Multiple fields are separated by commas(","), eg: sort_by="created".
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "name", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" default:"false" form:"reverse"
  bool reverse = 5;

  //  Search with alert policy name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6;

  // Filter by data alert policy name; valid if `search` is empty; Not required.
  // @inject_tag: json:"name" form:"name"
  string name = 7;

  // Verbose indicates the verbosity level.
  // If the value greater than 1, The details of the associated information will be returned.
  // @inject_tag: json:"verbose" form:"verbose"
  int32 verbose = 8;

  // Filter by monitor object, 1 => "StreamJob" 2 => "SyncJob'; Not required.
  // @inject_tag: json:"monitor_object"
  model.AlertPolicy.MonitorObject monitor_object = 9;
}

// DeleteAlertPolicies used as a request parameters for RPC and HTTP(based on Body).
message DeleteAlertPolicies {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of alert policy id. Is required, Min 1, Max 100.
  // @inject_tag: json:"alert_ids"
  repeated string alert_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// EnableAlertPolicies used as a request parameters for RPC and HTTP(based on Body).
message EnableAlertPolicies {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The list of alert policy id. Is required, Min 1, Max 100.
  // @inject_tag: json:"alert_ids"
  repeated string alert_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// DisableAlertPolicies used as a request parameters for RPC and HTTP(based on Body).
message DisableAlertPolicies {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The list of alert policy id. Is required, Min 1, Max 100.
  // @inject_tag: json:"alert_ids"
  repeated string alert_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// CreateAlertPolicy used as a request parameters for RPC and HTTP(based on Body).
message CreateAlertPolicy {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The user-id of created this job. Fixed to the request user id.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2 [ (validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 } ];

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 3 [ (validator.field).tags.string = { ne: "" } ];

  // Name. Min Length: 2, Max Length: 128.
  // @inject_tag: json:"name"
  string name = 4 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128 } ];

  // Alert Policy Description. Max char Length: 1024
  // @inject_tag: json:"desc"
  string desc = 5 [ (validator.field).tags.string = { char_len_lte: 1024 } ];

  // The monitor object , 1 => "StreamJob" 2 => "SyncJob'
  // @inject_tag: json:"monitor_object"
  model.AlertPolicy.MonitorObject monitor_object = 6 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // The alert item.
  // @inject_tag: json:"monitor_item"
  model.AlertPolicy.MonitorItem monitor_item = 7 [ (validator.field).tags.message = { not_null: true } ];

  // The trigger rule, 1 => "TriggerRuleAnyItem",
  // @inject_tag: json:"trigger_rule"
  model.AlertPolicy.TriggerRule trigger_rule = 8 [ (defaults.field).basic = "1", (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // The trigger action, 1 => "TriggerActionSendNotification",
  // @inject_tag: json:"trigger_action"
  model.AlertPolicy.TriggerAction trigger_action = 9 [ (defaults.field).basic = "1", (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // The notification list id of in IaaS. Multiple ids are separated by commas. e.g: "nl-mj9wzsa9,nl-pix7u2uo"
  // @inject_tag: json:"notification_ids"
  repeated string notification_ids = 10 [ (validator.field).tags.repeated = { len_lte: 100 } ];

  // The list id of stream job or sync job to monitor.
  // @inject_tag: json:"job_ids"
  repeated string job_ids = 11;
}

// UpdateAlertPolicy used as a request parameters for RPC.
message UpdateAlertPolicy {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The id of alert policy.
  // @inject_tag: json:"alert_id" swaggerignore:"true"
  string alert_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "alt-" } ];

  // Name. Min Length: 2, Max Length: 128.
  // @inject_tag: json:"name"
  string name = 3 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128 } ];

  // Alert Policy Description. Max char Length: 1024
  // @inject_tag: json:"desc"
  string desc = 4 [ (validator.field).tags.string = { char_len_lte: 1024 } ];

  // The monitor object , 1 => "StreamJob" 2 => "SyncJob'
  // @inject_tag: json:"monitor_object"
  model.AlertPolicy.MonitorObject monitor_object = 5 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // The alert item.
  // @inject_tag: json:"monitor_item"
  model.AlertPolicy.MonitorItem monitor_item = 6 [ (validator.field).tags.message = { not_null: true } ];

  // The trigger rule, 1 => "TriggerRuleAnyItem",
  // @inject_tag: json:"trigger_rule"
  model.AlertPolicy.TriggerRule trigger_rule = 7 [ (defaults.field).basic = "1", (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // The trigger action, 1 => "TriggerActionSendNotification",
  // @inject_tag: json:"trigger_action"
  model.AlertPolicy.TriggerAction trigger_action = 8 [ (defaults.field).basic = "1", (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // The notification list id of in IaaS. Multiple ids are separated by commas. e.g: "nl-mj9wzsa9,nl-pix7u2uo"
  // @inject_tag: json:"notification_ids"
  repeated string notification_ids = 9 [ (validator.field).tags.repeated = { len_lte: 100 } ];

  // The list id of stream job or sync job to monitor.
  // @inject_tag: json:"job_ids"
  repeated string job_ids = 10 [ (validator.field).tags.repeated = { unique: true } ];
}

// DescribeAlertPolicy used as a request parameters for RPC.
message DescribeAlertPolicy {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The alert policy id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"alert_id" uri:"alert_id" swaggerignore:"true"
  string alert_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "alt-" } ];
}

message JobBoundAlertPolicies {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The id of monitor object. StreamJob(stj-xxxxxxxxxxxx) or SyncJob(syj-xxxxxxxxxxxx).
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The list of alert policy id. Is required, Min 1, Max 100.
  // @inject_tag: json:"alert_ids"
  repeated string alert_ids = 3 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, unique: true } ];
}

message JobUnboundAlertPolicies {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The id of monitor object. StreamJob(stj-xxxxxxxxxxxx) or SyncJob(syj-xxxxxxxxxxxx).
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The list of alert policy id. Is required, Min 1, Max 100.
  // @inject_tag: json:"alert_ids"
  repeated string alert_ids = 3 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, unique: true } ];;
}

message ListAlertPoliciesByJob {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // The id of monitor object. StreamJob(stj-xxxxxxxxxxxx) or SyncJob(syj-xxxxxxxxxxxx).
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 3 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 4 [ (validator.field).tags.int  = { gte: 0 } ];
}

message AlertPolicyBoundJobs {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // @inject_tag: json:"alert_id" uri:"alert_id" swaggerignore:"true"
  string alert_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "alt-" } ];

  // @inject_tag: json:"job_ids"
  repeated string job_ids = 3 [ (validator.field).tags.repeated = { unique: true } ];
}

message AlertPolicyUnboundJobs {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // @inject_tag: json:"alert_id" uri:"alert_id" swaggerignore:"true"
  string alert_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "alt-" } ];

  // @inject_tag: json:"job_ids"
  repeated string job_ids = 3 [ (validator.field).tags.repeated = { unique: true } ];
}

message ListJobsByAlertPolicy {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-" } ];

  // @inject_tag: json:"alert_id" uri:"alert_id" swaggerignore:"true"
  string alert_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "alt-" } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 3 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 4 [ (validator.field).tags.int  = { gte: 0 } ];
}

