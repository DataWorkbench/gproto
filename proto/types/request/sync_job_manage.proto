syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestSyncJobManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/sync_job.proto";
import "proto/types/model/datasource.proto";

// ListSyncJobs used as a request parameters for RPC and HTTP(based on URL-Query)
message ListSyncJobs {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // Limit the maximum number of entries returned this time.
    // Not required, Max 100, default 100.
    // @inject_tag: json:"limit" form:"limit"
    int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

    // The offset position. Not required, default 0.
    // @inject_tag: json:"offset" form:"offset"
    int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];

    // The field list used to sorted query results. eg: sort_by="crated".
    // Optional values: {id, name, created, updated}.
    // Not required, default: id.
    // @inject_tag: json:"sort_by" form:"sort_by"
    string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "name", "created", "updated"] } ];

    // Reverse order results. Not required, default: false.
    // @inject_tag: json:"reverse" form:"reverse"
    bool reverse = 5;

    // Search with stream job name; Not required.
    // @inject_tag: json:"search" form:"search"
    string search = 6;

    // The parent id.
    // @inject_tag: json:"pid" form:"pid"
    string pid = 7;
    // IsDirectory represents this job whether a directory.
    // @inject_tag: json:"is_directory"
    bool is_directory = 8;
}

// CreateSyncJob used as a request parameters for RPC and HTTP(based on Body)
message CreateSyncJob {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The user-id of created this job. Fixed to the request user id.
    // @inject_tag: json:"created_by" swaggerignore:"true"
    string created_by = 2 [ (validator.field).tags.string = { byte_len_lt: 65 } ];

    // PID is the parent id(directory). pid is "" means root(`/`)
    // @inject_tag: json:"pid"
    string pid = 3 [
    (validator.field).check_if = { field: "pid", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20; prefix: "syj-" }
    ];

    // IsDirectory represents this job whether a directory.
    // @inject_tag: json:"is_directory"
    bool is_directory = 4;

    // The job name in each workspace is unique. Is required, Max Length 128.
    // And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
    // @inject_tag: json:"name"
    string name = 5 [ (validator.field).tags.string = { char_len_gte: 2, char_len_lte: 128 } ];

    // Description of the job, Not required, Max length 1024.
    // @inject_tag: json:"desc"
    string desc = 6 [ (validator.field).tags.string = { char_len_lte: 1020 } ];

    // The job Type. Is Required when not directory,
    // Optional Value:1 => "OfflineFull" 2 => "OfflineIncrement" 3 => "RealTimeFull"
    // Desc: Cannot be modified after creation.
    // @inject_tag: json:"type"
    model.SyncJob.Type type = 7  [
    (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
    (validator.field).tags.enum = { gte: 0; in_enums: true  }
    ];

    // The flink compute cluster id. Is required.
    // @inject_tag: json:"cluster_id"
    string cluster_id = 8 [(validator.field) = {}];

    // The owner of workspace, only used to check quota. Set by APIServer.
    // @inject_tag: json:"space_owner" swaggerignore:"true"
    string space_owner = 9 [(validator.field).tags.string = { ne: "" } ];

    // source_type
    // @inject_tag: json:"source_type" uri:"source_type"
    model.DataSource.Type source_type = 10 [
    (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
    (validator.field).tags.enum = { gt: 0; in_enums: true } ];

    // target type
    // @inject_tag: json:"target_type" uri:"target_type"
    model.DataSource.Type target_type = 11 [
    (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
    (validator.field).tags.enum = { gt: 0; in_enums: true } ];
}

// DeleteSyncJobs used as a request parameters for RPC and HTTP(based on Body)
message DeleteSyncJobs {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The list of sync job id. Is required, Min 1, Max 100.
    // @inject_tag: json:"job_ids"
    repeated string job_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "syj-" } } } ];
}

// MoveSyncJobs used as a request parameters for RPC and HTTP(based on Body)
message MoveSyncJobs {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The list of sync job id. Is required, Min 1, Max 100.
    // @inject_tag: json:"job_ids"
    repeated string job_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "syj-" } } } ];

    // Target represents the target directory. `target` is "" means move to root(`/`)
    // @inject_tag: json:"target"
    string target = 3 [
    (validator.field).check_if = { field: "target", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20; prefix: "syj-" }
    ];
}

// UpdateSyncJob used as a request parameters for RPC and HTTP(based on Body).
message UpdateSyncJob {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The sync job name in each workspace is unique. Is required, Max Length 128.
    // And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
    // @inject_tag: json:"name"
    string name = 3  [ (validator.field).tags.string = { char_len_gte: 2, char_len_lte: 128 } ];

    // Description of the workspace, Not required, Max length 1024.
    // @inject_tag: json:"desc"
    string desc = 4  [ (validator.field).tags.string = { char_len_lte: 1024 } ];
}

// DescribeSyncJob used as a request parameters for RPC.
message DescribeSyncJob {
    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The sync job version id in HTTP Request-URI
    // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
    string version = 2 [(validator.field) = {}];
}

// SetSyncJobschedule used as a request parameters for RPC.
message SetSyncJobSchedule {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The sync job id it belongs to.
    // @inject_tag: json:"job_id" uri:"job_id"  swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The schedule set.
    // @inject_tag: json:"schedule"
    model.SyncJobSchedule schedule = 3 [ (validator.field).tags.message = { not_null: true } ];
}

// SetSyncJobConf used as a request parameters for RPC.
message SetSyncJobConf {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The sync job ID it belongs to.
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The args set.
    // @inject_tag: json:"args"
    model.SyncJobConf conf = 3 [ (validator.field).tags.message = { not_null: true } ];
}


// GetSyncJobSchedule used as a request parameters for RPC.
message GetSyncJobSchedule {
    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The sync job version id in HTTP Request-URI
    // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
    string version = 2 [(validator.field) = {}];
}

// GetSyncJobConf used as a request parameters for RPC.
message GetSyncJobConf {
    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The sync job version id in HTTP Request-URI
    // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
    string version = 2 [(validator.field) = {}];
}

// ListReleaseSyncJobs used as a request parameters for RPC and HTTP(based on URL-Query).
message ListReleaseSyncJobs {
    // Limit the maximum number of entries returned this time.
    // Not required, Max 100, default 100.
    // @inject_tag: json:"limit" form:"limit"
    int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

    // The offset position. Not required, default 0.
    // @inject_tag: json:"offset" form:"offset"
    int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The field list used to sorted query results.
    // Optional values: {job_id, name, created, updated}.
    // Multiple fields are separated by commas(","), eg: sort_by="updated".
    // Not required, default: id.
    // @inject_tag: json:"sort_by" form:"sort_by"
    string sort_by = 3 [ (validator.field).tags.string = { in: ["", "id", "name", "created", "updated"]} ];

    // Reverse order results. Not required, default: false.
    // @inject_tag: json:"reverse" form:"reverse"
    bool reverse = 4;

    // Search with sync job name; Not required.
    // @inject_tag: json:"search" form:"search"
    string search = 6;

    // Filter by release status;  Not required.
    // Valid optional: 1 => "enabled", 2 => "disabled".
    // @inject_tag: json:"status" form:"status"
    model.SyncJobRelease.Status status = 7 [(validator.field).tags.enum = { in_enums: true }];

    // The sync job id.
    // @inject_tag: json:"job_id" form:"job_id"
    string job_id = 8;
}

// ReleaseSyncJob used as a request parameters for RPC and HTTP(based on Body.)
message ReleaseSyncJob {
    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The user-id of release this job. Fixed to the request user id.
    // @inject_tag: json:"created_by" swaggerignore:"true"
    string created_by = 2 [ (validator.field).tags.string = { byte_len_lt: 65 } ];

    // Description for this releases. Not required, Max length 1024.
    // @inject_tag: json:"desc"
    string desc = 3;

    // @inject_tag: json:"stop_running"
    bool stop_running = 4;
}

// OfflineReleaseSyncJob used as a request parameters for RPC and HTTP(based on Body).
message OfflineReleaseSyncJob {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];
    // StopRunning indicates whether stop the sync job instance that state running.
    // @inject_tag: json:"stop_running"
    bool stop_running = 3;
}

//// SuspendReleaseSyncJob used as a request parameters for RPC and HTTP(based on Body).
//message SuspendReleaseSyncJob {
//    // The workspace id in HTTP Request-URI
//    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
//    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];
//
//    // The sync job id in HTTP Request-URI
//    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
//    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];
//
//    // @inject_tag: json:"stop_running"
//    bool stop_running = 3 [(validator.field) = {}];
//}

// ResumeReleaseSyncJobs used as a request parameters for RPC.
message ResumeReleaseSyncJob {
    // The workspace id in HTTP Request-URI
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];
}

// ConvertSyncJobMode used as a request parameters for RPC.
message ConvertSyncJobMode {
    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];
    // conf
    // @inject_tag: json:"conf" uri:"conf"
    model.SyncJobConf conf = 2;
}

// ListSyncJobVersions used as a request parameters for RPC and HTTP(based on URL-Query)
message ListSyncJobVersions {

    // Limit the maximum number of entries returned this time.
    // Not required, Max 100, default 100.
    // @inject_tag: json:"limit" form:"limit"
    int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

    // The offset position. Not required, default 0.
    // @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
    int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

    // The field list used to sorted query results.
    // Optional values: {version, created, updated}.
    // Multiple fields are separated by commas(","), eg: sort_by="version".
    // Not required, default: version.
    // @inject_tag: json:"sort_by" form:"sort_by"
    string sort_by = 3  [ (validator.field).tags.string = { in: ["", "version", "created", "updated"] } ];

    // Reverse order results. Not required, default: false.
    // @inject_tag: json:"reverse" form:"reverse"
    bool reverse = 4;

    // The sync job id in HTTP Request-URI
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];
}

// DescribeFlinkUIByInstanceId used as a request parameters for RPC.
message DescribeSyncFlinkUIByInstanceId {
    // The instance id in HTTP Request-URI. Is Required.
    // @inject_tag: json:"instance_id" uri:"instance_id" swaggerignore:"true"
    string instance_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syi-" } ];
}

// GenerateJobJson used as a request parameters for RPC.
message GenerateJobJson {
    // source_type
    // @inject_tag: json:"source_type" uri:"source_type"
    model.DataSource.Type source_type = 1 [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

    // The instance id in HTTP Request-URI. Is Required.
    // @inject_tag: json:"source_version" uri:"source_version" swaggerignore:"true"
    string source_version = 2;
    // target type
    // @inject_tag: json:"target_type" uri:"target_type"
    model.DataSource.Type target_type = 3 [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];
    // target version
    // @inject_tag: json:"target_version" uri:"target_version" swaggerignore:"true"
    string target_version = 4;
    // job_id
    // @inject_tag: json:"job_id" uri:"job_id"
    string job_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syi-" } ];


}

message PingSyncJobConnection {
    // The space id.
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The id of sync jod.
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // @inject_tag: json:"cluster_id" form:"cluster_id"
    string cluster_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];

    // The datasource id that as a sync source.
    // @inject_tag: json:"source_id" form:"source_id"
    string source_id = 4 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];

    // The datasource id that as a sync target.
    // @inject_tag: json:"target_id" form:"target_id"
    string target_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];
}

message DescribeSyncConnection {
    // The space id.
    // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
    string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

    // The id of sync jod.
    // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
    string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // @inject_tag: json:"cluster_id" form:"cluster_id"
    string cluster_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];

    // The datasource id that as a sync source.
    // @inject_tag: json:"source_id" form:"source_id"
    string source_id = 4 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];

    // The datasource id that as a sync target.
    // @inject_tag: json:"target_id" form:"target_id"
    string target_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];
}
