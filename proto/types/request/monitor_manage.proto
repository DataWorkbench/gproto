syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/pkg/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestMonitorManage";
option java_multiple_files = false;

import "github.com/yu31/proto-go-plugin/proto/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/defaults.proto";
//import "github.com/yu31/proto-go-plugin/proto/gosql.proto";

import "proto/types/model/monitor.proto";


// ListWorkspaces used as a request parameters for RPC and HTTP(based on URL-Query)
message ListMonitorRules {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];
}

// CreateMonitorRule used as a request parameters for RPC and HTTP(based on Body).
message CreateMonitorRule {
  model.MonitorRule info = 1 [ (validator.field).tags.message = { not_null: true } ];
}

// DeleteMonitorRules used as a request parameters for RPC and HTTP(based on Body).
message DeleteMonitorRules {
  // The list of monitor rule id. Is required, Min 1, Max 100.
  // @inject_tag: json:"rule_ids"
  repeated string rule_ids = 1 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// EnableMonitorRules used as a request parameters for RPC and HTTP(based on Body).
message EnableMonitorRules {
  // The list of monitor rule id. Is required, Min 1, Max 100.
  // @inject_tag: json:"rule_ids"
  repeated string rule_ids = 1 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// DisableMonitorRules used as a request parameters for RPC and HTTP(based on Body).
message DisableMonitorRules {
  // The list of monitor rule id. Is required, Min 1, Max 100.
  // @inject_tag: json:"rule_ids"
  repeated string rule_ids = 1 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// UpdateMonitorRule used as a request parameters for RPC.
message UpdateMonitorRule {
  model.MonitorRule info = 1 [ (validator.field).tags.message = { not_null: true } ];
}

// DescribeMonitorRule used as a request parameters for RPC.
message DescribeMonitorRule {
  // The monitor rule id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"rule_id" uri:"rule_id" swaggerignore:"true"
  string rule_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];
}