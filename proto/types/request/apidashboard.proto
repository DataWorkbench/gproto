syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestApiDashboard";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";
import "proto/types/model/apidashboard.proto";

message CreateRoute {
  // @inject_tag: json:"route_info"
  RouteInfo route_info = 1;
}

message UpdateRoute {
  // @inject_tag: json:"route_info"
  RouteInfo route_info = 1;
}

message RepublishRoute {
  // @inject_tag: json:"route_info"
  RouteInfo route_info = 1;
}

message RouteInfo {
  // @inject_tag: json:"uri"
  string uri = 1 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 256 } ];
  // @inject_tag: json:"id"
  string id = 2 [
    (validator.field).check_if = { field: "id", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20 }
  ];
  // @inject_tag: json:"desc"
  string desc = 3 [ (validator.field).tags.string = { byte_len_gte: 0,  byte_len_lt: 512 } ];
  // @inject_tag: json:"hosts"
  string upstream_id = 4 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 20 } ];
  // @inject_tag: json:"name"
  string name = 5 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 128 } ];
  // @inject_tag: json:"api_service_id"
  string api_service_id = 6 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 20 } ];
  // @inject_tag: json:"api_version_id"
  string api_version_id = 7 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 20 } ];
  // @inject_tag: json:"proxy_uri"
  string proxy_uri = 8 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 256 } ];
  // @inject_tag: json:"space_id"
  string space_id = 9 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];
}

message DeleteRoute {
  // @inject_tag: json:"ids"
  repeated string ids  = 1 [ (validator.field).tags.repeated = { len_gte: 0, len_lte: 100 } ];
}

message ListRoutes {
  // @inject_tag: json:"name" form:"name"
  string name = 1;
  // @inject_tag: json:"uri" form:"uri"
  string uri = 2;
  // @inject_tag: json:"curr_status" form:"curr_status"
  model.StatusType curr_status = 3 [ (validator.field).tags.enum = { in_enums: true } ];
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 4 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];
  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 5 [ (validator.field).tags.int  = { gte: 0 } ];
  // The field list used to sorted query results.
  // Optional values: {id, name, create_time, create_time}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 6 [ (validator.field).tags.string = { in: ["", "id", "name", "create_time", "update_time"] } ];
  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 7;
  // The id lists of resource query.
  // @inject_tag: json:"ids" form:"ids"
  repeated string ids  = 8 [ (validator.field).tags.repeated = { len_gte: 0, len_lte: 100 } ];
  // @inject_tag: json:"api_version_id" form:"api_version_id"
  string api_version_id = 9;
  // @inject_tag: json:"api_service_id" form:"api_service_id"
  string api_service_id = 10;
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 11;
}

message CreateUpstream {
  UpstreamInfo upstream_info = 1;
}

message UpdateUpstream {
  UpstreamInfo upstream_info = 1;
}

message UpstreamInfo {
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];
  // @inject_tag: json:"nodes"
  repeated model.UpstreamNode nodes = 2 [ (validator.field).tags.repeated = { len_gte: 0 } ];
  // @inject_tag: json:"name"
  string name = 3 [ (validator.field).tags.string = { byte_len_gt: 0,  byte_len_lt: 256} ];
  // @inject_tag: json:"desc"
  string desc = 4 [ (validator.field).tags.string = { byte_len_gte: 0,  byte_len_lt: 512} ];
  // @inject_tag: json:"schema"
  model.SchemaType schema = 5 [ (validator.field).tags.enum = { in_enums: true } ];

  model.UpstreamTLS tls = 6 [(validator.field) = { }];
  // @inject_tag: json:"timeout"
  model.Timeout timeout = 7;
  // @inject_tag: json:"id"
  string id = 8 [
    (validator.field).check_if = { field: "id", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20 }
  ];
}

message DeleteUpstream {
  // @inject_tag: json:"id"
  string id = 1 [
    (validator.field).check_if = { field: "id", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20 }
  ];
}

message ListUpstreams {
  // @inject_tag: json:"name"
  string name = 1;
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];
  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];
  // The field list used to sorted query results.
  // Optional values: {id, name, create_time, create_time}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "name", "create_time", "update_time"] } ];
  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse"
  bool reverse = 5;
  // The id lists of resource query.
  // @inject_tag: json:"ids" form:"ids"
  repeated string ids  = 6 [ (validator.field).tags.repeated = { len_gte: 0, len_lte: 100 } ];
  // @inject_tag: json:"space_id"
  string space_id = 7;
  // @inject_tag: json:"curr_status"
  model.StatusType curr_status = 8 [ (validator.field).tags.enum = { in_enums: true } ];

}

message CreateSSL {
  // @inject_tag: json:"cert"
  string cert = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
  // @inject_tag: json:"key"
  string key = 2 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
  // @inject_tag: json:"snis"
  repeated string snis = 3 [ (validator.field).tags.repeated = { len_gt: 0 } ];
  // @inject_tag: json:"id"
  string id = 4;
  // @inject_tag: json: "space_id"
  string space_id = 5;
}

message DeleteSSL {
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
}

message ListSSLs {
  // The id lists of resource query.
  // @inject_tag: json:"ids" form:"ids"
  repeated string ids  = 1 [ (validator.field).tags.repeated = { len_gte: 0, len_lte: 100 } ];
  // @inject_tag: json:"sni"
  string sni = 2;
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit"
  int32 limit = 3 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];
  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset"
  int32 offset = 4 [ (validator.field).tags.int  = { gte: 0 } ];
  // The field list used to sorted query results.
  // Optional values: {id, create_time, create_time}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by"
  string sort_by = 5 [ (validator.field).tags.string = { in: ["", "id", "create_time", "update_time"] } ];
  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse"
  bool reverse = 6;
  // @inject_tag: json:"space_id"
  string space_id = 7;
  // @inject_tag: json:"created_by"
  string created_by = 8;
  // @inject_tag: json:"curr_status"
  model.StatusType curr_status = 9 [ (validator.field).tags.enum = { in_enums: true } ];
}

message CreateApiService {
  // @inject_tag: json:"name"
  string name = 1;
  // @inject_tag: json:"desc"
  string desc = 2 [ (validator.field).tags.string = { byte_len_gte: 0, byte_len_lte: 256 } ];;
  // @inject_tag: json:"auth_key_id"
  string auth_key_id = 3 [ (validator.field).tags.string = { byte_len_gte: 0, byte_len_lte: 256 } ];
  // @inject_tag: json:"space_id"
  string space_id = 4 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 5 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 256 } ];
  // @inject_tag: json:"id"
  string id = 6 [ (validator.field).tags.string = { byte_len_gte: 0, byte_len_lte: 256 } ];
  // @inject_tag: json:"pre_path"
  string pre_path = 7 [ (validator.field).tags.string = { byte_len_lte: 128 } ];
}

message DeleteApiService {
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lt: 256 } ];
}

message UpdateApiService {
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lt: 256 } ];

  string name = 2;

  string desc = 3;
}

message ListApiServices {
  // The id lists of resource query.
  // @inject_tag: json:"ids" form:"ids"
  repeated string ids  = 1 [ (validator.field).tags.repeated = { len_gte: 0, len_lte: 100 } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];
  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];
  // The field list used to sorted query results.
  // Optional values: {id, create_time, create_time}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "create_time", "update_time"] } ];
  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 5;
  // Reverse order results. Not required, default: "".
  // @inject_tag: json:"auth_key_id" form:"auth_key_id"
  string auth_key_id = 6;
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 7;
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 8;
  // @inject_tag: json:"curr_status" form:"curr_status"
  model.StatusType curr_status = 9 [ (validator.field).tags.enum = { in_enums: true } ];
  // @inject_tag: json:"name" form:"name"
  string name = 10;
}

message AddSvcReqCount {
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
  // @inject_tag: json:"count"
  int32 count = 2 [ (validator.field).tags.int = { gt: 0 } ];
}

message GetSvcReqCount {
  // apiService ID
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
}

message DeleteClusterRoutes {
  repeated ApiServiceAndRoutes items = 1 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

message ApiServiceAndRoutes {
  string api_service_id = 1;
  repeated string routeIDs = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

message CreateAuthKey {
  // @inject_tag: json:"name" form:"name"
  string name = 1;
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 3 [ (validator.field).tags.string = { byte_len_gt: 0, byte_len_lte: 256 } ];
}

message DeleteAuthKey {
  // @inject_tag: json:"id" form:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
}

message UpdateAuthKey {
  // @inject_tag: json:"id" form:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
  // @inject_tag: json:"name" form:"name"
  string name = 2;
}

message ListAuthKeys {
  // The id lists of resource query.
  // @inject_tag: json:"ids" form:"ids"
  repeated string ids  = 1 [ (validator.field).tags.repeated = { len_gte: 0, len_lte: 100 } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {id, create_time, create_time}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 4 [ (validator.field).tags.string = { in: ["", "id", "create_time", "update_time"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 5;

  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 6;
  // @inject_tag: json:"created_by" form:"created_by"
  string created_by = 7;
  // @inject_tag: json:"curr_status" form:"curr_status"
  model.StatusType curr_status = 8 [ (validator.field).tags.enum = { in_enums: true } ];
  // @inject_tag: json:"name" form:"name"
  string name = 9;
}

message BindAuthKey {
  // AuthKey ID
  // @inject_tag: json:"auth_key_id" form:"auth_key_id"
  string auth_key_id = 1 [ (validator.field).tags.string = { byte_len_gt: 0 } ];
  // ApiService ID
  // @inject_tag: json:"api_service_ids" form:"api_service_ids"
  repeated string api_service_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

message UnbindAuthKey {
  // ApiService ID
  // @inject_tag: json:"api_service_ids" form:"api_service_ids"
  repeated string api_service_ids = 1 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}