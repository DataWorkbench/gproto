syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestDataSourceBroker";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";

import "proto/types/model/datasource.proto";
//import "proto/types/model/datasource/datasource_table.proto";

// PingDataSourceConnectionByBroker used as request parameters for RPC and HTTP(based on Body)
message PingDataSourceConnectionByBroker {
  // Source Type
  // @inject_tag: json:"type"
  model.DataSource.Type type = 1 [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

  // Source URL of connection info.
  // @inject_tag: json:"url"
  model.DataSource.URL url = 2 [ (validator.field).tags.message = { not_null: true, skip: true } ];
}

// DescribeDataSourceTablesByBroker
message DescribeDataSourceTablesByBroker {
  // Source Type
  // @inject_tag: json:"type"
  model.DataSource.Type type = 1 [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

  // Source URL of connection info.
  // @inject_tag: json:"url"
  model.DataSource.URL url = 2 [ (validator.field).tags.message = { not_null: true, skip: true } ];
}

message DescribeDataSourceTableSchemaByBroker {
  // Source Type
  // @inject_tag: json:"type"
  model.DataSource.Type type = 1 [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

  // Source URL of connection info.
  // @inject_tag: json:"url"
  model.DataSource.URL url = 2 [ (validator.field).tags.message = { not_null: true, skip: true } ];

  // @inject_tag: json:"table_name"
  string table_name = 3 [ (validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 256 } ];
}