syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestResourceManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
//import "github.com/yu31/protoc-plugin/proto/gosql.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/resource.proto";

// UploadFile used as a request parameters for RPC and HTTP(based on URL-Query).
message UploadFileRequest {
  // The workspace id in HTTP Request-URI
  string space_id = 1;

  // The resource name. required.
  string resource_name = 2;

  // The resource type. required.
  model.Resource.Type resource_type = 3;

  // The data for resource. required.
  bytes data = 4;

  // The resource Size. prevent data missing.
  int64 resource_size = 5;

  // The resource description. not required.
  string description = 6;

  // Resource status, 1 => "enabled", 2 => "disabled", 3 => "deleted".
  model.Resource.Status status = 7;

  // The resource owner.
  string create_by = 8;
}

// ReUploadFile used as a request parameters for RPC and HTTP(based on URL-Query).
message ReUploadFileRequest {

  // The resource id in HTTP Request-URI
  string resource_id = 1;

  // The workspace id in HTTP Request-URI
  string space_id = 2;

  // The data for resource. required.
  bytes data = 3;

  // The resource Size. prevent data missing.
  int64 size = 4;
}


// DownloadFile used as a request parameters for RPC and HTTP(based on URL-Query).
message DownloadFile{
  // The resource id in HTTP Request_URI.
  // @inject_tag: josn:"resource_id" uri:"resource_id" swaggerignore:"true"
  string resource_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];
}

// DescribeFile used as a request parameters for RPC and HTTP(based on URL-Query).
message DescribeFile{
  // The resource id in HTTP Request_URI.
  // @inject_tag: josn:"resource_id" uri:"resource_id" swaggerignore:"true"
  string resource_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];
}

// ListResources used as a request parameters for RPC and HTTP(based on URL-Query).
message ListResources{
  // The workspace id in HTTP Request-URI
  // @inject_tag: josn:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: josn:"limit" form:"limit"
  int32 limit = 2 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 3 [ (validator.field).tags.int  = { gte: 0 } ];

  // The resource type. required.
  // @inject_tag: josn:"resource_type" form:"resource_type"
  int32  resource_type = 4 [(validator.field).tags.int = { gte:0, lte:3 }];

  // The resource name. not required.
  // @inject_tag: josn:"resource_name" form:"resource_name" binding:"-"
  string resource_name = 5 [(validator.field) = {}];

  // Search with resource name; not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6 [(validator.field).tags.string = { byte_len_lte: 500 }];

  // The field list used to sorted query results.
  // Optional values: {id, created, updated, name, size}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 7 [ (validator.field).tags.string = { in: ["", "id", "created", "updated", "name", "size"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 8 [(validator.field) = {}];
}

// UpdateResource used as a request parameters for RPC and HTTP(based on URL-Query).
message UpdateResource{
  // The workspace id in HTTP Request-URI
  // @inject_tag: josn:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The resource id in HTTP Request_URI.
  // @inject_tag: josn:"resource_id" uri:"resource_id" swaggerignore:"true"
  string resource_id = 2 [(validator.field).tags.string = { byte_len_eq: 20}];

  // The resource name. required.
  // @inject_tag: josn:"resource_name"
  string resource_name = 3 [(validator.field).tags.string = { byte_len_lte: 500 }];

  // The resource description. Not required.
  // @inject_tag: josn:"description" binding:"lte=2500"
  string description = 4 [(validator.field) = {}];

  // The resource type. Not required.
  // @inject_tag: josn:"resource_type" form:"resource_type"
  model.Resource.Type resource_type = 5 [(validator.field).tags.enum = { gt: 0; in_enums: true  }];
}

message DeleteResources {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of resource id. Is required, Min 1 Max 100.
  // @inject_tag: json:"resource_ids"
  repeated string resource_ids = 2 [(validator.field).tags.repeated = { len_gt: 0, len_lte: 100 }];
}

// RenameFlinkStatePath used as a request parameters for RPC.
message RenameFlinkStatePath{
  // The real path of flink job's savepoint or checkpoint.
  // @inject_tag: json:"src_path"
  string src_path = 1 [ (validator.field).tags.string = { byte_len_gte: 1, byte_len_lte: 100 } ];
  // The dest path of flink job's savepoint or checkpoint.
  // @inject_tag: json:"dst_path"
  string dst_path = 2 [ (validator.field).tags.string = { byte_len_gte: 1, byte_len_lte: 100 } ];
}

// DeleteFlinkState used as a request parameters for RPC.
message DeleteFlinkState{
  // The path of flink job's savepoint or checkpoint.
  // @inject_tag: json:"delete_path"
  string delete_path = 1 [ (validator.field).tags.string = { byte_len_gte: 1, byte_len_lte: 100 } ];

  // The type of flink state path.
  // @inject_tag: json:"is_dir"
  bool is_dir = 2;
}
