syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestStreamInstanceManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";
//import "github.com/yu31/protoc-plugin/proto/gosql.proto";

import "proto/types/model/stream_instance.proto";

// ListStreamInsts used as a request parameters for RPC and HTTP(based on URL-Query).
// This struct can used for ListStreamInsts and ListStreamInsts
message ListStreamInstances {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The workspace id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id. Not required.
  // @inject_tag: json:"job_id" form:"job_id"
  string job_id = 4;

  // The stream job version id. Not required.
  // @inject_tag: json:"version" form:"version"
  string version = 5;

  // The stream instance state. Not required.
  // @inject_tag: json:"state" form:"state"
  model.StreamInstance.State state = 6 [ (validator.field).tags.enum = { in_enums: true }];

  // The field list used to sorted query results.
  // Optional values: {job_id, id, created, updated}.
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 7 [ (validator.field).tags.string = { in: ["", "id", "job_id", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 8;

  // Filter by `instance_id`. Not required.
  // @inject_tag: json:"instance_id" form:"instance_id"
  string instance_id = 9;
}

// TerminateStreamInstances used as a request parameters for RPC.
// This struct can used for TerminateStreamCycleInst and TerminateStreamTestInst.
message TerminateStreamInstances {
  // The workspace id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of instance id and its stream job id. Is Required. Min: 1, Max: 100
  // @inject_tag: json:"instance_ids"
  repeated string instance_ids = 3 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "sti-" } } } ];
}

// SuspendStreamInstances used as a request parameters for RPC.
// This struct can used for SuspendStreamCycleInst and SuspendStreamTestInst.
message SuspendStreamInstances {
  // The workspace id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of instance id and its stream job id. Is Required. Min: 1, Max: 100
  // @inject_tag: json:"instance_ids"
  repeated string instance_ids = 3 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "sti-" } } } ];
}

// ResumeStreamInstances used as a request parameters for RPC.
// This struct can used for ResumeStreamCycleInst and SuspendStreamTestInst.
message ResumeStreamInstances {
  // The workspace id in HTTP Request-URI. Is Required.
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The list of instance id and its stream job id. Is Required. Min: 1, Max: 100
  // @inject_tag: json:"instance_ids"
  repeated string instance_ids = 3 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100, item: { string: { prefix: "sti-" } } } ];
}

message DescribeStreamInstance {
  string instance_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "sti-" } ];
}

// CreateStreamInstanceWithId used as a request parameters for RPC.
message CreateStreamInstanceWithId {
  // The workspace id in HTTP Request-URI. Is Required.
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "stj-" } ];

  // The stream job version
  string version = 3 [ (validator.field).tags.string = { byte_len_eq: 16  } ];

  string instance_id = 4 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "sti-" } ];

  string message = 5;
}

message UpdateStreamInstanceState {
  string instance_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "sti-" } ];

  model.StreamInstance.State state = 2 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  string message = 3;
}
