syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestEngineManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
//import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/cluster.proto";
import "proto/types/model/network.proto";
import "proto/types/model/dataservice.proto";

message CreateFlinkClusterInK8s {
  // Cluster is the metadata info of flink cluster.
  model.FlinkCluster info = 1 [ (validator.field).tags.message = { not_null: true } ];
}

message DeleteFlinkClusterInK8s {
  // Cluster is the metadata info of flink cluster.
  model.FlinkCluster info = 1 [ (validator.field).tags.message = { not_null: true } ];
}

message CreateNetworkBrokerInK8s {
  // Cluster is the metadata info of flink cluster.
  model.Network info = 5 [ (validator.field).tags.message = { not_null: true } ];
}

message DeleteNetworkBrokerInK8s {
  // Cluster is the metadata info of flink cluster.
  model.Network info = 5 [ (validator.field).tags.message = { not_null: true } ];
}

message DeleteNamespacesInK8s {
  // @inject_tag: json:"space_ids"
  repeated string space_ids = 1 [ (validator.field).tags.repeated = { unique: true, item: { string: { byte_len_eq: 20, prefix: "wks-" } } } ];
}

message CreateFlinkClusterInK8sV2 {
  // Cluster is the metadata info of flink cluster.
  model.FlinkCluster info = 1 [ (validator.field).tags.message = { not_null: true } ];

//  // vxnet id. Is required.
//  // @inject_tag: json:"vxnet_id"
//  string vxnet_id = 2 [ (validator.field).tags.string = { prefix: "vxnet-" } ];
}

message DeleteFlinkClusterInK8sV2 {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // @inject_tag: json:"cluster_id"
  string cluster_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];

  // vxnet id. Is required.
  // @inject_tag: json:"vxnet_id"
  string vxnet_id = 3 [
    (validator.field).check_if = { field: "vxnet_id", tags: {string: { ne: "" }}},
    (validator.field).tags.string = { prefix: "vxnet-" }
  ];
}

message RestartFlinkClusterInK8s {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // @inject_tag: json:"cluster_id"
  string cluster_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "cfi-" } ];
}

message CreateNetworkBrokerInK8sV2 {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // VPC's route id, Is required.
  // @inject_tag: json:"router_id"
  string router_id = 2 [ (validator.field).tags.string = { prefix: "rtr-" } ];

  // vxnet id. Is required.
  // @inject_tag: json:"vxnet_id"
  string vxnet_id = 3 [ (validator.field).tags.string = { prefix: "vxnet-" } ];
}

message DeleteNetworkBrokerInK8sV2 {
  // Workspace ID it belongs to.
  // @inject_tag: json:"space_id"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // VPC's route id, Is required.
  // @inject_tag: json:"router_id"
  string router_id = 2 [ (validator.field).tags.string = { prefix: "rtr-" } ];

  // vxnet id. Is required.
  // @inject_tag: json:"vxnet_id"
  string vxnet_id = 3 [ (validator.field).tags.string = { prefix: "vxnet-" } ];
}

message CreateDataServiceClusterInK8sV2 {
  // Cluster is the metadata info of dataservice cluster.
  model.DataServiceCluster info = 1 [ (validator.field).tags.message = { not_null: true } ];

}
