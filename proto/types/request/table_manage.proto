syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestTableManage";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";
//import "github.com/yu31/protoc-plugin/proto/gosql.proto";

import "proto/types/model/table.proto";
import "proto/types/model/flink/flink_table.proto";

// CreateTable used as request parameters for RPC and HTTP(based on Body)
message CreateFlinkTable {
  // The table id.
  // @inject_tag: json:"space_id" swaggerignore:"true"
  string space_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Table owner.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2   [(validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 }];

  // The data source id.
  // @inject_tag: json:"source_id"
  string source_id = 4 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Source name unique within a space.
  // @inject_tag: json:"name"
  string name = 5   [ (validator.field).tags.string = { byte_len_gte: 1, byte_len_lte: 64 } ];

  // describe this source.
  // @inject_tag: json:"comment"
  string comment = 6    [ (validator.field).tags.string = { byte_len_lte: 256 } ];

  // this source connection info
  // @inject_tag: json:"table_schema"
  flink.TableSchema table_schema = 7 ;

  // TableKind, one of 1/2/3 1->source/2->destination/3->dimension
  // @inject_tag: json:"table_kind"
  model.FlinkTable.Kind table_kind = 8  [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];
}

// UpdateTable used as request parameters for RPC and HTTP(based on Body)
message UpdateFlinkTable {
  // The table id.
  // @inject_tag: json:"table_id" swaggerignore:"true"
  string table_id  = 1 [ (validator.field).tags.string = { byte_len_lt: 21 } ];

  // Source name unique within a space.
  // @inject_tag: json:"name"
  string name = 2   [ (validator.field).tags.string = { byte_len_gte: 1, byte_len_lte: 64 } ];

  // describe this source.
  // @inject_tag: json:"comment"
  string Comment = 3    [ (validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 256 } ];

  // this source connection info
  // @inject_tag: json:"table_schema"
  flink.TableSchema table_schema = 4;

  // TableKind, one of 1/2/3 1->source/2->destination/3->dimension
  // @inject_tag: json:"table_kind"
  model.FlinkTable.Kind table_kind = 5  [ (validator.field).tags.enum = { gt: 0; in_enums: true  } ];
}

// DeleteTable used as request parameters for RPC and HTTP(based on Body)
message DeleteFlinkTables {
  // delete these tableIDs
  // @inject_tag: json:"table_ids"
  repeated string table_ids = 1 [ (validator.field).tags.repeated = { len_gte: 1, len_lte: 1100 } ];
}

// DescribeTable used as request parameters for RPC and HTTP(based on Body)
message DescribeFlinkTable {
  // SourceIDs
  // @inject_tag: json:"table_id"
  string table_id  = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];
}

// ListTable used as a request parameters for RPC and HTTP(based on URL-Query)
message ListFlinkTables {
  // Limit the maximum number of entries returned this time.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {table_id, name, created, updated}.
  // Multiple fields are separated by commas(","), eg: sort_by="updated".
  // Not required, default: updatetime.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 3 [ (validator.field).tags.string = { in: ["", "table_id", "name", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse"
  bool reverse = 4 [(validator.field) = {}];

  // Search with name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 5 [(validator.field) = {}];

  // get this spaceid tables.
  // @inject_tag: json:"space_id"
  string space_id  = 6 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // get this source tables.
  // @inject_tag: json:"source_id"
  string source_id  = 7 ;

  // TableKind, one of 1/2/3 1->source/2->destination/3->dimension
  // @inject_tag: json:"table_kind" form:"table_kind"
  model.FlinkTable.Kind table_kind = 8  [ (validator.field).tags.enum = { in_enums: true  } ];
}
