syntax = "proto3";

package request;

option go_package = "github.com/DataWorkbench/gproto/pkg/types/pbrequest";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbrequest";
// File name of class.
option java_outer_classname = "PBRequestStreamJobManage";
option java_multiple_files = false;

import "github.com/yu31/proto-go-plugin/proto/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/defaults.proto";

import "proto/types/model/stream_job.proto";

// ListStreamJobs used as a request parameters for RPC and HTTP(based on URL-Query)
message ListStreamJobs {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {id, name, created, updated}.
  // Multiple fields are separated by commas(","), eg: sort_by="name,crated".
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 3 [ (validator.field).tags.string = { in: ["", "id", "name", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 4 [ (validator.field) = { } ];

  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // Search with stream job name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6 [(validator.field) = {}];
}

// CreateStreamJob used as a request parameters for RPC and HTTP(based on Body)
message CreateStreamJob {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The user-id of created this job. Fixed to the request user id.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2 [ (validator.field).tags.string = { byte_len_lt: 65 } ];

  // The job name in each workspace is unique. Is required, Max Length 128.
  // And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
  // @inject_tag: json:"name"
  string name = 3 [ (validator.field).tags.string = { char_len_gte: 2, char_len_lte: 128 } ];

  // Description of the job, Not required, Max length 1024.
  // @inject_tag: json:"desc"
  string desc = 4 [ (validator.field).tags.string = { char_len_lte: 1020 } ];

  // The job Type. Is Required, Optional Value: 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
  // Desc: Cannot be modified after creation.
  // @inject_tag: json:"type"
  model.StreamJob.Type type = 5  [ (validator.field).tags.enum = { gt: 0; in_enums: true  } ];

  // The flink compute cluster id. Is required.
  // @inject_tag: json:"cluster_id"
  string cluster_id = 6 [(validator.field) = {}];

  // The owner of workspace, only used to check quota. Set by APIServer.
  // @inject_tag: json:"space_owner" swaggerignore:"true"
  string space_owner = 7 [(validator.field).tags.string = { ne: "" } ];
}

// DeleteStreamJobs used as a request parameters for RPC and HTTP(based on Body)
message DeleteStreamJobs {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];
  // The list of stream job id. Is required, Min 1, Max 100.
  // @inject_tag: json:"job_ids"
  repeated string job_ids = 2 [ (validator.field).tags.repeated = { len_gt: 0, len_lte: 100 } ];
}

// UpdateStreamJob used as a request parameters for RPC and HTTP(based on Body).
message UpdateStreamJob {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The stream job name in each workspace is unique. Is required, Max Length 128.
  // And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
  // @inject_tag: json:"name"
  string name = 3  [ (validator.field).tags.string = { char_len_gte: 2, char_len_lte: 128 } ];

  // Description of the workspace, Not required, Max length 1024.
  // @inject_tag: json:"desc"
  string desc = 4  [ (validator.field).tags.string = { char_len_lte: 1024 } ];
}

// DescribeStreamJob used as a request parameters for RPC.
message DescribeStreamJob {
  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The stream job version id in HTTP Request-URI
  // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
  string version = 2 [(validator.field) = {}];
}

// SetStreamJobCode used as a request parameters for RPC.
message SetStreamJobCode {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id it belongs to.
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The code info of JSON format.
  // @inject_tag: json:"code"
  model.StreamJobCode code = 3 [ (validator.field).tags.message = { not_null: true } ];
}

// SetStreamJobSchedule used as a request parameters for RPC.
message SetStreamJobSchedule {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id it belongs to.
  // @inject_tag: json:"job_id" uri:"job_id"  swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  model.StreamJobSchedule info = 3 [ (validator.field).tags.message = { not_null: true } ];
}

// SetStreamJobCode used as a request parameters for RPC.
message StreamJobCodeSyntax {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id it belongs to.
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The code info of JSON format.
  // @inject_tag: json:"code"
  model.StreamJobCode code = 3 [ (validator.field).tags.message = { not_null: true } ];
}

// SetStreamJobArgs used as a request parameters for RPC.
message SetStreamJobArgs {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job ID it belongs to.
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  model.StreamJobArgs info = 3 [ (validator.field).tags.message = { not_null: true } ];
}

// GetStreamJobCode used as a request parameters for RPC.
message GetStreamJobCode {
  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The stream job version id in HTTP Request-URI
  // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
  string version = 2 [(validator.field) = {}];
}

// GetStreamJobSchedule used as a request parameters for RPC.
message GetStreamJobSchedule {
  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The stream job version id in HTTP Request-URI
  // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
  string version = 2 [(validator.field) = {}];
}

// GetStreamJobArgs used as a request parameters for RPC.
message GetStreamJobArgs {
  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The stream job version id in HTTP Request-URI
  // @inject_tag: json:"version" uri:"ver_id" swaggerignore:"true"
  string version = 2 [(validator.field) = {}];
}

// ListReleaseStreamJobs used as a request parameters for RPC and HTTP(based on URL-Query).
message ListReleaseStreamJobs {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The field list used to sorted query results.
  // Optional values: {job_id, name, created, updated}.
  // Multiple fields are separated by commas(","), eg: sort_by="updated".
  // Not required, default: id.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 3 [ (validator.field).tags.string = { in: ["", "id", "name", "created", "updated"]} ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 4 [ (validator.field) = { } ];

  // Search with stream job name; Not required.
  // @inject_tag: json:"search" form:"search"
  string search = 6 [(validator.field) = { } ];

  // Filter by release status;  Not required.
  // Valid optional: 1 => "enabled", 2 => "disabled".
  // @inject_tag: json:"status" form:"status"
  model.StreamJobRelease.Status status = 7 [(validator.field).tags.enum = { in_enums: true }];

  // The stream job id.
  // @inject_tag: json:"job_id" form:"job_id"
  string job_id = 8 [(validator.field) = { } ];
}

// ReleaseStreamJob used as a request parameters for RPC and HTTP(based on Body.)
message ReleaseStreamJob {
  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // The user-id of release this job. Fixed to the request user id.
  // @inject_tag: json:"created_by" swaggerignore:"true"
  string created_by = 2 [ (validator.field).tags.string = { byte_len_lt: 65 } ];

  // Description for this releases. Not required, Max length 1024.
  // @inject_tag: json:"desc"
  string desc = 3;

  // @inject_tag: json:"stop_running"
  bool stop_running = 4 [(validator.field) = {}];
}

// OfflineReleaseStreamJob used as a request parameters for RPC and HTTP(based on Body).
message OfflineReleaseStreamJob {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];
}

// SuspendReleaseStreamJob used as a request parameters for RPC and HTTP(based on Body).
message SuspendReleaseStreamJob {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];

  // @inject_tag: json:"stop_running"
  bool stop_running = 3 [(validator.field) = {}];
}

// ResumeReleaseStreamJobs used as a request parameters for RPC.
message ResumeReleaseStreamJob {
  // The workspace id in HTTP Request-URI
  // @inject_tag: json:"space_id" uri:"space_id" swaggerignore:"true"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "wks-" } ];

  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20} ];
}

// ListStreamJobVersions used as a request parameters for RPC and HTTP(based on URL-Query)
message ListStreamJobVersions {
  // Limit the maximum number of entries returned this time.
  // Not required, Max 100, default 100.
  // @inject_tag: json:"limit" form:"limit"
  int32 limit = 1 [ (defaults.field).basic = "100", (validator.field).tags.int = { gt: 0, lte: 100 } ];

  // The offset position. Not required, default 0.
  // @inject_tag: json:"offset" form:"offset" default:"0" binding:"gte=0"
  int32 offset = 2 [ (validator.field).tags.int  = { gte: 0 } ];

  // The field list used to sorted query results.
  // Optional values: {version, created, updated}.
  // Multiple fields are separated by commas(","), eg: sort_by="version".
  // Not required, default: version.
  // @inject_tag: json:"sort_by" form:"sort_by"
  string sort_by = 3  [ (validator.field).tags.string = { in: ["", "version", "created", "updated"] } ];

  // Reverse order results. Not required, default: false.
  // @inject_tag: json:"reverse" form:"reverse"
  bool reverse = 4 [(validator.field) = {}];

  // The stream job id in HTTP Request-URI
  // @inject_tag: json:"job_id" uri:"job_id" swaggerignore:"true"
  string job_id = 5 [ (validator.field).tags.string = { byte_len_eq: 20} ];
}
