syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBModelBinding";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";

import "proto/types/model/stream_job.proto";
import "proto/types/model/sync_job.proto";
import "proto/types/model/cluster.proto";


// BindingModuleSpec declares the resource info of binding to module.
message BindingModuleSpec {
  // The id of resource.
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // The lists of stream job in developing. Reserved fields, unused on present.
  // @inject_tag: json:"stream_job"
  repeated model.StreamJob stream_job = 2;

  // The lists of release stream job.
  // @inject_tag: json:"stream_job_release"
  repeated model.StreamJobRelease stream_job_release = 3;

  // The lists of sync job in developing. Reserved fields, unused on present.
  // @inject_tag: json:"sync_job"
  repeated model.SyncJob sync_job = 4;

  // The lists of release sync job.
  // @inject_tag: json:"sync_job_release"
  repeated model.SyncJobRelease sync_job_release = 5;

  // The list of flink cluster.
  // @inject_tag: json:"flink_cluster"
  repeated model.FlinkCluster flink_cluster = 6;
}

// BindingModule declares the module info.
// used to query from db.
message BindingModule {
  // Id represents which other modules(AttachId) are bound to this module.
  // @inject_tag: json:"id" gorm:"column:id;<-:false"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // Version is the version of module.
  // This filed maybe empty.
  // @inject_tag: json:"version" gorm:"column:version;<-:false"
  string version = 2 [
    (validator.field).check_if = { field: "version", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 16 }
  ];
}

// Binding for describes dependencies between modules.
message Binding {
  // Workspace ID it belongs to. Only used when delete workspace.
  // @inject_tag: json:"space_id" gorm:"column:space_id;primaryKey;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // ModuleId represents which resources are bound to this module.
  // @inject_tag: json:"module_id" gorm:"column:module_id;primaryKey;"
  string module_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // ModuleVersion is the version of module.
  // This filed maybe empty.
  // @inject_tag: json:"module_version" gorm:"column:module_version;primaryKey;"
  string module_version = 3 [
    (validator.field).check_if = { field: "module_version", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 16 }
  ];

  // ResourceId represents the module bound resources.
  // @inject_tag: json:"resource_id" gorm:"column:resource_id;primaryKey;"
  string resource_id = 4 [ (validator.field).tags.string = { byte_len_eq: 20 } ];

  // ResourceVersion is the version of resource.
  // Notice: Reserved field, unused on present.
  // @inject_tag: json:"resource_version" gorm:"column:resource_version;primaryKey;"
  string resource_version = 5 [
    (validator.field).check_if = { field: "resource_version", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 16 }
  ];

  // Timestamp of create time.
  // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
  int64 created = 6 [ (validator.field).tags.int = { gt: 0 } ];
}

