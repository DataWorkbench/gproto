syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBModelAccount";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";


// Role declares the information of built-in role.
message Role {
  enum Type {
    TypeUnset = 0; // useless.
    Admin = 1;
    Developer = 2;
    User = 3;
    Visitor = 4;
  }

  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq:20, prefix: "ros-" } ];

  // @inject_tag: json:"type"
  Type type = 2 [ (validator.field).tags.enum = {gt: 0, in_enums: true } ];

  // @inject_tag: json:"name"
  string name = 3 [(validator.field).tags.string = { ne: "" }];
}

// AdminModule declares the module information in the admin.
message AdminModule {
  enum Classify {
    ClassifyUnSet = 0;
    UserManage = 1;
    SessionManage = 2;
    MessageManage = 3;
    AuthManage = 4;
    NotificationManage = 5;
  }

  // The module id.
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "pmo-" }];

  // The module classify.
  // @inject_tag: json:"classify"
  Classify classify = 2 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // Name is the display name of this Module. Is user readable.
  // @inject_tag: json:"name"
  string name = 3 [ (validator.field).tags.string = { ne: "" } ];

  // ApiList represents the list of APIs belonging to this module
  // @inject_tag: json:"api_lists"
  repeated AdminAPI api_lists = 4;
}

// APIDesc is the information of API description.
message AdminAPI {
  enum PermType {
    PermTypeUnset = 0; // is useless.
    Write = 1;
    Read = 2;
  }

  message Permission {
    // The adm role info.
    // @inject_tag: json:"role"
    Role role = 1;

    // Indicates whether the specified role allows access to this API
    // @inject_tag: json:"allowed"
    bool allowed = 2;
  }

  // APIName represents the action of this API. Default is the API Handler Func Name.
  // It cannot be modified after publishing.
  // @inject_tag: json:"api_name"
  string api_name = 1 [ (validator.field).tags.string = { ne: "" } ];

  // DisplayName is the display of this API. Is user readable.
  // @inject_tag: json:"display_name"
  string display_name = 2 [ (validator.field).tags.string = { ne: "" } ];

  // PermType is the api permission type. 1 => "Write" 2 => "Read"
  // Default type: HTTP Method GET/OPTIONS is `read`, PUT/POST/DELETE/PATCH is `write`
  // @inject_tag: json:"perm_type"
  PermType perm_type = 3 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // Permissions for defines permission of this API.
  // @inject_tag: json:"permissions"
  repeated Permission permissions = 4 [ (validator.field).tags.repeated = { len_gt: 0 } ];

  // Roles is a map to defines the permissions of this API.
  // It set by func registerHandler. Only used to check permission.
  // @inject_tag: json:"-" swaggerignore:"true"
  map<string, bool> roles = 6 [ (validator.field).tags.map = { len_gt: 0  } ];
}

message User {
  enum Status {
    _StatusUnset = 0;
    active = 1;
  }

  // @inject_tag: json:"user_id"
  string user_id = 1;

  // @inject_tag: json:"user_name"
  string user_name = 2;

  // Language "zh-cn" | "en-us"
  // @inject_tag: json:"lang"
  string lang = 3;

  // @inject_tag: json:"email"
  string email = 4;

  // @inject_tag: json:"root_user_id"
  string root_user_id = 5;

  // @inject_tag: json:"role"
  string role = 6;

  // @inject_tag: json:"privilege"
  int32 privilege = 7;

  // @inject_tag: json:"status"
  string status = 8;

  // @inject_tag: json:"zones"
  repeated string zones = 9;

  // @inject_tag: json:"regions"
  repeated string regions = 10;

  // @inject_tag: json:"notify_email"
  string notify_email = 11;

  // @inject_tag: json:"verify_type"
  string verify_type = 12;

  // @inject_tag: json:"paid_mode"
  string paid_mode = 13;

  // @inject_tag: json:"gravatar_email"
  string gravatar_email = 14;

  // @inject_tag: json:"personal_name"
  string personal_name = 15;

  // @inject_tag: json:"company_name"
  string company_name = 16;

  // @inject_tag: json:"company_phone"
  string company_phone = 17;

  // @inject_tag: json:"company_code"
  string company_code = 18;

  // @inject_tag: json:"phone"
  string phone = 19;

  // @inject_tag: json:"console_id"
  string console_id = 20;

  // @inject_tag: json:"gender"
  string gender = 21;

  // @inject_tag: json:"remarks"
  string remarks = 22;

  // @inject_tag: json:"mkt_source"
  string mkt_source = 23;

  // @inject_tag: json:"create_time"
  string create_time = 24;

  // @inject_tag: json:"status_time"
  string status_time = 25;

  // 0: root user, 1: sub user.
  // @inject_tag: json:"user_type"
  int32 user_type = 26;
}

message AccessKey {
  enum Controller {
    _ControllerUnset = 0;
    pitrix = 1;
    self  = 2;
  }

  enum Status {
    _StatusUnset = 0;
    active = 1;
  }

  string access_key_id = 1;
  string secret_access_key = 2;
  string owner = 3;
  string root_user_id = 4;
  string status = 5;
  string description = 6;
  string ip_white_list = 7;
  string console_id = 8;
  string create_time = 9;
  string status_time = 10;
  string controller = 11;
}

message NotificationList {
  message Item {
    // The content of notification item set.
    // The value is email address if notification_item_type == "email".
    // The value is phone number is notification_item_type == "phone".
    // The value is webhook address if notification_item_type == "webhook".
    // @inject_tag: json:"content"
    string content = 1;

    // @inject_tag: json:"create_time"
    string create_time = 2;

    // @inject_tag: json:"notification_item_id"
    string notification_item_id = 3;

    // The notification type. Optional Values: email|phone|webhook
    // @inject_tag: json:"notification_item_type"
    string notification_item_type = 4;

    // The item whether verified. 1 for true, 0 for false.
    // @inject_tag: json:"verified"
    int32 verified = 5;
  }

  // @inject_tag: json:"create_time"
  string create_time = 1;

  // @inject_tag: json:"notification_list_id"
  string notification_list_id = 3;

  // @inject_tag: json:"notification_list_name"
  string notification_list_name = 4;

  // @inject_tag: json:"owner"
  string owner = 5;

  // @inject_tag: json:"items"
  repeated Item items = 2;
}

// notification
// FIXME: removed it.
message Notification {
  // messager receiver
  string recipient = 1;
  string note = 2;
  string status = 3;
  string email = 4;
  int64 created_at = 5;
  int64 updated_at = 6;
  string user_id = 7;
  int64 id = 8;
}
