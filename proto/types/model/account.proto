syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBModelAccount";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";

//message AccessKey {
//  string access_key_id = 1;
//  string secret_access_key = 2;
//  string owner = 3;
//  string root_user_id = 4;
//}

message User {
  string user_id = 1;
  string user_name = 2;
  string lang = 3;
  string email = 4;
  string phone = 5;
  string status = 6;
  string role = 7;
  string currency = 8;
  string gravatar_email = 9;
  int32  privilege = 10;
  repeated string zones = 11;
  repeated string regions = 12;
  string password = 13;
}

// Role declares the information of built-in role.
message Role {
  enum Type {
    TypeUnset = 0; // useless.
    Admin = 1;
    Developer = 2;
    User = 3;
    Visitor = 4;
  }

  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq:20, prefix: "ros-" } ];

  // @inject_tag: json:"type"
  Type type = 2 [ (validator.field).tags.enum = {gt: 0, in_enums: true } ];

  // @inject_tag: json:"name"
  string name = 3 [(validator.field).tags.string = { ne: "" }];
}

// AdminModule declares the module information in the admin.
message AdminModule {
  enum Classify {
    ClassifyUnSet = 0;
    UserManage = 1;
    SessionManage = 2;
    MessageManage = 3;
    AuthManage = 4;
    NotificationManage = 5;
  }

  // The module id.
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "pmo-" }];

  // The module classify.
  // @inject_tag: json:"classify"
  Classify classify = 2 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // Name is the display name of this Module. Is user readable.
  // @inject_tag: json:"name"
  string name = 3 [ (validator.field).tags.string = { ne: "" } ];

  // ApiList represents the list of APIs belonging to this module
  // @inject_tag: json:"api_lists"
  repeated AdminAPI api_lists = 4;
}

// APIDesc is the information of API description.
message AdminAPI {
  enum PermType {
    PermTypeUnset = 0; // is useless.
    Write = 1;
    Read = 2;
  }

  message Permission {
    // The adm role info.
    // @inject_tag: json:"role"
    Role role = 1;

    // Indicates whether the specified role allows access to this API
    // @inject_tag: json:"allowed"
    bool allowed = 2;
  }

  // APIName represents the action of this API. Default is the API Handler Func Name.
  // It cannot be modified after publishing.
  // @inject_tag: json:"api_name"
  string api_name = 1 [ (validator.field).tags.string = { ne: "" } ];

  // DisplayName is the display of this API. Is user readable.
  // @inject_tag: json:"display_name"
  string display_name = 2 [ (validator.field).tags.string = { ne: "" } ];

  // PermType is the api permission type. 1 => "Write" 2 => "Read"
  // Default type: HTTP Method GET/OPTIONS is `read`, PUT/POST/DELETE/PATCH is `write`
  // @inject_tag: json:"perm_type"
  PermType perm_type = 3 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // Permissions for defines permission of this API.
  // @inject_tag: json:"permissions"
  repeated Permission permissions = 4 [ (validator.field).tags.repeated = { len_gt: 0 } ];

  // Roles is a map to defines the permissions of this API.
  // It set by func registerHandler. Only used to check permission.
  // @inject_tag: json:"-" swaggerignore:"true"
  map<string, bool> roles = 6 [ (validator.field).tags.map = { len_gt: 0  } ];
}


// notification
message Notification{
  // messager receiver
  string recipient = 1;
  string note = 2;
  string status = 3;
  string email = 4;
  int64 created_at = 5;
  int64 updated_at = 6;
  string user_id = 7;
  int64 id = 8;
}
