syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBModelAccount";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";

// AdminModule declares the module information in the admin.
message AdminModule {
  enum Classify {
    ClassifyUnSet = 0;
    UserManage = 1;
    SessionManage = 2;
    MessageManage = 3;
    AuthManage = 4;
    NotificationManage = 5;
  }

  // The module id.
  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "pmo-" }];

  // The module classify.
  // @inject_tag: json:"classify"
  Classify classify = 2 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // Name is the display name of this Module. Is user readable.
  // @inject_tag: json:"name"
  string name = 3 [ (validator.field).tags.string = { ne: "" } ];

  // ApiList represents the list of APIs belonging to this module
  // @inject_tag: json:"api_lists"
  repeated AdminAPI api_lists = 4;
}

// APIDesc is the information of API description.
message AdminAPI {
  enum PermType {
    PermTypeUnset = 0; // is useless.
    Write = 1;
    Read = 2;
  }

  message Permission {
    // The adm role info.
    // @inject_tag: json:"role"
    Role role = 1;

    // Indicates whether the specified role allows access to this API
    // @inject_tag: json:"allowed"
    bool allowed = 2;
  }

  // APIName represents the action of this API. Default is the API Handler Func Name.
  // It cannot be modified after publishing.
  // @inject_tag: json:"api_name"
  string api_name = 1 [ (validator.field).tags.string = { ne: "" } ];

  // DisplayName is the display of this API. Is user readable.
  // @inject_tag: json:"display_name"
  string display_name = 2 [ (validator.field).tags.string = { ne: "" } ];

  // PermType is the api permission type. 1 => "Write" 2 => "Read"
  // Default type: HTTP Method GET/OPTIONS is `read`, PUT/POST/DELETE/PATCH is `write`
  // @inject_tag: json:"perm_type"
  PermType perm_type = 3 [ (validator.field).tags.enum = { gt: 0, in_enums: true } ];

  // Permissions for defines permission of this API.
  // @inject_tag: json:"permissions"
  repeated Permission permissions = 4 [ (validator.field).tags.repeated = { len_gt: 0 } ];

  // Roles is a map to defines the permissions of this API.
  // It set by func registerHandler. Only used to check permission.
  // @inject_tag: json:"-" swaggerignore:"true"
  map<string, bool> roles = 6 [ (validator.field).tags.map = { len_gt: 0  } ];
}

// Role declares the information of built-in role.
message Role {
  enum Type {
    TypeUnset = 0; // useless.
    SuperAdmin = 1;
    Admin = 2;
    User = 3;
    Visitor = 4;
    Developer = 5;
  }

  // @inject_tag: json:"id"
  string id = 1 [ (validator.field).tags.string = { byte_len_eq:20, prefix: "ros-" } ];

  // @inject_tag: json:"type"
  Type type = 2 [ (validator.field).tags.enum = {gt: 0, in_enums: true } ];

  // @inject_tag: json:"name"
  string name = 3 [(validator.field).tags.string = { ne: "" }];
}

// User declares the information of users.
message User {
  enum Status {
    StatusUnset = 0;
    deleted = 1;
    active = 2;
    banned = 3;
  }

  enum Role {
    TypeUnset = 0; // useless.
    User = 1; // Ordinary tenants can only log in to the console.
    Admin = 2;
    Visitor = 3;
  }

  // The id of user. Both in Dataomnis and IaaS.
  // @inject_tag: json:"user_id" gorm:"column:access_key_id;user_id;"
  string user_id = 1 [ (validator.field).tags.string = { ne: "" } ];

  // The name of User. Both in Dataomnis and IaaS.
  // Cannot be modified in Dataomnis.
  // @inject_tag: json:"name" gorm:"column:name"
  string name = 2 [ (validator.field).tags.string = { ne: "" } ];

  // The email. Both in Dataomnis and IaaS.
  // Cannot be modified in IaaS.
  // @inject_tag: json:"email" gorm:"column:email"
  string email = 3;

  // @inject_tag: json:"role" gorm:"column:role"
  Role role = 4 [ (validator.field).tags.enum = { gt: 0, in_enums: true} ];

  // 2 => active
  // @inject_tag: json:"status" gorm:"column:status"
  Status status = 5 [ (validator.field).tags.enum = { gt: 0, in_enums: true} ];

  // The Max Length is 128.
  // @inject_tag: json:"password" gorm:"column:password"
  string password = 6;

  // @inject_tag: json:"created" gorm:"column:created;autoUpdateTime;"
  int64 created = 7 [ (validator.field).tags.int = { gt: 0 } ];

  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 8 [ (validator.field).tags.int = { gt: 0 } ];
}

// AccessKey declares the information of user's access key.
message AccessKey {
  enum Controller {
    ControllerUnset = 0;
    pitrix = 1;
    self  = 2;
  }

  enum Status {
    _StatusUnset = 0;
    deleted = 1;
    active = 2;
    inactive = 3;
  }

  // @inject_tag: json:"access_key_id" gorm:"column:access_key_id;primarykey;"
  string access_key_id = 1 [ (validator.field).tags.string = { ne: "" } ];

  // @inject_tag: json:"secret_access_key" gorm:"column:secret_access_key;"
  string secret_access_key = 2 [ (validator.field).tags.string = { ne: "" } ];

  // The user id of owner.
  // @inject_tag: json:"owner" gorm:"column:owner;"
  string owner = 3 [ (validator.field).tags.string = { ne: "" } ];

  string name = 4 [ (validator.field).tags.string = { ne: "" } ];

  // The "pitrix" controller is automatically generated by the system and invisible to users.
  // @inject_tag: json:"controller" gorm:"column:controller;"
  Controller controller = 5 [ (validator.field).tags.enum = { gt: 0, in_enums: true} ];

  // The user status. 2 => "active" 3 => "inactive"
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 6 [ (validator.field).tags.enum = { gt: 0, in_enums: true} ];

  // Max length is 256 characters.
  // @inject_tag: json:"description" gorm:"column:description;"
  string description = 7 [ (validator.field).tags.string = { char_len_lte: 256 } ];

  // Reserved fields.
  // @inject_tag: json:"ip_white_list" gorm:"column:ip_white_list;"
  string ip_white_list = 8;

  // @inject_tag: json:"created" gorm:"column:created;autoUpdateTime;"
  int64 created = 9 [ (validator.field).tags.int = { gt: 0 } ];

  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 10 [ (validator.field).tags.int = { gt: 0 } ];
}

// NotificationList declares the struct of user's receiver.
message Notification {
  // The user id of owner.
  // @inject_tag: json:"owner" gorm:"column:owner;"
  string owner = 1;

  // @inject_tag: json:"id" gorm:"column:id;"
  string id  = 2;

  // The name must be unique for a user.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name  = 3;

  // @inject_tag: json:"description" gorm:"column:description;"
  string description = 4;

  // @inject_tag: json:"email" gorm:"column:email;"
  string email = 5;

  // @inject_tag: json:"created" gorm:"column:created;autoUpdateTime;"
  int64 created = 8 [ (validator.field).tags.int = { gt: 0 } ];

  // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
  int64 updated = 9 [ (validator.field).tags.int = { gt: 0 } ];
}

//// notification
//// FIXME: removed it.
//message Notification {
//  // messager receiver
//  string recipient = 1;
//  string note = 2;
//  string status = 3;
//  string email = 4;
//  int64 created_at = 5;
//  int64 updated_at = 6;
//  string user_id = 7;
//  int64 id = 8;
//}
