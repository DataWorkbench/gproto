syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBSyncManageSyncJob";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/gosql.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/datasource.proto";
import "proto/types/model/cluster.proto";
import "proto/types/model/syncjob/binlog.proto";
import "proto/types/model/syncjob/elasticsearch.proto";
import "proto/types/model/syncjob/ftp.proto";
import "proto/types/model/syncjob/hbase.proto";
import "proto/types/model/syncjob/hdfs.proto";
import "proto/types/model/syncjob/hive.proto";
import "proto/types/model/syncjob/kafka.proto";
import "proto/types/model/syncjob/logminer.proto";
import "proto/types/model/syncjob/mongodb.proto";
import "proto/types/model/syncjob/pgwal.proto";
import "proto/types/model/syncjob/redis.proto";
import "proto/types/model/syncjob/db.proto";
import "proto/types/model/syncjob/sqlservercdc.proto";


// The sync job info
message SyncJob {
    option (gosql.serialize) = {json: {}};
    enum Type {
        TypeUnset = 0;
        OfflineFull = 1;
        OfflineIncrement = 2;
        RealTime = 3;
    }

    enum Status {
        StatusUnset = 0;
        Deleted = 1;
        Enabled = 2;
    }
    // Workspace ID it belongs to.
    // @inject_tag: json:"space_id" gorm:"column:space_id;"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

    // PID is the parent id(directory). pid is "" means root(`/`)
    // @inject_tag: json:"pid" gorm:"column:pid;"
    string pid = 2 [
    (validator.field).check_if = { field: "pid", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20; prefix: "syj-" }
    ];

    // Job ID, unique within a region.
    // @inject_tag: json:"id" gorm:"column:id;primarykey;"
    string id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The job version id, only used for Published job.
    // Only used in published job.
    // @inject_tag: json:"version" gorm:"column:version;primarykey;"
    string version = 4 [(validator.field).tags.string = { byte_len_eq: 16 }];

    // Job Name, Unique within a workspace.
    // @inject_tag: json:"name" gorm:"column:name;"
    string name = 5 [(validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 }];

    // Job Description.
    // @inject_tag: json:"desc" gorm:"column:desc;"
    string desc = 6 [(validator.field).tags.string = { char_len_lte: 1024 } ];

    // IsDirectory represents this job whether a directory.
    // @inject_tag: json:"is_directory" gorm:"column:is_directory;"
    bool is_directory = 7;

    // Job type.  1 => "OfflineFull" 2 => "OfflineIncrement" 3 => "RealTime"
    // @inject_tag: json:"type" gorm:"column:type;"
    Type type = 8 [
    (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
    (validator.field).tags.enum = { gte: 0; in_enums: true  }
    ];

    // Job status, 1 => "Deleted", 2 => "Enabled".
    // @inject_tag: json:"status" gorm:"column:status;"
    Status status = 9 [(validator.field).tags.enum = { gt: 0; in_enums: true  }];

    // The user-id of created this job.
    // @inject_tag: json:"created_by" gorm:"column:created_by;"
    string created_by = 10 [(validator.field).tags.string = { byte_len_lte: 64 }];

    // Timestamp of create time.
    // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
    int64 created = 11 [(validator.field).tags.int = { gt: 0 }];

    // Timestamp of update time.
    // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
    int64 updated = 12 [(validator.field).tags.int = { gt: 0 }];

    // The sync task source type.
    // @inject_tag: json:"source_type" gorm:"column:source_type;"
    DataSource.Type source_type = 13 [
        (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
        (defaults.field).basic = "0",(validator.field).tags.enum = { gt: 0,lte: 16; in_enums: true  } ];
    // The sync task target type.
    // @inject_tag: json:"target_type" gorm:"column:target_type;"
    DataSource.Type target_type = 14 [
        (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
        (defaults.field).basic = "0",(validator.field).tags.enum = { gt: 0,lte: 16; in_enums: true  } ];

    // The property of sync job. Only used query data.
    // @inject_tag: json:"sync_job_property" gorm:"-"
    model.SyncJobProperty sync_job_property = 15;
}

// SyncJobProperty represents property of job.
message SyncJobProperty {
    option (gosql.serialize) = {json: {}};
    // Workspace ID it belongs to.
    // @inject_tag: json:"space_id" gorm:"column:space_id;"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

    // Job Id, unique within a region.
    // @inject_tag: json:"id" gorm:"column:id;primarykey;"
    string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The release version.
    // @inject_tag: json:"version" gorm:"column:version;primarykey"
    string version = 3 [(validator.field).tags.string = { byte_len_eq: 16 }];

    // @inject_tag: json:"conf" gorm:"column:conf;type:json"
    SyncJobConf conf = 4 [(validator.field) = {}];

    // @inject_tag: json:"schedule" gorm:"column:schedule;type:json"
    SyncJobSchedule schedule = 5 [(validator.field) = {}];

//    // Timestamp of create time.
//    // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
//    int64 created = 6 [(validator.field).tags.int = { gt: 0 }];
//
//    // Timestamp of update time.
//    // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
//    int64 updated = 7 [(validator.field).tags.int = { gt: 0 }];

}

// SyncJobConf represents a job running parameters.
// Not use with gorm.
message SyncJobConf {
    option (gosql.serialize) = {json: {}};

    enum JobMode {
        JobModeUnset = 0;
        GuideMode = 1;
        ScriptMode = 2;
    }

    // 1:guide mode,2:script mode
    // @inject_tag: json:"job_mode"
    JobMode job_mode = 1 [ (defaults.field).basic = "0", (validator.field).tags.enum = { gte: 1,lte: 2 } ];

    // source_id is datasource id
    // @inject_tag: json:"source_id"
    string source_id = 2;

    // target_id is datasource id
    // @inject_tag: json:"target_id"
    string target_id = 3;

    // shell mode json
    // @inject_tag: json:"job_content"
    string job_content = 4 [
    (validator.field).check_if = { field: "job_mode", tags: { enum: { eq: 2 } } },
    (validator.field).tags.string = { byte_len_gt: 20  }
    ];
    // sync Resource
    // @inject_tag: json:"sync_resource"
    SyncResource sync_resource = 5;
    // The flink cluster id. Is required.
    // @inject_tag: json:"cluster_id"
    string cluster_id = 6;
    // The channel control. Is required.
    // @inject_tag: json:"channel_control"
    ChannelControl channel_control = 7;

    // The cluster info of flink. Only used when query data.
    // @inject_tag: json:"cluster_info" gorm:"-"
    model.FlinkCluster cluster_info = 8;
    // Timestamp of update time.
    // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
    int64 updated = 9;
}

message ChannelControl{
    option (gosql.serialize) = {json: {}};
    enum RatePolicy {
        RatePolicyUnset = 0;
        Limit = 1;
        UnLimit = 2;
    }

    // The job parallelism
    // @inject_tag: json:"parallelism"
    int32 parallelism = 1 [ (defaults.field).basic = "1", (validator.field).tags.int = { gt: 0, lte: 100 } ];
    // The allowed record num where the job is error
    // @inject_tag: json:"record_num"
    int32 record_num = 2 [ (defaults.field).basic = "0" ];
    //sync rate
    // @inject_tag: json:"rate"
    RatePolicy rate = 3 ;
    // bytes
    // @inject_tag: json:"bytes"
    int32 bytes = 4 ;
}

message SyncResource {
    option (gosql.serialize) = {json: {}};
    // mysql source
    // @inject_tag: json:"mysql_source"
    DBSource mysql_source = 1;
    // mysql target
    // @inject_tag: json:"mysql_target"
    DBTarget mysql_target = 2;
    // oracle source
    // @inject_tag: json:"oracle_source"
    DBSource oracle_source = 3;
    // oracle target
    // @inject_tag: json:"oracle_target"
    DBTarget oracle_target = 4;
    // db2 source
    // @inject_tag: json:"db2_source"
    DBSource db2_source = 5;
    // db2 target
    // @inject_tag: json:"db2_target"
    DBTarget db2_target = 6;
    // postgresql source
    // @inject_tag: json:"postgresql_source"
    DBSource postgresql_source = 7;
    // postgresql target
    // @inject_tag: json:"postgresql_target"
    DBTarget postgresql_target = 8;
    // sqlserver source
    // @inject_tag: json:"sqlserver_source"
    DBSource sqlserver_source = 9;
    // sqlserver target
    // @inject_tag: json:"sqlserver_target"
    DBTarget sqlserver_target = 10;
    // click house source
    // @inject_tag: json:"click_house_source"
    DBSource click_house_source = 11;
    // click house target
    // @inject_tag: json:"click_house_target"
    DBTarget click_house_target = 12;
    // sap hana source
    // @inject_tag: json:"sap_hana_source"
    DBSource sap_hana_source = 13;
    // sap hana target
    // @inject_tag: json:"sap_hana_target"
    DBTarget sap_hana_target = 14;

    // mongodb source
    // @inject_tag: json:"mongodb_source"
    MongodbSource mongodb_source = 15;
    // mongodb target
    // @inject_tag: json:"mongodb_target"
    MongodbTarget mongodb_target = 16;

    // elasticsearch source
    // @inject_tag: json:"elastic_search_source"
    ElasticSearchSource elastic_search_source = 17;
    // elasticsearch target
    // @inject_tag: json:"elastic_search_target"
    ElasticSearchTarget elastic_search_target = 18;

    // hdfs source
    // @inject_tag: json:"hdfs_source"
    HdfsSource hdfs_source = 19;
    // hdfs target
    // @inject_tag: json:"hdfs_target"
    HdfsTarget hdfs_target = 20;
    // ftp source
    // @inject_tag: json:"ftp_source"
    FtpSource ftp_source = 21;
    // ftp target
    // @inject_tag: json:"ftp_target"
    FtpTarget ftp_target = 22;

    // hbase source
    // @inject_tag: json:"hbase_source"
    HbaseSource hbase_source = 23;
    // hbase target
    // @inject_tag: json:"hbase_target"
    HbaseTarget hbase_target = 24;

    // kafka source
    // @inject_tag: json:"kafka_source"
    KafkaSource kafka_source = 25;
    // kafka target
    // @inject_tag: json:"kafka_target"
    KafkaTarget kafka_target = 26;

    // binlog source
    // @inject_tag: json:"binlog_source"
    BinlogSource binlog_source = 27;
    // pgwal source
    // @inject_tag: json:"pg_wal_source"
    PgWalSource pg_wal_source = 28;
    // sqlserver cdc source
    // @inject_tag: json:"sql_server_cdc_source"
    SqlServerCdcSource sql_server_cdc_source = 29;
    // logminer source
    // @inject_tag: json:"logminer_source"
    LogMinerSource log_miner_source = 30;
    // redis target
    // @inject_tag: json:"redis_target"
    RedisTarget redis_target = 31;
    // hive target
    // @inject_tag: json:"hive_target"
    HiveTarget hive_target = 32;
}

// SyncJobSchedule represents a job schedule info.
// Not use with gorm.
message SyncJobSchedule {
    option (gosql.serialize) = {json: {}};

    message Parameter {
        // The key of parameter, required, Must be UDF-8 codec, Min Length: 1, Max Length: 64.
        // @inject_tag: json:"key"
        string key = 1 [ (validator.field).tags.string = { utf8: true, char_len_gte:1, char_len_lte: 64 } ];
        // The value of parameter, required, Must be UDF-8 codec, Min Length: 1, Max Length: 64.
        // @inject_tag: json:"value"
        string value = 2 [ (validator.field).tags.string = { utf8: true, char_len_gte:1, char_len_lte: 64 } ];
    }

    enum SchedulePolicy {
        SchedulePolicyUnset = 0;
        Periodicity = 1;
        AppointTime = 2; // Execute job in a fixed time.
        Immediately = 3; // Execute job immediately after publishing.
    }

    enum ConcurrencyPolicy {
        ConcurrencyPolicyUnset = 0; // Is useless.
        Allow = 1;
        Forbid = 2;
        Replace = 3;
    }

    enum RetryPolicy {
        RetryPolicyUnset = 0; // Is useless.
        None = 1;
        Auto = 2;
    }

    // Schedule Policy, Options Value: 1 => "Periodicity", 2 => "AppointTime", 3 => "Immediately"
    // Is Required.
    // @inject_tag: json:"schedule_policy"
    SchedulePolicy schedule_policy = 1 [ (validator.field).tags.enum = { gt: 0, in_enums: true  } ];

    // Timestamp of execute time for once. unit in seconds.
    // Not required, default the time of created job.
    // @inject_tag: json:"executed" default:"0" binding:"gte=0"
    int64 executed = 2 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 2 } } },
    (validator.field).tags.int = { gte: 31507200 }
    ];

    // The parameters for scheduler. Not required. The key must be unique.
    // @inject_tag: json:"parameters"
    repeated Parameter parameters = 3;

    // ------ Period Options ------
    //
    // Timestamp of start time of the validity period, unit in seconds.
    // Not required, default 31507200(1971-01-01 00:00:00), means no limit.
    // @inject_tag: json:"started"
    int64 started = 4 [(validator.field).tags.int = { gte: 0 }];

    // Timestamp of end time of the validity period, unit in seconds.
    // Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
    // @inject_tag: json:"ended"
    int64 ended = 5 [(validator.field).tags.int = { gte: 0 }];

    // Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace". Is required .
    // - allow: Multiple task instances are allowed at the same time.
    // - forbid: No new instances will be created, and this schedule cycle will be skipped,
    // - replace: Force stop the old running instances and create new.
    // @inject_tag: json:"concurrency_policy"
    ConcurrencyPolicy concurrency_policy = 6 [ (validator.field).tags.enum = { gt: 0; in_enums: true  } ];

    // Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
    // Is required with with schedule_policy = 1.
    // @inject_tag: json:"period_type"
    string period_type = 7 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.string = { in: ["minute", "hour", "day", "week", "month", "year"] }
    ];

    // Crontab Express. Is required with schedule_policy == 1
    // @inject_tag: json:"express" default:"" binding:"-"
    string express = 8 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.string = { unix_cron: true }
    ];

    // ------ Advanced (Retry) options ------
    //
    // Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 100 min.
    // @inject_tag: json:"timeout"
    int32 timeout = 9 [(validator.field).tags.int = {gte: 0, lte: 100}];

//    // Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
//    // Is required.
//    // @inject_tag: json:"retry_policy"
//    RetryPolicy retry_policy = 10 [
//    (validator.field).tags.enum = { gt: 0; in_enums: true  }
//    ];
//
//    // Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
//    // @inject_tag: json:"retry_limit"
//    int32 retry_limit = 11 [
//    (validator.field).check_if = { field: "retry_policy", tags: { enum: { eq: 2 } } },
//    (validator.field).tags.int = { gte: 0, lte: 100}
//    ];
//
//    // Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
//    // @inject_tag: json:"retry_interval"
//    int32 retry_interval = 12 [
//    (validator.field).check_if = { field: "retry_policy", tags: { enum: { eq: 2} } },
//    (validator.field).tags.int = { gte: 1, lte: 30 }
//    ];
}

// The release sync job info.
message SyncJobRelease {
    enum Status {
        StatusUnset = 0;
        Deleted = 1;
        Inline = 2;
        Offline = 3;
        // The sync job has been executed finished.
        // cases of finished:
        //     1. Scheduler Policy AppointTime or Immediately.
        //     2. Scheduler Policy Periodicity end of validity.
        Finished = 4;
    }

    // Workspace ID it belongs to.
    // @inject_tag: json:"space_id" gorm:"column:space_id;"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

    // Job ID, unique within a region.
    // @inject_tag: json:"id" gorm:"column:id;primarykey;"
    string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The release version.
    // @inject_tag: json:"version" gorm:"column:version;"
    string version = 3 [(validator.field).tags.string = { byte_len_eq: 16 }];

    // Job Name, Unique within a workspace.
    // @inject_tag: json:"name" gorm:"column:name;"
    string name = 4 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128} ];

    // Job type. 1 => "OfflineFull" 2 => "OfflineIncrement" 3 => "RealTime"
    // @inject_tag: json:"type" gorm:"column:type;"
    SyncJob.Type type = 5 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];

    // Release status, 2 => "Inline", 3 => "Offline" 4 => "Finished"
    // @inject_tag: json:"status" gorm:"column:status;"
    Status status = 6 ;

    // Job release description.
    // @inject_tag: json:"desc" gorm:"column:desc;"
    string desc = 7 ;

    // The user-id of release this job.
    // @inject_tag: json:"created_by" gorm:"column:created_by;"
    string created_by = 8 [ (validator.field).tags.string = { byte_len_lte: 64} ];

    // Timestamp of create time.
    // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
    int64 created = 9 [ (validator.field).tags.int = { gt: 0 } ];

    // Timestamp of update time.
    // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
    int64 updated = 10 [ (validator.field).tags.int = { gt: 0 } ];

    // The meta of sync job. Only used query data.
    // @inject_tag: json:"sync_job" gorm:"-"
    model.SyncJob sync_job = 11;

    // The property of sync job. Only used query data.
    // @inject_tag: json:"sync_job_property" gorm:"-"
    model.SyncJobProperty sync_job_property = 12;
}
