syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBSyncManageSyncJob";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/gosql.proto";
import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/syncjob/binlog.proto";
import "proto/types/model/syncjob/elasticsearch.proto";
import "proto/types/model/syncjob/ftp.proto";
import "proto/types/model/syncjob/hbase.proto";
import "proto/types/model/syncjob/hdfs.proto";
import "proto/types/model/syncjob/hive.proto";
import "proto/types/model/syncjob/kafka.proto";
import "proto/types/model/syncjob/logminer.proto";
import "proto/types/model/syncjob/mongodb.proto";
import "proto/types/model/syncjob/pgwal.proto";
import "proto/types/model/syncjob/redis.proto";
import "proto/types/model/syncjob/relationaldb.proto";
import "proto/types/model/syncjob/sqlservercdc.proto";

// The stream job info
message SyncJob {
    enum Type {
        OfflineFull = 0;
        OfflineIncrement = 1;
        RealTimeFull = 2;
        RealTimeIncrement = 3;
    }

    enum Resource {
        ResourceUnset = 0;
        MySQL = 1;
        PostgreSQL = 2;
        Kafka = 3;
        S3 = 4;
        ClickHouse = 5;
        HBase = 6;
        Ftp = 7;
        HDFS = 8;
        SqlServer = 9;
        Oracle = 10;
        DB2 = 11;
        SapHana = 12;
        Hive = 13;
        ElasticSearch = 14;
        MongoDb = 15;
        Redis = 16;
    }

    enum Status {
        StatusUnset = 0;
        Deleted = 1;
        Enabled = 2;
    }

    // Workspace ID it belongs to.
    // @inject_tag: json:"space_id" gorm:"column:space_id;"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

    // PID is the parent id(directory). pid is "" means root(`/`)
    // @inject_tag: json:"pid" gorm:"column:pid;"
    string pid = 2 [
    (validator.field).check_if = { field: "pid", tags: { string: { ne: "" } } },
    (validator.field).tags.string = { byte_len_eq: 20; prefix: "stj-" }
    ];

    // Job ID, unique within a region.
    // @inject_tag: json:"id" gorm:"column:id;primarykey;"
    string id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "stj-" } ];

    // The job version id, only used for Published job.
    // Only used in published job.
    // @inject_tag: json:"version" gorm:"column:version;primarykey;"
    string version = 4 [(validator.field).tags.string = { byte_len_eq: 16 }];

    // Job Name, Unique within a workspace.
    // @inject_tag: json:"name" gorm:"column:name;"
    string name = 5 [(validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 }];

    // Job Description.
    // @inject_tag: json:"desc" gorm:"column:desc;"
    string desc = 6 [(validator.field).tags.string = { char_len_lte: 1024 } ];

    // IsDirectory represents this job whether a directory.
    // @inject_tag: json:"is_directory" gorm:"column:is_directory;"
    bool is_directory = 7;

    // Job type. 0 => "OfflineFull" 1 => "OfflineIncrement" 2 => "RealTimeFull" 3 => "RealTimeIncrement"
    // @inject_tag: json:"type" gorm:"column:type;"
    Type type = 8 [
    (validator.field).check_if = { field: "is_directory", tags: { bool: { eq: false } } },
    (validator.field).tags.enum = { gt: 0; in_enums: true  }
    ];

    // Job status, 1 => "Deleted", 2 => "Enabled".
    // @inject_tag: json:"status" gorm:"column:status;"
    Status status = 9 [(validator.field).tags.enum = { gt: 0; in_enums: true  }];

    // The user-id of created this job.
    // @inject_tag: json:"created_by" gorm:"column:created_by;"
    string created_by = 10 [(validator.field).tags.string = { byte_len_lte: 64 }];

    // Timestamp of create time.
    // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
    int64 created = 11 [(validator.field).tags.int = { gt: 0 }];

    // Timestamp of update time.
    // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
    int64 updated = 12 [(validator.field).tags.int = { gt: 0 }];

    // The sync task target type.
    // @inject_tag: json:"source_type" gorm:"column:source_type;"
    Resource source_type = 13 [(validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 }];

    // The sync task  target type.
    // @inject_tag: json:"target_type" gorm:"column:target_type;"
    Resource target_type = 14 [(validator.field).tags.string = { byte_len_gt: 1, byte_len_lte: 128 }];
}

// SyncJobProperty represents property of job.
message SyncJobProperty {
    // Workspace ID it belongs to.
    // @inject_tag: json:"space_id" gorm:"column:space_id;"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

    // Job Id, unique within a region.
    // @inject_tag: json:"id" gorm:"column:id;primarykey;"
    string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "syj-" } ];

    // The release version.
    // @inject_tag: json:"version" gorm:"column:version;primarykey"
    string version = 3 [(validator.field).tags.string = { byte_len_eq: 16 }];

    // @inject_tag: json:"conf" gorm:"column:conf;type:json"
    SyncJobConf conf = 4 [(validator.field) = {}];

    // @inject_tag: json:"schedule" gorm:"column:schedule;type:json"
    SyncJobSchedule schedule = 5 [(validator.field) = {}];
}

// SyncJobConf represents a job running parameters.
// Not use with gorm.
message SyncJobConf {
    option (gosql.serialize) = {json: {}};

    enum JobMode {
        GuideMode = 0;
        ScriptMode = 1;
    }

    // source_id is datasource id
    // @inject_tag: json:"source_id"
    string source_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];

    // target_id is datasource id
    // @inject_tag: json:"target_id"
    string target_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20; prefix: "som-" } ];

    // The job name in each workspace is unique. Is required, Max Length 128.
    // And the valid characters include a ~ z, 0 ~ 9 and "_"; And cannot use "_" begging or end.
    // @inject_tag: json:"name"
    int32 parallelism = 3 [ (defaults.field).basic = "1", (validator.field).tags.int = { gt: 0, lte: 100 } ];

    // Description of the job, Not required, Max length 1024.
    // @inject_tag: json:"desc"
    int32 percentage = 4 [ (defaults.field).basic = "0", (validator.field).tags.int = { gte: 0, lte: 100 } ];
    // Description of the job, Not required, Max length 1024.
    // @inject_tag: json:"record_num"
    int32 record_num = 5 [ (defaults.field).basic = "0", (validator.field).tags.int = { gte: 0 } ];
    // bytes
    // @inject_tag: json:"bytes"
    int32 bytes = 6 [ (defaults.field).basic = "0", (validator.field).tags.int = { gte: 0 } ];
    // 0:guide mode,1:shell mode
    // @inject_tag: json:"job_mode"
    JobMode job_mode = 7 [ (defaults.field).basic = "0", (validator.field).tags.enum = { gte: 0,lte: 1 } ];
    // shell mode json
    // @inject_tag: json:"job_content"
    string job_content = 8;
    // Relationaldb source
    // @inject_tag: json:"relationaldb_source"
    RelationaldbSource relationaldb_source = 9;
    // Relationaldb target
    // @inject_tag: json:"relationaldb_target"
    RelationaldbTarget relationaldb_target = 10;
    // mongodb target
    // @inject_tag: json:"mongodb_source"
    MongodbSource mongodb_source = 11;
    // mongodb target
    // @inject_tag: json:"mongodb_target"
    MongodbTarget mongodb_target = 12;

    // elasticsearch source
    // @inject_tag: json:"elastic_search_source"
    ElasticSearchSource elastic_search_source = 13;
    // elasticsearch target
    // @inject_tag: json:"elastic_search_target"
    ElasticSearchTarget elastic_search_target = 14;

    // hdfs source
    // @inject_tag: json:"hdfs_source"
    HdfsSource hdfs_source = 15;
    // hdfs source
    // @inject_tag: json:"hdfs_target"
    HdfsTarget hdfs_target = 16;
    // ftp source
    // @inject_tag: json:"ftp_source"
    FtpSource ftp_source = 17;
    // ftp target
    // @inject_tag: json:"ftp_target"
    FtpTarget ftp_target = 18;

    // hbase source
    // @inject_tag: json:"hbase_source"
    HbaseSource hbase_source = 19;
    // hbase target
    // @inject_tag: json:"hbase_target"
    HbaseTarget hbase_target = 20;

    // kafka target
    // @inject_tag: json:"kafka_source"
    KafkaSource kafka_source = 21;
    // kafka target
    // @inject_tag: json:"kafka_target"
    KafkaTarget kafka_target = 22;

    // binlog source
    // @inject_tag: json:"binlog_source"
    BinlogSource binlog_source = 23;
    // pgwal source
    // @inject_tag: json:"pgwal_source"
    PgWalSource pg_wal_source = 24;
    // sqlserver cdc source
    // @inject_tag: json:"sql_server_cdc_source"
    SqlServerCdcSource sql_server_cdc_source = 25;
    // logminer source
    // @inject_tag: json:"logminer_source"
    LogMinerSource log_miner_source = 26;
    // redis target
    // @inject_tag: json:"redis_target"
    RedisTarget redis_target = 27;
    // hive target
    // @inject_tag: json:"hive_target"
    HiveTarget hive_target = 28;
    // The flink cluster id. Is required.
    // @inject_tag: json:"cluster_id"
    string cluster_id = 29 [(validator.field) = {}];
}

// SyncJobSchedule represents a job schedule info.
// Not use with gorm.
message SyncJobSchedule {
    option (gosql.serialize) = {json: {}};

    enum SchedulePolicy {
        SchedulePolicyUnset = 0;
        Periodicity = 1;
        AppointTime = 2; // Execute job in a fixed time.
        Immediately = 3; // Execute job immediately after publishing.
    }

    enum ConcurrencyPolicy {
        ConcurrencyPolicyUnset = 0; // Is useless.
        Allow = 1;
        Forbid = 2;
        Replace = 3;
    }

    enum RetryPolicy {
        RetryPolicyUnset = 0; // Is useless.
        None = 1;
        Auto = 2;
    }

    // Schedule Policy, Options Value: 1 => "Periodicity", 2 => "AppointTime", 3 => "Immediately"
    // Is Required.
    // @inject_tag: json:"schedule_policy"
    SchedulePolicy schedule_policy = 1 [ (validator.field).tags.enum = { gt: 0, in_enums: true  } ];

    // Timestamp of execute time for once. unit in seconds.
    // Not required, default the time of created job.
    // @inject_tag: json:"executed" default:"0" binding:"gte=0"
    int64 executed = 2 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 2 } } },
    (validator.field).tags.int = { gte: 31507200 }
    ];

    //  // Whether execute immediately the job after release.
    //  // Not required, default False. If immediately is True, the field executed will be ignore.
    //  // @inject_tag: json:"immediately" binding:"-"
    //  bool immediately = 3;

    // ------ Period Options ------
    //
    // Timestamp of start time of the validity period, unit in seconds.
    // Not required, default 31507200(1971-01-01 00:00:00), means no limit.
    // @inject_tag: json:"started"
    int64 started = 4 [(validator.field).tags.int = { gte: 0 }];

    // Timestamp of end time of the validity period, unit in seconds.
    // Not required, default 31588502400(2971-01-01 00:00:00), means no limit.
    // @inject_tag: json:"ended"
    int64 ended = 5 [(validator.field).tags.int = { gte: 0 }];

    // Concurrency policy. 1 => "allow", 2 => "forbid", 3 => "replace". Is required .
    // - allow: Multiple task instances are allowed at the same time.
    // - forbid: No new instances will be created, and this schedule cycle will be skipped,
    // - replace: Force stop the old running instances and create new.
    // @inject_tag: json:"concurrency_policy"
    ConcurrencyPolicy concurrency_policy = 6 [ (validator.field).tags.enum = { gt: 0; in_enums: true  } ];

    // Schedule period type. Is required. Optional value: "minute" | "hour" | "day" | "week" | "month" | "year"
    // Is required with with schedule_policy = 1.
    // @inject_tag: json:"period_type"
    string period_type = 7 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.string = { in: ["minute", "hour", "day", "week", "month", "year"] }
    ];

    // Crontab Express. Is required with schedule_policy == 1
    // @inject_tag: json:"express" default:"" binding:"-"
    string express = 8 [
    (validator.field).check_if = { field: "schedule_policy", tags: { enum: { eq: 1} } },
    (validator.field).tags.string = { unix_cron: true }
    ];

    // ------ Advanced (Retry) options ------
    //
    // Timeout for task execution. Default 0 and means never timeout, unit minutes, Max 100 min.
    // @inject_tag: json:"timeout"
    int32 timeout = 9 [(validator.field).tags.int = {gte: 0, lte: 100}];

    // Retry policy when task failed. 1 => "not retry" 2 => "auto retry".
    // Is required.
    // @inject_tag: json:"retry_policy"
    RetryPolicy retry_policy = 10 [
    (validator.field).tags.enum = { gt: 0; in_enums: true  }
    ];

    // Max retries when task instances failed. Is required with retry_policy = 2, Min 1, Max 99.
    // @inject_tag: json:"retry_limit"
    int32 retry_limit = 11 [
    (validator.field).check_if = { field: "retry_policy", tags: { enum: { eq: 2 } } },
    (validator.field).tags.int = { gte: 0, lte: 100}
    ];

    // Retry interval, unit is minutes. Is required with retry_policy = 2, Min 1, Max 30.
    // @inject_tag: json:"retry_interval"
    int32 retry_interval = 12 [
    (validator.field).check_if = { field: "retry_policy", tags: { enum: { eq: 2} } },
    (validator.field).tags.int = { gte: 1, lte: 30 }
    ];
    }

// The release stream job info.
message SyncJobRelease {
    enum Status {
        StatusUnset = 0;
        Active = 1;
        Suspended = 2;
        Deleted = 3;
    }

    // Workspace ID it belongs to.
    // @inject_tag: json:"space_id" gorm:"column:space_id;"
    string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

    // Job ID, unique within a region.
    // @inject_tag: json:"id" gorm:"column:id;primarykey;"
    string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "stj-" } ];

    // The release version.
    // @inject_tag: json:"version" gorm:"column:version;"
    string version = 3 [(validator.field).tags.string = { byte_len_eq: 16 }];

    // Job Name, Unique within a workspace.
    // @inject_tag: json:"name" gorm:"column:name;"
    string name = 4 [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 128} ];

    // Job type. 1 => "StreamOperator" 2 => "StreamSQL" 3 => "StreamJAR" 4 => "StreamPython" 5 => "StreamScala"
    // @inject_tag: json:"type" gorm:"column:type;"
    SyncJob.Type type = 5 [ (validator.field).tags.enum = { gt: 0; in_enums: true  } ];

    // Release status, 1 => "Active", 2 => "Suspended", 3 => "Deleted",
    // @inject_tag: json:"status" gorm:"column:status;"
    Status status = 6 ;

    // Job release description.
    // @inject_tag: json:"desc" gorm:"column:desc;"
    string desc = 7 ;

    // The user-id of release this job.
    // @inject_tag: json:"created_by" gorm:"column:created_by;"
    string created_by = 8 [ (validator.field).tags.string = { byte_len_lte: 64} ];

    // Timestamp of create time.
    // @inject_tag: json:"created" gorm:"column:created;autoCreateTime;"
    int64 created = 9 [ (validator.field).tags.int = { gt: 0 } ];

    // Timestamp of update time.
    // @inject_tag: json:"updated" gorm:"column:updated;autoUpdateTime;"
    int64 updated = 10 [ (validator.field).tags.int = { gt: 0 } ];
}







/*message HadoopConfig {
    // @inject_tag: json:"hadoop_username" swaggerignore:"true"
    string hadoop_username = 1;
    // Relationaldb column
    // @inject_tag: json:"dfs_ha_namenodes_ns" swaggerignore:"true"
    string dfs_ha_namenodes_ns = 2;
    // Relationaldb column
    // @inject_tag: json:"default_fs" swaggerignore:"true"
    string default_fs = 3;
    // Relationaldb column
    // @inject_tag: json:"analytical_rules" swaggerignore:"true"
    string dfs_namenode_rpc_address_ns_nn1 = 4;
    // Relationaldb column
    // @inject_tag: json:"schema" swaggerignore:"true"
    string dfs_namenode_rpc_address_ns_nn2 = 5;
    // Relationaldb column
    // @inject_tag: json:"dfs_client_failover_proxy_provider_ns" swaggerignore:"true"
    string dfs_client_failover_proxy_provider_ns = 6;
    // Relationaldb column
    // @inject_tag: json:"dfs_nameservices" swaggerignore:"true"
    string dfs_nameservices = 7;
    // Relationaldb column
    // @inject_tag: json:"fs_Hive_impl_disable_cache" swaggerignore:"true"
    string fs_Hive_impl_disable_cache = 8;
    // distributed filesystem
    // @inject_tag: json:"org_apache_hadoop_hive_distributed_filesystem" swaggerignore:"true"
    string org_apache_hadoop_hive_distributed_filesystem = 9;
}*/







