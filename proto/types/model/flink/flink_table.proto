syntax = "proto3";

package flink;

option go_package = "github.com/DataWorkbench/gproto/pkg/types/pbmodel/pbflink";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel.pbflink";
// File name of class.
option java_outer_classname = "PBFlinkTable";
option java_multiple_files = false;

import "github.com/yu31/proto-go-plugin/proto/validator.proto";
import "github.com/yu31/proto-go-plugin/proto/gosql.proto";
//import "github.com/yu31/proto-go-plugin/proto/defaults.proto";

// ----------------------------- Flink Table ----------------------------------------- //

// SqlColumnType used as request parameters for RPC and HTTP(based on Body)
message SqlColumnType {
  // The column name
  // @inject_tag: json:"column"
  string column = 1 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // The column type
  // @inject_tag: json:"type"
  string type = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // The column comment
  // @inject_tag: json:"comment"
  string comment = 3 [ (validator.field).tags.string = { byte_len_lte: 256 } ];

  // if it is primary key column, one of true/false
  // @inject_tag: json:"primary_key"
  string primary_key = 4 [ (validator.field).tags.string = { byte_len_lte: 8 } ];

  // the column type length
  // @inject_tag: json:"length"
  string Length = 5 [ (validator.field).tags.string = { byte_len_lte: 10 } ];
}

// SqlTimeColumnType used as request parameters for RPC and HTTP(based on Body)
message SqlTimeColumnType {
  enum Type {
    TypeUnset = 0;
    Proctime = 1;
    Watermark = 2;
  }

  // The column name
  // @inject_tag: json:"column"
  string column = 1 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // The column type. oneof proctime/watermark
  // @inject_tag: json:"type"
  Type type = 2 [ (validator.field).tags.enum = { gte:1, in_enums: true } ];

  // The column expression
  // @inject_tag: json:"expression"
  string expression = 3 [ (validator.field).tags.string = { byte_len_lte: 1024 } ];
}

// ConnectorOption used as request parameters for RPC and HTTP(based on Body)
message ConnectorOption {
  // The config name.
  // @inject_tag: json:"name"
  string name = 1 [ (validator.field).tags.string = { byte_len_lte: 256 } ];

  // The config value.
  // @inject_tag: json:"value"
  string value = 2 [ (validator.field).tags.string = { byte_len_lte: 4096 } ];
}

// MySQLTableDefine used as request parameters for RPC and HTTP(based on Body)
message MySQLTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the table name in origin upstream node.
  // @inject_tag: json:"mapping_name"
  string mapping_name = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 3 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 4 [ (validator.field) = { } ];
}

// PostgreSQLTableDefine used as request parameters for RPC and HTTP(based on Body)
message PostgreSQLTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the table name in origin upstream node.
  // @inject_tag: json:"mapping_name"
  string mapping_name = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 3 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 4 [ (validator.field) = { } ];
}

// ClickHouseTableDefine used as request parameters for RPC and HTTP(based on Body)
message ClickHouseTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the table name in origin upstream node.
  // @inject_tag: json:"mapping_name"
  string MappingName = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 3 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 4 [ (validator.field) = { } ];
}

// HbaseTableDefine used as request parameters for RPC and HTTP(based on Body)
message HBaseTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the table name in origin upstream node.
  // @inject_tag: json:"mapping_name"
  string mapping_name = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 3 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 4 [ (validator.field) = { } ];
}

// HDFSTableDefine used as request parameters for RPC and HTTP(based on Body)
message HDFSTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
  // @inject_tag: json:"format"
  string format = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // the data path
  // @inject_tag: json:"path"
  string path = 3 [ (validator.field).tags.string = { byte_len_lte: 1024 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 4 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 5 [ (validator.field) = { } ];
}

// S3TableDefine used as request parameters for RPC and HTTP(based on Body)
message S3Table {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
  // @inject_tag: json:"format"
  string format = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // the data path
  // @inject_tag: json:"path"
  string path = 3 [ (validator.field).tags.string = { byte_len_lte: 1024 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 4 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 5 [ (validator.field) = { } ];
}

// FtpTableDefine used as request parameters for RPC and HTTP(based on Body)
message FtpTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
  // @inject_tag: json:"format"
  string format = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // the data path
  // @inject_tag: json:"path"
  string path = 3 [ (validator.field).tags.string = { byte_len_lte: 1024 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 4 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 5 [ (validator.field) = { } ];
}

// KafkaTableDefine used as request parameters for RPC and HTTP(based on Body)
message KafkaTable {
  option (gosql.serialize) = { json: {} };

  // columns info.
  // @inject_tag: json:"sql_column"
  repeated SqlColumnType sql_column = 1 [ (validator.field) = { } ];

  // the data format one of csv/json/avro/debezium-json/canal-json/parquet/orc
  // @inject_tag: json:"format"
  string format = 2 [ (validator.field).tags.string = { byte_len_lte: 64 } ];

  // the data path
  // @inject_tag: json:"topic"
  string topic = 3 [ (validator.field).tags.string = { byte_len_lte: 1024 } ];

  // connection config values.
  // @inject_tag: json:"connector_options"
  repeated ConnectorOption connector_options = 4 [ (validator.field) = { } ];

  // timecolumns info.
  // @inject_tag: json:"time_column"
  repeated SqlTimeColumnType time_column = 5 [ (validator.field) = { } ];
}

message TableSchema {
  option (gosql.serialize) = { json: {} };

  // MySQL Table Info.
  // @inject_tag: json:"mysql"
  MySQLTable mysql = 1;

  // PostgreSQL Table Info.
  // @inject_tag: json:"postgresql"
  PostgreSQLTable postgresql = 2;

  // ClickHouse Table Info.
  // @inject_tag: json:"clickhouse"
  ClickHouseTable clickhouse = 3;

  // Hbase Table Info.
  // @inject_tag: json:"hbase"
  HBaseTable Hbase = 4;

  // Kafka Table Info.
  // @inject_tag: json:"kafka"
  KafkaTable kafka = 5;

  // S3 Table Info.
  // @inject_tag: json:"s3"
  S3Table s3 = 6;

  // Ftp Table Info.
  // @inject_tag: json:"ftp"
  FtpTable ftp = 7;

  // HDFS Table Info.
  // @inject_tag: json:"hdfs"
  HDFSTable hdfs = 8;
}

