syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel/pbsyncjob";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel.pbsyncjob";
// File name of class.
option java_outer_classname = "PBRelationaldb";
option java_multiple_files = false;

import "proto/types/model/syncjob/column.proto";
import "proto/types/model/syncjob/baseenum.proto";
import "github.com/yu31/protoc-plugin/proto/gosql.proto";


message DBSource {
    option (gosql.serialize) = {json: {}};
    enum ConditionType {
        ConditionTypeUnset=0;
        Visualization = 1;
        Express = 2;
    }
    // column
    // @inject_tag: json:"column" 
    repeated Column column = 1;
    // table
    // @inject_tag: json:"table" 
    repeated string table = 2 ;
    // schema
    // @inject_tag: json:"schema" 
    string schema = 3;
    // where
    // @inject_tag: json:"where" 
    string where = 4;
    // split_pk
    // @inject_tag: json:"split_pk" 
    string split_pk = 5;
    // mapping type
    // @inject_tag: json:"mapping_type"
    BaseEnum.ColumnMapping mapping_type = 6;
    // condition type
    // @inject_tag: json:"condition_type"
    ConditionType condition_type = 7;
    // visualization condition
    // @inject_tag: json:"visualization"
    Condition visualization = 8;
    // express
    // @inject_tag: json:"express"
    string express = 9;

}

message Condition {
    option (gosql.serialize) = {json: {}};
    // column
    // @inject_tag: json:"column"
    string column = 1;
    // start condition
    // @inject_tag: json:"start_condition"
    string start_condition = 2;
    // start condition
    // @inject_tag: json:"start_condition"
    string start_value = 3;
    // end condition
    // @inject_tag: json:"end_condition"
    string end_condition = 4;
    // end value
    // @inject_tag: json:"end_value"
    string end_value = 5;
}

message DBTarget {
    option (gosql.serialize) = {json: {}};
    enum WriteMode {
        WriteModeUnset=0;
        insert = 1;
        replace = 2;
        update = 3;
    }

    enum Semantic {
        SemanticUnset = 0;
        AtLeastOnce = 1;
        ExactlyOnce = 2;
    }

    // column
    // @inject_tag: json:"column" 
    repeated Column column = 1;
    // table
    // @inject_tag: json:"table" 
    repeated string table = 2;
    // schema
    // @inject_tag: json:"schema" 
    string schema = 3;
    // pre sql
    // @inject_tag: json:"pre_sql" 
    repeated string pre_sql = 4;
    // post sql
    // @inject_tag: json:"post_sql" 
    repeated string post_sql = 5;
    // write mode
    // @inject_tag: json:"write_mode" 
    WriteMode write_mode = 6;
    // batch size
    // @inject_tag: json:"batch_size" 
    int32 batch_size = 7;
    // update key
    // @inject_tag: json:"update_key" 
    repeated string update_key = 8;
    // semantic
    // @inject_tag: json:"semantic" 
    Semantic semantic = 9;
    // with no lock
    // @inject_tag: json:"with_no_lock" 
    string with_no_lock = 10;
}
