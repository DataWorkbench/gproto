syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel/pbsyncjob";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel.pbsyncjob";
// File name of class.
option java_outer_classname = "PBHdfs";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "proto/types/model/syncjob/column.proto";
import "proto/types/model/syncjob/baseenum.proto";
import "github.com/yu31/protoc-plugin/proto/gosql.proto";

message HdfsSource {
    option (gosql.serialize) = {json: {}};
    // column
    // @inject_tag: json:"column" 
    repeated Column column = 1;
    // path
    // @inject_tag: json:"path" 
    string path = 2;
    // file type
    // @inject_tag: json:"file_type"
    BaseEnum.FileType file_type = 3 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];
    // filter regex
    // @inject_tag: json:"filter_regex"
    string filter_regex = 4;
    // field_delimiter
    // @inject_tag: json:"field_delimiter"
    string field_delimiter = 5 [
    (validator.field).check_if = { field: "file_type", tags: { enum: { eq: 0 } } },
    (validator.field).tags.string = { byte_len_gte: 1 }
    ];
    // encoding
    // @inject_tag: json:"encoding"
    BaseEnum.Encoding encoding = 6 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];

}

message HdfsTarget {
    option (gosql.serialize) = {json: {}};
    // file column
    // @inject_tag: json:"column" 
    repeated Column column = 1;
    // file path
    // @inject_tag: json:"path" 
    string path = 2;
    // file name
    // @inject_tag: json:"file_name" 
    string file_name = 3;
    // file type
    // @inject_tag: json:"file_type"
    BaseEnum.FileType file_type = 4 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];
    // write mode
    // @inject_tag: json:"write_mode"
    BaseEnum.WriteMode write_mode = 5 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];
    // field_delimiter
    // @inject_tag: json:"field_delimiter"
    string field_delimiter = 6 [
    (validator.field).check_if = { field: "file_type", tags: { enum: { eq: 0 } } },
    (validator.field).tags.string = { byte_len_gte: 1 }
    ];
    // encoding
    // @inject_tag: json:"encoding"
    BaseEnum.Encoding encoding = 7 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];
    // compress type
    // @inject_tag: json:"compress"
    BaseEnum.CompressType compress = 8 [ (validator.field).tags.enum = { gte: 0; in_enums: true  } ];
}
