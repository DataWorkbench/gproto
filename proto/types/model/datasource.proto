syntax = "proto3";

package model;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbmodel";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbmodel";
// File name of class.
option java_outer_classname = "PBModelDataSource";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
import "github.com/yu31/protoc-plugin/proto/gosql.proto";

import "proto/types/model/network.proto";

import "proto/types/model/datasource/datasource_url.proto";

// Data Source Schema
message DataSource {
  enum Status {
    StatusUnset = 0;
    Deleted = 1;
    Enabled = 2;
    Disabled = 3;
  }

  enum Type {
    TypeUnset = 0;
    MySQL = 1;
    PostgreSQL = 2;
    Kafka = 3;
    S3 = 4;
    ClickHouse = 5;
    HBase = 6;
    Ftp = 7;
    HDFS = 8;
  }

  // URL of datasource settings.
  message URL {
    option (gosql.serialize) = { json: {} };

    // Source Type, one of 12345678 1->MySQL/2->PostgreSQL/3->Kafka/4->S3/5->ClickHouse/6->Hbase/7->Ftp/8->HDFS
    // @inject_tag: json:"-"
    Type type = 10  [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

    // MySQL Source Connection Info.
    // @inject_tag: json:"mysql"
    datasource.MySQLURL mysql = 1 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 1 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // PostgreSQL Source Connection Info.
    // @inject_tag: json:"postgresql"
    datasource.PostgreSQLURL postgresql = 2 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 2 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // Kafka Source Connection Info.
    // @inject_tag: json:"kafka"
    datasource.KafkaURL kafka = 3 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 3 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // S3 Source Connection Info.
    // @inject_tag: json:"s3"
    datasource.S3URL s3 = 4 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 4 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // ClickHouse Source Connection Info.
    // @inject_tag: json:"clickhouse"
    datasource.ClickHouseURL clickhouse = 5 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 5 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // Hbase Source Connection Info.
    // @inject_tag: json:"hbase"
    datasource.HBaseURL hbase = 6 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 6 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // Ftp Source Connection Info.
    // @inject_tag: json:"ftp"
    datasource.FtpURL ftp = 7 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 7 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // HDFS Source Connection Info.
    // @inject_tag: json:"hdfs"
    datasource.HDFSURL hdfs = 8 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 8 } } },
      (validator.field).tags.message = { not_null: true }
    ];

    // SQLSERVER Source Connection Info.
    // @inject_tag: json:"sqlserver"
    datasource.SqlServerURL sqlserver = 9 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 9 } } },
      (validator.field).tags.message = { not_null: true }
    ];
    // ORACLE Source Connection Info.
    // @inject_tag: json:"oracle"
    datasource.OracleURL oracle = 10 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 10 } } },
      (validator.field).tags.message = { not_null: true }
    ];
    // DB2 Source Connection Info.
    // @inject_tag: json:"db2"
    datasource.DB2URL db2 = 11 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 11 } } },
      (validator.field).tags.message = { not_null: true }
    ];
    // SAPHANA Source Connection Info.
    // @inject_tag: json:"sap_hana"
    datasource.SapHanaURL sap_hana = 12 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 12 } } },
      (validator.field).tags.message = { not_null: true }
    ];
    // HIVE Source Connection Info.
    // @inject_tag: json:"hive"
    datasource.HiveURL hive = 13 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 13 } } },
      (validator.field).tags.message = { not_null: true }
    ];
    // ElasticSearch Source Connection Info.
    // @inject_tag: json:"elastic_search"
    datasource.ElasticSearchURL elastic_search = 14 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 14 } } },
      (validator.field).tags.message = { not_null: true }
    ];
    // MONGODB Source Connection Info.
    // @inject_tag: json:"mongo_db"
    datasource.MongoDbURL mongo_db = 15 [
      (validator.field).check_if = {field: "type", tags: { enum: { eq: 15 } } },
      (validator.field).tags.message = { not_null: true }
    ];
  }

  // Space ID, workspace ID.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // Source ID, unique within a region.
  // @inject_tag: json:"id" gorm:"column:id;primaryKey;"
  string id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "som-" } ];

  // Data Source Name, unique within a space. Min characters 2. Max characters 64.
  // @inject_tag: json:"name" gorm:"column:name;"
  string name = 3  [ (validator.field).tags.string = { byte_len_gte: 2, byte_len_lte: 64} ];

  // Comment, describe this source.
  // @inject_tag: json:"desc" gorm:"column:desc;" binding:"gte=0,lte=256"
  string desc = 4 [(validator.field).tags.string = { char_len_lte: 256 }];

  // Source Type, 1->MySQL 2->PostgreSQL 3->Kafka 4->S3 5->ClickHouse 6->Hbase 7->Ftp 8->HDFS
  // @inject_tag: json:"type" gorm:"column:type;"
  Type type = 5  [ (validator.field).tags.enum = { gt: 0; in_enums: true  } ];

  // Url, this source connection info.
  // @inject_tag: json:"url" gorm:"column:url;"
  URL url = 6 [ (validator.field).tags.message = { not_null: true, skip: true } ];

  // Status, 1 => "Delete", 2 => "enabled", 3 => "disabled"
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 7 [ (validator.field).tags.enum = { gt: 1; in_enums: true  } ];

  // DataSource owner.
  // @inject_tag: json:"created_by" gorm:"column:created_by"
  string created_by = 8 [ (validator.field).tags.string = { byte_len_gt:0, byte_len_lt: 65 } ];

  // Create Time, this Source create time.
  // @inject_tag: json:"created" gorm:"column:created;"
  int64 created = 9  [ (validator.field).tags.int = { gt: 0 } ];

  // Update Time, this Source last update time.
  // @inject_tag: json:"updated" gorm:"column:updated;"
  int64 updated = 10  [ (validator.field).tags.int = { gt: 0 } ];

  // The last connection record. The value is nil if never tested for usability.
  // Notice: No in db.
  // @inject_tag: json:"last_connection" gorm:"-"
  DataSourceConnection last_connection = 11;
}

// Data Source Connection state log.
message DataSourceConnection {
  enum Status {
    StatusUnset = 0;
    Deleted = 1;
    Enabled = 2;
  }

  // Result connectivity test results
  enum Result {
    StateUnset = 0;
    Success = 1;
    Failed = 2;
  }

  // Space ID, workspace ID.
  // @inject_tag: json:"space_id" gorm:"column:space_id;"
  string space_id = 1 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "wks-"} ];

  // DataSource ID.
  // @inject_tag: json:"source_id" gorm:"column:source_id;primaryKey;"
  string source_id = 2 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "som-" } ];

  // Source ID, unique within a region.
  // @inject_tag: json:"network_id" gorm:"column:network_id;"
  string network_id = 3 [ (validator.field).tags.string = { byte_len_eq: 20, prefix: "net-" } ];

  // Status, 1 => "Deleted", 2 => "Enabled".
  // @inject_tag: json:"status" gorm:"column:status;"
  Status status = 4 [ (validator.field).tags.enum = { gt: 1; in_enums: true  } ];

  // Connection state  1 => success 2 => failed
  // @inject_tag: json:"result" gorm:"column:result;"
  Result result = 5 [ (validator.field).tags.enum = { gt: 0; in_enums: true } ];

  // Message is the reason when connection failure.
  // @inject_tag: json:"message" gorm:"column:message;"
  string message = 6;

  // Create Time, When start tested for usability..
  // @inject_tag: json:"created" gorm:"column:created;"
  int64 created = 7 [ (validator.field).tags.int = { gt: 0 } ];

  // Elapse is Used time of tested for usability. unit in ms.
  // @inject_tag: json:"elapse" gorm:"column:elapse;"
  int64 elapse = 8;

  // @inject_tag: json:"network_info" gorm:"-"
  Network network_info = 9;
}

// DataSourceKind represents the kind of datasource. eg. { "name": "MySQL"}, { "name": "Kafka" }
message DataSourceKind {
  // this kind name
  // @inject_tag: json:"name"
  string Name = 1;
}
