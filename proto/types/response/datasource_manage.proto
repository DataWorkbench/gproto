syntax = "proto3";

package response;

option go_package = "github.com/DataWorkbench/gproto/pkg/types/pbresponse";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbresponse";
// File name of class.
option java_outer_classname = "PBResponseDataSourceManage";
option java_multiple_files = false;

import "github.com/yu31/proto-go-plugin/proto/validator.proto";
//import "github.com/yu31/proto-go-plugin/proto/gosql.proto";
//import "github.com/yu31/proto-go-plugin/proto/defaults.proto";

import "proto/types/model/datasource.proto";
import "proto/types/model/datasource/datasource_table.proto";

message CreateDataSource {
  // The data source job id that generated by system.
  // @inject_tag: json:"id"
  string id = 1;
}

// DescribeDataSource used as reply parameters in RPC or response body in HTTP.
message DescribeDataSource {
  // this source info
  // @inject_tag: json:"info"
  model.DataSource info = 1;
}

// ListDataSources used as reply parameters in RPC or response body in HTTP.
message ListDataSources {
  // @inject_tag: json:"infos"
  repeated model.DataSource infos = 1;

  // @inject_tag: json:"total"
  int64 total = 2;

  // @inject_tag: json:"has_more"
  bool has_more = 3;
}

// SourceKind used as reply parameters in RPC or response body in HTTP.
message DescribeDataSourceKinds {
  // @inject_tag: json:"kinds"
  repeated model.DataSourceKind Kinds = 1;
}

// ListDataSources used as reply parameters in RPC or response body in HTTP.
message ListDataSourceConnections {
  // @inject_tag: json:"infos"
  repeated model.DataSourceConnection infos = 1;

  // @inject_tag: json:"total"
  int64 total = 2;

  // @inject_tag: json:"has_more"
  bool has_more = 3;
}

message PingDataSourceConnection {
  // Info is the Connectivity test results info.
  // @inject_tag: json:"info"
  model.DataSourceConnection info = 1 [ (validator.field).tags = { } ];
}

message DescribeDataSourceTables {
  // @inject_tag: json:"items"
  repeated string items = 1;
}

// TableColumns used as reply parameters in RPC or response body in HTTP.
message DescribeDataSourceTableSchema {
  // Schema represents the table schema of specified table.
  // @inject_tag: json:"schema"
  datasource.TableSchema schema = 1;
}
