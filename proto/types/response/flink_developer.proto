syntax = "proto3";

package response;

option go_package = "github.com/DataWorkbench/gproto/xgo/types/pbresponse";

// Package name of class.
option java_package = "com.dataomnis.gproto.types.pbresponse";
// File name of class.
option java_outer_classname = "PBResponseFlinkDeveloper";
option java_multiple_files = false;

import "github.com/yu31/protoc-plugin/proto/validator.proto";
//import "github.com/yu31/protoc-plugin/proto/defaults.proto";

import "proto/types/model/flink/flink_job.proto";

message SubmitFlinkJob {
  enum Code {
    CodeUnset = 0;
    Success = 1; // next to get flink job status.
    Failed = 2;
  }

  // @inject_tag: json:"code"
  Code code = 1;

  // message
  // @inject_tag: json:"message"
  string message = 2 [(validator.field) = {}];
}

message GetFlinkJobStatus {
  // IsExists indicates the job is exists.
  // @inject_tag: json:"is_exists"
  bool is_exists = 1;

  // The flink job status.
  // @inject_tag: json:"status"
  flink.FlinkJob.Status status = 2 [(validator.field) = {}];

  // job message
  // @inject_tag: json:"message"
  string message = 3 [(validator.field) = {}];
}

// GetStreamJobCode used as reply parameters in RPC.
message ValidateFlinkJob {
  enum Result {
    ResultUnset = 0;
    Correct = 1;
    Incorrect = 2;
  }

  // Result for check syntax of code. 1 => "Correct" 2 => "Incorrect".
  Result result = 1;

  // Message represents the error message when found syntax Incorrect.
  string message = 2;
}
